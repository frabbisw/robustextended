{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.slice().sort()\n  const diff = sorted[1] - sorted[0]\n  return diff < threshold || diff > (1 - threshold)\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are close to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  1\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2\n  */\nconst numberOfCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return 0\n  }\n  const sorted = numbers.slice().sort()\n  const diff = sorted[1] - sorted[0]\n  if (diff < threshold) {\n    return 1\n  } else if (diff > (1 - threshold)) {\n    return len - 1\n  } else {\n    return 2\n  }\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are close to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  1\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2\n  */\nconst numberOfCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return 0\n  }\n  const sorted = numbers.slice().sort()\n  const diff = sorted[1] - sorted[0]\n  if (diff < threshold) {\n    return 1\n  } else if (diff > (1 - threshold)) {\n    return len - 1\n  } else {\n    return 2\n  }\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are close to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  1\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2\n  */\nconst numberOfCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return 0\n  }\n  const sorted = numbers.slice().sort()\n  const diff = sorted[1] - sorted[0]\n  if (diff < threshold) {\n    return 1\n  } else if (diff > (1 - threshold)) {\n    return len - 1\n  } else {\n    return 2\n  }\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are close to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  1\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2\n  */\nconst numberOfCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return 0\n  }\n  const sorted = numbers.slice().sort()\n  const diff = sorted[1] - sorted[0]\n  if (diff < threshold) {\n    return 1\n  } else if (diff > (1 - threshold)) {\n    return len - 1\n  } else {\n    return 2\n  }\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are close to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  1\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2\n  */\nconst numberOfCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return 0\n  }\n  const sorted = numbers.slice().sort()\n  const diff = sorted[1] - sorted[0]\n  if (diff < threshold) {\n    return 1\n  } else if (diff > (1 - threshold)) {\n    return len - 1\n  } else {\n    return 2\n  }\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are close to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  1\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2\n  */\nconst numberOfCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return 0\n  }\n  const sorted = numbers.slice().sort()\n  const diff = sorted[1] - sorted[0]\n  if (diff < threshold) {\n    return 1\n  } else if (diff > (1 - threshold)) {\n    return len - 1\n  } else {\n    return 2\n  }\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are close to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  1\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2\n  */\nconst numberOfCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return 0\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_index = 0;\n  const paren_stack_length = paren_string.length;\n  let paren_stack_item = 0;\n  let paren_stack_item_index = 0;\n  let paren_stack_item_length = 0;\n  let paren_stack_item_char = '';\n  let paren_stack_item_char_index = 0;\n  let paren_stack_item_char_length = 0;\n  let paren_stack_item_char_char = '';\n  let paren_stack_item_char_char_index = 0;\n  let paren_stack_item_char_char_length = 0;\n  let paren_stack_item_char_char_char = '';\n  let paren_stack_item_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_stack_item_char_char_char_char_char_char_char_char_char_char = '';\n  let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      j--;\n    }\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      i++;\n    }\n    if (i < j) {\n      postfix += string.substring(i, j + 1);\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      j--;\n    }\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      i++;\n    }\n    if (i < j) {\n      postfix += string.substring(i, j + 1);\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      j--;\n    }\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      i++;\n    }\n    if (i < j) {\n      postfix += string.substring(i, j + 1);\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      j--;\n    }\n    while (i < j &&!isPalindrome(string.substring(i, j + 1))) {\n      i++;\n    }\n    if (i < j) {\n      postfix += string.substring(i, j + 1);\n      i++;\n      j--;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePal", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconsole.log(makeAPile(3));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,;]\\s*/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum2(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum2(x - 1, y);\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum3(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum3(x - 1, y);\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum4(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum4(x - 1, y);\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum5(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum5(x - 1, y);\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum6(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum6(x - 1, y);\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum7(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum7(x - 1, y);\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum8(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum8(x - 1, y);\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum9(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum9(x - 1, y);\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum10(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum10(x - 1, y);\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum11(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum11(x - 1, y);\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum12(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum12(x - 1, y);\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum13(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum13(x - 1, y);\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum14(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum14(x - 1, y);\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum15(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum15(x - 1, y);\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum16(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum16(x - 1, y);\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return choose", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  let i = 0;\n  while (i < x) {\n    const digit = x % 10;\n    if (digit % 2 === 0) {\n      result.push(x);\n      x = x / 10;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nexport default uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(reversed[i].toString());\n    }\n  }\n  return result;\n};\n\nconst byLength12 = (arr) => {\n  let sorted =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * f(i));\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i));\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i));\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i) * f(i)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddCount = 0\n  const evenCount = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        evenCount++\n      } else {\n        oddCount++\n      }\n    }\n  }\n  return [oddCount, evenCount]\n}\n\nconst isPalindrome = (n) => {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = n / 10\n  }\n  return s === s.split('').reverse().join('')\n}\n\nconst test = () => {\n  console.log(evenOddPalindrome(3))\n  console.log(evenOddPalindrome(12))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count += 1;\n    } else if (num < 0) {\n      const firstDigit = num % 10;\n      if (firstDigit > 0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 11, -11, 2, 3, 4, 5, 6, 7, 8, 9]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on htese inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on htese inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on htese inputs and return result also as a string.\n  >>> stringNot('010')\n  '101'\n  */\nconst stringNot = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(~a[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary SHL on htese inputs and return result also as a string.\n  >>> stringShl('010', '110')\n  '001'\n  */\nconst stringShl = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] << b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary SHR on htese inputs and return result also as a string.\n  >>> stringShr('010', '110')\n  '100'\n  */\nconst stringShr = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] >> b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on htese inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on htese inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on htese inputs and return result also as a string.\n  >>> stringNot('010')\n  '101'\n  */\nconst stringNot = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(~a[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform binary SHL on htese inputs and return result also as a string.\n  >>> stringShl('010', '110')\n  '001'\n  */\nconst stringShl = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1LengthEven = lst1Length % 2 === 0;\n  const lst2LengthEven = lst2Length % 2 === 0;\n  if (lst1Length!== lst2Length) {\n    return \"NO\";\n  }\n  if (lst1LengthEven && lst2LengthEven) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nexports.exchange = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histo = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (histo[letters[i]] === undefined) {\n      histo[letters[i]] = 1\n    } else {\n      histo[letters[i]] += 1\n    }\n  }\n  return histo\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a') == 2\n  count('b b b b a') == 4\n  count('') == 0\n  */\nconst count = (test) => {\n  const letters = test.split('')\n  let count = 0\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] === test) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return a string with the same letters in the string, but\n  in reverse order.\n  \n  Example:\n  reverse('a b c') == 'c b a'\n  reverse('a b c a') == 'a b c'\n  reverse('b b b b a') == 'b b b b'\n  reverse('') == ''\n  */\nconst reverse = (test) => {\n  const letters = test.split('')\n  let reversed = ''\n  for (let i = letters.length - 1; i >= 0; i--) {\n    reversed += letters[i]\n  }\n  return reversed\n}\n\n/*\n  Given a string, return a string with the same letters in the string, but\n  in reverse order, but with the first letter in upper case.\n  \n  Example:\n  upperCase('a b c') == 'C b A'\n  upperCase('a b c a') == 'A b C'\n  upperCase('b b b b a') == 'B B B B'\n  upperCase('') == ''\n  */\nconst upperCase = (test) => {\n  const letters = test.split('')\n  let reversed = ''\n  for (let i = letters.length - 1; i >= 0; i--) {\n    reversed += letters[i].toUpperCase()\n  }\n  return reversed\n}\n\n/*\n  Given a string, return a string with the same letters in the string, but\n  in reverse order, but with the first letter in lower case.\n  \n  Example:\n  lowerCase('a b c') == 'c b a'\n  lowerCase('a b c a') == 'a b c'\n  lowerCase('b b b b a') == 'b b b b'\n  lowerCase('') == ''\n  */\nconst lowerCase = (test) => {\n  const letters = test.split('')\n  let reversed = ''\n  for (let i = letters.length - 1; i >= 0; i--) {\n    reversed += letters[i].toLowerCase()\n  }\n  return reversed\n}\n\n/*\n  Given a string, return a string with the same letters in the string, but\n  in reverse order, but with the first letter in upper case and the last\n  letter in lower case.\n  \n  Example:\n  upperLower('a b c') == 'C b A'\n  upperLower('a b c a') == 'A b C'\n  upperLower('b b b b a') == 'B B B B'\n  upperLower('') == ''\n  */\nconst upperLower = (test) => {\n  const letters = test.split('')\n  let reversed = ''\n  for (let i = letters.length - 1; i >= 0; i--) {\n    reversed += letters[i].toUpperCase() + letters[i].toLowerCase()\n  }\n  return reversed\n}\n\n/*\n  Given a string, return a string with the same letters in the string, but\n  in reverse order, but with the first letter in upper case and the last\n  letter in lower case, but with the first letter in upper case.\n  \n  Example:\n  upperLower('a b c') == 'C b A'\n  upperLower('a b c a') == 'A b C'\n  upperLower('b b b b a') == 'B B B B'\n  upperLower('') == ''\n  */\nconst upperLowerFirst = (test) => {\n  const letters = test.split('')\n  let reversed = ''\n  for (let i = letters.length - 1; i >= 0; i--) {\n    reversed += letters[i].toUpperCase() + letters[i].toLowerCase()\n  }\n  return reversed\n}\n\n/*\n  Given a string, return a string with the same letters in the string, but\n  in reverse order, but with the first letter in upper case and the last\n  letter in lower case, but with the first letter in lower case.\n  \n  Example:\n  upperLower('a b c') == 'C b A'\n  upperLower('a b c a') == 'A b C'\n  upperLower('b b b b a') == 'B B B B'\n  upperLower('') == ''\n  */\nconst lowerCaseFirst = (test) => {\n  const letters = test.split('')\n  let reversed = ''\n  for (let i = letters.length - 1; i >= 0; i--) {\n    reversed += letters[i].toLowerCase() + letters[i].toUpperCase()\n  }\n  return reversed\n}\n\n/*\n  Given a string, return a string with the same letters in the string, but\n  in", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return [result.join(''), result.length === s.length];\n};\n\nexport default reverseDelete;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const l = lst.length\n  const out = []\n  for (let i = 0; i < l; i++) {\n    const s = lst[i]\n    const odd = s.split('').filter(x => x.length % 2!== 0)\n    const count = odd.length\n    out.push(`the number of odd elements ${count} of the ${i}th str4ng ${s} of the ${l}nput.`)\n  }\n  return out\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = 0;\n  let sum = 0;\n  let minSumIndex = 0;\n  let minSumIndex2 = 0;\n  let minSumIndex3 = 0;\n  let minSumIndex4 = 0;\n  let minSumIndex5 = 0;\n  let minSumIndex6 = 0;\n  let minSumIndex7 = 0;\n  let minSumIndex8 = 0;\n  let minSumIndex9 = 0;\n  let minSumIndex10 = 0;\n  let minSumIndex11 = 0;\n  let minSumIndex12 = 0;\n  let minSumIndex13 = 0;\n  let minSumIndex14 = 0;\n  let minSumIndex15 = 0;\n  let minSumIndex16 = 0;\n  let minSumIndex17 = 0;\n  let minSumIndex18 = 0;\n  let minSumIndex19 = 0;\n  let minSumIndex20 = 0;\n  let minSumIndex21 = 0;\n  let minSumIndex22 = 0;\n  let minSumIndex23 = 0;\n  let minSumIndex24 = 0;\n  let minSumIndex25 = 0;\n  let minSumIndex26 = 0;\n  let minSumIndex27 = 0;\n  let minSumIndex28 = 0;\n  let minSumIndex29 = 0;\n  let minSumIndex30 = 0;\n  let minSumIndex31 = 0;\n  let minSumIndex32 = 0;\n  let minSumIndex33 = 0;\n  let minSumIndex34 = 0;\n  let minSumIndex35 = 0;\n  let minSumIndex36 = 0;\n  let minSumIndex37 = 0;\n  let minSumIndex38 = 0;\n  let minSumIndex39 = 0;\n  let minSumIndex40 = 0;\n  let minSumIndex41 = 0;\n  let minSumIndex42 = 0;\n  let minSumIndex43 = 0;\n  let minSumIndex44 = 0;\n  let minSumIndex45 = 0;\n  let minSumIndex46 = 0;\n  let minSumIndex47 = 0;\n  let minSumIndex48 = 0;\n  let minSumIndex49 = 0;\n  let minSumIndex50 = 0;\n  let minSumIndex51 = 0;\n  let minSumIndex52 = 0;\n  let minSumIndex53 = 0;\n  let minSumIndex54 = 0;\n  let minSumIndex55 = 0;\n  let minSumIndex56 = 0;\n  let minSumIndex57 = 0;\n  let minSumIndex58 = 0;\n  let minSumIndex59 = 0;\n  let minSumIndex60 = 0;\n  let minSumIndex61 = 0;\n  let minSumIndex62 = 0;\n  let minSumIndex63 = 0;\n  let minSumIndex64 = 0;\n  let minSumIndex65 = 0;\n  let minSumIndex66 = 0;\n  let minSumIndex67 = 0;\n  let minSumIndex68 = 0;\n  let minSumIndex69 = 0;\n  let minSumIndex70 = 0;\n  let minSumIndex71 = 0;\n  let minSumIndex72 = 0;\n  let minSumIndex73 = 0;\n  let minSumIndex74 = 0;\n  let minSumIndex75 = 0;\n  let minSumIndex76 = 0;\n  let minSumIndex77 = 0;\n  let minSumIndex78 = 0;\n  let minSumIndex79 = 0;\n  let minSumIndex80 = 0;\n  let minSumIndex81 = 0;\n  let minSumIndex82 = 0;\n  let minSumIndex83 = 0;\n  let minSumIndex84 = 0;\n  let minSumIndex85 = 0;\n  let minSumIndex86 = 0;\n  let minSumIndex87 = 0;\n  let minSumIndex88 = 0;\n  let minSumIndex89 = 0;\n  let minSumIndex90 = 0;\n  let minSumIndex91 = 0;\n  let minSumIndex92 = 0;\n  let minSumIndex93 = 0;\n  let minSumIndex94 = 0;\n  let minSumIndex95 = 0;\n  let minSumIndex96 = 0;\n  let minSumIndex97 = 0;\n  let minSumIndex98 = 0;\n  let minSumIndex99 = 0;\n  let minSumIndex100 = 0;\n  let minSumIndex101 = 0;\n  let minSumIndex102 = 0;\n  let minSumIndex103 = 0;\n  let minSumIndex104 = 0;\n  let minSumIndex105 = 0;\n  let minSumIndex106 = 0;\n  let minSumIndex107 = 0;\n  let minSumIndex108 = 0;\n  let minSumIndex109 = 0;\n  let minSumIndex110 = 0;\n  let minSumIndex111 = 0;\n  let minSumIndex112 = 0;\n  let minSumIndex113 = 0;\n  let minSumIndex114 = 0;\n  let minSumIndex115 = 0;\n  let minSumIndex116 = 0;\n  let minSumIndex117 = 0;\n  let minSumIndex118 = 0;\n  let minSumIndex119 = 0;\n  let minSumIndex120 = 0;\n  let minSumIndex121 = 0;\n  let minSumIndex122 = 0;\n  let minSumIndex123 = 0;\n  let minSumIndex124 = 0;\n  let minSumIndex125 = 0;\n  let minSumIndex126 = 0;\n  let minSumIndex127 = 0;\n  let minSumIndex128 = 0;\n  let minSumIndex129 = 0;\n  let minSumIndex130 = 0;\n  let minSumIndex131 = 0;\n  let minSumIndex132 = 0;\n  let minSumIndex133 = 0;\n  let minSumIndex134 = 0;\n  let minSumIndex135 = 0;\n  let minSumIndex136 = 0;\n  let minSumIndex137 = 0;\n  let minSumIndex138 = 0;\n  let minSumIndex139 = 0;\n  let minSumIndex140 = 0;\n  let minSumIndex141 = 0;\n  let minSumIndex142 = 0;\n  let minSumIndex143 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0];\n  const [row1, col1] = grid[1];\n  const [row2, col2] = grid[2];\n  const [row3, col3] = grid[3];\n  const [row4, col4] = grid[4];\n  const [row5, col5] = grid[5];\n  const [row6, col6] = grid[6];\n  const [row7, col7] = grid[7];\n  const [row8, col8] = grid[8];\n  const [row9, col9] = grid[9];\n  const [row10, col10] = grid[10];\n  const [row11, col11] = grid[11];\n  const [row12, col12] = grid[12];\n  const [row13, col13] = grid[13];\n  const [row14, col14] = grid[14];\n  const [row15, col15] = grid[15];\n  const [row16, col16] = grid[16];\n  const [row17, col17] = grid[17];\n  const [row18, col18] = grid[18];\n  const [row19, col19] = grid[19];\n  const [row20, col20] = grid[20];\n  const [row21, col21] = grid[21];\n  const [row22, col22] = grid[22];\n  const [row23, col23] = grid[23];\n  const [row24, col24] = grid[24];\n  const [row25, col25] = grid[25];\n  const [row26, col26] = grid[26];\n  const [row27, col27] = grid[27];\n  const [row28, col28] = grid[28];\n  const [row29, col29] = grid[29];\n  const [row30, col30] = grid[30];\n  const [row31, col31] = grid[31];\n  const [row32, col32] = grid[32];\n  const [row33, col33] = grid[33];\n  const [row34, col34] = grid[34];\n  const [row35, col35] = grid[35];\n  const [row36, col36] = grid[36];\n  const [row37, col37] = grid[37];\n  const [row38, col38] = grid[38];\n  const [row39, col39] = grid[39];\n  const [row40, col40] = grid[40];\n  const [row41, col41] = grid[41];\n  const [row42, col42] = grid[42];\n  const [row43, col43] = grid[43];\n  const [row44, col44] = grid[44];\n  const [row45, col45] = grid[45];\n  const [row46, col46] = grid[46];\n  const [row47, col47] = grid[47];\n  const [row48, col48] = grid[48];\n  const [row49, col49] = grid[49];\n  const [row50, col50] = grid[50];\n  const [row51, col51] = grid[51];\n  const [row52, col52] = grid[52];\n  const [row53, col53] = grid[53];\n  const [row54, col54] = grid[54];\n  const [row55, col55] = grid[55];\n  const [row56, col56] = grid[56];\n  const [row57, col57] = grid[57];\n  const [row58, col58] = grid[58];\n  const [row59, col59] = grid[59];\n  const [row60, col60] = grid[60];\n  const [row61, col61] = grid[61];\n  const [row62, col62] = grid[62];\n  const [row63, col63] = grid[63];\n  const [row64, col64] = grid[64];\n  const [row65, col65] = grid[65];\n  const [row66, col66] = grid[66];\n  const [row67, col67] = grid[67];\n  const [row68, col68] = grid[68];\n  const [row69, col69] = grid[69];\n  const [row70, col70] = grid[70];\n  const [row71, col71] = grid[71];\n  const [row72, col72] = grid[72];\n  const [row73, col73] = grid[73];\n  const [row74, col74] = grid[74];\n  const [row75, col75] = grid[75];\n  const [row76, col76] = grid[76];\n  const [row77, col77] = grid[77];\n  const [row78, col78", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords2 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords3 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords4 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords5 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords6 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords7 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords8 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nconst selectWords9 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && s[j]!=='') {\n      j++;\n    }\n    if (j === len) {\n      break;\n    }\n    const word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = 0; i < word.length; i++) {\n    let currentVowel = word[i];\n    let currentVowelDistance = 0;\n    for (let j = i + 1; j < word.length; j++) {\n      let nextVowel = word[j];\n      if (vowels.indexOf(nextVowel)!== -1) {\n        currentVowelDistance = Math.abs(i - j);\n        if (currentVowelDistance < closestVowelDistance) {\n          closestVowel = currentVowel;\n          closestVowelDistance = currentVowelDistance;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\n/*\n  Given a string, return the string with the vowels removed.\n  \n  Example:\n  removeVowels(\"hello\") ==> \"hello\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n  removeVowels(\"hello world\") ==> \"hello world\"\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens2 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens3 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens4 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens5 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens6 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens7 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens8 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens9 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens10 = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens11 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  return strings.reduce((acc, curr) => {\n    if (curr.length > acc.length) {\n      return curr;\n    }\n    return acc;\n  }, strings[0]);\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const maxK = Math.min(k, arr.length)\n  const sorted = arr.slice(0, maxK).sort((a, b) => a - b)\n  return sorted.concat(arr.slice(maxK, arr.length))\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    if (next % 2 === 0) {\n      collatz.push(next);\n    } else {\n      collatz.push(next);\n      collatz.push(collatz[collatz.length - 1] * 3 + 1);\n    }\n  }\n  return collatz;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [1];\n  while (collatz[collatz.length - 1] < n) {\n    let next = collatz[collatz.length - 1] * 2 + 1;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = date.toString();\n  const dateArray = dateString.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = getDaysInMonth(month, year);\n  const daysInYear = getDaysInYear(year);\n  const daysInDate = parseInt(dateArray[2], 10) - parseInt(dateArray[1], 10) + 1;\n  const daysInYear = parseInt(dateArray[0], 10) - parseInt(dateArray[1], 10) + 1;\n  const daysInDate = parseInt(dateArray[2], 10) - parseInt(dateArray[1], 10) + 1;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  if (day > daysInYear) {\n    return false;\n  }\n  if (month == 2 && day > daysInYear) {\n    return false;\n  }\n  if (month == 2 && day == 29 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 2 && day == 29 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 2 && day == 30 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 2 && day == 30 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 2 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 2 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 3 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 3 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 3 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 4 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 4 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 4 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 5 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 5 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 5 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 6 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 6 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 6 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 7 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 7 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 7 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 8 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 8 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 8 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 9 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 9 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 9 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 10 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 10 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 10 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 11 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 11 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 11 && day == 31 && isLeapYear(year)) {\n    return false;\n  }\n  if (month == 12 && day > daysInMonth) {\n    return false;\n  }\n  if (month == 12 && day == 31 &&!isLeapYear(year)) {\n    return false;\n  }\n  if (month == 12 && day == 31 && isLeapYear(year)) {\n    return false;\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while (i < len - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport default isSorted;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 === end2 && start2 === end1) return \"NO\"\n  if (start1 === start2) return \"YES\"\n  if (end1 === end2) return \"YES\"\n  return `${start1}${end1}`\n}\n\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1\n}\n\nconst isPrimeNumber = (n) => {\n  return is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns3 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns4 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns5 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns6 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns7 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns8 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns9 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns10 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns11 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns12 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns13 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns14 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns15 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSigns16 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  const prod = arr.reduce((a, b) => a * b, 1)\n  const sign = arr.reduce((a, b) => a + b, 0)\n  return sign * prod\n}\n\nconst prodSign", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n * m)\n  dp[0] = 1\n  dp[1] = grid[0][0]\n  dp[2] = grid[0][1]\n  dp[3] = grid[0][2]\n  dp[4] = grid[1][0]\n  dp[5] = grid[1][1]\n  dp[6] = grid[1][2]\n  dp[7] = grid[2][0]\n  dp[8] = grid[2][1]\n  dp[9] = grid[2][2]\n  let i = 1\n  let j = 1\n  let k = 0\n  while (k < k) {\n    let l = 0\n    while (l < i) {\n      let r = 0\n      while (r < j) {\n        dp[i * n + r] = Math.min(dp[i * n + r], dp[i * n + r + 1])\n        r++\n      }\n      l++\n    }\n    k++\n    i++\n    j++\n  }\n  return dp.slice(1).sort()\n}\n\nconst test = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\ntest.forEach(t => {\n  console.log(minPath(t[0], t[1]))\n})\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a < b) {\n    return greatestCommonDivisor(a, b);\n  }\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    return fib(n - 1) + fib(n - 2) + fib(n + 1);\n  };\n  return fib(n);\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  const brackets = []\n  const nested = []\n  const isNested = (string) => {\n    const stack = []\n    const brackets = []\n    const nested = []\n    const isNested = (string) => {\n      stack.push(string)\n      const brackets = []\n      const nested = []\n      const isNested = (string) => {\n        if (stack.length === 0) {\n          return false\n        }\n        const current = stack.pop()\n        if (current === '[') {\n          brackets.push(current)\n          return true\n        }\n        if (current === ']') {\n          if (brackets.length === 0) {\n            return false\n          }\n          const bracket = brackets.pop()\n          if (bracket === '[') {\n            nested.push(current)\n            return true\n          }\n          if (bracket === ']') {\n            if (nested.length === 0) {\n              return false\n            }\n            const nestedBracket = nested.pop()\n            if (nestedBracket === '[') {\n              return true\n            }\n            if (nestedBracket === ']') {\n              return false\n            }\n          }\n        }\n        return false\n      }\n      return isNested(string)\n    }\n    return isNested(string)\n  }\n  return isNested(string)\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum * sum;\n};\n\nconst test = [\n  [1,2,3],\n  [1,4,9],\n  [1,3,5,7],\n  [1.4,4.2,0]\n];\n\ntest.forEach(t => {\n  console.log(`sumSquares(${t}) = ${sumSquares(t)}`);\n});\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a number and false otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\"123\") ➞ true\n  checkIfLastCharIsANumber(\"123.45\") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = /[0-9]/.test(lastChar);\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a letter and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a number and false otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\"123\") ➞ true\n  checkIfLastCharIsANumber(\"123.45\") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = /[0-9]/.test(lastChar);\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a letter and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a number and false otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\"123\") ➞ true\n  checkIfLastCharIsANumber(\"123.45\") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = /[0-9]/.test(lastChar);\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a letter and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a number and false otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\"123\") ➞ true\n  checkIfLastCharIsANumber(\"123.45\") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = /[0-9]/.test(lastChar);\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a letter and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the last cahracter\n  of a given string is a number and false otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\"123\") ➞ true\n  checkIfLastCharIsANumber(\"123.45\") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) =>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let k = Math.floor((i + j) / 2)\n    if (arr[k] >= arr[k + 1]) {\n      j = k\n    } else {\n      i = k + 1\n    }\n  }\n  return i\n}\n\n/*\n  Given an array of integers, return the index of the largest element in the\n  array. If there are multiple largest elements, return the index of the\n  first one.\n\n  Examples:\n  largestIndex([1,2,3,4,5]) = 5\n  largestIndex([1,2,3,4,5,6]) = 5\n  largestIndex([1,2,3,4,5,6,7]) = 5\n  largestIndex([1,2,3,4,5,6,7,8]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) = 5\n  largestIndex([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b\n  const smallest = (a, b) => a < b? a : b\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) return null\n    let a = largest(lst[0], lst[1])\n    let b = smallest(lst[0], lst[1])\n    for (let i = 2; i < lst.length; i++) {\n      a = largest(a, largest(lst[i], lst[i - 1]))\n      b = smallest(b, smallest(lst[i], lst[i - 1]))\n    }\n    return [a, b]\n  }\n  return largestSmallest(lst)\n}\n\n/*\n  Cretae a function that returns the smallest of two numbers.\n  If the numbers are equal, return the first number.\n  Examples:\n  smallest(1, 2) == 1\n  smallest(1, 1) == 1\n  smallest(2, 1) == 1\n  smallest(2, 2) == 2\n  smallest(3, 2) == 2\n  smallest(3, 3) == 3\n  smallest(4, 3) == 3\n  smallest(4, 4) == 4\n  smallest(5, 4) == 4\n  smallest(5, 5) == 5\n  smallest(6, 5) == 5\n  smallest(6, 6) == 6\n  smallest(7, 6) == 6\n  smallest(7, 7) == 7\n  smallest(8, 7) == 7\n  smallest(8, 8) == 8\n  smallest(9, 8) == 8\n  smallest(9, 9) == 9\n  smallest(10, 9) == 9\n  smallest(10, 10) == 10\n  smallest(11, 10) == 10\n  smallest(11, 11) == 11\n  smallest(12, 11) == 11\n  smallest(12, 12) == 12\n  smallest(13, 12) == 12\n  smallest(13, 13) == 13\n  smallest(14, 13) == 13\n  smallest(14, 14) == 14\n  smallest(15, 14) == 14\n  smallest(15, 15) == 15\n  smallest(16, 15) == 15\n  smallest(16, 16) == 16\n  smallest(17, 16) == 16\n  smallest(17, 17) == 17\n  smallest(18, 17) == 17\n  smallest(18, 18) == 18\n  smallest(19, 18) == 18\n  smallest(19, 19) == 19\n  smallest(20, 19) == 19\n  smallest(20, 20) == 20\n  smallest(21, 20) == 20\n  smallest(21, 21) == 21\n  smallest(22, 21) == 21\n  smallest(22, 22) == 22\n  smallest(23, 22) == 22\n  smallest(23, 23) == 23\n  smallest(24, 23) == 23\n  smallest(24, 24) == 24\n  smallest(25, 24) == 24\n  smallest(25, 25) == 25\n  smallest(26, 25) == 25\n  smallest(26, 26) == 26\n  smallest(27, 26) == 26\n  smallest(27, 27) == 27\n  smallest(28, 27) == 27\n  smallest(28, 28) == 28\n  smallest(29, 28) == 28\n  smallest(29, 29) == 29\n  smallest(30, 29) == 29\n  smallest(30, 30) == 30\n  smallest(31, 30) == 30\n  smallest(31, 31) == 31\n  smallest(32, 31) == 31\n  smallest(32, 32) == 32\n  smallest(33, 32) == 32\n  smallest(33, 33) == 33\n  smallest(34, 33) == 33\n  smallest(34, 34) == 34\n  smallest(35, 34) == 34\n  smallest(35, 35) == 35\n  smallest(36, 35) == 35\n  smallest(36, 36) == 36\n  smallest(37, 36) == 36\n  smallest(37, 37) == 37\n  smallest(38, 37) == 37\n  smallest(38, 38) == 38\n  smallest(39, 38) == 38\n  smallest(39, 39) == 39\n  smallest(40, 39) == 39\n  smallest(40, 40) == 40\n  smallest(41, 40) == 40\n  smallest(41, 41) == 41\n  smallest(42, 41) == 41\n  smallest(42, 42) == 42\n  smallest(43, 42) == 42\n  smallest(43, 43) == 43\n  smallest(44, 43) == 43\n  smallest(44, 44) == 44\n  smallest(45, 44) == 44\n  smallest(45, 45) == 45\n  smallest(46, 45) == 45\n  smallest(46, 46) == 46\n  smallest(47, 46) == 46\n  smallest(47, 47) == 47\n  smallest(48, 47) == 47\n  smallest(48, 48) == 48\n  smallest(49, 48) == 48\n  smallest(49, 49) == 49\n  smallest(50, 49) == 49\n  smallest(50, 50) == 50\n  smallest(51, 50) == 50\n  smallest(51, 51) == 51\n  smallest(52, 51) == 51\n  smallest(52, 52) == 52\n  smallest(53, 52) == 52\n  smallest(53, 53) == 53\n  smallest(54,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compareThree = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a <= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a <= b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a <= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a <= b? a : b;\n  }\n  return null;\n};\n\nconst compareFour = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a >= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a >= b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a >= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a >= b? a : b;\n  }\n  return null;\n};\n\nconst compareFive = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compareSix = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareSeven = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a <= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a <= b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a <= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a <= b? a : b;\n  }\n  return null;\n};\n\nconst compareEight = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a >= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a >= b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a >= b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a >= b? a : b;\n  }\n  return null;\n};\n\nconst compareNine = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n;\n  const count = 0;\n  const isEven = (n) => {\n    return n % 2 === 0;\n  };\n  const isOdd = (n) => {\n    return n % 2!== 0;\n  };\n  const isEvenOrOdd = (n) => {\n    return isEven(n) || isOdd(n);\n  };\n  const isEvenOrOddOrEven = (n) => {\n    return isEvenOrOdd(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEven = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n    return isEvenOrOdd(n) || isEvenOrOdd(n) || isEven(n) || isEven(n) || isEven(n);\n  };\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": false, "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial18(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial19(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial20(n - 1)\n}\n\n/*\n  The function", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes;\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse2 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse3 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse4 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse5 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse6 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse7 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse8 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse9 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length > 0) {\n    const prefixLength = prefix.length;\n    const prefixString = prefix.join('');\n    prefixes.push(prefixString);\n    prefix.splice(0, prefixLength);\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse10 = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  while (prefix.length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces11 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces12 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces13 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces14 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces15 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces16 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces17 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces18 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces19 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces20 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces21 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces22 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces23 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces24 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces25 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces26 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces27 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces28 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces29 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces30 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces31 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces32 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces33 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces34 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces35 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces36 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces37 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces38 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces39 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces40 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces41 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces42 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces43 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst fixSpaces44 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\nconst fixSpaces45 = (text) => {\n  return text.replace(/\\", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck3 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck4 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck5 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck6 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck7 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck8 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck9 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck10 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nconst fileNameCheck11 = (file_name) => {\n  if (file_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j]\n      if (isPrime(char)) {\n        newWord += char\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (num) => {\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.sort((a, b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((num) => num > 10)\n  const odd = arr.filter((num) => num % 2 === 1)\n  const even = arr.filter((num) => num % 2 === 0)\n  const oddFirst = odd.map((num) => num.toString()).join('')\n  const evenFirst = even.map((num) => num.toString()).join('')\n  return oddFirst.length > evenFirst.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) - i + 1)\n  const c = b.filter((x, i) => i < b.length - 1)\n  return c.reduce((acc, x, i) => acc + (x + b[i + 1] + b[i + 2]) % 3, 0)\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase()\n  const planet2 = planet2.toLowerCase()\n  const planet1Orbit = getOrbit(planet1)\n  const planet2Orbit = getOrbit(planet2)\n  const planet1OrbitOrbit = getOrbit(planet1Orbit)\n  const planet2OrbitOrbit = getOrbit(planet2Orbit)\n  const planet1OrbitOrbitOrbit = getOrbit(planet1OrbitOrbit)\n  const planet2OrbitOrbitOrbit = getOrbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbit", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sorted.filter(x => x.length % 2 === 0);\n};\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\",", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','')\n  '0'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep, sp) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}${sp}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','', '*')\n  '0'\n  >>> stringSequence(5, '-','', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep, sp, star) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}${sp}${star}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','', '*','')\n  '0'\n  >>> stringSequence(5, '-','', '*','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep, sp, star, sp2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}${sp}${star}${sp2}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','', '*','','')\n  '0'\n  >>> stringSequence(5, '-','', '*','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep, sp, star, sp2, sp3) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}${sp}${star}${sp2}${sp3}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','', '*','','','')\n  '0'\n  >>> stringSequence(5, '-','', '*','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep, sp, star, sp2, sp3, sp4) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}${sp}${star}${sp2}${sp3}${sp4}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','', '*','','','','')\n  '0'\n  >>> stringSequence(5, '-','', '*','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep, sp, star, sp2, sp3, sp4, sp5) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}${sp}${star}${sp2}${sp3}${sp4}${sp5}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','', '*','','','','','')\n  '0'\n  >>> stringSequence(5, '-','', '*','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, sep, sp, star, sp2, sp3, sp4, sp5, sp6) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${sep}${sp}${star}${sp2}${sp3}${sp4}${sp5}${sp6}`;\n  }\n  return s;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0, '-','', '*','','','','','','')\n  '0'\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference2 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference3 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference4 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference5 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference6 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference7 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference8 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference9 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference10 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference11 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference12 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference13 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference14 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference15 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference16 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference17 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference18 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference19 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference20 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference21 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference22 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference23 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference24 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference25 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference26 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference27 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference28 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference29 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference30 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference31 = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n, 0)\n  return sum % 2\n}\n\nconst doubleTheDifference32 = (lst) => {\n  const", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare9 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare10 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare11 = (game, guess) => {\n  const gameLength = game.length\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = class_name.toUpperCase().split('').reduce((acc, char) => {\n    if (char.match(/[A-Z]/)) {\n      acc += char.toUpperCase();\n    }\n    return acc;\n  }, '');\n  const strength = cap.length - extensions.map(ext => ext.toLowerCase().split('').reduce((acc, char) => {\n    if (char.match(/[a-z]/)) {\n      acc += char.toLowerCase();\n    }\n    return acc;\n  }, '')).length;\n  return class_name + '.' + extensions[strength].split('.').reduce((acc, char) => {\n    if (char.match(/[a-z]/)) {\n      acc += char.toLowerCase();\n    }\n    return acc;\n  }, '');\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let a_i = 0;\n  let b_i = 0;\n  let a_j = 0;\n  let b_j = 0;\n  let a_k = 0;\n  let b_k = 0;\n  let a_sub = 0;\n  let b_sub = 0;\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len && b_i === b_len) {\n    return true;\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      b_i++;\n    } else if (a[a_i] < b[b_i]) {\n      a_i++;\n    } else {\n      b_i++;\n    }\n  }\n  if (a_i === a_len) {\n    return false;\n  }\n  if (b_i === b_len) {\n    return false;\n  }\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++;\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": false, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    let even = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = num / 2;\n    }\n    return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": false, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString();\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'x';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'v';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'x';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'v';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'x';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'v';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'x';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'v';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'x';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number -= i;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'v';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'x';\n      number -= i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (!map.has(word)) {\n      map.set(word, 1);\n    } else {\n      map.set(word, map.get(word) + 1);\n    }\n  }\n  let max = 0;\n  let maxWord = \"\";\n  for (let [key, value] of map) {\n    if (value > max) {\n      max = value;\n      maxWord = key;\n    }\n  }\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"agme\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat2 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat3 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat4 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat5 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat6 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat7 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat8 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat9 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat10 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat11 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat12 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat13 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat14 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat15 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat16 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat17 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n  }\n  return [number + (need - remaining), remaining];\n}\n\nconst eat18 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining === 0) {\n    return [number, remaining];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[charArray[i]] === undefined) {\n      charCount[charArray[i]] = 1\n    } else {\n      charCount[charArray[i]]++\n    }\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[charArray[i]] === undefined) {\n      charCount[charArray[i]] = 0\n    }\n    charCount[charArray[i]]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences2 = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[char] === undefined) {\n      charCount[char] = 0\n    }\n    charCount[char]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences3 = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[charArray[i]] === undefined) {\n      charCount[charArray[i]] = 0\n    }\n    charCount[charArray[i]]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences4 = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[char] === undefined) {\n      charCount[char] = 0\n    }\n    charCount[char]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences5 = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[charArray[i]] === undefined) {\n      charCount[charArray[i]] = 0\n    }\n    charCount[charArray[i]]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences6 = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[charArray[i]] === undefined) {\n      charCount[charArray[i]] = 0\n    }\n    charCount[charArray[i]]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences7 = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[charArray[i]] === undefined) {\n      charCount[charArray[i]] = 0\n    }\n    charCount[charArray[i]]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x')\n  1\n  */\nconst countOccurrences8 = (string, char) => {\n  const charArray = string.split('')\n  const charCount = {}\n  for (let i = 0; i < charArray.length; i++) {\n    if (charCount[charArray[i]] === undefined) {\n      charCount[charArray[i]] = 0\n    }\n    charCount[charArray[i]]++\n  }\n  return Object.keys(charCount).length\n}\n\n/* Given a string, find out how many times a character occurs in the string\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('Jerry', 'x", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": false, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 3 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 3 === 0) {\n      result.push(i);\n    }\n    if (i % 5 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 3 === 0) {\n      result.push(i);\n    }\n    if (i % 5 === 0) {\n      result.push(i);\n    }\n    if (i % 7 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 3 === 0) {\n      result.push(i);\n    }\n    if (i % 5 === 0) {\n      result.push(i);\n    }\n    if (i % 7 === 0) {\n      result.push(i);\n    }\n    if (i % 11 === 0) {\n      result.push(i);\n    }\n    if (i % 13 === 0) {\n      result.push(i);\n    }\n    if (i % 17 === 0) {\n      result.push(i);\n    }\n    if (i % 19 === 0) {\n      result.push(i);\n    }\n    if (i % 23 === 0) {\n      result.push(i);\n    }\n    if (i % 29 === 0) {\n      result.push(i);\n    }\n    if (i % 31 === 0) {\n      result.push(i);\n    }\n    if (i % 37 === 0) {\n      result.push(i);\n    }\n    if (i % 41 === 0) {\n      result.push(i);\n    }\n    if (i % 43 === 0) {\n      result.push(i);\n    }\n    if (i % 47 === 0) {\n      result.push(i);\n    }\n    if (i % 53 === 0) {\n      result.push(i);\n    }\n    if (i % 59 === 0) {\n      result.push(i);\n    }\n    if (i % 61 === 0) {\n      result.push(i);\n    }\n    if (i % 67 === 0) {\n      result.push(i);\n    }\n    if (i % 71 === 0) {\n      result.push(i);\n    }\n    if (i % 73 === 0) {\n      result.push(i);\n    }\n    if (i % 79 === 0) {\n      result.push(i);\n    }\n    if (i % 83 === 0) {\n      result.push(i);\n    }\n    if (i % 89 === 0) {\n      result.push(i);\n    }\n    if (i % 97 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 3 === 0) {\n      result.push(i);\n    }\n    if (i % 5 === 0) {\n      result.push(i);\n    }\n    if (i % 7 === 0) {\n      result.push(i);\n    }\n    if (i % 11 === 0) {\n      result.push(i);\n    }\n    if (i % 13 === 0) {\n      result.push(i);\n    }\n    if (i % 17 === 0) {\n      result.push(i);\n    }\n    if (i % 19 === 0) {\n      result.push(i);\n    }\n    if (i % 23 === 0) {\n      result.push(i);\n    }\n    if (i % 29 === 0) {\n      result.push(i);\n    }\n    if (i % 31 === 0) {\n      result.push(i);\n    }\n    if (i % 37 === 0) {\n      result.push(i);\n    }\n    if (i % 41 === 0) {\n      result.push(i);\n    }\n    if (i % 43 === 0) {\n      result.push(i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(4);\n    } else if (note === 'o|o') {\n      beats.push(2);\n    } else if (note === 'o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o') {\n      beats.push(1);\n    } else if (note === 'o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(1);\n    } else if (note === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === substring[0]) {\n      count++;\n      index++;\n      while (index < string.length && string[index] === substring[0]) {\n        count++;\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet.\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return aNumber - bNumber\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-deliimted string of numbers rfom 'one' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five six seven eight nine')\n  'eight seven six five four three two one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-deliimted string of numbers rfom 'one' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('one two three four five six seven eight nine')\n  'nine eight seven six five four three two one'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return aNumber - bNumber\n  })\n  return numbersArraySorted.reverse().join(' ')\n}\n\n/*\n  Input is a space-deliimted string of numbers rfom 'one' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverse('one two three four five six seven eight nine')\n  'nine eight seven six five four three two one'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return numbersArraySorted.reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-deliimted string of numbers rfom 'one' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('one two three four five six seven eight nine')\n  'nine eight seven six five four three two one'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return aNumber - bNumber\n  })\n  return numbersArraySorted.reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-deliimted string of numbers rfom 'one' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('one two three four five six seven eight nine')\n  'nine eight seven six five four three two one'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return numbersArraySorted.reverse().reverse().reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-deliimted string of numbers rfom 'one' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverseReverse('one two three four five six seven eight nine')\n  'nine eight seven six five four three two one'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return numbersArraySorted.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-deliimted string of numbers rfom 'one' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverseReverse('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArraySorted = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return aNumber - bNumber\n  })\n  return numbersArraySorted.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString2 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString3 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString4 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString5 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString6 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString7 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString8 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString9 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString10 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString11 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString12 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString13 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString14 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString15 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString16 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString17 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString18 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString19 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString20 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst toString21 = (number) => {\n  return number.toString();\n};\n\n/* Given a number, it can be converted", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort();\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  const diff = Math.abs(closest - secondClosest);\n  for (let i = 1; i < sorted.length; i++) {\n    const current = sorted[i];\n    const diff2 = Math.abs(closest - current);\n    if (diff2 < diff) {\n      secondClosest = closest;\n      closest = current;\n      diff = diff2;\n    } else if (diff2 > diff) {\n      secondClosest = current;\n    }\n  }\n  return [closest, secondClosest];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let max = 0\n  let min = 1\n  let i = 0\n  for (i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n  }\n  let scale = (max - min) / (1 - min)\n  let result = []\n  for (i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/**\n  * Given a list of numbers, return the mean of those numbers\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst mean = (numbers) => {\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/**\n  * Given a list of numbers, return the standard deviation of those numbers\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst stdDev = (numbers) => {\n  let mean = mean(numbers)\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2)\n  }\n  return Math.sqrt(sum / numbers.length)\n}\n\n/**\n  * Given a list of numbers, return the median of those numbers\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst median = (numbers) => {\n  let sorted = sort(numbers)\n  let half = Math.floor(numbers.length / 2)\n  if (numbers.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  } else {\n    return sorted[half]\n  }\n}\n\n/**\n  * Given a list of numbers, return the mode of those numbers\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst mode = (numbers) => {\n  let max = 0\n  let maxCount = 0\n  let maxIndex = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n      maxCount = 1\n      maxIndex = i\n    } else if (numbers[i] === max) {\n      maxCount += 1\n    }\n  }\n  return max\n}\n\n/**\n  * Given a list of numbers, return the mode of those numbers\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst mode2 = (numbers) => {\n  let max = 0\n  let maxCount = 0\n  let maxIndex = 0\n  let maxCount2 = 0\n  let maxIndex2 = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n      maxCount = 1\n      maxIndex = i\n    } else if (numbers[i] === max) {\n      maxCount += 1\n    } else if (numbers[i] > max2) {\n      max2 = numbers[i]\n      maxCount2 = 1\n      maxIndex2 = i\n    } else if (numbers[i] === max2) {\n      maxCount2 += 1\n    }\n  }\n  return [max, maxCount, maxIndex, maxCount2, maxIndex2]\n}\n\n/**\n  * Given a list of numbers, return the mode of those numbers\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst mode3 = (numbers) => {\n  let max = 0\n  let maxCount = 0\n  let maxIndex = 0\n  let maxCount2 = 0\n  let maxIndex2 = 0\n  let maxCount3 = 0\n  let maxIndex3 = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n      maxCount = 1\n      maxIndex = i\n    } else if (numbers[i] === max) {\n      maxCount += 1\n    } else if (numbers[i] > max2) {\n      max2 = numbers[i]\n      maxCount2 = 1\n      maxIndex2 = i\n    } else if (numbers[i] === max2) {\n      maxCount2 += 1\n    } else if (numbers[i] > max3) {\n      max3 = numbers[i]\n      maxCount3 = 1\n      maxIndex3 = i\n    } else if (numbers[i] === max3) {\n      maxCount3 += 1\n    }\n  }\n  return [max, maxCount, maxIndex, maxCount2, maxIndex2, maxCount3, maxIndex3]\n}\n\n/**\n  * Given a list of numbers, return the mode of those numbers\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst mode4 = (numbers) => {\n  let max = 0\n  let maxCount = 0\n  let maxIndex = 0\n  let maxCount2 = 0\n  let maxIndex2 = 0\n  let maxCount3 = 0\n  let maxIndex3 = 0\n  let maxCount4 = 0\n  let maxIndex4 = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n      maxCount = 1\n      maxIndex = i\n    } else if (numbers[i] === max) {\n      maxCount += 1\n    } else if (n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStrings = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleans = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrLists = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean' || v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrListsOrDictionaries = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean' || v instanceof Array || v instanceof Object);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrListsOrDictionariesOrObjects = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean' || v instanceof Array || v instanceof Object || v instanceof Function);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrListsOrDictionariesOrObjectsOrFunctions = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean' || v instanceof Array || v instanceof Object || v instanceof Function || v instanceof Date);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrListsOrDictionariesOrObjectsOrFunctionsOrNumbers = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean' || v instanceof Array || v instanceof Object || v instanceof Function || v instanceof Date || v instanceof Number);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleansOrListsOrDictionariesOrObjectsOrFunctionsOrNumbersOrStrings = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean' || v instanceof Array || v instanceof Object || v instanceof Function || v instanceof Date || v instanceof Number || typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\nconsole.log(largestDivisor(15));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factorzation = factorzation(n);\n  while (factorzation.length > 0) {\n    let factor = factorzation.pop();\n    let count = factorzation.length;\n    while (count--) {\n      factorzation.push(factor);\n    }\n    factors.push(factor);\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorzation = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  let factors = factorzation(n);\n  let isPrime = true;\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 2) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    unique.push(numbers[i]);\n  }\n  return unique;\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are the same length\n  as the largest string in the list.\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst longestCommonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  let longest = strings[0];\n  let prefix = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n      prefix = strings[i].substr(0, longest.length);\n    } else if (strings[i].length === longest.length) {\n      if (strings[i].startsWith(prefix)) {\n        prefix = strings[i].substr(0, longest.length);\n      } else {\n        longest = strings[i];\n        prefix = strings[i].substr(0, longest.length);\n      }\n    }\n  }\n\n  return [prefix, longest];\n};\n\n/*\n  Given a list of strings, return a list of strings that are the same length\n  as the smallest string in the list.\n  >>> shortestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> shortestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> shortestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst shortestCommonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  let shortest = strings[0];\n  let prefix = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length) {\n      shortest = strings[i];\n      prefix = strings[i].substr(0, shortest.length);\n    } else if (strings[i].length === shortest.length) {\n      if (strings[i].startsWith(prefix)) {\n        prefix = strings[i].substr(0, shortest.length);\n      } else {\n        shortest = strings[i];\n        prefix = strings[i].substr(0, shortest.length);\n      }\n    }\n  }\n\n  return [prefix, shortest];\n};\n\n/*\n  Given a list of strings, return a list of strings that are the same length\n  as the longest string in the list.\n  >>> longestCommonSuffix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> longestCommonSuffix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> longestCommonSuffix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst longestCommonSuffix = (strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  let longest = strings[0];\n  let suffix = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n      suffix = strings[i].substr(strings[i].length - longest.length);\n    } else if (strings[i].length === longest.length) {\n      if (strings[i].endsWith(suffix)) {\n        suffix = strings[i].substr(strings[i].length - longest.length);\n      } else {\n        longest = strings[i];\n        suffix = strings[i].substr(strings[i].length - longest.length);\n      }\n    }\n  }\n\n  return [longest, suffix];\n};\n\n/*\n  Given a list of strings, return a list of strings that are the same length\n  as the shortest string in the list.\n  >>> shortestCommonSuffix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> shortestCommonSuffix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> shortestCommonSuffix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, curr) => acc + curr, 0);\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  false\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  true\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  true\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  true\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  true\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  true\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  true\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  true\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  true\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  true\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  true\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  true\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  true\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  true\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  true\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  true\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  true\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  true\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  true\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  true\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  true\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  true\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  true\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  true\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  true\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  true\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  true\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  true\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  true\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  true\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  true\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  true\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  true\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  true\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  true\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  true\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  true\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  true\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  true\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  true\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  true\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  true\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  true\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  true\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  true\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  true\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  true\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  true\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  true\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  true\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  true\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  true\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  true\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  true\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  true\n  >>> isPrime(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let max = xs[n - 1];\n  let min = xs[0];\n  let mid = (max + min) / 2;\n  let i = 0;\n  while (i < n) {\n    if (xs[i] > mid) {\n      max = mid;\n      n = i;\n    } else {\n      min = mid;\n      i++;\n    }\n    mid = (max + min) / 2;\n  }\n  return mid;\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly11 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x *", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sorted2 = [...l].sort((a, b) => b - a);\n  const sorted3 = [...l].sort((a, b) => a - b);\n  const sorted4 = [...l].sort((a, b) => b - a);\n  const sorted5 = [...l].sort((a, b) => a - b);\n  const sorted6 = [...l].sort((a, b) => b - a);\n  const sorted7 = [...l].sort((a, b) => a - b);\n  const sorted8 = [...l].sort((a, b) => b - a);\n  const sorted9 = [...l].sort((a, b) => a - b);\n  const sorted10 = [...l].sort((a, b) => b - a);\n  const sorted11 = [...l].sort((a, b) => a - b);\n  const sorted12 = [...l].sort((a, b) => b - a);\n  const sorted13 = [...l].sort((a, b) => a - b);\n  const sorted14 = [...l].sort((a, b) => b - a);\n  const sorted15 = [...l].sort((a, b) => a - b);\n  const sorted16 = [...l].sort((a, b) => b - a);\n  const sorted17 = [...l].sort((a, b) => a - b);\n  const sorted18 = [...l].sort((a, b) => b - a);\n  const sorted19 = [...l].sort((a, b) => a - b);\n  const sorted20 = [...l].sort((a, b) => b - a);\n  const sorted21 = [...l].sort((a, b) => a - b);\n  const sorted22 = [...l].sort((a, b) => b - a);\n  const sorted23 = [...l].sort((a, b) => a - b);\n  const sorted24 = [...l].sort((a, b) => b - a);\n  const sorted25 = [...l].sort((a, b) => a - b);\n  const sorted26 = [...l].sort((a, b) => b - a);\n  const sorted27 = [...l].sort((a, b) => a - b);\n  const sorted28 = [...l].sort((a, b) => b - a);\n  const sorted29 = [...l].sort((a, b) => a - b);\n  const sorted30 = [...l].sort((a, b) => b - a);\n  const sorted31 = [...l].sort((a, b) => a - b);\n  const sorted32 = [...l].sort((a, b) => b - a);\n  const sorted33 = [...l].sort((a, b) => a - b);\n  const sorted34 = [...l].sort((a, b) => b - a);\n  const sorted35 = [...l].sort((a, b) => a - b);\n  const sorted36 = [...l].sort((a, b) => b - a);\n  const sorted37 = [...l].sort((a, b) => a - b);\n  const sorted38 = [...l].sort((a, b) => b - a);\n  const sorted39 = [...l].sort((a, b) => a - b);\n  const sorted40 = [...l].sort((a, b) => b - a);\n  const sorted41 = [...l].sort((a, b) => a - b);\n  const sorted42 = [...l].sort((a, b) => b - a);\n  const sorted43 = [...l].sort((a, b) => a - b);\n  const sorted44 = [...l].sort((a, b) => b - a);\n  const sorted45 = [...l].sort((a, b) => a - b);\n  const sorted46 = [...l].sort((a, b) => b - a);\n  const sorted47 = [...l].sort((a, b) => a - b);\n  const sorted48 = [...l].sort((a, b) => b - a);\n  const sorted49 = [...l].sort((a, b) => a - b);\n  const sorted50 = [...l].sort((a, b) => b - a);\n  const sorted51 = [...l].sort((a, b) => a - b);\n  const sorted52 = [...l].sort((a, b) => b - a);\n  const sorted53 = [...l].sort((a, b) => a - b);\n  const sorted54 = [...l].sort((a, b) => b - a);\n  const sorted55 = [...l].sort((a, b) => a - b);\n  const sorted56 = [...l].sort((a, b) => b - a);\n  const sorted57 = [...l].sort((a, b) => a - b);\n  const sorted58 = [...l].sort((a, b) => b - a);\n  const sorted59 = [...l].sort((a, b) => a - b);\n  const sorted60 = [...l].sort((a, b) => b - a);\n  const sorted61 = [...l].sort((a, b) => a - b);\n  const sorted62 = [...l].sort((a, b) => b - a);\n  const sorted63 = [...l].sort((a, b) => a - b);\n  const sorted64 = [...l].sort((a, b) => b - a);\n  const sorted65 = [...l].sort((a, b) => a - b);\n  const sorted66 = [...l].sort((a, b) => b - a);\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  const sorted = l.sort();\n  for (let i = 0; i < sorted.length; i++) {\n    if (unique.indexOf(sorted[i]) === -1) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      console.log(i);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(78);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length - 1; i += 2) {\n    l2[i] = l[i];\n  }\n  for (let i = 1; i < l.length - 1; i += 2) {\n    l2[i] = l[i + 1];\n  }\n  return l2;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i * 3 + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": false, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 2 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\nconsole.log(primeFib(5))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  const mean = sum / numbers.length;\n  const diff = numbers.map((x) => Math.abs(x - mean));\n  return Math.abs(mean - sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  const mean = sum / numbers.length;\n  const diff = numbers.map((x) => Math.abs(x - mean));\n  return Math.abs(mean - sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  const mean = sum / numbers.length;\n  const diff = numbers.map((x) => Math.abs(x - mean));\n  return Math.abs(mean - sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  const mean = sum / numbers.length;\n  const diff = numbers.map((x) => Math.abs(x - mean));\n  return Math.abs(mean - sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  const mean = sum / numbers.length;\n  const diff = numbers.map((x) => Math.abs(x - mean));\n  return Math.abs(mean - sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  const mean = sum / numbers.length;\n  const diff = numbers.map((x) => Math.abs(x - mean));\n  return Math.abs(mean - sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  const mean = sum / numbers.length;\n  const diff = numbers.map((x) => Math.abs(x - mean));\n  return Math.abs(mean - sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    res = [],\n    incr = (x) => x + 1;\n\n  while (i < len) {\n    res[i] = l[i];\n    i += 1;\n  }\n\n  for (i = 0; i < len; i += 1) {\n    res[i] = incr(l[i]);\n  }\n\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nexport default incrList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return (l.length >= 3 && sum === 0)\n}\n\n/*\n  pairsSumToZeroAtkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZeroAtkes([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAtkes([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAtkes([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAtkes([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAtkes([1])\n  false\n  */\nconst pairsSumToZeroAtkes = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return (l.length >= 3 && sum === 0)\n}\n\n/*\n  pairsSumToZeroAtkesAtkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZeroAtkesAtkes([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAtkesAtkes([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAtkesAtkes([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAtkesAtkes([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAtkesAtkes([1])\n  false\n  */\nconst pairsSumToZeroAtkesAtkes = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return (l.length >= 3 && sum === 0)\n}\n\n/*\n  pairsSumToZeroAtkesAtkesAtkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZeroAtkesAtkesAtkes([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkes([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkes([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkes([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAtkesAtkesAtkes([1])\n  false\n  */\nconst pairsSumToZeroAtkesAtkesAtkes = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return (l.length >= 3 && sum === 0)\n}\n\n/*\n  pairsSumToZeroAtkesAtkesAtkesAtkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkes([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkes([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkes([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkes([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkes([1])\n  false\n  */\nconst pairsSumToZeroAtkesAtkesAtkesAtkes = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return (l.length >= 3 && sum === 0)\n}\n\n/*\n  pairsSumToZeroAtkesAtkesAtkesAtkesAtkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkes([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkes([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkes([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkes([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkes([1])\n  false\n  */\nconst pairsSumToZeroAtkesAtkesAtkesAtkesAtkes = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return (l.length >= 3 && sum === 0)\n}\n\n/*\n  pairsSumToZeroAtkesAtkesAtkesAtkesAtkesAtkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkesAtkes([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkesAtkes([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAtkesAtkesAtkesAtkesAtkesAtkes([1, 2, 3, 7])\n  false\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Convert a number to a string in a given base.\n  >>> convertToBase(2, 3)\n  '10'\n  >>> convertToBase(2, 2)\n  '2'\n  >>> convertToBase(2, 1)\n  '2'\n  >>> convertToBase(2, 0)\n  '2'\n  >>> convertToBase(2, -1)\n  '2'\n  >>> convertToBase(2, -2)\n  '10'\n  >>> convertToBase(2, -3)\n  '100'\n  >>> convertToBase(2, -4)\n  '1000'\n  >>> convertToBase(2, -5)\n  '10000'\n  >>> convertToBase(2, -6)\n  '100000'\n  >>> convertToBase(2, -7)\n  '1000000'\n  >>> convertToBase(2, -8)\n  '10000000'\n  >>> convertToBase(2, -9)\n  '100000000'\n  >>> convertToBase(2, -10)\n  '1000000000'\n  >>> convertToBase(2, -11)\n  '10000000000'\n  >>> convertToBase(2, -12)\n  '100000000000'\n  >>> convertToBase(2, -13)\n  '1000000000000'\n  >>> convertToBase(2, -14)\n  '10000000000000'\n  >>> convertToBase(2, -15)\n  '100000000000000'\n  >>> convertToBase(2, -16)\n  '1000000000000000'\n  >>> convertToBase(2, -17)\n  '10000000000000000'\n  >>> convertToBase(2, -18)\n  '100000000000000000'\n  >>> convertToBase(2, -19)\n  '1000000000000000000'\n  >>> convertToBase(2, -20)\n  '10000000000000000000'\n  >>> convertToBase(2, -21)\n  '100000000000000000000'\n  >>> convertToBase(2, -22)\n  '1000000000000000000000'\n  >>> convertToBase(2, -23)\n  '10000000000000000000000'\n  >>> convertToBase(2, -24)\n  '100000000000000000000000'\n  >>> convertToBase(2, -25)\n  '1000000000000000000000000'\n  >>> convertToBase(2, -26)\n  '10000000000000000000000000'\n  >>> convertToBase(2, -27)\n  '100000000000000000000000000'\n  >>> convertToBase(2, -28)\n  '1000000000000000000000000000'\n  >>> convertToBase(2, -29)\n  '10000000000000000000000000000'\n  >>> convertToBase(2, -30)\n  '100000000000000000000000000000'\n  >>> convertToBase(2, -31)\n  '1000000000000000000000000000000'\n  >>> convertToBase(2, -32)\n  '10000000000000000000000000000000'\n  >>> convertToBase(2, -33)\n  '100000000000000000000000000000000'\n  >>> convertToBase(2, -34)\n  '1000000000000000000000000000000000'\n  >>> convertToBase(2, -35)\n  '10000000000000000000000000000000000'\n  >>> convertToBase(2, -36)\n  '100000000000000000000000000000000000'\n  >>> convertToBase(2, -37)\n  '1000000000000000000000000000000000000'\n  >>> convertToBase(2, -38)\n  '10000000000000000000000000000000000000'\n  >>> convertToBase(2, -39)\n  '100000000000000000000000000000000000000'\n  >>> convertToBase(2, -40)\n  '1000000000000000000000000000000000000000'\n  >>> convertToBase(2, -41)\n  '10000000000000000000000000000000000000000'\n  >>> convertToBase(2, -42)\n  '100000000000000000000000000000000000000000'\n  >>> convertToBase(2, -43)\n  '1000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -44)\n  '10000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -45)\n  '100000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -46)\n  '1000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -47)\n  '10000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -48)\n  '100000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -49)\n  '1000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -50)\n  '100000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -51)\n  '1000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -52)\n  '10000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -53)\n  '100000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -54)\n  '1000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -55)\n  '10000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -56)\n  '100000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -57)\n  '1000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -58)\n  '10000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -59)\n  '100000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -60)\n  '1000000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -61)\n  '10000000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -62)\n  '100000000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -63)\n  '1000000000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -64)\n  '10000000000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -65)\n  '1000000000000000000000000000000000000000000000000000000000000000000'\n  >>> convertToBase(2, -66)\n  '10000000000000000000000000000000000000000000000000000000000000000000", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 2\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nexport default isPalindrome\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp2(3, 5)\n  3\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp3(3, 5)\n  3\n  >>> modp3(1101, 101)\n  2\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp4(3, 5)\n  3\n  >>> modp4(1101, 101)\n  2\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp5(3, 5)\n  3\n  >>> modp5(1101, 101)\n  2\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp6(3, 5)\n  3\n  >>> modp6(1101, 101)\n  2\n  >>> modp6(0, 101)\n  1\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp7(3, 5)\n  3\n  >>> modp7(1101, 101)\n  2\n  >>> modp7(0, 101)\n  1\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp8(3, 5)\n  3\n  >>> modp8(1101, 101)\n  2\n  >>> modp8(0, 101)\n  1\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp9(3, 5)\n  3\n  >>> modp9(1101, 101)\n  2\n  >>> modp9(0, 101)\n  1\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp10(3, 5)\n  3\n  >>> modp10(1101, 101)\n  2\n  >>> modp10(0, 101)\n  1\n  >>> modp10(3, 11)\n  8\n  >>> modp10(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp11(3, 5)\n  3\n  >>> modp11(1101, 101)\n  2\n  >>> modp11(0, 101)\n  1\n  >>> modp11(3, 11)\n  8\n  >>> modp11(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp12(3, 5)\n  3\n  >>> modp12(1101, 101)\n  2\n  >>> modp12(0, 101)\n  1\n  >>> modp12(3, 11)\n  8\n  >>> modp12(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp13(3, 5)\n  3\n  >>> modp13(1101, 101)\n  2\n  >>> modp13(0, 101)\n  1\n  >>> modp13(3, 11)\n  8\n  >>> modp13(100, 101)\n  1\n  */\nconst modp14 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modp14(3, 5)\n  3\n  >>> modp14(1101, 101)\n  2\n  >>> modp14(0, 101)\n  1\n  >>> modp14(3, 11)\n  8\n  >>> modp", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> inters", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift15 = (s) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  while (i < textLength) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      i += 1\n    } else if (text[i] === 'A' || text[i] === 'E' || text[i] === 'I' || text[i] === 'O' || text[i] === 'U') {\n      i += 1\n    } else if (text[i] === 'b' || text[i] === 'c' || text[i] === 'd' || text[i] === 'f' || text[i] === 'g' || text[i] === 'h' || text[i] === 'j' || text[i] === 'k' || text[i] === 'l' || text[i] ==='m' || text[i] === 'n' || text[i] === 'p' || text[i] === 'q' || text[i] === 'r' || text[i] ==='s' || text[i] === 't' || text[i] === 'v' || text[i] === 'w' || text[i] === 'x' || text[i] === 'y' || text[i] === 'z') {\n      i += 1\n    } else if (text[i] === 'B' || text[i] === 'C' || text[i] === 'D' || text[i] === 'F' || text[i] === 'G' || text[i] === 'H' || text[i] === 'J' || text[i] === 'K' || text[i] === 'L' || text[i] === 'M' || text[i] === 'N' || text[i] === 'P' || text[i] === 'Q' || text[i] === 'R' || text[i] === 'S' || text[i] === 'T' || text[i] === 'V' || text[i] === 'W' || text[i] === 'X' || text[i] === 'Y' || text[i] === 'Z') {\n      i += 1\n    } else if (text[i] === 'z' || text[i] === 'Z') {\n      i += 1\n    } else if (text[i] === 'a' || text[i] === 'A') {\n      i += 1\n    } else if (text[i] === 'b' || text[i] === 'B') {\n      i += 1\n    } else if (text[i] === 'c' || text[i] === 'C') {\n      i += 1\n    } else if (text[i] === 'd' || text[i] === 'D') {\n      i += 1\n    } else if (text[i] === 'e' || text[i] === 'E') {\n      i += 1\n    } else if (text[i] === 'f' || text[i] === 'F') {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([1, 2, 4, 10], 5, 15)\n  true\n  >>> inRange([1, 2, 4, 10], 5, 20)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst inRange = (l, a, b) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b]\n  and are not equal to t.\n  >>> inRange([1, 2, 4, 10], 5, 15, 20)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 15, 10)\n  true\n  >>> inRange([1, 2, 4, 10], 5, 15, 15)\n  true\n  */\nconst inRangeNotEqual = (l, a, b, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < a || l[i] > b || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b]\n  and are not equal to t.\n  >>> inRangeNotEqual([1, 2, 4, 10], 5, 15, 20, 10)\n  true\n  >>> inRangeNotEqual([1, 2, 4, 10], 5, 15, 20, 15)\n  false\n  */\nconst inRangeNotEqualThreshold = (l, a, b, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < a || l[i] > b || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b]\n  and are not equal to t.\n  >>> inRangeNotEqualThreshold([1, 2, 4, 10], 5, 15, 20, 10)\n  false\n  >>> inRangeNotEqualThreshold([1, 2, 4, 10], 5, 15, 20, 15)\n  true\n  */\nconst inRangeNotEqualThresholdBelow = (l, a, b, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < a || l[i] > b || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b]\n  and are not equal to t.\n  >>> inRangeNotEqualThresholdBelow([1, 2, 4, 10], 5, 15, 20, 10)\n  true\n  >>> inRangeNotEqualThresholdBelow([1, 2, 4, 10], 5, 15, 20, 15)\n  false\n  */\nconst inRangeNotEqualThresholdAbove = (l, a, b, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < a || l[i] > b || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b]\n  and are not equal to t.\n  >>> inRangeNotEqualThresholdAbove([1, 2, 4, 10], 5, 15, 20, 10)\n  false\n  >>> inRangeNotEqualThresholdAbove([1, 2, 4, 10], 5, 15, 20, 15)\n  true\n  */\nconst inRangeNotEqualThresholdBelowAbove = (l, a, b, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < a || l[i] > b || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b]\n  and are not equal to t.\n  >>> inRangeNotEqualThresholdBelowAbove([1, 2, 4, 10], 5, 15, 20, 10)\n  true\n  >>> inRangeNotEqualThresholdBelowAbove([1, 2, 4, 10], 5, 15, 20, 15)\n  false\n  */\nconst inRangeNotEqualThresholdBelowAboveBelow = (l, a, b, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < a || l[i] > b || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b]\n  and are not equal to t.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * n must be a positive integer\n  *\n  * >>> sumOfSquares(1)\n  * 1\n  * >>> sumOfSquares(2)\n  * 4\n  * >>> sumOfSquares(3)\n  * 9\n  * >>> sumOfSquares(4)\n  * 16\n  * >>> sumOfSquares(5)\n  * 25\n  * >>> sumOfSquares(6)\n  * 36\n  * >>> sumOfSquares(7)\n  * 49\n  * >>> sumOfSquares(8)\n  * 64\n  * >>> sumOfSquares(9)\n  * 81\n  * >>> sumOfSquares(10)\n  * 100\n  * >>> sumOfSquares(11)\n  * 121\n  * >>> sumOfSquares(12)\n  * 144\n  * >>> sumOfSquares(13)\n  * 169\n  * >>> sumOfSquares(14)\n  * 196\n  * >>> sumOfSquares(15)\n  * 225\n  * >>> sumOfSquares(16)\n  * 256\n  * >>> sumOfSquares(17)\n  * 289\n  * >>> sumOfSquares(18)\n  * 324\n  * >>> sumOfSquares(19)\n  * 361\n  * >>> sumOfSquares(20)\n  * 400\n  * >>> sumOfSquares(21)\n  * 441\n  * >>> sumOfSquares(22)\n  * 464\n  * >>> sumOfSquares(23)\n  * 491\n  * >>> sumOfSquares(24)\n  * 524\n  * >>> sumOfSquares(25)\n  * 549\n  * >>> sumOfSquares(26)\n  * 576\n  * >>> sumOfSquares(27)\n  * 609\n  * >>> sumOfSquares(28)\n  * 636\n  * >>> sumOfSquares(29)\n  * 665\n  * >>> sumOfSquares(30)\n  * 700\n  * >>> sumOfSquares(31)\n  * 731\n  * >>> sumOfSquares(32)\n  * 764\n  * >>> sumOfSquares(33)\n  * 797\n  * >>> sumOfSquares(34)\n  * 832\n  * >>> sumOfSquares(35)\n  * 865\n  * >>> sumOfSquares(36)\n  * 900\n  * >>> sumOfSquares(37)\n  * 933\n  * >>> sumOfSquares(38)\n  * 968\n  * >>> sumOfSquares(39)\n  * 1001\n  * >>> sumOfSquares(40)\n  * 1034\n  * >>> sumOfSquares(41)\n  * 1069\n  * >>> sumOfSquares(42)\n  * 1102\n  * >>> sumOfSquares(43)\n  * 1137\n  * >>> sumOfSquares(44)\n  * 1170\n  * >>> sumOfSquares(45)\n  * 1213\n  * >>> sumOfSquares(46)\n  * 1248\n  * >>> sumOfSquares(47)\n  * 1281\n  * >>> sumOfSquares(48)\n  * 1316\n  * >>> sumOfSquares(49)\n  * 1349\n  * >>> sumOfSquares(50)\n  * 1382\n  * >>> sumOfSquares(51)\n  * 1415\n  * >>> sumOfSquares(52)\n  * 1448\n  * >>> sumOfSquares(53)\n  * 1481\n  * >>> sumOfSquares(54)\n  * 1514\n  * >>> sumOfSquares(55)\n  * 1547\n  * >>> sumOfSquares(56)\n  * 1580\n  * >>> sumOfSquares(57)\n  * 1613\n  * >>> sumOfSquares(58)\n  * 1648\n  * >>> sumOfSquares(59)\n  * 1681\n  * >>> sumOfSquares(60)\n  * 1714\n  * >>> sumOfSquares(61)\n  * 1747\n  * >>> sumOfSquares(62)\n  * 1780\n  * >>> sumOfSquares(63)\n  * 1813\n  * >>> sumOfSquares(64)\n  * 1848\n  * >>> sumOfSquares(65)\n  * 1881\n  * >>> sumOfSquares(66)\n  * 1904\n  * >>> sumOfSquares(67)\n  * 1949\n  * >>> sumOfSquares(68)\n  * 1982\n  * >>> sumOfSquares(69)\n  * 2015\n  * >>> sumOfSquares(70)\n  * 2048\n  * >>> sumOfSquares(71)\n  * 2081\n  * >>> sumOfSquares(72)\n  * 2114\n  * >>> sumOfSquares(73)\n  * 2147\n  * >>> sumOfSquares(74)\n  * 2180\n  * >>> sumOfSquares(75)\n  * 2213\n  * >>> sumOfSquares(76)\n  * 2248\n  * >>> sumOfSquares(77", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsLengthMinusOne = bracketsLength - 1\n  const bracketsLengthMinusTwo = bracketsLength - 2\n  const bracketsLengthMinusThree = bracketsLength - 3\n  const bracketsLengthMinusFour = bracketsLength - 4\n  const bracketsLengthMinusFive = bracketsLength - 5\n  const bracketsLengthMinusSix = bracketsLength - 6\n  const bracketsLengthMinusSeven = bracketsLength - 7\n  const bracketsLengthMinusEight = bracketsLength - 8\n  const bracketsLengthMinusNine = bracketsLength - 9\n  const bracketsLengthMinusTen = bracketsLength - 10\n\n  for (let i = 0; i < bracketsLengthMinusOne; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusTwo; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusThree; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusFour; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusFive; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusSix; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusSeven; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusEight; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusNine; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  for (let i = 0; i < bracketsLengthMinusTen; i++) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && brackets[i + 2] === \">\") {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default correctBracketing\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common_set = new Set();\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      for (let j = 0; j < l2_len; j++) {\n        if (l2_set.has(l2[j])) {\n          common_set.add(l1[i]);\n          break;\n        }\n      }\n    }\n  }\n  return Array.from(common_set);\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_count = 0;\n  const paren_string_length = paren_string.length;\n  for (let i = 0; i < paren_string_length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n};\n\n// Test\nconst test_parseNestedParens = () => {\n  const test_string = '((()()))';\n  const test_stack = parseNestedParens(test_string);\n  console.log(test_stack);\n};\n\n// Run\ntest_parseNestedParens();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i]\n    if (bracket === \"(\" || bracket === \")\") {\n      stack.push(bracket)\n    } else {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== \"(\" && stack[stack.length - 1]!== \")\") {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the number of brackets in the string.\n\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(())\")\n  2\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"()(\")\n  2\n  >>> countBrackets(\"()(\")\n  2\n  >>> countBrackets(\"()(\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"(())\")\n  3\n  >>> countBrackets(\"(())\")\n  3\n  >>> countBrackets(\"(()())\")\n  4\n  >>> countBrackets(\"()(())\")\n  3\n  >>> countBrackets(\"()(())\")\n  3\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n  >>> countBrackets(\"()()\")\n  2\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n    for (let j = i - 1; j >= 0; j--) {\n      d[i] -= xs[j] * d[i - j];\n    }\n  }\n  return d;\n};\n\nconst main = () => {\n  const xs = [1, 2, 3];\n  const d = derivative(xs);\n  console.log(d);\n};\n\nmain();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }\n  } else if (shift > len) {\n    for (let i = 0; i < shift - len; i++) {\n      result.push(x.pop())\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result.push(x.shift())\n    }\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }\n  } else if (shift > len) {\n    for (let i = 0; i < shift - len; i++) {\n      result.push(x.pop())\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result.push(x.shift())\n    }\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }\n  } else if (shift > len) {\n    for (let i = 0; i < shift - len; i++) {\n      result.push(x.pop())\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result.push(x.shift())\n    }\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }\n  } else if (shift > len) {\n    for (let i = 0; i < shift - len; i++) {\n      result.push(x.pop())\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result.push(x.shift())\n    }\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }\n  } else if (shift > len) {\n    for (let i = 0; i < shift - len; i++) {\n      result.push(x.pop())\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result.push(x.shift())\n    }\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }\n  } else if (shift > len) {\n    for (let i = 0; i < shift - len; i++) {\n      result.push(x.pop())\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result.push(x.shift())\n    }\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }\n  } else if (shift > len) {\n    for (let i = 0; i < shift - len; i++) {\n      result.push(x.pop())\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result.push(x.shift())\n    }\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift < 0) {\n    for (let i = 0; i < -shift; i++) {\n      result.unshift(x.pop())\n    }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let count = 0\n  let total = 0\n  let fruit = []\n  let fruit_count = []\n  let fruit_total = []\n  let fruit_total_count = []\n  let fruit_total_count_sum = 0\n  let fruit_total_count_sum_sum = 0\n  let fruit_total_count_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  let fruit_total_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [min, max] = [Infinity, -Infinity]\n  const [min_index, max_index] = [Infinity, -Infinity]\n  const [min_value, max_value] = [Infinity, -Infinity]\n  const [min_index_value, max_index_value] = [Infinity, -Infinity]\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i]\n        min_index = i\n        min_index_value = arr[i]\n      }\n      if (arr[i] > max) {\n        max = arr[i]\n        max_index = i\n        max_index_value = arr[i]\n      }\n    }\n  }\n\n  if (min === Infinity) {\n    return []\n  }\n\n  return [min, min_index]\n}\n\nconsole.log(pluck([4, 2, 3]))\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search2 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search3 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search4 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search5 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search6 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search7 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search8 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let index = 0;\n  let frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n      if (frequency > max) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nconst search9 = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArray = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstringAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstringAndCaseSensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstringAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstringAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstringAndCaseSensitiveAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstringAndCaseSensitiveAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringAsArrayWithSubstringAndCaseSensitiveAndCaseSensitiveAndCaseSensitiveAndCaseS", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice();\n  let min = sorted[0];\n  let max = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] < min) {\n      min = sorted[i];\n    }\n    if (sorted[i] > max) {\n      max = sorted[i];\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  sorted.unshift(min);\n  sorted.push(max);\n  return sorted;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly2 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly3 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly4 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly5 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly6 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly7 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly8 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly9 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly10 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly11 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly12 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly13 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly14 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly15 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly16 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly17 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly18 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly19 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly20 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconst willItFly21 = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i]!== arr[j]) {\n        if (arr[i] < arr[j]) {\n          min = Math.min(min, j - i);\n        } else {\n          min = Math.min(min, i - j);\n        }\n      }\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch9 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst totalMatch10 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (a) => {\n  return isPrime(a) && isMultiplyPrime(a);\n};\n\nconst isPrimeNumber2 = (a) => {\n  return isPrime(a) && isPrime(a * a);\n};\n\nconst isPrimeNumber3 = (a) => {\n  return isPrime(a) && isPrime(a * a * a);\n};\n\nconst isPrimeNumber4 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a);\n};\n\nconst isPrimeNumber5 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a);\n};\n\nconst isPrimeNumber6 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a);\n};\n\nconst isPrimeNumber7 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber8 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber9 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber10 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber11 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber12 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber13 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber14 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber15 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber16 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber17 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber18 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber19 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber20 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber21 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber22 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber23 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber24 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber25 = (a) => {\n  return isPrime(a) && isPrime(a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isPrimeNumber26 = (a) => {\n  return is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a === 3) return false\n  if (a === 4) return true\n  if (a === 5) return false\n  if (a === 6) return true\n  if (a === 7) return false\n  if (a === 8) return true\n  if (a === 9) return false\n  if (a === 10) return true\n  if (a === 11) return false\n  if (a === 12) return true\n  if (a === 13) return false\n  if (a === 14) return true\n  if (a === 15) return false\n  if (a === 16) return true\n  if (a === 17) return false\n  if (a === 18) return true\n  if (a === 19) return false\n  if (a === 20) return true\n  if (a === 21) return false\n  if (a === 22) return true\n  if (a === 23) return false\n  if (a === 24) return true\n  if (a === 25) return false\n  if (a === 26) return true\n  if (a === 27) return false\n  if (a === 28) return true\n  if (a === 29) return false\n  if (a === 30) return true\n  if (a === 31) return false\n  if (a === 32) return true\n  if (a === 33) return false\n  if (a === 34) return true\n  if (a === 35) return false\n  if (a === 36) return true\n  if (a === 37) return false\n  if (a === 38) return true\n  if (a === 39) return false\n  if (a === 40) return true\n  if (a === 41) return false\n  if (a === 42) return true\n  if (a === 43) return false\n  if (a === 44) return true\n  if (a === 45) return false\n  if (a === 46) return true\n  if (a === 47) return false\n  if (a === 48) return true\n  if (a === 49) return false\n  if (a === 50) return true\n  if (a === 51) return false\n  if (a === 52) return true\n  if (a === 53) return false\n  if (a === 54) return true\n  if (a === 55) return false\n  if (a === 56) return true\n  if (a === 57) return false\n  if (a === 58) return true\n  if (a === 59) return false\n  if (a === 60) return true\n  if (a === 61) return false\n  if (a === 62) return true\n  if (a === 63) return false\n  if (a === 64) return true\n  if (a === 65) return false\n  if (a === 66) return true\n  if (a === 67) return false\n  if (a === 68) return true\n  if (a === 69) return false\n  if (a === 70) return true\n  if (a === 71) return false\n  if (a === 72) return true\n  if (a === 73) return false\n  if (a === 74) return true\n  if (a === 75) return false\n  if (a === 76) return true\n  if (a === 77) return false\n  if (a === 78) return true\n  if (a === 79) return false\n  if (a === 80) return true\n  if (a === 81) return false\n  if (a === 82) return true\n  if (a === 83) return false\n  if (a === 84) return true\n  if (a === 85) return false\n  if (a === 86) return true\n  if (a === 87) return false\n  if (a === 88) return true\n  if (a === 89) return false\n  if (a === 90) return true\n  if (a === 91) return false\n  if (a === 92) return true\n  if (a === 93) return false\n  if (a === 94) return true\n  if (a === 95) return false\n  if (a === 96) return true\n  if (a === 97) return false\n  if (a === 98) return true\n  if (a === 99) return false\n  if (a === 100) return true\n  if (a === 101) return false\n  if (a === 102) return true\n  if (a === 103) return false\n  if (a === 104) return true\n  if (a === 105) return false\n  if (a === 106) return true\n  if (a === 107) return false\n  if (a === 108) return true\n  if (a === 109) return false\n  if (a === 110) return true\n  if (a === 111) return false\n  if (a === 112) return true\n  if (a === 113) return false\n  if (a === 114) return true\n  if (a === 115) return false\n  if (a === 116) return true\n  if (a === 117) return false\n  if (a === 118) return true\n  if (a === 119) return false\n  if (a === 120) return true\n  if (a === 121) return false\n  if (a === 122) return true\n  if (a === 123) return false\n  if (a === 124) return true\n  if (a === 125) return false\n  if (a === 126) return true\n  if (a === 127) return false\n  if (a === 128) return true\n  if (a === 129) return false\n  if (a === 130) return true\n  if (a === 131) return false\n  if (a === 132) return true\n  if (a === 133) return false\n  if (a === 134) return true\n  if (a === 135) return false\n  if (a === 136) return true\n  if (a === 137) return false\n  if (a === 138) return true\n  if (a === 139) return false\n  if (a === 140)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = 0;\n  for (let i = 0; i < num.length; i++) {\n    key += parseInt(num[i], 16) * Math.pow(16, i);\n  }\n  return key;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i <= Math.sqrt(num)) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst countPrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHex = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst count = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHexPrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHexPrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHexPrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimePrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHexPrimePrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHexPrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimePrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHexPrimePrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimePrimePrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countHexPrimePrimePrimePrimePrime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  return decimal;\n};\n\nconst test = (decimal) => {\n  console.log(decimalToBinary(decimal));\n  console.log(binaryToDecimal(decimalToBinary(decimal)));\n};\n\ntest(15);\ntest(32);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/8", "prompt": "/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let sum = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    sum += s[i]\n    i++\n  }\n  if (sum % 3 === 0) {\n    return true\n  }\n  while (j < len) {\n    sum += s[j]\n    j++\n    if (sum % 3 === 0) {\n      return true\n    }\n  }\n  while (k < len) {\n    sum += s[k]\n    k++\n    if (sum % 3 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne = gradesArrayLength - 71;\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let prime = 1;\n  let i = 2;\n  while (i < string.length) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    prime = i;\n  }\n  return prime;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let start = i\n    while (start > 0) {\n      if (start % 10 === 1) {\n        count++\n      }\n      start = start / 10\n    }\n    let end = i\n    while (end < n) {\n      if (end % 10 === 1) {\n        count++\n      }\n      end = end / 10\n    }\n  }\n  return count\n}\n\nconsole.log(startsOneEnds(1))\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = N.toString(2).split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n  return `${sum}`;\n};\n\nexport default solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\n/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle2 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle3 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle4 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle5 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle6 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle7 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle8 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle9 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle10 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle11 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let arr3 = arr[i].split('')\n    arr3.sort((a, b) => a - b)\n    arr2.push(arr3.join(''))\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle12 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  for (let i = 0; i < cols; i++) {\n    const row = []\n    for (let j = 0; j < row.length; j++) {\n      row.push(row[j] || 0)\n    }\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x])\n  return rows\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const rows = []\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    const sum = a + b;\n    const diff = sum % 2;\n    if (diff === 1) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = alphabet.split('');\n  rotated.splice(0, 1);\n  rotated.splice(rotated.length - 1, 1);\n  rotated.splice(rotated.length - 2, 1);\n  rotated.splice(rotated.length - 3, 1);\n  rotated.splice(rotated.length - 4, 1);\n  rotated.splice(rotated.length - 5, 1);\n  rotated.splice(rotated.length - 6, 1);\n  rotated.splice(rotated.length - 7, 1);\n  rotated.splice(rotated.length - 8, 1);\n  rotated.splice(rotated.length - 9, 1);\n  rotated.splice(rotated.length - 10, 1);\n  rotated.splice(rotated.length - 11, 1);\n  rotated.splice(rotated.length - 12, 1);\n  rotated.splice(rotated.length - 13, 1);\n  rotated.splice(rotated.length - 14, 1);\n  rotated.splice(rotated.length - 15, 1);\n  rotated.splice(rotated.length - 16, 1);\n  rotated.splice(rotated.length - 17, 1);\n  rotated.splice(rotated.length - 18, 1);\n  rotated.splice(rotated.length - 19, 1);\n  rotated.splice(rotated.length - 20, 1);\n  rotated.splice(rotated.length - 21, 1);\n  rotated.splice(rotated.length - 22, 1);\n  rotated.splice(rotated.length - 23, 1);\n  rotated.splice(rotated.length - 24, 1);\n  rotated.splice(rotated.length - 25, 1);\n  rotated.splice(rotated.length - 26, 1);\n  rotated.splice(rotated.length - 27, 1);\n  rotated.splice(rotated.length - 28, 1);\n  rotated.splice(rotated.length - 29, 1);\n  rotated.splice(rotated.length - 30, 1);\n  rotated.splice(rotated.length - 31, 1);\n  rotated.splice(rotated.length - 32, 1);\n  rotated.splice(rotated.length - 33, 1);\n  rotated.splice(rotated.length - 34, 1);\n  rotated.splice(rotated.length - 35, 1);\n  rotated.splice(rotated.length - 36, 1);\n  rotated.splice(rotated.length - 37, 1);\n  rotated.splice(rotated.length - 38, 1);\n  rotated.splice(rotated.length - 39, 1);\n  rotated.splice(rotated.length - 40, 1);\n  rotated.splice(rotated.length - 41, 1);\n  rotated.splice(rotated.length - 42, 1);\n  rotated.splice(rotated.length - 43, 1);\n  rotated.splice(rotated.length - 44, 1);\n  rotated.splice(rotated.length - 45, 1);\n  rotated.splice(rotated.length - 46, 1);\n  rotated.splice(rotated.length - 47, 1);\n  rotated.splice(rotated.length - 48, 1);\n  rotated.splice(rotated.length - 49, 1);\n  rotated.splice(rotated.length - 50, 1);\n  rotated.splice(rotated.length - 51, 1);\n  rotated.splice(rotated.length - 52, 1);\n  rotated.splice(rotated.length - 53, 1);\n  rotated.splice(rotated.length - 54, 1);\n  rotated.splice(rotated.length - 55, 1);\n  rotated.splice(rotated.length - 56, 1);\n  rotated.splice(rotated.length - 57, 1);\n  rotated.splice(rotated.length - 58, 1);\n  rotated.splice(rotated.length - 59, 1);\n  rotated.splice(rotated.length - 60, 1);\n  rotated.splice(rotated.length - 61, 1);\n  rotated.splice(rotated.length - 62, 1);\n  rotated.splice(rotated.length - 63, 1);\n  rotated.splice(rotated.length - 64, 1);\n  rotated.splice(rotated.length - 65, 1);\n  rotated.splice(rotated.length - 66, 1);\n  rotated.splice(rotated.length - 67, 1);\n  rotated.splice(rotated.length - 68, 1);\n  rotated.splice(rotated.length - 69, 1);\n  rotated.splice(rotated.length - 70, 1);\n  rotated.splice(rotated.length - 71, 1);\n  rotated.splice(rotated.length - 72, 1);\n  rotated.splice(rotated.length - 73, 1);\n  rotated.splice(rotated.length - 74, 1);\n  rotated.splice(rotated.length - 75, 1);\n  rotated.splice(rotated.length - 76, 1);\n  rotated.splice(rotated.length - 77, 1);\n  rotated.splice(rotated.length - 78, 1);\n  rotated.splice(rotated.length - 79, 1);\n  rotated.splice(rotated.length - 80, 1);", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  return [max, maxIndex];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = 0\n  const sentence = S.split(\".\")\n  const sentenceLength = sentence.length\n  const sentenceWords = sentence.map((word) => {\n    return word.split(\"?\").length\n  })\n  const sentenceBoredoms = sentenceWords.filter((x) => x === 0)\n  const sentenceBoredomsLength = sentenceBoredoms.length\n  if (sentenceBoredomsLength > 0) {\n    boredoms += sentenceBoredomsLength\n  }\n  return boredoms\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(\".\")\n  const sentenceLength = sentence.length\n  const sentenceWords = sentence.map((word) => {\n    return word.split(\"?\").length\n  })\n  const sentenceBoredoms = sentenceWords.filter((x) => x === 0)\n  const sentenceBoredomsLength = sentenceBoredoms.length\n  if (sentenceBoredomsLength > 0) {\n    boredoms += sentenceBoredomsLength\n  }\n  return boredoms\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored3 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(\".\")\n  const sentenceLength = sentence.length\n  const sentenceWords = sentence.map((word) => {\n    return word.split(\"?\").length\n  })\n  const sentenceBoredoms = sentenceWords.filter((x) => x === 0)\n  const sentenceBoredomsLength = sentenceBoredoms.length\n  if (sentenceBoredomsLength > 0) {\n    boredoms += sentenceBoredomsLength\n  }\n  return boredoms\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored4 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(\".\")\n  const sentenceLength = sentence.length\n  const sentenceWords = sentence.map((word) => {\n    return word.split(\"?\").length\n  })\n  const sentenceBoredoms = sentenceWords.filter((x) => x === 0)\n  const sentenceBoredomsLength = sentenceBoredoms.length\n  if (sentenceBoredomsLength > 0) {\n    boredoms += sentenceBoredomsLength\n  }\n  return boredoms\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored5 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(\".\")\n  const sentenceLength = sentence.length\n  const sentenceWords = sentence.map((word) => {\n    return word.split(\"?\").length\n  })\n  const sentenceBoredoms = sentenceWords.filter((x) => x === 0)\n  const sentenceBoredomsLength = sentenceBoredoms.length\n  if (sentenceBoredomsLength > 0) {\n    boredoms += sentenceBoredomsLength\n  }\n  return boredoms\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored6 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(\".\")\n  const sentenceLength = sentence.length\n  const sentenceWords = sentence.map((word) => {\n    return word.split(\"?\").length\n  })\n  const sentenceBoredoms = sentenceWords.filter((x) => x === 0)\n  const sentenceBoredomsLength = sentenceBoredoms.length\n  if (sentenceBoredomsLength > 0) {\n    boredoms += sentenceBoredomsLength\n  }\n  return boredoms\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const vowels = 'AEIOU';\n  const consonants = 'BCDFGHJKLMNPQRSTVWXYZ';\n  const vowelsLength = vowels.length;\n  const consonantsLength = consonants.length;\n  const messageLength = message.length;\n  const message = message.toLowerCase();\n  const messageLength = message.length;\n  const messageArray = message.split('');\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  const messageArrayLength = messageArray.length;\n  ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const max = (a, b) => {\n    return a > b? a : b\n  }\n  const sum = (a, b) => {\n    return a + b\n  }\n  const maxPrime = (lst) => {\n    let maxPrime = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (prime(lst[i])) {\n        maxPrime = max(maxPrime, lst[i])\n      }\n    }\n    return maxPrime\n  }\n  return maxPrime(lst)\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  let isAllLower = true;\n  let isAllUpper = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      isAllLower = false;\n    }\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      isAllUpper = false;\n    }\n  }\n  return isAllLower || isAllUpper;\n};\n\n/*\n  Given a string, return true if the string is a valid number.\n  Examples:\n  isNumber(\"123\") should return true.\n  isNumber(\"a\") should return false.\n  isNumber(\"123a\") should return false.\n  isNumber(\"123.45\") should return true.\n  isNumber(\"123.45a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123.45.a\") should return false.\n  isNumber(\"123", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/96", "prompt": "/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the numbers in the array.\n  for example:\n  sumArray([1,2,3,4]) => 10\n  sumArray([1,2,3,4,5]) => 15\n  sumArray([1,2,3,4,5,6]) => 21\n  sumArray([1,2,3,4,5,6,7]) => 28\n  sumArray([1,2,3,4,5,6,7,8]) => 35\n  sumArray([1,2,3,4,5,6,7,8,9]) => 42\n  sumArray([1,2,3,4,5,6,7,8,9,10]) => 49\n  sumArray([1,2,3,4,5,6,7,8,9,10,11]) => 56\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12]) => 63\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13]) => 70\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) => 77\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) => 84\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) => 91\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) => 98\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) => 105\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) => 112\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) => 119\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) => 126\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) => 133\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) => 140\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) => 147\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) => 154\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) => 161\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) => 168\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) => 175\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) => 182\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) => 189\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) => 196\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) => 203\n  sumArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply2 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply3 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply4 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply5 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply6 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply7 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply8 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply9 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply10 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply11 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply12 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply13 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply14 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply15 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply16 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply17 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply18 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply19 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply20 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply21 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply22 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply23 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply24 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    result += a % b;\n    a = Math.floor(a / b);\n  }\n  return result;\n};\n\nconst multiply25 = (a, b) => {\n  let result = 0", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in evne idncies.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants in evne idncies.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of vowels in evne idncies.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels2 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants, vowels and consonants in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels3 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants, vowels and consonants in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels4 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants, vowels and consonants in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels5 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants, vowels and consonants in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels6 = (s) => {\n    let count = 0;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/99", "prompt": "/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intValue = parseInt(value, 10);\n  let absIntValue = Math.abs(intValue);\n  let absIntValueClosest = Math.ceil(absIntValue);\n  let absIntValueFarthest = Math.floor(absIntValue);\n  let closest = intValue;\n  if (absIntValueClosest === absIntValueFarthest) {\n    closest = intValue;\n  } else if (absIntValueClosest > absIntValueFarthest) {\n    closest = absIntValueFarthest;\n  } else {\n    closest = absIntValueClosest;\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
