{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.slice().sort();\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const lastIndex = sortedNumbers.indexOf(lastNumber);\n  const firstNumber = sortedNumbers[0];\n  const firstIndex = sortedNumbers.indexOf(firstNumber);\n  const distance = lastNumber - firstNumber;\n  return distance < threshold;\n};\n\n/*\n  Given a list of numbers, return the number of the largest number.\n  >>> largestNumber(1, 2, 3, 4, 5, 6)\n  6\n  >>> largestNumber(1, 2, 3, 4, 5)\n  5\n  >>> largestNumber(1, 2, 3, 4)\n  4\n  >>> largestNumber(1, 2, 3)\n  3\n  >>> largestNumber(1, 2)\n  2\n  >>> largestNumber(1)\n  1\n  */\nconst largestNumber = (...numbers) => {\n  const largestNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > largestNumber) {\n      largestNumber = numbers[i];\n    }\n  }\n  return largestNumber;\n};\n\n/*\n  Given a list of numbers, return the number of the smallest number.\n  >>> smallestNumber(1, 2, 3, 4, 5, 6)\n  1\n  >>> smallestNumber(1, 2, 3, 4, 5)\n  1\n  >>> smallestNumber(1, 2, 3, 4)\n  1\n  >>> smallestNumber(1, 2, 3)\n  1\n  >>> smallestNumber(1, 2)\n  1\n  >>> smallestNumber(1)\n  1\n  */\nconst smallestNumber = (...numbers) => {\n  const smallestNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallestNumber) {\n      smallestNumber = numbers[i];\n    }\n  }\n  return smallestNumber;\n};\n\n/*\n  Given a list of numbers, return the number of the median number.\n  >>> medianNumber(1, 2, 3, 4, 5, 6)\n  3.5\n  >>> medianNumber(1, 2, 3, 4, 5)\n  3.5\n  >>> medianNumber(1, 2, 3, 4)\n  3.5\n  >>> medianNumber(1, 2, 3)\n  3.5\n  >>> medianNumber(1, 2)\n  2.5\n  >>> medianNumber(1)\n  1.0\n  */\nconst medianNumber = (...numbers) => {\n  const sortedNumbers = numbers.slice().sort();\n  const middle = sortedNumbers[Math.floor(sortedNumbers.length / 2)];\n  return middle;\n};\n\n/*\n  Given a list of numbers, return the number of the mode.\n  >>> mode(1, 2, 3, 4, 5, 6)\n  3\n  >>> mode(1, 2, 3, 4, 5)\n  3\n  >>> mode(1, 2, 3, 4)\n  3\n  >>> mode(1, 2, 3)\n  3\n  >>> mode(1, 2)\n  2\n  >>> mode(1)\n  1\n  */\nconst mode = (...numbers) => {\n  const sortedNumbers = numbers.slice().sort();\n  const mode = sortedNumbers[0];\n  const count = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mode) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a list of numbers, return the number of the median number.\n  >>> medianNumber(1, 2, 3, 4, 5, 6)\n  3.5\n  >>> medianNumber(1, 2, 3, 4, 5)\n  3.5\n  >>> medianNumber(1, 2, 3, 4)\n  3.5\n  >>> medianNumber(1, 2, 3)\n  3.5\n  >>> medianNumber(1, 2)\n  2.5\n  >>> medianNumber(1)\n  1.0\n  */\nconst medianNumber = (...numbers) => {\n  const sortedNumbers = numbers.slice().sort();\n  const middle = sortedNumbers[Math.floor(sortedNumbers.length / 2)];\n  return middle;\n};\n\n/*\n  Given a list of numbers, return the number of the mode.\n  >>> mode(1, 2, 3, 4, 5, 6)\n  3\n  >>> mode(1, 2, 3, 4, 5)\n  3\n  >>> mode(1, 2, 3, 4)\n  3\n  >>> mode(1, 2, 3)\n  3\n  >>> mode(1, 2)\n  2\n  >>> mode(1)\n  1\n  */\nconst mode = (...numbers) => {\n  const sortedNumbers = numbers.slice().sort();\n  const mode = sortedNumbers[0];\n  const count = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mode) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a list of numbers, return the number of the mode.\n  >>> mode(1, 2, 3, 4, 5, 6)\n  3\n  >>> mode(1, 2, 3, 4, 5)\n  3\n  >>> mode(1, 2, 3, 4)\n  3\n  >>> mode(1, 2, 3)\n  3\n  >>> mode(1, 2)\n  2\n  >>> mode(1)\n  1\n  */\nconst mode = (...numbers) => {\n  const sortedNumbers = numbers.slice().sort();\n  const mode = sortedNumbers[0];\n  const count = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mode) {", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const paren_stack = [];\n  const paren_stack_index = 0;\n  const paren_stack_length = paren_list.length;\n  let paren_stack_index_2 = 0;\n  let paren_stack_index_3 = 0;\n  let paren_stack_index_4 = 0;\n  let paren_stack_index_5 = 0;\n  let paren_stack_index_6 = 0;\n  let paren_stack_index_7 = 0;\n  let paren_stack_index_8 = 0;\n  let paren_stack_index_9 = 0;\n  let paren_stack_index_10 = 0;\n  let paren_stack_index_11 = 0;\n  let paren_stack_index_12 = 0;\n  let paren_stack_index_13 = 0;\n  let paren_stack_index_14 = 0;\n  let paren_stack_index_15 = 0;\n  let paren_stack_index_16 = 0;\n  let paren_stack_index_17 = 0;\n  let paren_stack_index_18 = 0;\n  let paren_stack_index_19 = 0;\n  let paren_stack_index_20 = 0;\n  let paren_stack_index_21 = 0;\n  let paren_stack_index_22 = 0;\n  let paren_stack_index_23 = 0;\n  let paren_stack_index_24 = 0;\n  let paren_stack_index_25 = 0;\n  let paren_stack_index_26 = 0;\n  let paren_stack_index_27 = 0;\n  let paren_stack_index_28 = 0;\n  let paren_stack_index_29 = 0;\n  let paren_stack_index_30 = 0;\n  let paren_stack_index_31 = 0;\n  let paren_stack_index_32 = 0;\n  let paren_stack_index_33 = 0;\n  let paren_stack_index_34 = 0;\n  let paren_stack_index_35 = 0;\n  let paren_stack_index_36 = 0;\n  let paren_stack_index_37 = 0;\n  let paren_stack_index_38 = 0;\n  let paren_stack_index_39 = 0;\n  let paren_stack_index_40 = 0;\n  let paren_stack_index_41 = 0;\n  let paren_stack_index_42 = 0;\n  let paren_stack_index_43 = 0;\n  let paren_stack_index_44 = 0;\n  let paren_stack_index_45 = 0;\n  let paren_stack_index_46 = 0;\n  let paren_stack_index_47 = 0;\n  let paren_stack_index_48 = 0;\n  let paren_stack_index_49 = 0;\n  let paren_stack_index_50 = 0;\n  let paren_stack_index_51 = 0;\n  let paren_stack_index_52 = 0;\n  let paren_stack_index_53 = 0;\n  let paren_stack_index_54 = 0;\n  let paren_stack_index_55 = 0;\n  let paren_stack_index_56 = 0;\n  let paren_stack_index_57 = 0;\n  let paren_stack_index_58 = 0;\n  let paren_stack_index_59 = 0;\n  let paren_stack_index_60 = 0;\n  let paren_stack_index_61 = 0;\n  let paren_stack_index_62 = 0;\n  let paren_stack_index_63 = 0;\n  let paren_stack_index_64 = 0;\n  let paren_stack_index_65 = 0;\n  let paren_stack_index_66 = 0;\n  let paren_stack_index_67 = 0;\n  let paren_stack_index_68 = 0;\n  let paren_stack_index_69 = 0;\n  let paren_stack_index_70 = 0;\n  let paren_stack_index_71 = 0;\n  let paren_stack_index_72 = 0;\n  let paren_stack_index_73 = 0;\n  let paren_stack_index_74 = 0;\n  let paren_stack_index_75 = 0;\n  let paren_stack_index_76 = 0;\n  let paren_stack_index_77 = 0;\n  let paren_stack_index_78 = 0;\n  let paren_stack_index_79 = 0;\n  let paren_stack_index_80 = 0;\n  let paren_stack_index_81 = 0;\n  let paren_stack_index_82 = 0;\n  let paren_stack_index_83 = 0;\n  let paren_stack_index_84 = 0;\n  let paren_stack_index_85 = 0;\n  let paren_stack_index_86 = 0;\n  let paren_stack_index_87 = 0;\n  let paren_stack_index_88 = 0;\n  let paren_stack_index_89 = 0;\n  let paren_stack_index_90 = 0;\n  let paren_stack_index_91 = 0;\n  let paren_stack_index_92 = 0;\n  let paren_stack_index_93 = 0;\n  let paren_stack_index_94 = 0;\n  let paren_stack_index_95 = 0;\n  let paren_stack_index_96 = 0;\n  let paren_stack_index_97 = 0;\n  let paren_stack_index_98 = 0;\n  let paren_stack_index_99 = 0;\n  let paren", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPalindrome = prefix.split('').reverse().join('');\n  const longestPalindromeLength = longestPalindrome.length;\n  const longestPalindromeReverse = longestPalindrome.split('').reverse().join('');\n  const longestPalindromeReverseLength = longestPalindromeReverse.length;\n  const prefixLength = longestPalindrome.length;\n  const suffixLength = longestPalindromeReverse.length;\n  const prefixReverseLength = longestPalindromeReverse.length;\n  const suffixReverseLength = longestPalindrome.split('').reverse().join('').length;\n  const prefixReverse = longestPalindrome.split('').reverse().join('');\n  const suffixReverse = longestPalindrome.split('').join('');\n  const prefixReverseReverse = longestPalindromeReverse.split('').reverse().join('');\n  const suffixReverseReverse = longestPalindromeReverse.split('').join('');\n  const longestPalindromeReverseReverse = longestPalindromeReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPalindromeReverseReverse = longestPalindromeReverseReverse.split('').reverse().join('');\n  const longestPalindromeReverseReverseLength = longestPalindromeReverseReverse.length;\n  const longestPal", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      stones.push(i)\n    } else {\n      stones.push(i * 2)\n    }\n  }\n  return stones\n}\n\nmodule.exports = makeAPile\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString9 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString10 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n", "passed": 1}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst chooseNum20 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = x; i <= y; i += 2) {\n    result = i;\n  }\n  return result;\n};\n\nconst", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = Math.floor(avg)\n  const binary = rounded.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const digit = x % 10;\n    if (digit % 2 === 0) {\n      digits.push(x);\n    }\n    x = Math.floor(x / 10);\n  }\n  return digits;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.slice().sort((a, b) => a.length - b.length);\n  let reversed = sorted.reverse();\n  let names = [];\n  for (let i = 0; i < reversed.length; i++) {\n    names.push(reversed[i].toString());\n  }\n  return names;\n};\n\nconsole.log(byLength([1, -1, 55]));\nconsole.log(byLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i += 1) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n  }\n  return [even, odd]\n}\n\nexport default evenOddPalindrome\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 2, 3]));\nconsole.log(countNums([1, 2, 3, 4]));\nconsole.log(countNums([1, 2, 3, 4, 5]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      arr[k] = arr[i];\n      i++;\n    } else {\n      arr[k] = arr[j];\n      j--;\n    }\n    k++;\n  }\n  arr[k] = arr[i];\n  return (arr.every(x => x >= 0));\n};\n\nexport default moveOneBall;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? '0' : '1');\n  }\n  for (let i = 0; i < b.length; i++) {\n    result += (b[i] === '1'? '0' : '1');\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'X' are replaced by 'Y'.\n  >>> stringXorpassed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const len2 = lst2.length;\n  const lst1_even = lst1.filter(x => x % 2 === 0);\n  const lst2_even = lst2.filter(x => x % 2 === 0);\n  const lst1_odd = lst1.filter(x => x % 2!== 0);\n  const lst2_odd = lst2.filter(x => x % 2!== 0);\n  const lst1_even_len = lst1_even.length;\n  const lst2_even_len = lst2_even.length;\n  const lst1_odd_len = lst1_odd.length;\n  const lst2_odd_len = lst2_odd.length;\n  const lst1_even_len_plus_lst2_even_len = lst1_even_len + lst2_even_len;\n  const lst1_odd_len_plus_lst2_odd_len = lst1_odd_len + lst2_odd_len;\n  const lst1_even_len_plus_lst2_odd_len = lst1_even_len + lst2_odd_len;\n  const lst1_odd_len_plus_lst2_even_len = lst1_odd_len + lst2_even_len;\n  const lst1_odd_len_plus_lst2_odd_len = lst1_odd_len + lst2_odd_len;\n  const lst1_even_len_plus_lst2_even_len_plus_lst1_odd_len = lst1_even_len_plus_lst2_even_len + lst1_odd_len_plus_lst2_odd_len;\n  const lst1_even_len_plus_lst2_odd_len_plus_lst1_odd_len = lst1_even_len_plus_lst2_odd_len + lst1_odd_len_plus_lst2_even_len;\n  const lst1_odd_len_plus_lst2_even_len_plus_lst1_even_len = lst1_odd_len_plus_lst2_even_len + lst1_even_len_plus_lst2_odd_len;\n  const lst1_odd_len_plus_lst2_odd_len_plus_lst1_even_len = lst1_odd_len_plus_lst2_odd_len + lst1_even_len_plus_lst2_even_len;\n  const lst1_odd_len_plus_lst2_odd_len_plus_lst1_odd_len = lst1_odd_len_plus_lst2_odd_len + lst1_odd_len_plus_lst2_even_len;\n  const lst1_even_len_plus_lst2_even_len_plus_lst1_odd_len_plus_lst2_odd_len = lst1_even_len_plus_lst2_even_len + lst1_odd_len_plus_lst2_odd_len;\n  const lst1_even_len_plus_lst2_odd_len_plus_lst1_odd_len_plus_lst2_even_len = lst1_even_len_plus_lst2_odd_len + lst1_odd_len_plus_lst2_even_len;\n  const lst1_odd_len_plus_lst2_even_len_plus_lst1_even_len_plus_lst2_odd_len = lst1_odd_len_plus_lst2_even_len + lst1_even_len_plus_lst2_odd_len;\n  const lst1_odd_len_plus_lst2_odd_len_plus_lst1_even_len_plus_lst2_even_len = lst1_odd_len_plus_lst2_odd_len + lst1_even_len_plus_lst2_even_len;\n  const lst1_odd_len_plus_lst2_odd_len_plus_lst1_odd_len_plus_lst2_even_len = lst1_odd_len_plus_lst2_odd_len + lst1_odd_len_plus_lst2_even_len;\n  const lst1_even_len_plus_lst2_even_len_plus_lst1_odd_len_plus_lst2_odd_len = lst1_even_len_plus_lst2_even_len + lst1_odd_len_plus_lst2_odd_len;\n  const lst1_odd_len_plus_lst2_odd_len_plus_lst1_even_len_plus_lst2_even_len = lst1_odd_len_plus_lst2_odd_len + lst1_even_len_plus_lst2_even_len;\n  const lst1_odd_len_plus_lst2_odd_len_plus_lst1_odd_len_plus_lst2_even_len = lst1_odd_len_plus_lst2_odd_len + lst1_odd_len_plus_lst2_even_len;\n  const l", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram2 = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram3 = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram4 = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram5 = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram6 = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let result = []\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  if (i === len) {\n    return [s, true]\n  } else {\n    return [result.join(''), false]\n  }\n}\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n]\n\ntest.forEach(t => {\n  const [s, c] = t\n  console.log(reverseDelete(s, c))\n})\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(oddCount)\n}\n\n/*\n  GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n  \n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount2 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount3 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount4 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount5 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount6 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount7 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount8 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount9 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount10 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s) => s.filter(even).length\n    return oddCount(s) + evenCount(s)\n  }\n  return lst.map(count)\n}\n\nconst oddCount11 = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1\n    const even = (n) => n % 2 === 0\n    const oddCount = (s) => s.filter(odd).length\n    const evenCount = (s", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = sum;\n  const minSumIndex = 0;\n  const minSumLength = 1;\n  const minSumLengthIndex = 0;\n  const minSumLengthLength = 1;\n  const minSumLengthLengthIndex = 0;\n  const minSumLengthLengthLength = 1;\n  const minSumLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLength = 1;\n  const minSumLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLengthLengthLengthIndex = 0;\n  const minSumLengthLengthLength", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0];\n  const [row1, col1] = grid[1];\n  const [row2, col2] = grid[2];\n  const [row3, col3] = grid[3];\n  const [row4, col4] = grid[4];\n  const [row5, col5] = grid[5];\n  const [row6, col6] = grid[6];\n  const [row7, col7] = grid[7];\n  const [row8, col8] = grid[8];\n  const [row9, col9] = grid[9];\n  const [row10, col10] = grid[10];\n  const [row11, col11] = grid[11];\n  const [row12, col12] = grid[12];\n  const [row13, col13] = grid[13];\n  const [row14, col14] = grid[14];\n  const [row15, col15] = grid[15];\n  const [row16, col16] = grid[16];\n  const [row17, col17] = grid[17];\n  const [row18, col18] = grid[18];\n  const [row19, col19] = grid[19];\n  const [row20, col20] = grid[20];\n  const [row21, col21] = grid[21];\n  const [row22, col22] = grid[22];\n  const [row23, col23] = grid[23];\n  const [row24, col24] = grid[24];\n  const [row25, col25] = grid[25];\n  const [row26, col26] = grid[26];\n  const [row27, col27] = grid[27];\n  const [row28, col28] = grid[28];\n  const [row29, col29] = grid[29];\n  const [row30, col30] = grid[30];\n  const [row31, col31] = grid[31];\n  const [row32, col32] = grid[32];\n  const [row33, col33] = grid[33];\n  const [row34, col34] = grid[34];\n  const [row35, col35] = grid[35];\n  const [row36, col36] = grid[36];\n  const [row37, col37] = grid[37];\n  const [row38, col38] = grid[38];\n  const [row39, col39] = grid[39];\n  const [row40, col40] = grid[40];\n  const [row41, col41] = grid[41];\n  const [row42, col42] = grid[42];\n  const [row43, col43] = grid[43];\n  const [row44, col44] = grid[44];\n  const [row45, col45] = grid[45];\n  const [row46, col46] = grid[46];\n  const [row47, col47] = grid[47];\n  const [row48, col48] = grid[48];\n  const [row49, col49] = grid[49];\n  const [row50, col50] = grid[50];\n  const [row51, col51] = grid[51];\n  const [row52, col52] = grid[52];\n  const [row53, col53] = grid[53];\n  const [row54, col54] = grid[54];\n  const [row55, col55] = grid[55];\n  const [row56, col56] = grid[56];\n  const [row57, col57] = grid[57];\n  const [row58, col58] = grid[58];\n  const [row59, col59] = grid[59];\n  const [row60, col60] = grid[60];\n  const [row61, col61] = grid[61];\n  const [row62, col62] = grid[62];\n  const [row63, col63] = grid[63];\n  const [row64, col64] = grid[64];\n  const [row65, col65] = grid[65];\n  const [row66, col66] = grid[66];\n  const [row67, col67] = grid[67];\n  const [row68, col68] = grid[68];\n  const [row69, col69] = grid[69];\n  const [row70, col70] = grid[70];\n  const [row71, col71] = grid[71];\n  const [row72, col72] = grid[72];\n  const [row73, col73] = grid[73];\n  const [row74, col74] = grid[74];\n  const [row75, col75] = grid[75];\n  const [row76, col76] = grid[76];\n  const [row77, col77] = grid[77];\n  const [row78, col78] = grid[78];\n  const [row79, col79]", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return -1\n    return 1\n  })\n  return sorted\n}\n\nconst test = () => {\n  const arr = [1, 5, 2, 3, 4]\n  console.log(sortArray(arr))\n  console.log(sortArray([-2, -3, -4, -5, -6]))\n  console.log(sortArray([1, 0, 2, 3, 4]))\n}\n\ntest()\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const length = s.length;\n  let i = 0;\n  while (i < length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\n\nIf the nth word does not exist, return the empty string.\n\nNote: The word may be constructed from the characters of the string s.\n\nExamples:\nselectNthWord(\"Hello world\", 1) ==> \"world\"\nselectNthWord(\"Hello world\", 2) ==> \"world\"\nselectNthWord(\"Hello world\", 3) ==> \"\"\nselectNthWord(\"Hello world\", 4) ==> \"\"\nselectNthWord(\"Hello world\", 5) ==> \"\"\nselectNthWord(\"Hello world\", 6) ==> \"world\"\nselectNthWord(\"Hello world\", 7) ==> \"world\"\nselectNthWord(\"Hello world\", 8) ==> \"world\"\nselectNthWord(\"Hello world\", 9) ==> \"world\"\nselectNthWord(\"Hello world\", 10) ==> \"\"\nselectNthWord(\"Hello world\", 11) ==> \"\"\nselectNthWord(\"Hello world\", 12) ==> \"\"\nselectNthWord(\"Hello world\", 13) ==> \"\"\nselectNthWord(\"Hello world\", 14) ==> \"\"\nselectNthWord(\"Hello world\", 15) ==> \"world\"\nselectNthWord(\"Hello world\", 16) ==> \"world\"\nselectNthWord(\"Hello world\", 17) ==> \"world\"\nselectNthWord(\"Hello world\", 18) ==> \"world\"\nselectNthWord(\"Hello world\", 19) ==> \"world\"\nselectNthWord(\"Hello world\", 20) ==> \"world\"\nselectNthWord(\"Hello world\", 21) ==> \"world\"\nselectNthWord(\"Hello world\", 22) ==> \"world\"\nselectNthWord(\"Hello world\", 23) ==> \"world\"\nselectNthWord(\"Hello world\", 24) ==> \"world\"\nselectNthWord(\"Hello world\", 25) ==> \"world\"\nselectNthWord(\"Hello world\", 26) ==> \"world\"\nselectNthWord(\"Hello world\", 27) ==> \"world\"\nselectNthWord(\"Hello world\", 28) ==> \"world\"\nselectNthWord(\"Hello world\", 29) ==> \"world\"\nselectNthWord(\"Hello world\", 30) ==> \"world\"\nselectNthWord(\"Hello world\", 31) ==> \"world\"\nselectNthWord(\"Hello world\", 32) ==> \"world\"\nselectNthWord(\"Hello world\", 33) ==> \"world\"\nselectNthWord(\"Hello world\", 34) ==> \"world\"\nselectNthWord(\"Hello world\", 35) ==> \"world\"\nselectNthWord(\"Hello world\", 36) ==> \"world\"\nselectNthWord(\"Hello world\", 37) ==> \"world\"\nselectNthWord(\"Hello world\", 38) ==> \"world\"\nselectNthWord(\"Hello world\", 39) ==> \"world\"\nselectNthWord(\"Hello world\", 40) ==> \"world\"\nselectNthWord(\"Hello world\", 41) ==> \"world\"\nselectNthWord(\"Hello world\", 42) ==> \"world\"\nselectNthWord(\"Hello world\", 43) ==> \"world\"\nselectNthWord(\"Hello world\", 44) ==> \"world\"\nselectNthWord(\"Hello world\", 45) ==> \"world\"\nselectNthWord(\"Hello world\", 46) ==> \"world\"\nselectNthWord(\"Hello world\", 47) ==> \"world\"\nselectNthWord(\"Hello world\", 48) ==> \"world\"\nselectNthWord(\"Hello world\", 49) ==> \"world\"\nselectNthWord(\"Hello world\", 50) ==> \"world\"\nselectNthWord(\"Hello world\", 51) ==> \"world\"\nselectNthWord(\"Hello world\", 52) ==> \"world\"\nselectNthWord(\"Hello world\", 53) ==> \"world\"\nselectNthWord(\"Hello world\", 54) ==> \"world\"\nselectNthWord(\"Hello world\", 55) ==> \"world\"\nselectNthWord(\"Hello world\", 56) ==> \"world\"\nselectNthWord(\"Hello world\", 57) ==> \"world\"\nselectNthWord(\"Hello world\", 58) ==> \"world\"\nselectNthWord(\"Hello world\", 59) ==> \"world\"\nselectNthWord(\"Hello world\", 60) ==> \"world\"\nselectNthWord(\"Hello world\", 61) ==> \"world\"\nselectNthWord(\"Hello world\", 62) ==> \"world\"\nselectNthWord(\"Hello world\", 63) ==> \"world\"\nselectNthWord(\"Hello world\", 64) ==> \"world\"\nselectNthWord(\"Hello world\", 65) ==> \"world\"\nselectNthWord(\"Hello world\", 66) ==> \"world\"\nselectNthWord(\"Hello world\", 67) ==> \"world\"\nselectNthWord(\"Hello world\", 68) ==> \"world\"\nselectNthWord(\"Hello world\", 69) ==> \"world\"\nselectNthWord(\"Hello world\", 70) ==> \"world\"\nselectNthWord(\"Hello world\", 71) ==> \"world\"\nselectNthWord(\"Hello world\", 72) ==> \"world\"\nselectNthWord(\"Hello world\", 73) ==> \"world\"\nselectNthWord(\"Hello world\", 74) ==> \"world\"\nselectNthWord(\"Hello world\", 75) ==> \"world\"\nselectNthWord(\"Hello world", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestDistance = Infinity;\n  let currentDistance = 0;\n  let currentVowel = '';\n  let currentIndex = 0;\n  let currentVowelIndex = 0;\n  while (currentIndex < wordLength) {\n    currentVowel = word[currentIndex];\n    currentVowelIndex = vowels.indexOf(currentVowel);\n    if (currentVowelIndex!== -1) {\n      currentDistance = Math.abs(currentVowelIndex - currentIndex);\n      if (currentDistance < closestDistance) {\n        closestVowel = currentVowel;\n        closestDistance = currentDistance;\n      }\n    }\n    currentIndex++;\n  }\n  return closestVowel;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  const max = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i]\n    }\n  }\n  return max\n}\n\n/* Returns the shortest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (!strings.length) {\n    return 0\n  }\n  const min = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < min.length) {\n      min = strings[i]\n    }\n  }\n  return min\n}\n\n/* Returns the number of strings in the list.\n  >>> count([])\n  0\n  >>> count(['a', 'b', 'c'])\n  3\n  */\nconst count = (strings) => {\n  return strings.length\n}\n\n/* Returns the number of strings in the list that are equal to the given string.\n  >>> countEqual('', [])\n  0\n  >>> countEqual('a', ['a', 'b', 'c'])\n  1\n  >>> countEqual('a', ['a', 'b', 'a'])\n  2\n  */\nconst countEqual = (string, strings) => {\n  return strings.filter((s) => s === string).length\n}\n\n/* Returns the number of strings in the list that are not equal to the given string.\n  >>> countNotEqual('a', ['a', 'b', 'c'])\n  1\n  >>> countNotEqual('a', ['a', 'b', 'a'])\n  0\n  */\nconst countNotEqual = (string, strings) => {\n  return strings.filter((s) => s!== string).length\n}\n\n/* Returns the number of strings in the list that contain the given string.\n  >>> countContains('a', ['a', 'b', 'c'])\n  1\n  >>> countContains('a', ['a', 'b', 'a'])\n  1\n  */\nconst countContains = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string)!== -1).length\n}\n\n/* Returns the number of strings in the list that do not contain the given string.\n  >>> countNotContains('a', ['a', 'b', 'c'])\n  0\n  >>> countNotContains('a', ['a', 'b', 'a'])\n  1\n  */\nconst countNotContains = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string) === -1).length\n}\n\n/* Returns the number of strings in the list that start with the given string.\n  >>> countStartsWith('a', ['a', 'b', 'c'])\n  1\n  >>> countStartsWith('a', ['a', 'b', 'a'])\n  1\n  */\nconst countStartsWith = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string) === 0).length\n}\n\n/* Returns the number of strings in the list that do not start with the given string.\n  >>> countNotStartsWith('a', ['a', 'b', 'c'])\n  1\n  >>> countNotStartsWith('a', ['a', 'b', 'a'])\n  0\n  */\nconst countNotStartsWith = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string)!== 0).length\n}\n\n/* Returns the number of strings in the list that end with the given string.\n  >>> countEndsWith('a', ['a', 'b', 'c'])\n  1\n  >>> countEndsWith('a', ['a', 'b', 'a'])\n  1\n  */\nconst countEndsWith = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string) === s.length - string.length).length\n}\n\n/* Returns the number of strings in the list that do not end with the given string.\n  >>> countNotEndsWith('a', ['a', 'b', 'c'])\n  1\n  >>> countNotEndsWith('a', ['a', 'b', 'a'])\n  0\n  */\nconst countNotEndsWith = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string)!== s.length - string.length).length\n}\n\n/* Returns the number of strings in the list that contain the given string.\n  >>> countContains('a', ['a', 'b', 'c'])\n  1\n  >>> countContains('a', ['a', 'b', 'a'])\n  1\n  */\nconst countContainsAny = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string)!== -1).length\n}\n\n/* Returns the number of strings in the list that do not contain the given string.\n  >>> countNotContains('a', ['a', 'b', 'c'])\n  0\n  >>> countNotContains('a', ['a', 'b', 'a'])\n  1\n  */\nconst countNotContainsAny = (string, strings) => {\n  return strings.filter((s) => s.indexOf(string) === -1).length\n}\n\n/* Returns the number of strings in the list that start with the given string.\n  >>> countStartsWith('a', ['a', 'b', 'c'])\n  1\n  >>> countStartsWith('a', ['a', 'b', 'a'])\n  1", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const maxCount = 1\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      maxCount = 1\n    } else if (arr[i] === max) {\n      maxCount++\n    }\n  }\n\n  const result = [...new Array(k - 1)].concat([max])\n  const resultCount = k - 1\n\n  for (let i = maxIndex + 1; i < len; i++) {\n    if (arr[i] === max) {\n      result.push(max)\n      resultCount++\n    } else if (arr[i] > max) {\n      result.push(max)\n      resultCount++\n      break\n    }\n  }\n\n  return [...new Array(resultCount)].concat(result)\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements2 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements3 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements4 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] + arr[i + 4];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements5 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] + arr[i + 4] + arr[i + 5];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements6 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] + arr[i + 4] + arr[i + 5] + arr[i + 6];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements7 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] + arr[i + 4] + arr[i + 5] + arr[i + 6] + arr[i + 7];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements8 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] + arr[i + 4] + arr[i + 5] + arr[i + 6] + arr[i + 7] + arr[i + 8];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements9 = (arr, k) => {\n  const result = [];\n  const max = arr.length - k;\n  for (let i = 0; i < max; i++) {\n    const sum = arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] + arr[i + 4] + arr[i + 5] + arr[i + 6] + arr[i + 7] + arr[i + 8] + arr[i + 9];\n    if (sum < 10) {\n      result.push(sum);\n    } else {\n      result.push(sum - 10);\n      result.push(sum);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements10 = (arr,", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest2 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest3 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest4 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest5 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest6 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest7 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest8 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest9 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return odd.concat(even).concat(collatz(n / 2))\n  }\n  return collatz(n)\n}\n\nconst getOddCollatzTest10 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    ", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, i) => i % 2 === 0? word.toLowerCase() : word);\n};\n\n/*\n  Given a string, return a list of all the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abc", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(a => a === sorted[sorted.indexOf(a) + 1]);\n};\n\nexport default isSorted;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n)\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  if (length === 1) {\n    return \"YES\"\n  }\n  if (isPrime(length)) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(Math.abs(arr[i]), arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n).fill(0)\n  const dp_min = new Array(n).fill(0)\n  const dp_max = new Array(n).fill(0)\n  const dp_min_max = new Array(n).fill(0)\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp[i][j] = grid[i][j]\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1])\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp_min[i][j] = dp[i][j]\n      } else {\n        dp_min[i][j] = Math.min(dp_min[i - 1][j], dp_min[i][j - 1])\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp_max[i][j] = dp[i][j]\n      } else {\n        dp_max[i][j] = Math.max(dp_max[i - 1][j], dp_max[i][j - 1])\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp_min_max[i][j] = dp_min[i][j]\n      } else {\n        dp_min_max[i][j] = Math.min(dp_min_max[i - 1][j], dp_min_max[i][j - 1])\n      }\n    }\n  }\n\n  let path = new Array(k).fill(0)\n  let index = 0\n  let min_index = 0\n  let min_value = dp_min_max[0][0]\n  let max_value = dp_min_max[n - 1][m - 1]\n  let min_value_max = dp_min_max[n - 1][m - 1]\n  let max_value_min = dp_min_max[0][0]\n\n  while (index < k) {\n    if (dp_min_max[index][0] < min_value) {\n      min_value = dp_min_max[index][0]\n      min_index = index\n    }\n\n    if (dp_min_max[index][m - 1] > max_value) {\n      max_value = dp_min_max[index][m - 1]\n      max_index = index\n    }\n\n    if (dp_min_max[index][0] > dp_min_max[index][m - 1]) {\n      min_value_max = dp_min_max[index][0]\n      max_value_min = dp_min_max[index][m - 1]\n    }\n\n    path[index] = grid[index][0]\n    index++\n  }\n\n  return path\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\nconsole.log(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  const divisor = Math.floor(a / b);\n  return greatestCommonDivisor(b, a % b);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return [...new Array(n + 1).fill(1),...new Array(n + 1).fill(c)];\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result = result * i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  let index = 0\n  while (index < string.length) {\n    const char = string[index]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      const top = stack.pop()\n      if (top === '[') {\n        return true\n      }\n    }\n    index++\n  }\n  return stack.length === 0\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\nconst testSumSquares = () => {\n  const lst = [1,2,3];\n  console.log(sumSquares(lst));\n  lst = [1,4,9];\n  console.log(sumSquares(lst));\n  lst = [1,3,5,7];\n  console.log(sumSquares(lst));\n  lst = [1.4,4.2,0];\n  console.log(sumSquares(lst));\n  lst = [-2.4,1,1];\n  console.log(sumSquares(lst));\n};\n\ntestSumSquares();\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that returns true if the last two characters in a given string are both alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n  const lastTwoChars = txt.slice(-2);\n  if (lastTwoChars.match(/[a-zA-Z]/) && lastTwoChars.match(/[a-zA-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that returns true if the last three characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreALetter = (txt) => {\n  const lastThreeChars = txt.slice(-3);\n  if (lastThreeChars.match(/[a-zA-Z]/) && lastThreeChars.match(/[a-zA-Z]/) && lastThreeChars.match(/[a-zA-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that returns true if the last four characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreALetter = (txt) => {\n  const lastFourChars = txt.slice(-4);\n  if (lastFourChars.match(/[a-zA-Z]/) && lastFourChars.match(/[a-zA-Z]/) && lastFourChars.match(/[a-zA-Z]/) && lastFourChars.match(/[a-zA-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that returns true if the last five characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreALetter = (txt) => {\n  const lastFiveChars = txt.slice(-5);\n  if (lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that returns true if the last six characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastSixCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSixCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSixCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSixCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSixCharsAreALetter = (txt) => {\n  const lastSixChars = txt.slice(-6);\n  if (lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that returns true if the last seven characters in a given string are all alphabetic", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    let k = (i + j) / 2;\n    if (arr[k] < arr[k + 1]) {\n      i = k + 1;\n    } else {\n      j = k;\n    }\n  }\n  return i;\n};\n\n/*\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3,4,5,6]) = -1\n  canArrange([1,2,3,4,5,6,7]) = -1\n  canArrange([1,2,3,4,5,6,7,8]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return largest === -Infinity? (smallest === Infinity? (null, null) : (smallest, largest)) : largestSmallestIntegers(lst.filter((x) => x!== largest));\n};\n\nconst largestSmallestIntegers = [2, 4, 1, 3, 5, 7];\nconsole.log(largestSmallestIntegers(largestSmallestIntegers));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a;\n    }\n    if (a < b) {\n      return b;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of the same type, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return true;\n    }\n    if (a < b) {\n      return false;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of different types, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareThree = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return true;\n    }\n    if (a < b) {\n      return false;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of different types, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareFour = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return true;\n    }\n    if (a < b) {\n      return false;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of different types, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareFive = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return true;\n    }\n    if (a < b) {\n      return false;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of different types, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareSix = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return true;\n    }\n    if (a < b) {\n      return false;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of different types, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareSeven = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return true;\n    }\n    if (a < b) {\n      return false;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of different types, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareEight = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return true;\n    }\n    if (a < b) {\n      return false;\n    }\n    return null;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two variables of different types, and returns\n  whether the first variable is larger than the second.\n  Return null if the values are equal.\n  */\nconst compareNine = (a, b) => {\n  if (typeof a === '", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n;", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1);\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) / 2;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) / 6;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) / 24;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) * (n - i + 5) / 120;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) * (n - i + 5) * (n - i + 6) / 720;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) * (n - i + 5) * (n - i + 6) * (n - i + 7) / 5040;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) * (n - i + 5) * (n - i + 6) * (n - i + 7) * (n - i + 8) / 40320;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) * (n - i + 5) * (n - i + 6) * (n - i + 7) * (n - i + 8) * (n - i + 9) / 362880;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial11 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) * (n - i + 5) * (n - i + 6) * (n - i + 7) * (n - i + 8) * (n - i + 9) * (n - i + 10) / 3628800;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial12 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= (n - i + 1) * (n - i + 2) * (n - i + 3) * (n - i + 4) * (n - i + 5) * (n - i + 6", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(text))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(text)))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpaces = (text) => {\n  return fixSpaces(unfixSpaces(fixSpaces(unfixSpaces(text))))\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnfixSpacesAndFixSpacesAndUnfixSpacesAndFixSpaces", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll]$/;\n  return regex.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll]$/;\n  return regex.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll]$/;\n  return regex.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll]$/;\n  return regex.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck5 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll]$/;\n  return regex.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck6 = (file_name) =>", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = primes.indexOf(word.length)\n    if (index > -1) {\n      newWords.push(word)\n      primes.splice(index, 1)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/');\n  const [numerator, denominator] = n.split('/');\n  const numerator = parseInt(numerator, 10);\n  const denominator = parseInt(denominator, 10);\n  if (numerator === 0) {\n    return false;\n  }\n  if (numerator === denominator) {\n    return true;\n  }\n  if (numerator > denominator) {\n    return false;\n  }\n  if (numerator < denominator) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(simplify('1/5', '5/1'));\nconsole.log(simplify('1/6', '2/1'));\nconsole.log(simplify('7/10', '10/2'));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  const sorted", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 1 && nums[i] % 100 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples2 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples3 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples4 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples5 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples6 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples7 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples8 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples9 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples10 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples11 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === 3 * (i + j + k) / 2) {\n          result += 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples12 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++)", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const distance = (planet1 === \"sun\")? 0 : Math.abs(planet1.toLowerCase().indexOf(planet2.toLowerCase()) - planet1.length);\n  const planets = [\"sun\", \"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  return planets.filter(x => x.toLowerCase().indexOf(planet1.toLowerCase()) >= distance && x.toLowerCase().indexOf(planet2.toLowerCase()) >= distance);\n};\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sorted.map(s => s.length + sum);\n};\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"wv\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"wv\", \"xv\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"wv\", \"xv\", \"yv\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"wv\", \"xv\", \"yv\", \"zv\"],\n];\n\ntest.forEach(t => {\n  console.log(sortedListSum(t));\n});\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo')\n  'foo'\n  >>> stringSequence(5, 'foo')\n  'foo 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str) => {\n  let result = str;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar')\n  'foo bar'\n  >>> stringSequence(5, 'foo', 'bar')\n  'foo bar 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str1, str2) => {\n  let result = str1 + str2;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar', 'baz')\n  'foo bar baz'\n  >>> stringSequence(5, 'foo', 'bar', 'baz')\n  'foo bar baz 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str1, str2, str3) => {\n  let result = str1 + str2 + str3;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'quux')\n  'foo bar baz quux'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'quux')\n  'foo bar baz quux 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str1, str2, str3, str4) => {\n  let result = str1 + str2 + str3 + str4;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'quux', 'wibble')\n  'foo bar baz quux wibble'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'quux', 'wibble')\n  'foo bar baz quux wibble 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str1, str2, str3, str4, str5) => {\n  let result = str1 + str2 + str3 + str4 + str5;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'quux', 'wibble', 'wobble')\n  'foo bar baz quux wibble wobble'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'quux', 'wibble', 'wobble')\n  'foo bar baz quux wibble wobble 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str1, str2, str3, str4, str5, str6) => {\n  let result = str1 + str2 + str3 + str4 + str5 + str6;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'quux', 'wibble', 'wobble', 'wubble')\n  'foo bar baz quux wibble wobble wubble'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'quux', 'wibble', 'wobble', 'wubble')\n  'foo bar baz quux wibble wobble wubble 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str1, str2, str3, str4, str5, str6, str7) => {\n  let result = str1 + str2 + str3 + str4 + str5 + str6 + str7;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'quux', 'wibble', 'wobble', 'wubble', 'wubble')\n  'foo bar baz quux wibble wobble wubble wubble wubble'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'quux', 'wibble', 'wobble', 'wubble', 'wubble')\n  'foo bar baz quux wibble wobble wubble wubble 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, str1, str2, str3, str4, str5, str6, str7, str8) => {\n  let result = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8;\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'quux', 'wibble', 'wobble',", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst test = () => {\n  let x = xOrY(7, 34, 12);\n  let y = xOrY(15, 8, 5);\n  console.log(x);\n  console.log(y);\n}\n\ntest();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, x) => acc + x * x, 0);\n  return sum;\n};\n\nexport default doubleTheDifference;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare9 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare10 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare11 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare12 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare13 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare14 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare15 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math.abs(game[i] - guess[i])\n  }\n  return diff\n}\n\nconst compare16 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    diff[i] = Math", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.map(ext => ext.split('.').reduce((a, b) => a - b.length, 0))\n  const maxStrength = Math.max(...strength)\n  const maxExtension = extensions.find(ext => strength[ext] === maxStrength)\n  return `${class_name}.${maxExtension}`\n}\n\nconst getClass = (class_name, extensions) => {\n  const class_name_without_extensions = class_name.split('.').slice(0, -1)\n  const class_name_with_extensions = class_name.split('.').slice(0, -1)\n  const class_name_with_extensions_without_extensions = class_name_without_extensions.concat(extensions)\n  const class_name_with_extensions_with_extensions = class_name_with_extensions_without_extensions.concat(extensions)\n  const class_name_with_extensions_with_extensions_without_extensions = class_name_with_extensions_with_extensions.concat(extensions)\n  const class_name_with_extensions_with_extensions_with_extensions = class_name_with_extensions_with_extensions_without_extensions.concat(extensions)\n  const class_name_with_extensions_with_extensions_with_extensions_without_extensions = class_name_with_extensions_with_extensions_with_extensions.concat(extensions)\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions = class_name_with_extensions_with_extensions_with_extensions_without_extensions.concat(extensions)\n\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions}`\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions}`\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions}`\n\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions}`\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions}`\n\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions}`\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions}`\n\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions}`\n\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions}`\n\n  const class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_without_extensions = `${class_name_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions_with_extensions", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  const a_substr = a.substr(0, b_length);\n  const b_substr = b.substr(0, b_length);\n  if (a_substr === b_substr) {\n    return true;\n  }\n  for (let i = 0; i < a_length; i++) {\n    if (a_substr === b_substr.replace(a[i], b[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"));\nconsole.log(cycpatternCheck(\"hello\",\"ell\"));\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"));\nconsole.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    while (num > 0) {\n        count += num % 2;\n        num = Math.floor(num / 2);\n    }\n    return (count % 2 === 0)? (1, count) : (2, count);\n};\n\n/*GReturns a tuple with the sum of all digits in the given number.\n\n   Example:\n      sumDigits(12) ==> (1, 2, 3)\n      sumDigits(123) ==> (1, 2, 3)\n      sumDigits(1234) ==> (1, 2, 3, 4)\n      sumDigits(12345) ==> (1, 2, 3, 4, 5)\n      sumDigits(123456) ==> (1, 2, 3, 4, 5, 6)\n      sumDigits(1234567) ==> (1, 2, 3, 4, 5, 6, 7)\n      sumDigits(12345678) ==> (1, 2, 3, 4, 5, 6, 7, 8)\n      sumDigits(123456789) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9)\n      sumDigits(1234567890) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  */\nconst sumDigits = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (1, sum) : (2, sum);\n};\n\n/*GReturns a tuple with the sum of all digits in the given number.\n\n   Example:\n      sumDigits(12) ==> (1, 2, 3)\n      sumDigits(123) ==> (1, 2, 3)\n      sumDigits(1234) ==> (1, 2, 3, 4)\n      sumDigits(12345) ==> (1, 2, 3, 4, 5)\n      sumDigits(123456) ==> (1, 2, 3, 4, 5, 6)\n      sumDigits(1234567) ==> (1, 2, 3, 4, 5, 6, 7)\n      sumDigits(12345678) ==> (1, 2, 3, 4, 5, 6, 7, 8)\n      sumDigits(123456789) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9)\n      sumDigits(1234567890) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  */\nconst sumDigits2 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (1, sum) : (2, sum);\n};\n\n/*GReturns a tuple with the sum of all digits in the given number.\n\n   Example:\n      sumDigits(12) ==> (1, 2, 3)\n      sumDigits(123) ==> (1, 2, 3)\n      sumDigits(1234) ==> (1, 2, 3, 4)\n      sumDigits(12345) ==> (1, 2, 3, 4, 5)\n      sumDigits(123456) ==> (1, 2, 3, 4, 5, 6)\n      sumDigits(1234567) ==> (1, 2, 3, 4, 5, 6, 7)\n      sumDigits(12345678) ==> (1, 2, 3, 4, 5, 6, 7, 8)\n      sumDigits(123456789) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9)\n      sumDigits(1234567890) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  */\nconst sumDigits3 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (1, sum) : (2, sum);\n};\n\n/*GReturns a tuple with the sum of all digits in the given number.\n\n   Example:\n      sumDigits(12) ==> (1, 2, 3)\n      sumDigits(123) ==> (1, 2, 3)\n      sumDigits(1234) ==> (1, 2, 3, 4)\n      sumDigits(12345) ==> (1, 2, 3, 4, 5)\n      sumDigits(123456) ==> (1, 2, 3, 4, 5, 6)\n      sumDigits(1234567) ==> (1, 2, 3, 4, 5, 6, 7)\n      sumDigits(12345678) ==> (1, 2, 3, 4, 5, 6, 7, 8)\n      sumDigits(123456789) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9)\n      sumDigits(1234567890) ==> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  */\nconst sumDigits4 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (1, sum) : (2, sum);\n};\n\n/*GReturns a tuple with the sum of all digits in the given number.\n\n   Example:\n      sumDigits(12) ==> (1, 2, 3)\n      sumDigits(123) ==> (1, 2, 3)\n      sumDigits(1234) ==> (1, 2, 3, 4)\n      sumDigits(12345) ==> (1, 2, 3, 4, 5)\n      sumDigits(123456) ==> (1, 2, 3, 4, 5, 6)\n      ", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'i';\n    } else if (digit == 2) {\n      result += 'ii';\n    } else if (digit == 3) {\n      result += 'iii';\n    } else if (digit == 4) {\n      result += 'iv';\n    } else if (digit == 5) {\n      result += 'v';\n    } else if (digit == 6) {\n      result += 'vi';\n    } else if (digit == 7) {\n      result += 'vii';\n    } else if (digit == 8) {\n      result += 'viii';\n    } else if (digit == 9) {\n      result += 'ix';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'I';\n    } else if (digit == 2) {\n      result += 'II';\n    } else if (digit == 3) {\n      result += 'III';\n    } else if (digit == 4) {\n      result += 'IV';\n    } else if (digit == 5) {\n      result += 'V';\n    } else if (digit == 6) {\n      result += 'VI';\n    } else if (digit == 7) {\n      result += 'VII';\n    } else if (digit == 8) {\n      result += 'VIII';\n    } else if (digit == 9) {\n      result += 'IX';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in mixed case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMixedCase(19) == 'xix'\n  >>> intToMixedCase(152) == 'clii'\n  >>> intToMixedCase(426) == 'cdxxvi'\n  */\nconst intToMixedCase = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'X';\n    } else if (digit == 2) {\n      result += 'II';\n    } else if (digit == 3) {\n      result += 'III';\n    } else if (digit == 4) {\n      result += 'IV';\n    } else if (digit == 5) {\n      result += 'V';\n    } else if (digit == 6) {\n      result += 'VI';\n    } else if (digit == 7) {\n      result += 'VII';\n    } else if (digit == 8) {\n      result += 'VIII';\n    } else if (digit == 9) {\n      result += 'IX';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters with a prefix. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToPrefixedLowerCase(19) == 'xix'\n  >>> intToPrefixedLowerCase(152) == 'clii'\n  >>> intToPrefixedLowerCase(426) == 'cdxxvi'\n  */\nconst intToPrefixedLowerCase = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'x';\n    } else if (digit == 2) {\n      result += 'ii';\n    } else if (digit == 3) {\n      result += 'iii';\n    } else if (digit == 4) {\n      result += 'iv';\n    } else if (digit == 5) {\n      result += 'v';\n    } else if (digit == 6) {\n      result += 'vi';\n    } else if (digit == 7) {\n      result += 'vii';\n    } else if (digit == 8) {\n      result += 'viii';\n    } else if (digit == 9) {\n      result += 'ix';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters with a prefix. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToPrefixedUpperCase(19) == 'XIX'\n  >>> intToPrefixedUpperCase(152) == 'CLII'\n  >>> intToPrefixedUpperCase(426) == 'CDXXVI'\n  */\nconst intToPrefixedUpperCase = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result += 'X';\n    } else if (digit == 2) {\n      result += 'II';\n    } else if (digit == 3) {\n      result += 'III';\n    } else if (digit == 4) {\n      result += 'IV';\n    } else if (digit == 5) {\n      result += 'V';\n    } else if (digit ==", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words.length;\n  const maxCount = words", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining < need) {\n    return [need, remaining];\n  }\n  return [number, remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach((char) => {\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCase = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach((char) => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCase = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach((char) => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCase = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach((char) => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach((char) => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach((char) => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach((char) => {\n    if (counts[char.toLowerCase", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra11 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra12 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra13 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  }\n  return undefined\n}\n\nconst doAlgebra14 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len === len2) {\n    let result = 0\n    for (let i = 0; i < len; i++) {\n      result += operator[i]", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  let result = \"\";\n  while (i < j) {\n    if (s[i].toUpperCase() === s[j].toUpperCase()) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i].toUpperCase() < s[j].toUpperCase()) {\n      result += s[i];\n      i++;\n    } else {\n      result += s[j];\n      j--;\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined) {\n    return undefined;\n  }\n  if (text === '') {\n    return '00000000';\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5d4e2c5e5", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(\" \");\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === \"o\") {\n      beats.push(4);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(2);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\") {\n      beats.push(1);\n    } else if (notes[i] === \"o | '\")", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.\n  Count overlapping cases.\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.\n  Count overlapping cases.\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.\n  Count overlapping cases.\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.\n  Count overlapping cases.\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.\n  Count overlapping cases.\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.\n  Count overlapping cases.\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.\n  Count overlapping cases.\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string.", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number >= 0 && number <= 9) {\n      sortedArray.push(number)\n    }\n  }\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  \"zero\"\n  \"one\"\n  \"two\"\n  \"three\"\n  \"four\"\n  \"five\"\n  \"six\"\n  \"seven\"\n  \"eight\"\n  \"nine\"\n  \"ten\"\n  \"eleven\"\n  \"twelve\"\n  \"thirteen\"\n  \"fourteen\"\n  \"fifteen\"\n  \"sixteen\"\n  \"seventeen\"\n  \"eighteen\"\n  \"nineteen\"\n  \"twenty\"\n  \"thirty\"\n  \"forty\"\n  \"fifty\"\n  \"sixty\"\n  \"seventy\"\n  \"eighty\"\n  \"ninety\"\n  \"one hundred\"\n  \"two hundred\"\n  \"three hundred\"\n  \"four hundred\"\n  \"five hundred\"\n  \"six hundred\"\n  \"seven hundred\"\n  \"eight hundred\"\n  \"nine hundred\"\n  \"one thousand\"\n  \"two thousand\"\n  \"three thousand\"\n  \"four thousand\"\n  \"five thousand\"\n  \"six thousand\"\n  \"seven thousand\"\n  \"eight thousand\"\n  \"nine thousand\"\n  \"ten thousand\"\n  \"eleven thousand\"\n  \"twelve thousand\"\n  \"thirteen thousand\"\n  \"fourteen thousand\"\n  \"fifteen thousand\"\n  \"sixteen thousand\"\n  \"seventeen thousand\"\n  \"eighteen thousand\"\n  \"nineteen thousand\"\n  \"twenty thousand\"\n  \"thirty thousand\"\n  \"forty thousand\"\n  \"fifty thousand\"\n  \"sixty thousand\"\n  \"seventy thousand\"\n  \"eighty thousand\"\n  \"ninety thousand\"\n  \"one hundred fifty\"\n  \"one hundred sixty\"\n  \"one hundred seventy\"\n  \"one hundred eighty\"\n  \"one hundred ninety\"\n  \"two hundred fifty\"\n  \"two hundred sixty\"\n  \"two hundred seventy\"\n  \"two hundred eighty\"\n  \"two hundred ninety\"\n  \"three hundred fifty\"\n  \"three hundred sixty\"\n  \"three hundred seventy\"\n  \"three hundred eighty\"\n  \"three hundred ninety\"\n  \"four hundred fifty\"\n  \"four hundred sixty\"\n  \"four hundred seventy\"\n  \"four hundred eighty\"\n  \"four hundred ninety\"\n  \"five hundred fifty\"\n  \"five hundred sixty\"\n  \"five hundred seventy\"\n  \"five hundred eighty\"\n  \"five hundred ninety\"\n  \"six hundred fifty\"\n  \"six hundred sixty\"\n  \"six hundred seventy\"\n  \"six hundred eighty\"\n  \"six hundred ninety\"\n  \"seven hundred fifty\"\n  \"seven hundred sixty\"\n  \"seven hundred seventy\"\n  \"seven hundred eighty\"\n  \"seven hundred ninety\"\n  \"eight hundred fifty\"\n  \"eight hundred sixty\"\n  \"eight hundred seventy\"\n  \"eight hundred eighty\"\n  \"eight hundred ninety\"\n  \"nine hundred fifty\"\n  \"nine hundred sixty\"\n  \"nine hundred seventy\"\n  \"nine hundred eighty\"\n  \"nine hundred ninety\"\n  \"ten hundred fifty\"\n  \"ten hundred sixty\"\n  \"ten hundred seventy\"\n  \"ten hundred eighty\"\n  \"ten hundred ninety\"\n  \"eleven hundred fifty\"\n  \"eleven hundred sixty\"\n  \"eleven hundred seventy\"\n  \"eleven hundred eighty\"\n  \"eleven hundred ninety\"\n  \"twelve hundred fifty\"\n  \"twelve hundred sixty\"\n  \"twelve hundred seventy\"\n  \"twelve hundred eighty\"\n  \"twelve hundred ninety\"\n  \"thirteen hundred fifty\"\n  \"thirteen hundred sixty\"\n  \"thirteen hundred seventy\"\n  \"thirteen hundred eighty\"\n  \"thirteen hundred ninety\"\n  \"fourteen hundred fifty\"\n  \"fourteen hundred sixty\"\n  \"fourteen hundred seventy\"\n  \"fourteen hundred eighty\"\n  \"fourteen hundred ninety\"\n  \"fifteen hundred fifty\"\n  \"fifteen hundred sixty\"\n  \"fifteen hundred seventy\"\n  \"fifteen hundred eighty\"\n  \"fifteen hundred ninety\"\n  \"sixteen hundred fifty\"\n  \"sixteen hundred sixty\"\n  \"sixteen hundred seventy\"\n  \"sixteen hundred eighty\"\n  \"sixteen hundred ninety\"\n  \"seventeen hundred fifty\"\n  \"seventeen hundred sixty\"\n  \"seventeen hundred seventy\"\n  \"seventeen hundred eighty\"\n  \"seventeen hundred ninety\"\n  \"eighteen hundred fifty\"\n  \"eighteen hundred sixty\"\n  \"eighteen hundred seventy\"\n  \"eighteen hundred eighty\"\n  \"eighteen hundred ninety\"\n  \"nineteen hundred fifty\"\n  \"nineteen hundred sixty\"\n  \"nineteen hundred seventy\"\n  \"nineteen hundred eighty\"\n  \"nineteen hundred ninety\"\n  \"twenty hundred fifty\"\n  \"twenty hundred sixty\"\n  \"twenty hundred seventy\"\n  \"twenty hundred eighty\"\n  \"twenty hundred ninety\"\n  \"thirty hundred fifty\"\n  \"thirty hundred sixty\"\n  \"thirty hundred seventy\"\n  \"thirty hundred eighty\"\n  \"thirty hundred ninety\"\n  \"forty hundred fifty\"\n  \"forty hundred sixty\"\n  \"forty hundred seventy\"\n  \"forty hundred eighty\"\n  \"forty hundred ninety\"\n  \"fifty hundred fifty\"\n  \"fifty hundred sixty\"\n  \"fifty hundred seventy\"\n  \"fifty hundred eighty\"\n  \"fifty hundred ninety\"\n  \"sixty hundred fifty\"\n  \"sixty hundred sixty\"\n  \"sixty hundred seventy\"\n  \"sixty hundred eighty\"\n  \"sixty hundred ninety\"\n  \"seventy hundred fifty\"\n  \"seventy hundred sixty\"\n  \"seventy hundred seventy\"\n  \"seventy hundred eighty\"\n  \"seventy hundred", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsString = number.toString();\n  const integerPart = numberAsString.split('.')[0];\n  const decimalPart = numberAsString.split('.')[1];\n  const integerPartLength = integerPart.length;\n  const decimalPartLength = decimalPart.length;\n  const integerPartLengthDifference = integerPartLength - decimalPartLength;\n  const integerPartLengthDifferenceIsPositive = integerPartLengthDifference > 0;\n  const decimalPartLengthDifferenceIsPositive = decimalPartLength > 0;\n  const integerPartLengthDifferenceIsNegative = integerPartLengthDifference < 0;\n  const decimalPartLengthDifferenceIsNegative = decimalPartLengthDifference < 0;\n  const integerPartLengthDifferenceIsZero = integerPartLengthDifference === 0;\n  const decimalPartLengthDifferenceIsZero = decimalPartLengthDifference === 0;\n  const integerPartLengthDifferenceIsOne = integerPartLengthDifference === 1;\n  const decimalPartLengthDifferenceIsOne = decimalPartLengthDifference === 1;\n  const integerPartLengthDifferenceIsTwo = integerPartLengthDifference === 2;\n  const decimalPartLengthDifferenceIsTwo = decimalPartLengthDifference === 2;\n  const integerPartLengthDifferenceIsThree = integerPartLengthDifference === 3;\n  const decimalPartLengthDifferenceIsThree = decimalPartLengthDifference === 3;\n  const integerPartLengthDifferenceIsFour = integerPartLengthDifference === 4;\n  const decimalPartLengthDifferenceIsFour = decimalPartLengthDifference === 4;\n  const integerPartLengthDifferenceIsFive = integerPartLengthDifference === 5;\n  const decimalPartLengthDifferenceIsFive = decimalPartLengthDifference === 5;\n  const integerPartLengthDifferenceIsSix = integerPartLengthDifference === 6;\n  const decimalPartLengthDifferenceIsSix = decimalPartLengthDifference === 6;\n  const integerPartLengthDifferenceIsSeven = integerPartLengthDifference === 7;\n  const decimalPartLengthDifferenceIsSeven = decimalPartLengthDifference === 7;\n  const integerPartLengthDifferenceIsEight = integerPartLengthDifference === 8;\n  const decimalPartLengthDifferenceIsEight = decimalPartLengthDifference === 8;\n  const integerPartLengthDifferenceIsNine = integerPartLengthDifference === 9;\n  const decimalPartLengthDifferenceIsNine = decimalPartLengthDifference === 9;\n  const integerPartLengthDifferenceIsTen = integerPartLengthDifference === 10;\n  const decimalPartLengthDifferenceIsTen = decimalPartLengthDifference === 10;\n  const integerPartLengthDifferenceIsEleven = integerPartLengthDifference === 11;\n  const decimalPartLengthDifferenceIsEleven = decimalPartLengthDifference === 11;\n  const integerPartLengthDifferenceIsTwelve = integerPartLengthDifference === 12;\n  const decimalPartLengthDifferenceIsTwelve = decimalPartLengthDifference === 12;\n  const integerPartLengthDifferenceIsThirteen = integerPartLengthDifference === 13;\n  const decimalPartLengthDifferenceIsThirteen = decimalPartLengthDifference === 13;\n  const integerPartLengthDifferenceIsFourteen = integerPartLengthDifference === 14;\n  const decimalPartLengthDifferenceIsFourteen = decimalPartLengthDifference === 14;\n  const integerPartLengthDifferenceIsFifteen = integerPartLengthDifference === 15;\n  const decimalPartLengthDifferenceIsFifteen = decimalPartLengthDifference === 15;\n  const integerPartLengthDifferenceIsSixteen = integerPartLengthDifference === 16;\n  const decimalPartLengthDifferenceIsSixteen = decimalPartLengthDifference === 16;\n  const integerPartLengthDifferenceIsSeventeen = integerPartLengthDifference === 17;\n  const decimalPartLengthDifferenceIsSeventeen = decimalPartLengthDifference === 17;\n  const integerPartLengthDifferenceIsEighteen = integerPartLengthDifference === 18;\n  const decimalPartLengthDifferenceIsEighteen = decimalPartLengthDifference === 18;\n  const integerPartLengthDifferenceIsNineteen = integerPartLengthDifference === 19;\n  const decimalPartLengthDifferenceIsNineteen = decimalPartLengthDifference === 19;\n  const integerPartLengthDifferenceIsTwenty = integerPartLengthDifference === 20;\n  const decimalPartLengthDifferenceIsTwenty = decimalPartLengthDifference === 20;\n  const integerPartLengthDifferenceIsTwentyOne = integerPartLengthDifference === 21;\n  const decimalPartLengthDifferenceIsTwentyOne = decimalPartLengthDifference === 21;\n  const integerPartLengthDifferenceIsTwentyTwo = integerPartLengthDifference === 22;\n  const decimalPartLengthDifferenceIsTwentyTwo = decimalPartLengthDifference === 22;\n  const integerPartLengthDifferenceIsTwentyThree = integerPartLengthDifference === 23;\n  const decimalPartLengthDifferenceIsTwentyThree = decimalPartLengthDifference === 23;\n  const integerPartLengthDifferenceIsTwentyFour = integerPartLengthDifference === 24;\n  const decimalPartLengthDifferenceIsTwentyFour = decimalPartLengthDifference === 24;\n  const integerPartLengthDifferenceIsTwentyFive = integerPartLengthDifference === 25;\n  const decimalPartLengthDifferenceIsTwentyFive = decimalPartLengthDifference === 25;\n  const integerPartLengthDifferenceIsTwentySix = integerPartLengthDifference === 26;\n  const decimalPartLengthDifferenceIsTwentySix = decimalPartLengthDifference === 26;\n  const integerPartLengthDifferenceIsTwentySeven = integerPartLengthDifference === 27;\n  const decimalPartLengthDifferenceIsTwentySeven = decimalPartLengthDifference === 27;\n  const integerPartLengthDifferenceIsTwentyEight = integerPartLengthDifference === 28;\n  const decimalPartLengthDifferenceIsTwentyEight = decimalPartLengthDifference === 28;\n  const integerPartLengthDifferenceIsTwentyNine = integerPartLengthDifference === 29;\n  const decimalPartLengthDifferenceIsTwentyNine = decimalPartLengthDifference === 29;\n  const integerPartLengthDifferenceIsThirty = integerPartLengthDifference === 30;\n  const decimalPartLengthDifferenceIsThirty = decimalPartLengthDifference === 30;\n  const integerPartLengthDifferenceIsThirtyOne = integerPartLengthDifference === 31;\n  const decimalPartLengthDifferenceIsThirtyOne = decimalPartLengthDifference === 31;\n  const integerPartLengthDifferenceIsThirtyTwo = integerPartLengthDifference === 32;\n  const decimalPartLengthDifferenceIsThirtyTwo = decimalPartLengthDifference === 32;\n  const integerPartLengthDiff", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (Math.abs(current - min) < Math.abs(current - closest[0])) {\n      closest[0] = current;\n    }\n    if (Math.abs(current - max) < Math.abs(current - closest[1])) {\n      closest[1] = current;\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (Math.abs(current - min) < Math.abs(current - closest[0])) {\n      closest[0] = current;\n    }\n    if (Math.abs(current - max) < Math.abs(current - closest[1])) {\n      closest[1] = current;\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (Math.abs(current - min) < Math.abs(current - closest[0])) {\n      closest[0] = current;\n    }\n    if (Math.abs(current - max) < Math.abs(current - closest[1])) {\n      closest[1] = current;\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (Math.abs(current - min) < Math.abs(current - closest[0])) {\n      closest[0] = current;\n    }\n    if (Math.abs(current - max) < Math.abs(current - closest[1])) {\n      closest[1] = current;\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (Math.abs(current - min) < Math.abs(current - closest[0])) {\n      closest[0] = current;\n    }\n    if (Math.abs(current - max) < Math.abs(current - closest[1])) {\n      closest[1] = current;\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (n", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map((x) => x * scale)\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of strings\n  * @example\n  * // Filters the specified list of arbitrary Python values for strings only\n  * filterStrings(['a', 3.14, 5])\n  * // => ['a', '3.14', '5']\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for booleans only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of booleans\n  * @example\n  * // Filters the specified list of arbitrary Python values for booleans only\n  * filterBooleans(['a', 3.14, 5])\n  * // => [true, false, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for objects only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of objects\n  * @example\n  * // Filters the specified list of arbitrary Python values for objects only\n  * filterObjects(['a', 3.14, 5])\n  * // => [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for arrays only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of arrays\n  * @example\n  * // Filters the specified list of arbitrary Python values for arrays only\n  * filterArrays(['a', 3.14, 5])\n  * // => [['a'], [3.14], [5]]\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for numbers only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of numbers\n  * @example\n  * // Filters the specified list of arbitrary Python values for numbers only\n  * filterNumbers(['a', 3.14, 5])\n  * // => [5]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of strings\n  * @example\n  * // Filters the specified list of arbitrary Python values for strings only\n  * filterStrings(['a', 3.14, 5])\n  * // => ['a', '3.14', '5']\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for booleans only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of booleans\n  * @example\n  * // Filters the specified list of arbitrary Python values for booleans only\n  * filterBooleans(['a', 3.14, 5])\n  * // => [true, false, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for objects only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of objects\n  * @example\n  * // Filters the specified list of arbitrary Python values for objects only\n  * filterObjects(['a', 3.14, 5])\n  * // => [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for arrays only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of arrays\n  * @example\n  * // Filters the specified list of arbitrary Python values for arrays only\n  * filterArrays(['a', 3.14, 5])\n  * // => [['a'], [3.14], [5]]\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for numbers only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of numbers\n  * @example\n  * // Filters the specified list of arbitrary Python values for numbers only\n  * filterNumbers(['a', 3.14, 5])\n  * // => [5]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of strings\n  * @example\n  * // Filters the specified list of arbitrary Python values for strings only\n  * filterStrings(['a', 3.14, 5])\n  * // => ['a', '3.14', '5']\n  */\nconst filterStrings = (values) => {\n  return values.filter(", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n  * Returns the index of the first occurrence of a substring in a string\n  *\n  * @param {string} string The string to search\n  * @param {string} substring The substring to search for\n  * @returns {number} The index of the first occurrence of a substring in a string\n  *\n  * @example\n  * strindex( 'abcdef', 'c' )\n  * // => 2\n  *\n  * @example\n  * strindex( 'abcdef', 'f' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abcdef', 'bc' )\n  * // => 0\n  *\n  * @example\n  * strindex( 'abcdef', 'bc', 2 )\n  * // => 1\n  */\nconst strindex = (string, substring) => {\n  const index = string.indexOf(substring)\n  return index === -1? -1 : index\n}\n\n/**\n  * Returns the index of the last occurrence of a substring in a string\n  *\n  * @param {string} string The string to search\n  * @param {string} substring The substring to search for\n  * @returns {number} The index of the last occurrence of a substring in a string\n  *\n  * @example\n  * strlastindex( 'abcdef', 'c' )\n  * // => 2\n  *\n  * @example\n  * strlastindex( 'abcdef', 'f' )\n  * // => -1\n  *\n  * @example\n  * strlastindex( 'abcdef', 'bc' )\n  * // => 0\n  *\n  * @example\n  * strlastindex( 'abcdef', 'bc', 2 )\n  * // => 1\n  */\nconst strlastindex = (string, substring) => {\n  const index = string.lastIndexOf(substring)\n  return index === -1? -1 : index\n}\n\n/**\n  * Returns the number of occurrences of a substring in a string\n  *\n  * @param {string} string The string to search\n  * @param {string} substring The substring to search for\n  * @returns {number} The number of occurrences of a substring in a string\n  *\n  * @example\n  * strcount( 'abcdef', 'c' )\n  * // => 2\n  *\n  * @example\n  * strcount( 'abcdef', 'f' )\n  * // => 0\n  *\n  * @example\n  * strcount( 'abcdef', 'bc' )\n  * // => 1\n  */\nconst strcount = (string, substring) => {\n  return string.split(substring).length - 1\n}\n\n/**\n  * Returns the number of characters in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of characters in a string\n  *\n  * @example\n  * strlength( 'abcdef' )\n  * // => 6\n  */\nconst strlength = (string) => {\n  return string.length\n}\n\n/**\n  * Returns the number of words in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of words in a string\n  *\n  * @example\n  * strwordcount( 'abcdef' )\n  * // => 2\n  */\nconst strwordcount = (string) => {\n  return string.split(/\\s+/).length\n}\n\n/**\n  * Returns the number of lines in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of lines in a string\n  *\n  * @example\n  * strlinectount( 'abcdef' )\n  * // => 1\n  */\nconst strlinectount = (string) => {\n  return string.split(/\\r\\n|\\r|\\n/).length\n}\n\n/**\n  * Returns the number of characters in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of characters in a string\n  *\n  * @example\n  * strcharcount( 'abcdef' )\n  * // => 6\n  */\nconst strcharcount = (string) => {\n  return string.split('').length\n}\n\n/**\n  * Returns the number of words in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of words in a string\n  *\n  * @example\n  * strwordcount( 'abcdef' )\n  * // => 2\n  */\nconst strwordcount = (string) => {\n  return string.split(/\\s+/).length\n}\n\n/**\n  * Returns the number of lines in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of lines in a string\n  *\n  * @example\n  * strlinectount( 'abcdef' )\n  * // => 1\n  */\nconst strlinectount = (string) => {\n  return string.split(/\\r\\n|\\r|\\n/).length\n}\n\n/**\n  * Returns the number of characters in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of characters in a string\n  *\n  * @example\n  * strcharcount( 'abcdef' )\n  * // => 6\n  */\nconst strcharcount = (string) => {\n  return string.split('').length\n}\n\n/**\n  * Returns the number of words in a string\n  *\n  * @param {string} string The string to count\n  * @returns {number} The number of words in a string\n  *\n  * @example\n  * strwordcount( 'abcdef' )\n  * // => 2\n  */\nconst strwordcount = (string) => {\n  return string.split(/\\s+/).length\n}\n\n/**\n  * Returns the number of lines in a string\n  ", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  less than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  greater than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorGreaterThan = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  less than n\n  >>> largestDivisor(15)\n  3\n  */\nconst largestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  greater than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisorGreaterThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor + 1;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  less than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor + 1;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  greater than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorGreaterThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  less than n\n  >>> largestDivisor(15)\n  3\n  */\nconst largestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  greater than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisorGreaterThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  less than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  greater than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  less than n\n  >>> largestDivisor(15)\n  3\n  */\nconst largestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  greater than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorLessThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Find for a given number n the smallest number that divides n evenly,\n  greater than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisorGreaterThan = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n/* Find for a given number n the largest number that divides n evenly,\n  less than n", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_length = []\n  const factors_length_max = []\n  const factors_length_min = []\n  const factors_length_sum = []\n  const factors_length_sum_max = []\n  const factors_length_sum_min = []\n  const factors_length_sum_sum = []\n  const factors_length_sum_sum_max = []\n  const factors_length_sum_sum_min = []\n  const factors_length_sum_sum_sum = []\n  const factors_length_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 = (string) => {\n  ", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Merge List of Strings", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for strings not starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix) || s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings not starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterByPrefixNotOr = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAnd = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings not starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterByPrefixNotAnd = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixOrAnd = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix) || s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings not starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterByPrefixNotOrAnd = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixOrNot = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix) ||!s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings not starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterByPrefixNotOr = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixNotOrNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixOrNotOr = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix) ||!s.startsWith(prefix.toUpperCase()));\n};\n\n/* Filter an input list of strings only for strings not starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterByPrefixNotOrNot = (", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.reduce((acc, curr) => {\n    if (curr < 0) {\n      return false;\n    }\n    return acc && curr < acc;\n  }, true);\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>> countPr", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len - 1];\n    const min = xs[0];\n    const mid = (max + min) / 2;\n    const midVal = poly(mid);\n    if (midVal === 0) {\n      return mid;\n    }\n    if (midVal > 0) {\n      return findZero(xs.slice(0, len - 1));\n    }\n    return findZero(xs.slice(1, len));\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero2 find x such that poly(x) = 0.\n  findZero2 returns only only zero point, even if there are many.\n  Moreover, findZero2 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero2([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero2([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len - 1];\n    const min = xs[0];\n    const mid = (max + min) / 2;\n    const midVal = poly2(mid);\n    if (midVal === 0) {\n      return mid;\n    }\n    if (midVal > 0) {\n      return findZero2(xs.slice(0, len - 1));\n    }\n    return findZero2(xs.slice(1, len));\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero3 find x such that poly(x) = 0.\n  findZero3 returns only only zero point, even if there are many.\n  Moreover, findZero3 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero3([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero3([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len - 1];\n    const min = xs[0];\n    const mid = (max + min) / 2;\n    const midVal = poly3(mid);\n    if (midVal === 0) {\n      return mid;\n    }\n    if (midVal > 0) {\n      return findZero3(xs.slice(0, len - 1));\n    }\n    return findZero3(xs.slice(1, len));\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero4 find x such that poly(x) = 0.\n  findZero4 returns only only zero point, even if there are many.\n  Moreover, findZero4 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero4([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero4([-6, 11, -6, 1]), 2) # (x -", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 3 === b % 3) {\n      return a - b;\n    }\n    return a % 3 - b % 3;\n  });\n  return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter((x) => seen.add(x));\n};\n\n/*Return a list of the first n elements in a list\n  >>> first(range(1, 11), 3)\n  [1, 2, 3]\n  */\nconst first = (l, n) => {\n  return l.slice(0, n);\n};\n\n/*Return a list of the last n elements in a list\n  >>> last(range(1, 11), 3)\n  [10, 9, 8]\n  */\nconst last = (l, n) => {\n  return l.slice(-n);\n};\n\n/*Return a list of the elements in a list, in reverse order\n  >>> reverse(range(1, 11))\n  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst reverse = (l) => {\n  return l.slice().reverse();\n};\n\n/*Return a list of the elements in a list, in sorted order\n  >>> sorted(range(1, 11))\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sorted = (l) => {\n  return l.slice().sort();\n};\n\n/*Return a list of the elements in a list, in reverse sorted order\n  >>> sorted_reverse(range(1, 11))\n  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst sorted_reverse = (l) => {\n  return l.slice().sort().reverse();\n};\n\n/*Return a list of the elements in a list, in sorted order, with duplicates removed\n  >>> sorted_unique(range(1, 11))\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sorted_unique = (l) => {\n  return l.slice().sort().unique();\n};\n\n/*Return a list of the elements in a list, in reverse sorted order, with duplicates removed\n  >>> sorted_unique_reverse(range(1, 11))\n  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst sorted_unique_reverse = (l) => {\n  return l.slice().sort().reverse().unique();\n};\n\n/*Return a list of the elements in a list, in sorted order, with duplicates removed, with the first n elements\n  >>> sorted_first(range(1, 11), 3)\n  [1, 2, 3]\n  */\nconst sorted_first = (l, n) => {\n  return l.slice().sort().slice(0, n);\n};\n\n/*Return a list of the elements in a list, in reverse sorted order, with duplicates removed, with the first n elements\n  >>> sorted_first_reverse(range(1, 11), 3)\n  [10, 9, 8]\n  */\nconst sorted_first_reverse = (l, n) => {\n  return l.slice().sort().reverse().slice(0, n);\n};\n\n/*Return a list of the elements in a list, in sorted order, with duplicates removed, with the last n elements\n  >>> sorted_last(range(1, 11), 3)\n  [10, 9, 8]\n  */\nconst sorted_last = (l, n) => {\n  return l.slice().sort().slice(-n);\n};\n\n/*Return a list of the elements in a list, in reverse sorted order, with duplicates removed, with the last n elements\n  >>> sorted_last_reverse(range(1, 11), 3)\n  [1, 2, 3]\n  */\nconst sorted_last_reverse = (l, n) => {\n  return l.slice().sort().reverse().slice(-n);\n};\n\n/*Return a list of the elements in a list, in sorted order, with duplicates removed, with the first n elements and the last n elements\n  >>> sorted_first_last(range(1, 11), 3)\n  [1, 2, 3]\n  */\nconst sorted_first_last = (l, n) => {\n  return l.slice().sort().slice(0, n).concat(l.slice().sort().slice(-n));\n};\n\n/*Return a list of the elements in a list, in reverse sorted order, with duplicates removed, with the first n elements and the last n elements\n  >>> sorted_first_last_reverse(range(1, 11), 3)\n  [10, 9, 8]\n  */\nconst sorted_first_last_reverse = (l, n) => {\n  return l.slice().sort().reverse().slice(0, n).concat(l.slice().sort().reverse().slice(-n));\n};\n\n/*Return a list of the elements in a list, in sorted order, with duplicates removed, with the first n elements and the last n elements, in reverse order\n  >>> sorted_first_last_reverse(range(1, 11), 3)\n  [10, 9, 8]\n  */\nconst sorted_first_last_reverse_reverse = (l, n) => {\n  return l.slice().sort().reverse().slice(0, n).concat(l.slice().sort().reverse().slice(-n));\n};\n\n/*Return a list of the elements in a list, in sorted order, with duplicates removed, with the first n elements and the last n elements, in reverse order\n  >>> sorted_first_last_reverse_reverse(range(1, 11), 3)\n  [1, 2, 3]\n  */\nconst sorted_first_last_reverse_reverse_reverse = (l, n) => {\n  return l.slice().sort().reverse().slice(0, n).concat(l.slice().sort().reverse().slice(-n));\n};\n\n/*Return a list of the elements in a list, in sorted order, with duplicates removed, with the first n elements and the last n elements, in reverse order\n  >>> sorted_first_last_reverse_reverse_reverse(range(1, 11), 3)\n  [10, 9, 8]\n  */\nconst sorted_first_last_reverse_reverse_reverse_reverse = (l, n) => {\n  return l.slice().sort().reverse().slice(0, n).concat(l.", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Rreturns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10 + 123 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Rreturns the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.0\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Rreturns the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.0\n  */\nconst median = (l) => {\n  let sorted = l.slice();\n  sorted.sort((a, b) => a - b);\n  let mid = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxCount = 1;\n    } else if (l[i] === max) {\n      maxCount++;\n    }\n  }\n  return max;\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode2 = (l) => {\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxCount = 1;\n    } else if (l[i] === max) {\n      maxCount++;\n    }\n  }\n  return max;\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode3 = (l) => {\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxCount = 1;\n    } else if (l[i] === max) {\n      maxCount++;\n    }\n  }\n  return max;\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode4 = (l) => {\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxCount = 1;\n    } else if (l[i] === max) {\n      maxCount++;\n    }\n  }\n  return max;\n};\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode5 = (l) => {\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxCount = 1;\n    } else if (l[i] === max) {\n      maxCount++;\n    }\n  }\n  return max;\n", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const fizz = (n) => {\n    if (n % 3 === 0) {\n      return 'Fizz';\n    }\n  };\n  const buzz = (n) => {\n    if (n % 5 === 0) {\n      return 'Buzz';\n    }\n  };\n  const fizzBuzz = (n) => {\n    if (n % 3 === 0 && n % 5 === 0) {\n      return 'FizzBuzz';\n    }\n  };\n  return fizz(n) + buzz(n) + fizzBuzz(n);\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.slice(0, l.length / 2);\n  const odd = l.slice(l.length / 2);\n  return even.concat(odd.sort((a, b) => a - b));\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 2;\n  let fib = 1;\n  while (prime < n) {\n    let nextPrime = prime + fib;\n    if (nextPrime > n) {\n      break;\n    }\n    prime = nextPrime;\n    fib = fib + fib;\n  }\n  return prime;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the sum of the squared differences from the mean:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.sqrt(sum(map(x, diff * diff)));\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the median of this dataset. The median is the middle number of the list.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(sorted.length / 2);\n  const count = map(numbers, (x) => {\n    return x === sorted[half];\n  });\n  return count.length > 0? sorted[half] : undefined;\n};\n\n/*\n  For a given list of input numbers, calculate the range of this dataset. The range is the difference between the largest and smallest number in the dataset.\n  >>> range([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst range = (numbers) => {\n  const min = min(numbers);\n  const max = max(numbers);\n  return max - min;\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. The variance is the sum of the squared differences from the mean divided by the number of values:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return sum(map(x, diff * diff)) / (numbers.length - 1);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. The standard deviation is the square root of the sum of the squared differences from the mean divided by the number of values:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.sqrt(sum(map(x, diff * diff)) / (numbers.length - 1));\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the skewness of this dataset. The skewness is the ratio of the sum of the squared differences from the mean to the square root of the sum of the squares of the differences from the mean:\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return sum(map(x, diff * diff)) / (Math.pow(sum(map(x, diff * diff)), 1.5));\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis of this dataset. The kurtosis is the ratio of the sum of the squares of the differences from the mean to the square root of the sum of the squares of the differences from the mean:\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return sum(map(x, diff * diff)) / (Math.pow(sum(map(x, diff * diff)), 2.0));\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  const sorted = sort(numbers);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  const sorted = sort(numbers);\n  const half = Math", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        const sum = l[i] + l[j] + l[k];\n        if (sum === 0) {\n          unique.add(l[i], l[j], l[k]);\n        }\n      }\n    }\n  }\n  return unique.size === 3;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars.push(new Car(0, 0, 0));\n  cars", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 8, 6, 4, 4, 12, 2, 124]\n  */\nconst multList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 2);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 3]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 2);\n  }\n  return newList;\n};\n\n/*Return list with elements added by 1.\n  >>> addList([1, 2, 3])\n  [2, 3, 4]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst addList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements subtracted by 1.\n  >>> subList([1, 2, 3])\n  [2, 3, 4]\n  >>> subList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst subList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 9, 9, 6, 4, 4, 12, 2, 124]\n  */\nconst mult3List = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 3);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [1, 2, 3]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2, 2, 2, 2, 2, 2, 6, 1, 123]\n  */\nconst div3List = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 3);\n  }\n  return newList;\n};\n\n/*Return list with elements added by 3.\n  >>> add3List([1, 2, 3])\n  [4, 5, 6]\n  >>> add3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 9, 9, 6, 4, 4, 12, 2, 124]\n  */\nconst add3List = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 3);\n  }\n  return newList;\n};\n\n/*Return list with elements subtracted by 3.\n  >>> sub3List([1, 2, 3])\n  [2, 3, 4]\n  >>> sub3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2, 3, 3, 2, 3, 3, 6, 1, 123]\n  */\nconst sub3List = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 3);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> mult4List([1, 2, 3])\n  [4, 8, 12]\n  >>> mult4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [20, 12, 12, 8, 6, 4, 12, 2, 124]\n  */\nconst mult4List = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const a = l[i];\n    const b = l[i + 1];\n    if (a + b === 0) {\n      set.add(a);\n      set.add(b);\n    }\n  }\n  return set.size!== 2;\n};\n\nexport { pairsSumToZero };\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 10) {\n    throw new Error('Base must be greater than 10.');\n  }\n  const result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*Cconvert a number to a string.\n  >>> convertToString(8)\n  '8'\n  >>> convertToString(8, 2)\n  '10'\n  >>> convertToString(8, 3)\n  '22'\n  >>> convertToString(8, 10)\n  '1008'\n  >>> convertToString(8, 16)\npassed": 0}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  >>> fib4(8)\n  21\n  >>> fib4(9)\n  34\n  >>> fib4(10)\n  55\n  >>> fib4(11)\n  89\n  >>> fib4(12)\n  144\n  >>> fib4(13)\n  233\n  >>> fib4(14)\n  377\n  >>> fib4(15)\n  610\n  >>> fib4(16)\n  987\n  >>> fib4(17)\n  1597\n  >>> fib4(18)\n  2584\n  >>> fib4(19)\n  4181\n  >>> fib4(20)\n  6765\n  >>> fib4(21)\n  10946\n  >>> fib4(22)\n  17711\n  >>> fib4(23)\n  28657\n  >>> fib4(24)\n  46368\n  >>> fib4(25)\n  75025\n  >>> fib4(26)\n  121393\n  >>> fib4(27)\n  196418\n  >>> fib4(28)\n  317811\n  >>> fib4(29)\n  514229\n  >>> fib4(30)\n  832040\n  >>> fib4(31)\n  1346269\n  >>> fib4(32)\n  2178309\n  >>> fib4(33)\n  3524578\n  >>> fib4(34)\n  5702887\n  >>> fib4(35)\n  9227465\n  >>> fib4(36)\n  14930352\n  >>> fib4(37)\n  24157817\n  >>> fib4(38)\n  39088169\n  >>> fib4(39)\n  63245986\n  >>> fib4(40)\n  124633785\n  >>> fib4(41)\n  196418269\n  >>> fib4(42)\n  317811579\n  >>> fib4(43)\n  525878906\n  >>> fib4(44)\n  879609302\n  >>> fib4(45)\n  1374389534\n  >>> fib4(46)\n  2147483647\n  >>> fib4(47)\n  28147497674\n  >>> fib4(48)\n  4611686018427387903\n  >>> fib4(49)\n  6908521828213405265\n  >>> fib4(50)\n  12586269025270858863\n  >>> fib4(51)\n  1934268625178626404\n  >>> fib4(52)\n  32552901966907723\n  >>> fib4(53)\n  5321878496460845\n  >>> fib4(54)\n  8651543204120435\n  >>> fib4(55)\n  1374389534\n  >>> fib4(56)\n  2147483647\n  >>> fib4(57)\n  28147497674\n  >>> fib4(58)\n  4611686018427387903\n  >>> fib4(59)\n  6908521828213405265\n  >>> fib4(60)\n  12586269025270858863\n  >>> fib4(61)\n  1934268625178626404\n  >>> fib4(62)\n  32552901966907723\n  >>> fib4(63)\n  5321878496460845\n  >>> fib4(64)\n  8651543204120435\n  >>> fib4(65)\n  1374389534\n  >>> fib4(66)\n  2147483647\n  >>> fib4(67)\n  28147497674\n  >>> fib4(68)\n  4611686018427387903\n  >>> fib4(69)\n  6908521828213405265\n  >>> fib4(70)\n  12586269025270858863\n  >>> fib4(71)\n  1934268625178626404\n  >>> fib4(72)\n  32552901966907723\n  >>> fib4(73)\n  5321878496460845\n  >>> fib4(74)\n  8651543204120435\n  >>> fib4(75)\n  1374389534\n  >>> fib4(76)\n  2147483647\n  >>> fib4(77)\n  28147497674\n  >>> fib4(78)\n  4611686018427387903\n  >>> fib4(79)\n  6908521828213405265\n  >>> fib4(80)\n  12586269025270858863\n  >>> fib4(81)\n  1934268625178626404\n  >>> fib4(82)\n  32552901966907723\n  >>> fib4(83)\n  5321878496460845\n  >>> fib4(84)\n  8651543204120435\n  >>> fib4(85)\n  1374389534\n  >>> fib4(86)\n  2147483647\n  >>> fib4(87)\n  28147497674\n  >>> fib4(88)\n  4611686018427387903\n  >>> fib4(89)\n  6908521828213405265\n  >>> fib4(90)\n  12586269025270858863\n  >>> fib4(91)\n  1934268625178626404\n  >>> fib4(92)\n  32552901966907723\n  >>> fib4(93)\n  5321878496460845\n  >>> fib4(94)\n  8651543204120435\n  >>> fib4(95)\n  1374389534", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const middle = sorted[half];\n  if (sorted.length % 2 === 0) {\n    return (middle + sorted[half - 1]) / 2;\n  } else {\n    return middle;\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let left = text.slice(0, half);\n    let right = text.slice(half, textLength);\n    return left === right;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst is", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p\n}\n\n/*Return the number of 1 bits in n.\n  >>> count(0)\n  0\n  >>> count(1)\n  1\n  >>> count(2)\n  1\n  >>> count(3)\n  2\n  >>> count(4)\n  2\n  >>> count(5)\n  3\n  >>> count(6)\n  3\n  >>> count(7)\n  4\n  >>> count(8)\n  4\n  >>> count(9)\n  5\n  >>> count(10)\n  5\n  >>> count(11)\n  6\n  >>> count(12)\n  6\n  >>> count(13)\n  7\n  >>> count(14)\n  7\n  >>> count(15)\n  8\n  >>> count(16)\n  8\n  >>> count(17)\n  9\n  >>> count(18)\n  9\n  >>> count(19)\n  10\n  >>> count(20)\n  10\n  >>> count(21)\n  11\n  >>> count(22)\n  11\n  >>> count(23)\n  12\n  >>> count(24)\n  12\n  >>> count(25)\n  13\n  >>> count(26)\n  13\n  >>> count(27)\n  14\n  >>> count(28)\n  14\n  >>> count(29)\n  15\n  >>> count(30)\n  15\n  >>> count(31)\n  16\n  >>> count(32)\n  16\n  >>> count(33)\n  17\n  >>> count(34)\n  17\n  >>> count(35)\n  18\n  >>> count(36)\n  18\n  >>> count(37)\n  19\n  >>> count(38)\n  19\n  >>> count(39)\n  20\n  >>> count(40)\n  20\n  >>> count(41)\n  21\n  >>> count(42)\n  21\n  >>> count(43)\n  22\n  >>> count(44)\n  22\n  >>> count(45)\n  23\n  >>> count(46)\n  23\n  >>> count(47)\n  24\n  >>> count(48)\n  24\n  >>> count(49)\n  25\n  >>> count(50)\n  25\n  >>> count(51)\n  26\n  >>> count(52)\n  26\n  >>> count(53)\n  27\n  >>> count(54)\n  27\n  >>> count(55)\n  28\n  >>> count(56)\n  28\n  >>> count(57)\n  29\n  >>> count(58)\n  29\n  >>> count(59)\n  30\n  >>> count(60)\n  30\n  >>> count(61)\n  31\n  >>> count(62)\n  31\n  >>> count(63)\n  32\n  >>> count(64)\n  32\n  >>> count(65)\n  33\n  >>> count(66)\n  33\n  >>> count(67)\n  34\n  >>> count(68)\n  34\n  >>> count(69)\n  35\n  >>> count(70)\n  35\n  >>> count(71)\n  36\n  >>> count(72)\n  36\n  >>> count(73)\n  37\n  >>> count(74)\n  37\n  >>> count(75)\n  38\n  >>> count(76)\n  38\n  >>> count(77)\n  39\n  >>> count(78)\n  39\n  >>> count(79)\n  40\n  >>> count(80)\n  40\n  >>> count(81)\n  41\n  >>> count(82)\n  41\n  >>> count(83)\n  42\n  >>> count(84)\n  42\n  >>> count(85)\n  43\n  >>> count(86)\n  43\n  >>> count(87)\n  44\n  >>> count(88)\n  44\n  >>> count(89)\n  45\n  >>> count(90)\n  45\n  >>> count(91)\n  46\n  >>> count(92)\n  46\n  >>> count(93)\n  47\n  >>> count(94)\n  47\n  >>> count(95)\n  48\n  >>> count(96)\n  48\n  >>> count(97)\n  49\n  >>> count(98)\n  49\n  >>> count(99)\n  50\n  >>> count(100)\n  50\n  >>> count(101)\n  51\n  >>> count(102)\n  51\n  >>> count(103)\n  52\n  >>> count(104)\n  52\n  >>> count(105)\n  53\n  >>> count(106)\n  53\n  >>> count(107)\n  54\n  >>> count(108)\n  54\n  >>> count(109)\n  55\n  >>> count(110)\n  55\n  >>> count(111)\n  56\n  >>> count(112)\n  56\n  >>> count(113)\n  57\n  >>> count(114)\n  57\n  >>> count(115)\n  58\n  >>> count(116)\n  58\n  >>> count(117)\n  59\n  >>> count(118)\n  59\n  >>> count(119)\n  60\n  >>> count(120)\n  60\n  >>> count(121)\n  61\n  >>> count(122)\n  61\n  >>> count(123)\n  62\n  >>> count(124)\n  62\n  >>> count(125)\n  63\n  >>> count(126)\n  63\n  >>> count(127)\n  64\n  >>> count(128)\n  64\n  >>> count(129)\n  65\n  >>> count(130)\n  65\n  >>> count(131)\n  66\n  >>> count(132)\n  66\n  >>> count(133)\n  67\n  >>> count(134)\n  67\n  >>> count(135)\n  68\n  >>> count(136)\n  68\n  >>> count(137)\n  69\n  >>> count(138)\n  69\n  >>> count(139)\n  70\n  >>> count(140)\n  70\n  >>> count(", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst length = (s) => {\n  return s.length;\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charLength = (s) => {\n  return s.split(\"\").length;\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount2 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount3 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount4 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount5 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount6 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount7 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount8 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount9 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount10 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount11 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount12 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount13 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount14 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount15 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount16 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount17 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount18 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount19 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount20 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount21 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount22 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount23 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n/*\n  returns the number of characters in the string.\n  */\nconst charCount24 = (s) => {\n  return s.split(\"\").reduce((acc, ch) => acc + 1, 0);\n}\n\n", "passed": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = text;\n  vowels.forEach(vowel => {\n    result = result.replace(vowel, '');\n  });\n  return result;\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuationpassed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Return the sum of all numbers in list l.\n  >>> sum([1, 2, 4, 10])\n  15\n  >>> sum([1, 20, 4, 10])\n  24\n  >>> sum([1, 2, 4, 10, 100])\n  105\n  >>> sum([1, 2, 4, 10, 100, 1000])\n  1050\n  */\nconst sum = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*\n  Return the average of all numbers in list l.\n  >>> average([1, 2, 4, 10])\n  5\n  >>> average([1, 20, 4, 10])\n  4\n  >>> average([1, 2, 4, 10, 100])\n  45\n  >>> average([1, 2, 4, 10, 100, 1000])\n  500\n  */\nconst average = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum / len\n}\n\n/*\n  Return the median of all numbers in list l.\n  >>> median([1, 2, 4, 10])\n  4\n  >>> median([1, 20, 4, 10])\n  4\n  >>> median([1, 2, 4, 10, 100])\n  45\n  >>> median([1, 2, 4, 10, 100, 1000])\n  500\n  */\nconst median = (l) => {\n  const len = l.length\n  const half = len / 2\n  let sum = 0\n  for (let i = 0; i < half; i++) {\n    sum += l[i]\n  }\n  return sum + l[half]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, 100])\n  45\n  >>> mode([1, 2, 4, 10, 100, 1000])\n  500\n  */\nconst mode = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, 100])\n  45\n  >>> mode([1, 2, 4, 10, 100, 1000])\n  500\n  */\nconst mode = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, 100])\n  45\n  >>> mode([1, 2, 4, 10, 100, 1000])\n  500\n  */\nconst mode = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, 100])\n  45\n  >>> mode([1, 2, 4, 10, 100, 1000])\n  500\n  */\nconst mode = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, 100])\n  45\n  >>> mode([1, 2, 4, 10, 100, 1000])\n  500\n  */\nconst mode = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, 100])\n  45\n  >>> mode([1, 2, 4, 10, 100, 1000])\n  500", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.5\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst negate = (x) => {\n  return -x;\n};\n\n/*\n  >>> negate(2)\n  -2\n  >>> negate(5)\n  -5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(-2)\n  2\n  >>> abs(5)\n  5\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(4)\n  2\n  >>> squareRoot(25)\n  5\n  */\nconst factorial = (x) => {\n  return x === 1? 1 : x * factorial(x - 1);\n};\n\n/*\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  */\nconst gcd = (x, y) => {\n  return x === 0? y : gcd(y, x % y);\n};\n\n/*\n  >>> gcd(3, 6)\n  3\n  >>> gcd(6, 3)\n  3\n  >>> gcd(9, 12)\n  3\n  >>> gcd(12, 9)\n  3\n  >>> gcd(12, 18)\n  6\n  >>> gcd(18, 12)\n  6\n  >>> gcd(12, 18)\n  6\n  >>> gcd(18, 12)\n  6\n  */\nconst lcm = (x, y) => {\n  return x * y / gcd(x, y);\n};\n\n/*\n  >>> lcm(3, 6)\n  9\n  >>> lcm(6, 3)\n  6\n  >>> lcm(9, 12)\n  36\n  >>> lcm(12, 9)\n  36\n  >>> lcm(12, 18)\n  36\n  >>> lcm(18, 12)\n  36\n  >>> lcm(12, 18)\n  36\n  >>> lcm(18, 12)\n  36\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(2, -3)\n  0.125\n  >>> pow(2, 3)\n  8\n  >>> pow(2, -3)\n  0.125\n  >>> pow(2, 3)\n  8\n  >>> pow(2, -3)\n  0.125\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(4)\n  2\n  >>> sqrt(25)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*\n  >>> floor(2.5)\n  2\n  >>> floor(2.1)\n  2\n  >>> floor(2.9)\n  2\n  >>> floor(3.1)\n  3\n  >>> floor(3.9)\n  3\n  >>> floor(4.1)\n  4\n  >>> floor(4.9)\n  4\n  >>> floor(5.1)\n  5\n  >>> floor(5.9)\n  5\n  >>> floor(6.1)\n  6\n  >>> floor(6.9)\n  6\n  >>> floor(7.1)\n  7\n  >>> floor(7.9)\n  7\n  >>> floor(8.1)\n  8\n  >>> floor(8.9)\n  8\n  >>> floor(9.1)\n  9\n  >>> floor(9.9)\n  9\n  >>> floor(10.1)\n  10\n  >>> floor(10.9)\n  10\n  >>> floor(11.1)\n  11\n  >>> floor(11.9)\n  11\n  >>> floor(12.1)\n  12\n  >>> floor(12.9)\n  12\n  >>> floor(13.1)\n  13\n  >>> floor(13.9)\n  13\n  >>> floor(14.1)\n  14\n  >>> floor(14.9)\n  14\n  >>> floor(15.1)\n  15\n  >>> floor(15.9)\n  15\n  >>> floor(16.1)\n  16\n  >>> floor(16.9)\n  16\n  >>> floor(17.1)\n  17\n  >>> floor(17.9)\n  17\n  >>> floor(18.1)\n  18\n  >>> floor(18.9)\n  18\n  >>> floor(19.1)\n  19\n  >>> floor(19.9)\n  19\n  >>> floor(20.1)\n  20\n  >>> floor(20.9)\n  20\n  >>> floor(21.1)\n  21\n  >>> floor(21.9)\n  21\n  >>> floor(22.1)\n  22\n", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let s0Letters = s0.split('');\n    let s1Letters = s1.split('');\n    if (s0Letters.length!== s1Letters.length) {\n        return false;\n    }\n    for (let i = 0; i < s0Letters.length; i++) {\n        if (s0Letters[i]!== s1Letters[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters and numbers.\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsNums('abcd', 'dddddddabc')\n  true\n  >>> sameCharsNums('dddddddabc', 'abcd')\n  true\n  >>> sameCharsNums('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsNums('abcd', 'dddddddabce')\n  false\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsNums = (s0, s1) => {\n    let s0Letters = s0.split('');\n    let s1Letters = s1.split('');\n    if (s0Letters.length!== s1Letters.length) {\n        return false;\n    }\n    for (let i = 0; i < s0Letters.length; i++) {\n        if (s0Letters[i]!== s1Letters[i] && s0Letters[i]!== s1Letters[i].toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters and numbers.\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsNums('abcd', 'dddddddabc')\n  true\n  >>> sameCharsNums('dddddddabc', 'abcd')\n  true\n  >>> sameCharsNums('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsNums('abcd', 'dddddddabce')\n  false\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsNums2 = (s0, s1) => {\n    let s0Letters = s0.split('');\n    let s1Letters = s1.split('');\n    if (s0Letters.length!== s1Letters.length) {\n        return false;\n    }\n    for (let i = 0; i < s0Letters.length; i++) {\n        if (s0Letters[i]!== s1Letters[i] && s0Letters[i]!== s1Letters[i].toUpperCase() && s0Letters[i]!== s1Letters[i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = {\n    sameChars,\n    sameCharsNums,\n    sameCharsNums2\n};\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\"\").reverse()\n  const bracketsLength = bracketsArray.length\n  let bracketsIndex = 0\n  let bracketsOpen = 0\n  let bracketsClose = 0\n  let bracketsOpenIndex = 0\n  let bracketsCloseIndex = 0\n  let bracketsOpenLength = 0\n  let bracketsCloseLength = 0\n  let bracketsOpenLengthIndex = 0\n  let bracketsCloseLengthIndex = 0\n  let bracketsOpenLengthIndex2 = 0\n  let bracketsCloseLengthIndex2 = 0\n  let bracketsOpenLengthIndex3 = 0\n  let bracketsCloseLengthIndex3 = 0\n  let bracketsOpenLengthIndex4 = 0\n  let bracketsCloseLengthIndex4 = 0\n  let bracketsOpenLengthIndex5 = 0\n  let bracketsCloseLengthIndex5 = 0\n  let bracketsOpenLengthIndex6 = 0\n  let bracketsCloseLengthIndex6 = 0\n  let bracketsOpenLengthIndex7 = 0\n  let bracketsCloseLengthIndex7 = 0\n  let bracketsOpenLengthIndex8 = 0\n  let bracketsCloseLengthIndex8 = 0\n  let bracketsOpenLengthIndex9 = 0\n  let bracketsCloseLengthIndex9 = 0\n  let bracketsOpenLengthIndex10 = 0\n  let bracketsCloseLengthIndex10 = 0\n  let bracketsOpenLengthIndex11 = 0\n  let bracketsCloseLengthIndex11 = 0\n  let bracketsOpenLengthIndex12 = 0\n  let bracketsCloseLengthIndex12 = 0\n  let bracketsOpenLengthIndex13 = 0\n  let bracketsCloseLengthIndex13 = 0\n  let bracketsOpenLengthIndex14 = 0\n  let bracketsCloseLengthIndex14 = 0\n  let bracketsOpenLengthIndex15 = 0\n  let bracketsCloseLengthIndex15 = 0\n  let bracketsOpenLengthIndex16 = 0\n  let bracketsCloseLengthIndex16 = 0\n  let bracketsOpenLengthIndex17 = 0\n  let bracketsCloseLengthIndex17 = 0\n  let bracketsOpenLengthIndex18 = 0\n  let bracketsCloseLengthIndex18 = 0\n  let bracketsOpenLengthIndex19 = 0\n  let bracketsCloseLengthIndex19 = 0\n  let bracketsOpenLengthIndex20 = 0\n  let bracketsCloseLengthIndex20 = 0\n  let bracketsOpenLengthIndex21 = 0\n  let bracketsCloseLengthIndex21 = 0\n  let bracketsOpenLengthIndex22 = 0\n  let bracketsCloseLengthIndex22 = 0\n  let bracketsOpenLengthIndex23 = 0\n  let bracketsCloseLengthIndex23 = 0\n  let bracketsOpenLengthIndex24 = 0\n  let bracketsCloseLengthIndex24 = 0\n  let bracketsOpenLengthIndex25 = 0\n  let bracketsCloseLengthIndex25 = 0\n  let bracketsOpenLengthIndex26 = 0\n  let bracketsCloseLengthIndex26 = 0\n  let bracketsOpenLengthIndex27 = 0\n  let bracketsCloseLengthIndex27 = 0\n  let bracketsOpenLengthIndex28 = 0\n  let bracketsCloseLengthIndex28 = 0\n  let bracketsOpenLengthIndex29 = 0\n  let bracketsCloseLengthIndex29 = 0\n  let bracketsOpenLengthIndex30 = 0\n  let bracketsCloseLengthIndex30 = 0\n  let bracketsOpenLengthIndex31 = 0\n  let bracketsCloseLengthIndex31 = 0\n  let bracketsOpenLengthIndex32 = 0\n  let bracketsCloseLengthIndex32 = 0\n  let bracketsOpenLengthIndex33 = 0\n  let bracketsCloseLengthIndex33 = 0\n  let bracketsOpenLengthIndex34 = 0\n  let bracketsCloseLengthIndex34 = 0\n  let bracketsOpenLengthIndex35 = 0\n  let bracketsCloseLengthIndex35 = 0\n  let bracketsOpenLengthIndex36 = 0\n  let bracketsCloseLengthIndex36 = 0\n  let bracketsOpenLengthIndex37 = 0\n  let bracketsCloseLengthIndex37 = 0\n  let bracketsOpenLengthIndex38 = 0\n  let bracketsCloseLengthIndex38 = 0\n  let bracketsOpenLengthIndex39 = 0\n  let bracketsCloseLengthIndex39 = 0\n  let bracketsOpenLengthIndex40 = 0\n  let bracketsCloseLengthIndex40 = 0\n  let bracketsOpenLengthIndex41 = 0\n  let bracketsCloseLengthIndex41 = 0\n  let bracketsOpenLengthIndex42 = 0\n  let bracketsCloseLengthIndex42 = 0\n  let bracketsOpenLengthIndex43 = 0\n  let bracketsCloseLengthIndex43 = 0\n  let bracketsOpenLengthIndex44 = 0\n  let bracketsCloseLengthIndex44 = 0\n  let bracketsOpenLengthIndex45 = 0\n  let bracketsCloseLengthIndex45 = 0\n  let bracketsOpenLengthIndex46 = 0\n  let bracketsCloseLengthIndex46 = 0\n  let bracketsOpenLengthIndex47 = 0\n  let bracketsCloseLengthIndex47 = 0\n  let bracketsOpenLengthIndex48 = 0\n  let bracketsCloseLengthIndex48 = 0\n  let bracketsOpenLengthIndex49 = 0\n  let bracketsCloseLengthIndex49 = 0\n  let bracketsOpenLengthIndex50 = 0\n  let bracketsCloseLengthIndex50 = 0\n  let bracketsOpenLengthIndex51 = 0\n  let bracketsCloseLengthIndex51 = 0\n  let bracketsOpenLengthIndex52 = 0\n  let bracketsCloseLengthIndex52 = 0\n  let bracketsOpenLengthIndex53 = 0\n  let bracketsCloseLengthIndex53 = 0\n  let bracketsOpenLengthIndex54 = 0\n  let bracketsCloseLengthIndex54 = 0\n  let bracketsOpenLengthIndex55 = 0\n  let bracketsCloseLengthIndex55 = 0\n  let bracketsOpenLengthIndex56 = 0\n  let bracketsCloseLengthIndex56 = 0\n  let bracketsOpenLengthIndex57 = 0\n  let bracketsCloseLengthIndex57 = 0\n  let bracketsOpenLengthIndex58 = 0\n  let bracketsCloseLengthIndex58 = 0\n  let bracketsOpenLengthIndex59 = 0\n  let bracketsCloseLengthIndex59 = 0\n  let bracketsOpenLengthIndex60 = 0\n  let bracketsCloseLengthIndex60 = 0\n  let bracketsOpenLengthIndex61 = 0\n  let bracketsCloseLengthIndex61 = 0\n  let bracketsOpenLengthIndex62 = 0\n  let bracketsCloseLengthIndex62 = 0\n  let bracketsOpenLengthIndex63 = 0\n  let bracketsCloseLengthIndex63 = 0\n  let bracketsOpenLengthIndex64 = 0\n  let bracketsCloseLengthIndex64 = 0\n  let bracketsOpenLengthIndex65 = 0\n  let bracketsCloseLengthIndex65 = 0\n  let bracketsOpenLengthIndex66 = 0\n  let bracketsCloseLengthIndex66 = 0\n  let bracketsOpenLengthIndex67 = 0\n  let bracketsCloseLengthIndex67 = 0\n  let bracketsOpenLengthIndex68 = 0\n  let bracketsCloseLengthIndex68 = 0\n  let bracketsOpen", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic11 = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> mon", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let common = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return common\n}\n\n/*RHe's got a list of numbers, and a list of numbers that are not in the first list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonNot = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let common = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return common\n}\n\n/*RHe's got a list of numbers, and a list of numbers that are not in the first list.\n  >>> commonNot([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonNot([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonAll = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let common = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return common\n}\n\n/*RHe's got a list of numbers, and a list of numbers that are not in the first list.\n  >>> commonAll([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonAll([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonAny = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let common = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return common\n}\n\n/*RHe's got a list of numbers, and a list of numbers that are not in the first list.\n  >>> commonAny([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonAny([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonAllNot = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let common = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return common\n}\n\n/*RHe's got a list of numbers, and a list of numbers that are not in the first list.\n  >>> commonAllNot([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonAllNot([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonAnyNot = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let common = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return common\n}\n\nmodule.exports = {\n  common,\n  commonNot,\n  commonAll,\n  commonAny,\n  commonAllNot,\n  commonAnyNot\n}\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\nexport default largestPrimeFactor\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [],\n    stack_length = 0,\n    paren_string_length = paren_string.length,\n    current_paren_level = 0,\n    current_paren_string = '',\n    current_paren_string_length = 0;\n\n  for (let i = 0; i < paren_string_length; i++) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      current_paren_level++;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_char === ')') {\n      current_paren_level--;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_paren_level === 0) {\n      stack.push(current_paren_string);\n      stack_length++;\n      current_paren_string = '';\n      current_paren_string_length = 0;\n    } else {\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    }\n  }\n\n  return stack;\n};\n\n/*\n  Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const stack = [],\n    stack_length = 0,\n    paren_string_length = paren_string.length,\n    current_paren_level = 0,\n    current_paren_string = '',\n    current_paren_string_length = 0;\n\n  for (let i = 0; i < paren_string_length; i++) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      current_paren_level++;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_char === ')') {\n      current_paren_level--;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_paren_level === 0) {\n      stack.push(current_paren_string);\n      stack_length++;\n      current_paren_string = '';\n      current_paren_string_length = 0;\n    } else {\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    }\n  }\n\n  return stack;\n};\n\nconst parseNestedParens3 = (paren_string) => {\n  const stack = [],\n    stack_length = 0,\n    paren_string_length = paren_string.length,\n    current_paren_level = 0,\n    current_paren_string = '',\n    current_paren_string_length = 0;\n\n  for (let i = 0; i < paren_string_length; i++) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      current_paren_level++;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_char === ')') {\n      current_paren_level--;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_paren_level === 0) {\n      stack.push(current_paren_string);\n      stack_length++;\n      current_paren_string = '';\n      current_paren_string_length = 0;\n    } else {\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    }\n  }\n\n  return stack;\n};\n\nconst parseNestedParens4 = (paren_string) => {\n  const stack = [],\n    stack_length = 0,\n    paren_string_length = paren_string.length,\n    current_paren_level = 0,\n    current_paren_string = '',\n    current_paren_string_length = 0;\n\n  for (let i = 0; i < paren_string_length; i++) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      current_paren_level++;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_char === ')') {\n      current_paren_level--;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_paren_level === 0) {\n      stack.push(current_paren_string);\n      stack_length++;\n      current_paren_string = '';\n      current_paren_string_length = 0;\n    } else {\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    }\n  }\n\n  return stack;\n};\n\nconst parseNestedParens5 = (paren_string) => {\n  const stack = [],\n    stack_length = 0,\n    paren_string_length = paren_string.length,\n    current_paren_level = 0,\n    current_paren_string = '',\n    current_paren_string_length = 0;\n\n  for (let i = 0; i < paren_string_length; i++) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      current_paren_level++;\n      current_paren_string += current_char;\n      current_paren_string_length++;\n    } else if (current_", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  const bracketsLength = brackets.length\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(\"(\")\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, returns the number of parentheses in the string.\n  \n  >>> countParentheses(\"(()())\")\n  3\n  >>> countParentheses(\"(()\")\n  2\n  >>> countParentheses(\"()\")\n  1\n  >>> countParentheses(\"\")\n  0\n  >>> countParentheses(\"(\")\n  1\n  */\nconst countParentheses = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  */\nconst countBrackets = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  */\nconst countBrackets2 = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  */\nconst countBrackets3 = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  */\nconst countBrackets4 = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  */\nconst countBrackets5 = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  */\nconst countBrackets6 = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()\")\n  2\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"(\")\n  1\n  */\nconst countBrackets7 = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"(\" && string[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  \n  >>> countBrackets(\"", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([1, 2, 3, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [1, 4, 12, 20, 30]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7])\n  [1, 4, 12, 20, 30, 42]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 12, 20, 30, 42, 56]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 4, 12, 20, 30, 42, 56, 74]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220, 248]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220, 248, 276]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220, 248, 276, 304, 336]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220, 248, 276, 304, 336, 384]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220, 248, 276, 304, 336, 384, 432]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220, 248, 276, 304, 336, 384, 432, 480]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 106, 122, 140, 156, 174, 192, 220, 248, 276, 304, 336, 384, 432, 480, 576]\n  >>> derivative([1, 2, 3, 4, 5,", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s',", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const length = x.length;\n  const result = x.slice();\n  const start = shift % length;\n  const end = length - start;\n  const startIndex = start;\n  const endIndex = end;\n  const startIndex2 = startIndex;\n  const endIndex2 = endIndex;\n  const startIndex3 = startIndex;\n  const endIndex3 = endIndex;\n  const startIndex4 = startIndex;\n  const endIndex4 = endIndex;\n  const startIndex5 = startIndex;\n  const endIndex5 = endIndex;\n  const startIndex6 = startIndex;\n  const endIndex6 = endIndex;\n  const startIndex7 = startIndex;\n  const endIndex7 = endIndex;\n  const startIndex8 = startIndex;\n  const endIndex8 = endIndex;\n  const startIndex9 = startIndex;\n  const endIndex9 = endIndex;\n  const startIndex10 = startIndex;\n  const endIndex10 = endIndex;\n  const startIndex11 = startIndex;\n  const endIndex11 = endIndex;\n  const startIndex12 = startIndex;\n  const endIndex12 = endIndex;\n  const startIndex13 = startIndex;\n  const endIndex13 = endIndex;\n  const startIndex14 = startIndex;\n  const endIndex14 = endIndex;\n  const startIndex15 = startIndex;\n  const endIndex15 = endIndex;\n  const startIndex16 = startIndex;\n  const endIndex16 = endIndex;\n  const startIndex17 = startIndex;\n  const endIndex17 = endIndex;\n  const startIndex18 = startIndex;\n  const endIndex18 = endIndex;\n  const startIndex19 = startIndex;\n  const endIndex19 = endIndex;\n  const startIndex20 = startIndex;\n  const endIndex20 = endIndex;\n  const startIndex21 = startIndex;\n  const endIndex21 = endIndex;\n  const startIndex22 = startIndex;\n  const endIndex22 = endIndex;\n  const startIndex23 = startIndex;\n  const endIndex23 = endIndex;\n  const startIndex24 = startIndex;\n  const endIndex24 = endIndex;\n  const startIndex25 = startIndex;\n  const endIndex25 = endIndex;\n  const startIndex26 = startIndex;\n  const endIndex26 = endIndex;\n  const startIndex27 = startIndex;\n  const endIndex27 = endIndex;\n  const startIndex28 = startIndex;\n  const endIndex28 = endIndex;\n  const startIndex29 = startIndex;\n  const endIndex29 = endIndex;\n  const startIndex30 = startIndex;\n  const endIndex30 = endIndex;\n  const startIndex31 = startIndex;\n  const endIndex31 = endIndex;\n  const startIndex32 = startIndex;\n  const endIndex32 = endIndex;\n  const startIndex33 = startIndex;\n  const endIndex33 = endIndex;\n  const startIndex34 = startIndex;\n  const endIndex34 = endIndex;\n  const startIndex35 = startIndex;\n  const endIndex35 = endIndex;\n  const startIndex36 = startIndex;\n  const endIndex36 = endIndex;\n  const startIndex37 = startIndex;\n  const endIndex37 = endIndex;\n  const startIndex38 = startIndex;\n  const endIndex38 = endIndex;\n  const startIndex39 = startIndex;\n  const endIndex39 = endIndex;\n  const startIndex40 = startIndex;\n  const endIndex40 = endIndex;\n  const startIndex41 = startIndex;\n  const endIndex41 = endIndex;\n  const startIndex42 = startIndex;\n  const endIndex42 = endIndex;\n  const startIndex43 = startIndex;\n  const endIndex43 = endIndex;\n  const startIndex44 = startIndex;\n  const endIndex44 = endIndex;\n  const startIndex45 = startIndex;\n  const endIndex45 = endIndex;\n  const startIndex46 = startIndex;\n  const endIndex46 = endIndex;\n  const startIndex47 = startIndex;\n  const endIndex47 = endIndex;\n  const startIndex48 = startIndex;\n  const endIndex48 = endIndex;\n  const startIndex49 = startIndex;\n  const endIndex49 = endIndex;\n  const startIndex50 = startIndex;\n  const endIndex50 = endIndex;\n  const startIndex51 = startIndex;\n  const endIndex51 = endIndex;\n  const startIndex52 = startIndex;\n  const endIndex52 = endIndex;\n  const startIndex53 = startIndex;\n  const endIndex53 = endIndex;\n  const startIndex54 = startIndex;\n  const endIndex54 = endIndex;\n  const startIndex55 = startIndex;\n  const endIndex55 = endIndex;\n  const startIndex56 = startIndex;\n  const endIndex56 = endIndex;\n  const startIndex57 = startIndex;\n  const endIndex57 = endIndex;\n  const startIndex58 = startIndex;\n  const endIndex58 = endIndex;\n  const startIndex59 = startIndex;\n  const endIndex59 = endIndex;\n  const startIndex60 = startIndex;\n  const endIndex60 = endIndex;\n  const startIndex61 = startIndex;\n  const endIndex61 = endIndex;\n  const startIndex62 = startIndex;\n  const endIndex62 = endIndex;\n  const startIndex63 = startIndex;\n  const endIndex63 = endIndex;\n  const startIndex64 = startIndex;\n  const endIndex64 = endIndex;\n  const startIndex65 = startIndex;\n  const endIndex65 = endIndex;\n  const startIndex66 = startIndex;\n  const endIndex66 = endIndex;\n  const startIndex67 = startIndex;\n  const endIndex67 = endIndex;\n  const startIndex68 = startIndex;\n  const endIndex68 = endIndex;\n  const startIndex69 = startIndex;\n  const endIndex69 = endIndex;\n  const startIndex70 = startIndex;\n  const endIndex70 = endIndex;\n  const startIndex71 = startIndex;\n  const endIndex71 = endIndex", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst lowerDigitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper and lower letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst letterSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64 + 96;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times the string contains a given character.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst charCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times the string contains a given character.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst charCount2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times the string contains a given character.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst charCount3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times the string contains a given character.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst charCount4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times the string contains a given character.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst charCount5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of times the string contains a given character.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 1\n  */\nconst charCount6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let fruit = 0;\n  let i = 0;\n  while (i < s.length) {\n    fruit = s[i];\n    count = parseInt(s.substring(i + 1, i + 2));\n    total += count;\n    i += 2;\n  }\n  return total - n;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min === undefined) {\n        min = arr[i];\n        minIndex = i;\n      } else if (arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return [min, minIndex];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0);\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0);\n  const maxIndex = lst.findIndex((x) => x >= max);\n  if (maxIndex === -1) {\n    return -1;\n  }\n  const maxFreqIndex = lst.findIndex((x) => x === max);\n  if (maxFreqIndex === -1) {\n    return -1;\n  }\n  return lst[maxIndex];\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  const result = [];", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = lst.slice()\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2;\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2;\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2;\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2;\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2;\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  } else if (a + c > b) {\n    return (Math.p", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && q.every(x => x <= w);\n};\n\nconsole.log(willItFly([1, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3], 5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let result = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      result = Math.min(arr[i], arr[j]) - arr[i];\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2,", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return lst1\n  }\n  if (lst1.length === 0) {\n    return lst2\n  }\n  if (lst2.length === 0) {\n    return lst1\n  }\n  const map = new Map()\n  lst1.forEach(str => {\n    map.set(str, true)\n  })\n  lst2.forEach(str => {\n    map.set(str, true)\n  })\n  const result = []\n  map.forEach((value, key) => {\n    if (value) {\n      result.push(key)\n    }\n  })\n  return result\n}\n\nmodule.exports = totalMatch\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i <", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower22 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower23 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower24 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconst isSimplePower25 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const n = a.toString();\n  const nn = n.length;\n  const i = n.charAt(nn - 1);\n  const j = n.charAt(nn - 2);\n  const k = n.charAt(nn - 3);\n  return (i === '1' && j === '1' && k === '1') || (i === '2' && j === '2' && k === '2') || (i === '3' && j === '3' && k === '3') || (i === '4' && j === '4' && k === '4') || (i === '5' && j === '5' && k === '5') || (i === '6' && j === '6' && k === '6') || (i === '7' && j === '7' && k === '7') || (i === '8' && j === '8' && k === '8') || (i === '9' && j === '9' && k === '9');\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryDigits = decimal.toString(2).split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    binary += binaryDigits[i];\n  }\n  return 'db' + binary + 'db';\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal2 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal3 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal4 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal5 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal6 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal7 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal8 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal9 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal10 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal11 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal12 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal13 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal14 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binaryDigits[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal15 = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('db');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++)", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 3), (4, 4)]\n  >>> sumList([1, 2, 3, 4, 5])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\n  >>> sumList([1, 2, 3, 4, 5, 6])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18)]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i] * (s[i + 1] - s[i] + 1);\n  }\n  return sum >= 3;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne = gradesArrayLength - 71;\n  const gradesArrayLengthMinusSeventyTwo = gradesArrayLength - 72", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const len = string.length\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 3; i < len; i += 2) {\n    if (!isPrime(i)) return false\n  }\n  return true\n}\n\n/*\n  isPrime is a function that takes a number and returns true if the number is prime or otherwise wrong\n  Examples\n  isPrime(1) == true\n  isPrime(2) == true\n  isPrime(3) == true\n  isPrime(4) == false\n  isPrime(5) == true\n  isPrime(6) == false\n  isPrime(7) == true\n  isPrime(8) == true\n  isPrime(9) == false\n  isPrime(10) == true\n  isPrime(11) == false\n  isPrime(12) == true\n  isPrime(13) == false\n  isPrime(14) == true\n  isPrime(15) == false\n  isPrime(16) == true\n  isPrime(17) == false\n  isPrime(18) == true\n  isPrime(19) == false\n  isPrime(20) == true\n  isPrime(21) == false\n  isPrime(22) == true\n  isPrime(23) == false\n  isPrime(24) == true\n  isPrime(25) == false\n  isPrime(26) == true\n  isPrime(27) == false\n  isPrime(28) == true\n  isPrime(29) == false\n  isPrime(30) == true\n  isPrime(31) == false\n  isPrime(32) == true\n  isPrime(33) == false\n  isPrime(34) == true\n  isPrime(35) == false\n  isPrime(36) == true\n  isPrime(37) == false\n  isPrime(38) == true\n  isPrime(39) == false\n  isPrime(40) == true\n  isPrime(41) == false\n  isPrime(42) == true\n  isPrime(43) == false\n  isPrime(44) == true\n  isPrime(45) == false\n  isPrime(46) == true\n  isPrime(47) == false\n  isPrime(48) == true\n  isPrime(49) == false\n  isPrime(50) == true\n  isPrime(51) == false\n  isPrime(52) == true\n  isPrime(53) == false\n  isPrime(54) == true\n  isPrime(55) == false\n  isPrime(56) == true\n  isPrime(57) == false\n  isPrime(58) == true\n  isPrime(59) == false\n  isPrime(60) == true\n  isPrime(61) == false\n  isPrime(62) == true\n  isPrime(63) == false\n  isPrime(64) == true\n  isPrime(65) == false\n  isPrime(66) == true\n  isPrime(67) == false\n  isPrime(68) == true\n  isPrime(69) == false\n  isPrime(70) == true\n  isPrime(71) == false\n  isPrime(72) == true\n  isPrime(73) == false\n  isPrime(74) == true\n  isPrime(75) == false\n  isPrime(76) == true\n  isPrime(77) == false\n  isPrime(78) == true\n  isPrime(79) == false\n  isPrime(80) == true\n  isPrime(81) == false\n  isPrime(82) == true\n  isPrime(83) == false\n  isPrime(84) == true\n  isPrime(85) == false\n  isPrime(86) == true\n  isPrime(87) == false\n  isPrime(88) == true\n  isPrime(89) == false\n  isPrime(90) == true\n  isPrime(91) == false\n  isPrime(92) == true\n  isPrime(93) == false\n  isPrime(94) == true\n  isPrime(95) == false\n  isPrime(96) == true\n  isPrime(97) == false\n  isPrime(98) == true\n  isPrime(99) == false\n  isPrime(100) == true\n  isPrime(101) == false\n  isPrime(102) == true\n  isPrime(103) == false\n  isPrime(104) == true\n  isPrime(105) == false\n  isPrime(106) == true\n  isPrime(107) == false\n  isPrime(108) == true\n  isPrime(109) == false\n  isPrime(110) == true\n  isPrime(111) == false\n  isPrime(112) == true\n  isPrime(113) == false\n  isPrime(114) == true\n  isPrime(115) == false\n  isPrime(116) == true\n  isPrime(117) == false\n  isPrime(118) == true\n  isPrime(119) == false\n  isPrime(120) == true\n  isPrime(121) == false\n  isPrime(122) == true\n  isPrime(123) == false\n  isPrime(124) == true\n  isPrime(125) == false\n  isPrime(126) == true\n  isPrime(127) == false\n  isPrime(128) == true\n  isPrime(129) == false\n  isPrime(130) == true\n  isPrime(131) == false\n  isPrime(132) == true\n  isPrime(133) == false\n  isPrime(134) == true\n  isPrime(135) == false\n  isPrime(136) == true\n  isPrime(137) == false\n  isPrime(138) == true\n  isPrime(139) == false\n  isPrime(140) == true\n  isPrime(141) == false\n  isPrime(142) == true\n  isPrime(143) == false\n  isPrime(144) == true\n  is", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char\n      if (newWord.length === 0) {\n        newWord += char\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  const result = sortedCols.map(row => [x, row[0]])\n  return result\n}\n\nconst getRow =", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sortedArray[i] + sortedArray[j];\n    if (sum % 2 === 0) {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum;\n      j--;\n    } else {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum;\n      i++;\n    }\n  }\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let n = (i + 1) % s.length;\n    let d = s[n];\n    let e = (Math.floor(Math.random() * 26) + 1) * 2;\n    result += c + e;\n  }\n  return result;\n};\n\n/*CDecrypt a function that takes a string as argument and returns a string that is decrypted with the rotating alphabet. Rotate the alphabet so that the letters move up by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let n = (i + 1) % s.length;\n    let d = s[n];\n    let e = (Math.floor(Math.random() * 26) + 1) * 2;\n    result += c - e;\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let n = (i + 1) % s.length;\n    let d = s[n];\n    let e = (Math.floor(Math.random() * 26) + 1) * 2;\n    result += c + e;\n  }\n  return result;\n};\n\n/*CDecrypt a function that takes a string as argument and returns a string that is decrypted with the rotating alphabet. Rotate the alphabet so that the letters move up by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let n = (i + 1) % s.length;\n    let d = s[n];\n    let e = (Math.floor(Math.random() * 26) + 1) * 2;\n    result += c - e;\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let n = (i + 1) % s.length;\n    let d = s[n];\n    let e = (Math.floor(Math.random() * 26) + 1) * 2;\n    result += c + e;\n  }\n  return result;\n};\n\n/*CDecrypt a function that takes a string as argument and returns a string that is decrypted with the rotating alphabet. Rotate the alphabet so that the letters move up by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let n = (i + 1) % s.length;\n    let d = s[n];\n    let e = (Math.floor(Math.random() * 26) + 1) * 2;\n    result += c - e;\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let n = (i + 1) % s.length;\n    let d = s[n];\n    let e = (Math.floor(Math.random() * 26) + 1) * 2;\n    result += c + e;\n  }\n  return result;\n};\n\n/*CDecrypt a function that takes a string as argument and returns a string that is decrypted with the rotating alphabet. Rotate the alphabet so", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = 1;\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n    i++;\n  }\n  return [max, maxIndex, maxLength];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  if (lst.length === 0) {\n    return null\n  }\n  let smallest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = S.split(\" \").filter(x => x.startsWith(\"I\")).length > 0;\n  return isBored;\n};\n\n", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x - y === z) || (x * y === z) || (x / y === z);\n};\n\nexport default anyInt;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      encoded += letter;\n    } else {\n      let vowel = letter.charAt(0);\n      let vowelIndex = message.indexOf(vowel);\n      let vowelIndex2 = vowelIndex + 2;\n      let vowel2 = message[vowelIndex2];\n      encoded += vowel2;\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      decoded += letter;\n    } else {\n      let vowel = letter.charAt(0);\n      let vowelIndex = message.indexOf(vowel);\n      let vowelIndex2 = vowelIndex + 2;\n      let vowel2 = message[vowelIndex2];\n      decoded += vowel;\n    }\n  }\n  return decoded;\n};\n\nconst test = () => {\n  let message = 'This is a message';\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  console.log(message, encoded, decoded);\n};\n\ntest();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    while (num > 0) {\n      sum += num % 10\n      num = num / 10\n    }\n    if (sum > max) {\n      max = sum\n    }\n  }\n  return max\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  return Object.keys(dict).every(key => {\n    return key.toLowerCase() === key.toUpperCase();\n  });\n};\n\n/*\n  If you specify a list, you return true if all elements are lowercase or all elements are uppercase, otherwise you return false. If the specified list is empty, the function should return false.\n  Examples:\n  checkListCase([\"a\",\"apple\", \"b\",\"banana\"]) should return true.\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"B\",\"banana\"]) should return false.\n  checkListCase([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return false.\n  checkListCase([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return false.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return true.\n  */\nconst checkListCase = (list) => {\n  if (list.length === 0) {\n    return false;\n  }\n  return list.every(element => {\n    return element.toLowerCase() === element.toUpperCase();\n  });\n};\n\n/*\n  If you specify a string, you return true if all characters are lowercase or all characters are uppercase, otherwise you return false. If the specified string is empty, the function should return false.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime2 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime3 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime4 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime5 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime6 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime7 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that takes a non-negative integer and returns the number of prime numbers less than n.\n  for example:\n  countUpTo(5) => 3\n  countUpTo(11) => 5\n  countUpTo(0) => 0\n  countUpTo(20) => 4\n  countUpTo(1) => 0\n  countUpTo(18) => 3\n  */\nconst countUpToPrime8 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes.length\n}\n\n/*\n  Implement a function that", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += parseInt(a_digits[i] * b_digits[j]);\n    }\n  }\n  return product;\n};\n\nmodule.exports = multiply;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLowerOdd2 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLowerOdd3 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLowerOdd4 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length;", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest === 0) {\n    return number;\n  } else if (closest === 1) {\n    return Math.round(number);\n  } else {\n    return Math.round(number) + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest === 0) {\n    return number;\n  } else if (closest === 1) {\n    return Math.round(number);\n  } else {\n    return Math.round(number) + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest === 0) {\n    return number;\n  } else if (closest === 1) {\n    return Math.round(number);\n  } else {\n    return Math.round(number) + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest === 0) {\n    return number;\n  } else if (closest === 1) {\n    return Math.round(number);\n  } else {\n    return Math.round(number) + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest === 0) {\n    return number;\n  } else if (closest === 1) {\n    return Math.round(number);\n  } else {\n    return Math.round(number) + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest === 0) {\n    return number;\n  } else if (closest === 1) {\n    return Math.round(number);\n  } else {\n    return Math.round(number) + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given", "passed": 0}
