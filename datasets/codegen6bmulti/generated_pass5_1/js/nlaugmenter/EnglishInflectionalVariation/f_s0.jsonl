{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const paren_stack = [];\n  let paren_index = 0;\n  let paren_stack_index = 0;\n  let paren_stack_length = 0;\n  let paren_stack_length_index = 0;\n  let paren_stack_length_index_end = 0;\n  let paren_stack_length_index_end_end = 0;\n  let paren_stack_length_index_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_stack_length_index", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.split('').reverse().join('');\n  return prefix + palindrome;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.split('').reverse().join('');\n  return prefix + palindrome;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.split('').reverse().join('');\n  return prefix + palindrome;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.split('').reverse().join('');\n  return prefix + palindrome;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.split('').reverse().join('');\n  return prefix + palindrome;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.split('').reverse().join('');\n  return prefix + palindrome;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile2 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile3 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile4 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile5 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile6 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile7 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile8 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile9 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile10 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile11 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile12 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile13 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile14 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile15 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile16 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile17 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile18 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile19 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst makeAPile20 = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += (i % 2 === 0? i + 1 : -i);\n  }\n  return result;\n};\n\nconst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.join('');\n}\n\n/*\n  You will is given a string of words separated by comma or space. Your task is to return a string of the words in the order they were given.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") ==", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum20 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum21 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum22 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n  return result;\n};\n\nconst chooseNum23 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = x;\n  while (result < y) {\n    result += 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = n.toString(2).length;\n  const mBits = m.toString(2).length;\n  const nBit = nBits - 1;\n  const mBit = mBits - 1;\n  const nMask = 1 << nBit;\n  const mMask = 1 << mBit;\n  const nMasked = n & nMask;\n  const mMasked = m & mMask;\n  const nMaskedBits = nMasked.toString(2).length;\n  const mMaskedBits = mMasked.toString(2).length;\n  const nMaskedBitsBinary = nMasked.toString(2).split('').reverse().join('');\n  const mMaskedBitsBinary = mMasked.toString(2).split('').reverse().join('');\n  const nMaskedBitsBinaryLength = nMaskedBitsBinary.length;\n  const mMaskedBitsBinaryLength = mMaskedBitsBinary.length;\n  const nMaskedBitsBinaryReverse = nMaskedBitsBinary.split('').reverse().join('');\n  const mMaskedBitsBinaryReverse = mMaskedBitsBinary.split('').reverse().join('');\n  const nMaskedBitsBinaryReverseLength = nMaskedBitsBinaryReverse.length;\n  const mMaskedBitsBinaryReverseLength = mMaskedBitsBinaryReverse.length;\n  const nMaskedBitsBinaryReverseReverse = nMaskedBitsBinaryReverse.split('').reverse().join('');\n  const mMaskedBitsBinaryReverseReverse = mMaskedBitsBinaryReverse.split('').reverse().join('');\n  const nMaskedBitsBinaryReverseReverseLength = nMaskedBitsBinaryReverseReverse.length;\n  const mMaskedBitsBinaryReverseReverseLength = mMaskedBitsBinaryReverseReverse.length;\n  const nMaskedBitsBinaryReverseReverseReverse = nMaskedBitsBinaryReverseReverse.split('').reverse().join('');\n  const mMaskedBitsBinaryReverseReverseReverse = mMaskedBitsBinaryReverseReverse.split('').reverse().join('');\n  const nMaskedBitsBinaryReverseReverseReverseLength = nMaskedBitsBinaryReverseReverseReverse.length;\n  const mMaskedBitsBinaryReverseReverseReverseLength = mMaskedBitsBinaryReverseReverseReverse.length;\n  const nMaskedBitsBinaryReverseReverseReverse = nMaskedBitsBinaryReverseReverseReverse.split('').reverse().join('');\n  const mMaskedBitsBinaryReverseReverseReverse = mMaskedBitsBinaryReverseReverseReverse.split('').reverse().join('');\n  const nMaskedBitsBinaryReverseReverseReverseLength = nMaskedBitsBinaryReverseReverseReverse.length;\n  const mMaskedBitsBinaryReverseReverseReverseLength = mMaskedBitsBinaryReverseReverseReverse.length;\n  const nMaskedBitsBinaryReverseReverseReverseReverse = nMaskedBitsBinaryReverseReverseReverseReverse.split('').reverse().join('');\n  const mMaskedBitsBinaryReverseReverseReverseReverse = mMaskedBitsBinaryReverseReverseReverseReverse.split('').reverse().join('');\n  const nMaskedBitsBinaryReverseReverseReverseReverseLength = nMaskedBitsBinaryReverseReverseReverseReverse.length;\n  const mMaskedBitsBinaryReverseReverseReverseReverseLength = mMaskedBitsBinaryReverseReverseReverseReverse.length;\n  const nMaskedBitsBinaryReverseReverseReverseReverse = nMaskedBitsBinaryReverseReverseReverseReverse.split('').reverse().join('');\n  const mMaskedBitsBinaryReverseReverseReverseReverse = mMaskedBitsBinaryReverseReverseReverseReverse.split('').reverse().join('');\n  const nMaskedBitsBinaryReverseReverseReverseReverseLength = nMaskedBitsBinaryReverseReverseReverseReverse.length;\n  const mMaskedBitsBinaryReverseReverseReverseReverseLength = mMaskedBitsBinaryReverseReverseReverseReverse.length;\n  const nMaskedBitsBinaryReverseReverseReverseReverse = nMaskedBitsBinaryReverseReverseReverseReverse.split('').reverse().join('');\n  const mMaskedBitsBinaryReverseReverseReverseReverse = mMaskedBitsBinaryReverseReverseReverseReverse.split('').reverse().join('');\n  const nMaskedBitsBinaryReverseReverseReverseReverseLength = nMaskedBitsBinaryReverseReverseReverseReverse.length;\n  const", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x; i++) {\n    const digit = x % 10;\n    if (digit % 2 === 0) {\n      result.push(x);\n    }\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  return arr.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  }).reverse().map(x => {\n    if (x < 10) {\n      return 'One'\n    } else if (x < 20) {\n      return 'Two'\n    } else if (x < 30) {\n      return 'Three'\n    } else if (x < 40) {\n      return 'Four'\n    } else if (x < 50) {\n      return 'Five'\n    } else if (x < 60) {\n      return 'Six'\n    } else if (x < 70) {\n      return 'Seven'\n    } else if (x < 80) {\n      return 'Eight'\n    } else if (x < 90) {\n      return 'Nine'\n    } else {\n      return 'Zero'\n    }\n  })\n}\n\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  return arr.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  }).reverse().map(x => {\n    if (x < 10) {\n      return 'One'\n    } else if (x < 20) {\n      return 'Two'\n    } else if (x < 30) {\n      return 'Three'\n    } else if (x < 40) {\n      return 'Four'\n    } else if (x < 50) {\n      return 'Five'\n    } else if (x < 60) {\n      return 'Six'\n    } else if (x < 70) {\n      return 'Seven'\n    } else if (x < 80) {\n      return 'Eight'\n    } else if (x < 90) {\n      return 'Nine'\n    } else {\n      return 'Zero'\n    }\n  })\n}\n\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  return arr.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  }).reverse().map(x => {\n    if (x < 10) {\n      return 'One'\n    } else if (x < 20) {\n      return 'Two'\n    } else if (x < 30) {\n      return 'Three'\n    } else if (x < 40) {\n      return 'Four'\n    } else if (x < 50) {\n      return 'Five'\n    } else if (x < 60) {\n      return 'Six'\n    } else if (x < 70) {\n      return 'Seven'\n    } else if (x < 80) {\n      return 'Eight'\n    } else if (x < 90) {\n      return 'Nine'\n    } else {\n      return 'Zero'\n    }\n  })\n}\n\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  return arr.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  }).reverse().map(x => {\n    if (x < 10) {\n      return 'One'\n    } else if (x < 20) {\n      return 'Two'\n    } else if (x < 30) {\n      return 'Three'\n    } else if (x < 40) {\n      return 'Four'\n    } else if (x < 50) {\n      return 'Five'\n    } else if (x < 60) {\n      return 'Six'\n    } else if (x < 70) {\n      return 'Seven'\n    } else if (x < 80) {\n      return 'Eight'\n    } else if (x < 90) {\n      return 'Nine'\n    } else {\n      return 'Zero'\n    }\n  })\n}\n\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  return arr.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  }).reverse().map(x => {\n    if (x < 10) {\n      return 'One'\n    } else if (x < 20) {\n      return 'Two'\n    } else if (x < 30) {\n      return 'Three'\n    } else if (x < 40) {\n      return 'Four'\n    } else if (x < 50) {\n      return 'Five'\n    } else if (x < 60) {\n      return 'Six'\n    } else if (x < 70) {\n      return 'Seven'\n    } else if (x < 80) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorials[i];\n    }\n    return sum;\n  };\n  const odd = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        sum += factorials[i];\n      }\n    }\n    return sum;\n  };\n  const even = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        sum += factorials[i];\n      }\n    }\n    return sum;\n  };\n  return [odd(n), even(n)];\n};\n\nconst f_2 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_3 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_4 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_5 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_6 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_7 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_8 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_9 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_10 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_11 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_12 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_13 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_14 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconst f_15 = (n) => {\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i * i * i * i * i * i * i * i * i * i * i * i * i;\n    }\n    return sum;\n  };\n  return sum(n);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even.push(num)\n    } else {\n      odd.push(num)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconsole.log(evenOddPalindrome(3))\nconsole.log(evenOddPalindrome(12))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns a function which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n    - a = '1101'\n    - b = '1011'\n    - c = '1100'\n    - d = '0110'\n    - e = '0111'\n    - f = '0101'\n    - g = '0110'\n    - h = '0101'\n    - i = '0110'\n    - j = '0101'\n    - k = '0110'\n    - l = '0101'\n    - m = '0110'\n    - n = '0101'\n    - o = '0110'\n    - p = '0101'\n    - q = '0110'\n    - r = '0101'\n    - s = '0110'\n    - t = '0101'\n    - u = '0110'\n    - v = '0101'\n    - w = '0110'\n    - x = '0101'\n    - y = '0110'\n    - z = '0101'\n    - aa = '0110'\n    - ab = '0101'\n    - ac = '0110'\n    - ad = '0101'\n    - ae = '0110'\n    - af = '0101'\n    - ag = '0110'\n    - ah = '0101'\n    - ai = '0110'\n    - aj = '0101'\n    - ak = '0110'\n    - al = '0101'\n    - am = '0110'\n    - an = '0101'\n    - ao = '0110'\n    - ap = '0101'\n    - aq = '0110'\n    - ar = '0101'\n    - as = '0110'\n    - at = '0101'\n    - au = '0110'\n    - av = '0101'\n    - aw = '0110'\n    - ax = '0101'\n    - ay = '0110'\n    - az = '0101'\n    - ba = '0110'\n    - bb = '0101'\n    - bc = '0110'\n    - bd = '0101'\n    - be = '0110'\n    - bf = '0101'\n    - bg = '0110'\n    - bh = '0101'\n    - bi = '0110'\n    - bj = '0101'\n    - bk = '0110'\n    - bl = '0101'\n    - bm = '0110'\n    - bn = '0101'\n    - bo = '0110'\n    - bp = '0101'\n    - bq = '0110'\n    - br = '0101'\n    - bs = '0110'\n    - bt = '0101'\n    - bu = '0110'\n    - bv = '0101'\n    - bw = '0110'\n    - bx = '0101'\n    - by = '0110'\n    - bz = '0101'\n    - aaa = '0110'\n    - aab = '0101'\n    - aac = '0110'\n    - aad = '0101'\n    - aae = '0110'\n    - aaf = '0101'\n    - aag = '0110'\n    - aah = '0101'\n    - aai = '0110'\n    - aaj = '0101'\n    - aak = '0110'\n    - aal = '0101'\n    - ama = '0110'\n    - amb = '0101'\n    - amc = '0110'\n    - amd = '0101'\n    - aem = '0110'\n    - aef = '0101'\n    - aeg = '0110'\n    - aeh = '0101'\n    - aei = '0110'\n    - aej = '0101'\n    - aek = '0110'\n    - ael = '0101'\n    - aem = '0110'\n    - aen = '0101'\n    - aeo = '0110'\n    - aep = '0101'\n    - aeq = '0110'\n    - aer = '0101'\n    - aes = '0110'\n    - aet = '0101'\n    - aeu = '0110'\n    - aev = '0101'\n    - aew = '0110'\n    - aex = '0101'\n    - aey = '0110'\n    - aez = '0101'\n    - baa = '0110'\n    - bab = '0101'\n    - bac = '0110'\n    - bad = '0101'\n    - bae = '0110'\n    - baf = '0101'\n    - bag = '0110'\n    - bah = '0101'\n    - bai = '0110'\n    - baj = '0101'\n    - bak = '0110'\n    - bal = '0101'\n    - bam = '0110'\n    - ban = '0101'\n    - boa = '0110'\n    - bob = '0101'\n    - boc = '0110'\n    - bod = '0101'\n    - boe = '0110'\n    - bof = '0101'\n    - bog = '0110'\n    - boh = '0101'\n    - boi = '0110'\n    - boj = '0101'\n    - bok = '0110'\n    - bol = '0101'\n    - bom = '0110'\n    - bon = '0101'\n    - boq = '0110'\n    - bor", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  if (len!== lst2.length) return \"NO\";\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) return \"NO\";\n    result.push(lst1[i]);\n  }\n  return \"YES\";\n};\n\nconst test = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\nconst test = 'a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (s[i] === c[j]) {\n      j++;\n      if (j === c.length) {\n        result.push(s.slice(i + 1));\n        i = i + 1;\n        j = 0;\n      }\n    } else {\n      i++;\n    }\n  }\n  return [result.join(''), s.length === result.length];\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\ntest.forEach(t => {\n  const [s, c] = t;\n  console.log(`${s} -> ${reverseDelete(s, c)}`);\n});\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (str) => {\n    const len = str.length\n    const odd = [0]\n    for (let i = 0; i < len; i++) {\n      if (str[i] === '1') {\n        odd[0]++\n      }\n    }\n    return odd\n  }\n  const oddCount = (lst) => {\n    const odd = []\n    for (let i = 0; i < lst.length; i++) {\n      odd.push(count(lst[i]))\n    }\n    return odd\n  }\n  return oddCount(lst)\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = Math.min(sum, 0);\n  const minSumOfSubArrays = [];\n  const subArraySum = (start, end) => {\n    const subArray = nums.slice(start, end + 1);\n    const sum = subArray.reduce((acc, num) => acc + num, 0);\n    if (sum === minSum) {\n      minSumOfSubArrays.push(sum);\n    }\n  };\n  subArraySum(0, nums.length - 1);\n  return minSumOfSubArrays;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length\n  const [row, col] = grid[0]\n  const [row_fill, col_fill] = [0, 0]\n  const [row_fill_max, col_fill_max] = [0, 0]\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        row_fill_max = Math.max(row_fill_max, row_fill)\n        row_fill += 1\n      }\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        col_fill_max = Math.max(col_fill_max, col_fill)\n        col_fill += 1\n      }\n    }\n  }\n\n  return Math.min(row_fill_max, col_fill_max)\n}\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${grid}`)\n  console.log(`capacity: ${capacity}`)\n  console.log(`maxFill: ${maxFill(grid, capacity)}`)\n}\n\ntest([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\ntest([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\ntest([[0,0,0], [0,0,0]], 5)\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinaryDesc = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimalDesc = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinaryDesc = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\n Given a string s and a non-negative integer n, you need to implement a function that returns the nth letter of the string.\n If the nth letter does not exist, return -1.\n Notes:\n  1. The input string may contain duplicate letters, but for the purpose of this question, we ignore the duplicates.\n  2. The returned value must be in the range of 32 ~ 126.\n  3. The given string is not empty and will not contain any spaces.\n  4. You may assume the length of the given string will not exceed 1,000,000.\n  5. You can assume that n is always valid, that is, n is always less than the length of the given string.\n  6. The returned value is guaranteed to be a letter.\n  7. If the nth letter does not exist, return -1.\n  8. If the nth letter exists, but is not a letter, return -1.\n  9. The returned value is guaranteed to be a letter.\n  Examples:\n  getNthLetter(\"abc\", 1) ==> \"b\"\n  getNthLetter(\"abc\", 2) ==> \"c\"\n  getNthLetter(\"abc\", 3) ==> \"a\"\n  getNthLetter(\"abc\", 4) ==> \"b\"\n  getNthLetter(\"abc\", 5) ==> \"c\"\n  getNthLetter(\"abc\", 6) ==> \"a\"\n  getNthLetter(\"abc\", 7) ==> \"b\"\n  getNthLetter(\"abc\", 8) ==> \"c\"\n  getNthLetter(\"abc\", 9) ==> \"a\"\n  getNthLetter(\"abc\", 10) ==> \"b\"\n  getNthLetter(\"abc\", 11) ==> \"c\"\n  getNthLetter(\"abc\", 12) ==> \"a\"\n  getNthLetter(\"abc\", 13) ==> \"b\"\n  getNthLetter(\"abc\", 14) ==> \"c\"\n  getNthLetter(\"abc\", 15) ==> \"a\"\n  getNthLetter(\"abc\", 16) ==> \"b\"\n  getNthLetter(\"abc\", 17) ==> \"c\"\n  getNthLetter(\"abc\", 18) ==> \"a\"\n  getNthLetter(\"abc\", 19) ==> \"b\"\n  getNthLetter(\"abc\", 20) ==> \"c\"\n  getNthLetter(\"abc\", 21) ==> \"a\"\n  getNthLetter(\"abc\", 22) ==> \"b\"\n  getNthLetter(\"abc\", 23) ==> \"c\"\n  getNthLetter(\"abc\", 24) ==> \"a\"\n  getNthLetter(\"abc\", 25) ==> \"b\"\n  getNthLetter(\"abc\", 26) ==> \"c\"\n  getNthLetter(\"abc\", 27) ==> \"a\"\n  getNthLetter(\"abc\", 28) ==> \"b\"\n  getNthLetter(\"abc\", 29) ==> \"c\"\n  getNthLetter(\"abc\", 30) ==> \"a\"\n  getNthLetter(\"abc\", 31) ==> \"b\"\n  getNthLetter(\"abc\", 32) ==> \"c\"\n  getNthLetter(\"abc\", 33) ==> \"a\"\n  getNthLetter(\"abc\", 34) ==> \"b\"\n  getNthLetter(\"abc\", 35) ==> \"c\"\n  getNthLetter(\"abc\", 36) ==> \"a\"\n  getNthLetter(\"abc\", 37) ==> \"b\"\n  getNthLetter(\"abc\", 38) ==> \"c\"\n  getNthLetter(\"abc\", 39) ==> \"a\"\n  getNthLetter(\"abc\", 40) ==> \"b\"\n  getNthLetter(\"abc\", 41) ==> \"c\"\n  getNthLetter(\"abc\", 42) ==> \"a\"\n  getNthLetter(\"abc\", 43) ==> \"b\"\n  getNthLetter(\"abc\", 44) ==> \"c\"\n  getNthLetter(\"abc\", 45) ==> \"a\"\n  getNthLetter(\"abc\", 46) ==> \"b\"\n  getNthLetter(\"abc\", 47) ==> \"c\"\n  getNthLetter(\"abc\", 48) ==> \"a\"\n  getNthLetter(\"abc\", 49) ==> \"b\"\n  getNthLetter(\"abc\", 50) ==> \"c\"\n  getNthLetter(\"abc\", 51) ==> \"a\"\n  getNthLetter(\"abc\", 52) ==> \"b\"\n  getNthLetter(\"abc\", 53) ==> \"c\"\n  getNthLetter(\"abc\", 54) ==> \"a\"\n  getNthLetter(\"abc\", 55) ==> \"b\"\n  getNthLetter(\"abc\", 56) ==> \"c\"\n  getNthLetter(\"abc\", 57) ==> \"a\"\n  getNthLetter(\"abc\", 58) ==> \"b\"\n  getNthLetter(\"abc\", 59) ==> \"c\"\n  getNthLetter(\"abc\", 60) ==> \"a\"\n  getNthLetter(\"abc\", 61) ==> \"b\"\n  getNthLetter(\"abc\", 62) ==> \"c\"\n  getNthLetter(\"abc\", 63) ==> \"a\"\n  getNthLetter(\"abc\", 64) ==> \"b\"\n  getNthLetter(\"abc\", 65) ==> \"c\"\n  getNthLetter(\"abc\", 66) ==", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const closestVowel = '';\n  const closestVowelIndex = 0;\n  const closestVowelDistance = 0;\n  const closestVowelDistanceIndex = 0;\n  const closestVowelDistanceIndex2 = 0;\n  const closestVowelDistanceIndex3 = 0;\n  const closestVowelDistanceIndex4 = 0;\n  const closestVowelDistanceIndex5 = 0;\n  const closestVowelDistanceIndex6 = 0;\n  const closestVowelDistanceIndex7 = 0;\n  const closestVowelDistanceIndex8 = 0;\n  const closestVowelDistanceIndex9 = 0;\n  const closestVowelDistanceIndex10 = 0;\n  const closestVowelDistanceIndex11 = 0;\n  const closestVowelDistanceIndex12 = 0;\n  const closestVowelDistanceIndex13 = 0;\n  const closestVowelDistanceIndex14 = 0;\n  const closestVowelDistanceIndex15 = 0;\n  const closestVowelDistanceIndex16 = 0;\n  const closestVowelDistanceIndex17 = 0;\n  const closestVowelDistanceIndex18 = 0;\n  const closestVowelDistanceIndex19 = 0;\n  const closestVowelDistanceIndex20 = 0;\n  const closestVowelDistanceIndex21 = 0;\n  const closestVowelDistanceIndex22 = 0;\n  const closestVowelDistanceIndex23 = 0;\n  const closestVowelDistanceIndex24 = 0;\n  const closestVowelDistanceIndex25 = 0;\n  const closestVowelDistanceIndex26 = 0;\n  const closestVowelDistanceIndex27 = 0;\n  const closestVowelDistanceIndex28 = 0;\n  const closestVowelDistanceIndex29 = 0;\n  const closestVowelDistanceIndex30 = 0;\n  const closestVowelDistanceIndex31 = 0;\n  const closestVowelDistanceIndex32 = 0;\n  const closestVowelDistanceIndex33 = 0;\n  const closestVowelDistanceIndex34 = 0;\n  const closestVowelDistanceIndex35 = 0;\n  const closestVowelDistanceIndex36 = 0;\n  const closestVowelDistanceIndex37 = 0;\n  const closestVowelDistanceIndex38 = 0;\n  const closestVowelDistanceIndex39 = 0;\n  const closestVowelDistanceIndex40 = 0;\n  const closestVowelDistanceIndex41 = 0;\n  const closestVowelDistanceIndex42 = 0;\n  const closestVowelDistanceIndex43 = 0;\n  const closestVowelDistanceIndex44 = 0;\n  const closestVowelDistanceIndex45 = 0;\n  const closestVowelDistanceIndex46 = 0;\n  const closestVowelDistanceIndex47 = 0;\n  const closestVowelDistanceIndex48 = 0;\n  const closestVowelDistanceIndex49 = 0;\n  const closestVowelDistanceIndex50 = 0;\n  const closestVowelDistanceIndex51 = 0;\n  const closestVowelDistanceIndex52 = 0;\n  const closestVowelDistanceIndex53 = 0;\n  const closestVowelDistanceIndex54 = 0;\n  const closestVowelDistanceIndex55 = 0;\n  const closestVowelDistanceIndex56 = 0;\n  const closestVowelDistanceIndex57 = 0;\n  const closestVowelDistanceIndex58 = 0;\n  const closestVowelDistanceIndex59 = 0;\n  const closestVowelDistanceIndex60 = 0;\n  const closestVowelDistanceIndex61 = 0;\n  const closestVowelDistanceIndex62 = 0;\n  const closestVowelDistanceIndex63 = 0;\n  const closestVowelDistanceIndex64 = 0;\n  const closestVowelDistanceIndex65 = 0;\n  const closestVowelDistanceIndex66 = 0;\n  const closestVowelDistanceIndex67 = 0;\n  const closestVowelDistanceIndex68 = 0;\n  const closestVowelDistanceIndex69 = 0;\n  const closestVowelDistanceIndex70 = 0;\n  const closestVowelDistanceIndex71 = 0;\n  const closestVowelDistanceIndex72 = 0;\n  const closestVowelDistanceIndex73 = 0;\n  const closestVowelDistanceIndex74 = 0;\n  const closestVowelDistanceIndex75 = 0;\n  const closestVowelDistanceIndex76 = 0;\n  const closestVowelDistanceIndex77 = 0;\n  const closestVowelDistanceIndex78 = 0;\n  const closestVowelDistanceIndex79 = 0;\n  const closestVowelDistanceIndex80 = 0;\n  const closestVowelDistanceIndex81 = 0;\n  const closestVowelDistanceIndex82 = 0;\n  const closestVowelDistanceIndex83 = 0;\n  const closestVowelDistanceIndex84 = 0;\n  const closestVowelDistanceIndex85 = 0;\n  const closestVowelDistanceIndex86 = 0;\n  const closestVowelDistanceIndex87 = 0;\n  const closestVowelDistanceIndex88 = 0;\n  const closestVowelDistanceIndex89 = 0;\n  const closestVowelDistanceIndex90 = 0;\n  const closestVowelDistanceIndex91 = 0;\n  const closestVowelDistanceIndex92 = 0;\n  const closestVowelDistanceIndex93 = 0;\n  const closestVowelDistanceIndex94 = 0;\n  const closestVowelDistanceIndex95 = 0;\n  const closestVowelDistanceIndex96 = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens2 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens3 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens4 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens5 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens6 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens7 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens8 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}\n\nconst matchParens9 = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop())\n      result.push(lst[i])\n    }\n  }\n  return 'Yes'\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const arrLength = arr.length\n  const kLength = k\n  const result = arr.slice(0, kLength)\n  const maxLength = kLength\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math.floor(maxLength / 2)\n  const max = arr[maxIndex]\n  const maxLength = kLength - 1\n  const maxIndex = Math", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((acc, curr, i) => {\n    if (i < k) {\n      return acc + curr\n    } else {\n      return acc + (curr * 10)\n    }\n  }, 0)\n  return sum\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n  let current = n\n  while (current > 1) {\n    if (current % 2 === 0) {\n      current = current / 2\n    } else {\n      current = 3 * current + 1\n    }\n    oddCollatz.push(current)\n  }\n  return oddCollatz\n}\n\nexport default getOddCollatz\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let month = parseInt(dateArray[1], 10);\n  let day = parseInt(dateArray[2], 10);\n  let year = parseInt(dateArray[0], 10);\n  let days = new Date(year, month, day).getDate();\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nconst validDateString = (date) => {\n  let dateArray = date.split('-');\n  let month = parseInt(dateArray[1], 10);\n  let day = parseInt(dateArray[2], 10);\n  let year = parseInt(dateArray[0], 10);\n  let days = new Date(year, month, day).getDate();\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nconst validDateString2 = (date) => {\n  let dateArray = date.split('-');\n  let month = parseInt(dateArray[1], 10);\n  let day = parseInt(dateArray[2], 10);\n  let year = parseInt(dateArray[0], 10);\n  let days = new Date(year, month, day).getDate();\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nconst validDateString3 = (date) => {\n  let dateArray = date.split('-');\n  let month = parseInt(dateArray[1], 10);\n  let day = parseInt(dateArray[2], 10);\n  let year = parseInt(dateArray[0], 10);\n  let days = new Date(year, month, day).getDate();\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nconst validDateString4 = (date) => {\n  let dateArray = date.split('-');\n  let month = parseInt(dateArray[1], 10);\n  let day = parseInt(dateArray[2], 10);\n  let year = parseInt(dateArray[0], 10);\n  let days = new Date(year, month, day).getDate();\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder2 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder3 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder4 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder5 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder6 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder7 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder8 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder9 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same order as the original list\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByOrder10 = (txt) => {\n  const words = splitWords(txt);\n  return words.length > 1? words : words.length? words[0].split(/\\W/) : [];\n};\n\n/* Gives a list of words, return a list of words with the same", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\nexport default isSorted;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return null\n  }\n  const arrSum = arr.reduce((previousValue, currentValue) => previousValue + currentValue, 0)\n  const arrProduct = arr.reduce((previousValue, currentValue) => previousValue * currentValue, 1)\n  const arrSign = arr.reduce((previousValue, currentValue) => previousValue + currentValue, 0)\n  return arrSum * arrProduct * arrSign\n}\n\nmodule.exports = prodSigns\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m);\n  dp[0] = 1;\n  for (let i = 1; i < n * m; i++) {\n    dp[i] = Infinity;\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        dp[i * m + j] = 0;\n      } else {\n        dp[i * m + j] = Infinity;\n        for (let k = 1; k < k; k++) {\n          const lst = [i, j, k];\n          const lst_k = [i, j, k - 1];\n          const lst_k_1 = [i, j, k + 1];\n          const lst_k_2 = [i, j, k + 2];\n          const lst_k_3 = [i, j, k + 3];\n          const lst_k_4 = [i, j, k + 4];\n          const lst_k_5 = [i, j, k + 5];\n          const lst_k_6 = [i, j, k + 6];\n          const lst_k_7 = [i, j, k + 7];\n          const lst_k_8 = [i, j, k + 8];\n          const lst_k_9 = [i, j, k + 9];\n          const lst_k_10 = [i, j, k + 10];\n          const lst_k_11 = [i, j, k + 11];\n          const lst_k_12 = [i, j, k + 12];\n          const lst_k_13 = [i, j, k + 13];\n          const lst_k_14 = [i, j, k + 14];\n          const lst_k_15 = [i, j, k + 15];\n          const lst_k_16 = [i, j, k + 16];\n          const lst_k_17 = [i, j, k + 17];\n          const lst_k_18 = [i, j, k + 18];\n          const lst_k_19 = [i, j, k + 19];\n          const lst_k_20 = [i, j, k + 20];\n          const lst_k_21 = [i, j, k + 21];\n          const lst_k_22 = [i, j, k + 22];\n          const lst_k_23 = [i, j, k + 23];\n          const lst_k_24 = [i, j, k + 24];\n          const lst_k_25 = [i, j, k + 25];\n          const lst_k_26 = [i, j, k + 26];\n          const lst_k_27 = [i, j, k + 27];\n          const lst_k_28 = [i, j, k + 28];\n          const lst_k_29 = [i, j, k + 29];\n          const lst_k_30 = [i, j, k + 30];\n          const lst_k_31 = [i, j, k + 31];\n          const lst_k_32 = [i, j, k + 32];\n          const lst_k_33 = [i, j, k + 33];\n          const lst_k_34 = [i, j, k + 34];\n          const lst_k_35 = [i, j, k + 35];\n          const lst_k_36 = [i, j, k + 36];\n          const lst_k_37 = [i, j, k + 37];\n          const lst_k_38 = [i, j, k + 38];\n          const lst_k_39 = [i, j, k + 39];\n          const lst_k_40 = [i, j, k + 40];\n          const lst_k_41 = [i, j, k + 41];\n          const lst_k_42 = [i, j, k + 42];\n          const lst_k_43 = [i, j, k + 43];\n          const lst_k_44 = [i, j, k + 44];\n          const lst_k_45 = [i, j, k + 45];\n          const lst_k_46 = [i, j, k + 46];\n          const lst_k_47 = [i, j, k + 47];\n          const lst_k_48 = [i, j, k + 48];\n          const lst_k_49 = [i, j, k + 49];\n          const lst_k_50 = [i, j,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  return Math.max(a, b);\n};\n\n/* Return a number of the form a/b\n  >>> quotient(3, 5)\n  1\n  >>> quotient(25, 15)\n  5\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/* Return a number of the form a*b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  375\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n  125\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b);\n};\n\n/* Return a number of the form a^b\n  >>> power(3, 2)\n  9\n  >>> power(25, 2)\n  25\n  >>> power(25, 3)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    if (n === 1) return 3\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return digits(n) % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return digits(n) % 2 === 0;\n};\n\nconst isOddOrEven = (n) => {\n  return isOdd(n) || isEven(n);\n};\n\nconst isOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEven = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEven = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEven = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n) || isEven(n) || isOdd(n);\n};\n\nconst isOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = (n) => {\n  return isOdd(n) || isEven(n) || isOdd(n) || isEven(n) ||", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === '[') {\n        return true;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(txt.slice(0, -1));\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isNumber(\"123\") ➞ true\n  isNumber(\"123a\") ➞ false\n  isNumber(\"\") ➞ false\n  */\nconst isNumber = (txt) => {\n  return txt.match(/^\\d+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isNumber(\"123\") ➞ true\n  isNumber(\"123a\") ➞ false\n  isNumber(\"\") ➞ false\n  */\nconst isAlpha = (txt) => {\n  return txt.match(/^[a-zA-Z]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumeric = (txt) => {\n  return txt.match(/^[a-zA-Z0-9]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithSpace = (txt) => {\n  return txt.match(/^[a-zA-Z0-9 ]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphen = (txt) => {\n  return txt.match(/^[a-zA-Z0-9-]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphenAndSpace = (txt) => {\n  return txt.match(/^[a-zA-Z0-9- ]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphenAndSpaceAndPeriod = (txt) => {\n  return txt.match(/^[a-zA-Z0-9- ]+\\.[0-9]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphenAndSpaceAndPeriodAndComma = (txt) => {\n  return txt.match(/^[a-zA-Z0-9- ]+\\.[0-9]+,[0-9]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphenAndSpaceAndPeriodAndCommaAndPeriod = (txt) => {\n  return txt.match(/^[a-zA-Z0-9- ]+\\.[0-9]+,[0-9]+\\.[0-9]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphenAndSpaceAndPeriodAndCommaAndPeriodAndHyphen = (txt) => {\n  return txt.match(/^[a-zA-Z0-9- ]+\\.[0-9]+,[0-9]+\\.[0-9]+\\-[0-9]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphenAndSpaceAndPeriodAndCommaAndPeriodAndHyphenAndSpace = (txt) => {\n  return txt.match(/^[a-zA-Z0-9- ]+\\.[0-9]+,[0-9]+\\.[0-9]+\\-[0-9]+ [0-9]+$/);\n};\n\n/*\n  Create a function that returns true if the string is a number, and false otherwise.\n  Examples:\n  isAlpha(\"123\") ➞ true\n  isAlpha(\"123a\") ➞ false\n  isAlpha(\"\") ➞ false\n  */\nconst isAlphaNumericWithHyphenAndSpace", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const sorted = arr.slice().sort();\n  let i = 0;\n  let j = sorted.length - 1;\n  let result = -1;\n  while (i < j) {\n    if (sorted[i] < sorted[j]) {\n      result = i;\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns the largest of two numbers.\n  Examples:\n  largestOfTwo([1, 2]) == 2\n  largestOfTwo([1, 3]) == 3\n  largestOfTwo([2, 3]) == 3\n  largestOfTwo([3, 2]) == 3\n  largestOfTwo([3, 3]) == 3\n  largestOfTwo([4, 3]) == 4\n  largestOfTwo([4, 4]) == 4\n  largestOfTwo([5, 4]) == 5\n  largestOfTwo([5, 5]) == 5\n  largestOfTwo([6, 4]) == 6\n  largestOfTwo([6, 6]) == 6\n  largestOfTwo([7, 4]) == 7\n  largestOfTwo([7, 7]) == 7\n  largestOfTwo([8, 4]) == 8\n  largestOfTwo([8, 8]) == 8\n  largestOfTwo([9, 4]) == 9\n  largestOfTwo([9, 9]) == 9\n  largestOfTwo([10, 4]) == 10\n  largestOfTwo([10, 10]) == 10\n  largestOfTwo([11, 4]) == 11\n  largestOfTwo([11, 11]) == 11\n  largestOfTwo([12, 4]) == 12\n  largestOfTwo([12, 12]) == 12\n  largestOfTwo([13, 4]) == 13\n  largestOfTwo([13, 13]) == 13\n  largestOfTwo([14, 4]) == 14\n  largestOfTwo([14, 14]) == 14\n  largestOfTwo([15, 4]) == 15\n  largestOfTwo([15, 15]) == 15\n  largestOfTwo([16, 4]) == 16\n  largestOfTwo([16, 16]) == 16\n  largestOfTwo([17, 4]) == 17\n  largestOfTwo([17, 17]) == 17\n  largestOfTwo([18, 4]) == 18\n  largestOfTwo([18, 18]) == 18\n  largestOfTwo([19, 4]) == 19\n  largestOfTwo([19, 19]) == 19\n  largestOfTwo([20, 4]) == 20\n  largestOfTwo([20, 20]) == 20\n  largestOfTwo([21, 4]) == 21\n  largestOfTwo([21, 21]) == 21\n  largestOfTwo([22, 4]) == 22\n  largestOfTwo([22, 22]) == 22\n  largestOfTwo([23, 4]) == 23\n  largestOfTwo([23, 23]) == 23\n  largestOfTwo([24, 4]) == 24\n  largestOfTwo([24, 24]) == 24\n  largestOfTwo([25, 4]) == 25\n  largestOfTwo([25, 25]) == 25\n  largestOfTwo([26, 4]) == 26\n  largestOfTwo([26, 26]) == 26\n  largestOfTwo([27, 4]) == 27\n  largestOfTwo([27, 27]) == 27\n  largestOfTwo([28, 4]) == 28\n  largestOfTwo([28, 28]) == 28\n  largestOfTwo([29, 4]) == 29\n  largestOfTwo([29, 29]) == 29\n  largestOfTwo([30, 4]) == 30\n  largestOfTwo([30, 30]) == 30\n  largestOfTwo([31, 4]) == 31\n  largestOfTwo([31, 31]) == 31\n  largestOfTwo([32, 4]) == 32\n  largestOfTwo([32, 32]) == 32\n  largestOfTwo([33, 4]) == 33\n  largestOfTwo([33, 33]) == 33\n  largestOfTwo([34, 4]) == 34\n  largestOfTwo([34, 34]) == 34\n  largestOfTwo([35, 4]) == 35\n  largestOfTwo([35, 35]) == 35\n  largestOfTwo([36, 4]) == 36\n  largestOfTwo([36, 36]) == 36\n  largestOfTwo([37, 4]) == 37\n  largestOfTwo([37, 37]) == 37\n  largestOfTwo([38, 4]) == 38\n  largestOfTwo([38, 38]) == 38\n  largestOfTwo([39, 4]) == 39\n  largestOfTwo([39, 39]) == 39\n  largestOfTwo([40, 4]) == 40\n  largestOfTwo([40, 40]) == 40\n  largestOfTwo([41, 4]) == 41\n  largestOfTwo([41, 41]) == 41\n  largestOfTwo([42, 4]) == 42\n  largestOfTwo([42, 42]) == 42\n  largestOfTwo([43, 4]) == 43\n  largestOfTwo([43, 43]) == 43\n  largestOfTwo([44, 4]) == 44\n  largestOfTwo([44, 44]) == 44\n  largestOfTwo([45, 4]) == 45\n  largestOfTwo([45, 45]) == 45\n  largestOfTwo([46, 4]) == 46\n  largestOfTwo([46, 46]) == 46\n  largestOfTwo([47, 4]) == 47\n  largestOfTwo([47, 47]) == 47\n  largestOfTwo([48, 4]) == 48\n  largestOfTwo([48, 48]) == 48\n  largestOfTwo([49, 4]) == 49\n  largestOfTwo([49, 49]) == 49\n  largestOfTwo([50, 4]) == 50\n  largestOfTwo([50, 50]) == 50\n  largestOfTwo([51, 4]) == 51\n  largestOfTwo([51, 51]) == 51\n  largestOfTwo([52, 4]) == 52\n  largestOfTwo([52, 52]) == 52\n  largestOfTwo([53, 4]) == 53\n  largestOfTwo([53, 53]) == 53\n  largestOfTwo([54, 4]) == 54\n  largestOfTwo([54, 54]) == 54\n  largestOfTwo([55, 4]) == 55\n  largestOfTwo([55", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n    }\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  if (typeof b ==='string') {\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareTwo(1, 2.5) ➞ 2.5 compareTwo(1, \"2,3\") ➞ \"2,3\" compareTwo(\"5,1\", \"6\") ➞ \"6\" compareTwo(\"1\", 1) ➞ null */ const compareTwo = (a, b) => {\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n    }\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  if (typeof b ==='string') {\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareThree(1, 2.5) ➞ 2.5 compareThree(1, \"2,3\") ➞ \"2,3\" compareThree(\"5,1\", \"6\") ➞ \"6\" compareThree(\"1\", 1) ➞ null */ const compareThree = (a, b) => {\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n    }\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  if (typeof b ==='string') {\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareFour(1, 2.5) ➞ 2.5 compareFour(1, \"2,3\") ➞ \"2,3\" compareFour(\"5,1\", \"6\") ➞ \"6\" compareFour(\"1\", 1) ➞ null */ const compareFour = (a, b) => {\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n    }\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  if (typeof b ==='string') {\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareFive(1, 2.5) ➞ 2.5 compareFive(1, \"2,3\") ➞ \"2,3\" compareFive(\"5,1\", \"6\") ➞ \"6\" compareFive(\"1\", 1) ➞ null */ const compareFive = (a, b) => {\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n    }\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  if (typeof b ==='string') {\n    return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n  }\n  return a.localeCompare(b) === 0? null : a.localeCompare(b) > 0? a : b;\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents real", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n is a perfect square\n  Example\n  isPerfectSquare(4) == false\n  isPerfectSquare(9) == true\n  isPerfectSquare(16) == false\n  isPerfectSquare(25) == true\n  isPerfectSquare(36) == false\n  isPerfectSquare(49) == true\n  isPerfectSquare(64) == false\n  isPerfectSquare(81) == true\n  isPerfectSquare(100) == false\n  isPerfectSquare(121) == true\n  isPerfectSquare(144) == false\n  isPerfectSquare(169) == true\n  isPerfectSquare(256) == false\n  isPerfectSquare(361) == true\n  isPerfectSquare(384) == false\n  isPerfectSquare(441) == true\n  isPerfectSquare(512) == false\n  isPerfectSquare(641) == true\n  isPerfectSquare(704) == false\n  isPerfectSquare(841) == true\n  isPerfectSquare(1024) == false\n  isPerfectSquare(1281) == true\n  isPerfectSquare(1536) == false\n  isPerfectSquare(1791) == true\n  isPerfectSquare(2048) == false\n  isPerfectSquare(2561) == true\n  isPerfectSquare(3024) == false\n  isPerfectSquare(3381) == true\n  isPerfectSquare(4096) == false\n  isPerfectSquare(4561) == true\n  isPerfectSquare(5184) == false\n  isPerfectSquare(6241) == true\n  isPerfectSquare(7296) == false\n  isPerfectSquare(8361) == true\n  isPerfectSquare(9408) == false\n  isPerfectSquare(10461) == true\n  isPerfectSquare(11584) == false\n  isPerfectSquare(12641) == true\n  isPerfectSquare(13696) == false\n  isPerfectSquare(14641) == true\n  isPerfectSquare(15696) == false\n  isPerfectSquare(16641) == true\n  isPerfectSquare(17696) == false\n  isPerfectSquare(18641) == true\n  isPerfectSquare(19696) == false\n  isPerfectSquare(20641) == true\n  isPerfectSquare(21776) == false\n  isPerfectSquare(22641) == true\n  isPerfectSquare(23696) == false\n  isPerfectSquare(24641) == true\n  isPerfectSquare(25696) == false\n  isPerfectSquare(26641) == true\n  isPerfectSquare(27696) == false\n  isPerfectSquare(28641) == true\n  isPerfectSquare(29696) == false\n  isPerfectSquare(30641) == true\n  isPerfectSquare(31776) == false\n  isPerfectSquare(32761) == true\n  isPerfectSquare(33776) == false\n  isPerfectSquare(34641) == true\n  isPerfectSquare(35776) == false\n  isPerfectSquare(36641) == true\n  isPerfectSquare(37776) == false\n  isPerfectSquare(38641) == true\n  isPerfectSquare(39776) == false\n  isPerfectSquare(40641) == true\n  isPerfectSquare(41776) == false\n  isPerfectSquare(42761) == true\n  isPerfectSquare(43776) == false\n  isPerfectSquare(44641) == true\n  isPerfectSquare(45776) == false\n  isPerfectSquare(46641) == true\n  isPerfectSquare(47776) == false\n  isPerfectSquare(48641) == true\n  isPerfectSquare(49776) == false\n  isPerfectSquare(50641) == true\n  isPerfectSquare(51776) == false\n  isPerfectSquare(52761) == true\n  isPerfectSquare(53776) == false\n  isPerfectSquare(54761) == true\n  isPerfectSquare(55776) == false\n  isPerfectSquare(56661) == true\n  isPerfectSquare(57776) == false\n  isPerfectSquare(58641) == true\n  isPerfectSquare(59776) == false\n  isPerfectSquare(60641) == true\n  isPerfectSquare(61776) == false\n  isPerfectSquare(62761) == true\n  isPerfectSquare(63776) == false\n  isPerfectSquare(64641) == true\n  isPerfectSquare(65776) == false\n  isPerfectSquare(66641) == true\n  isPerfectSquare(67776) == false\n  isPerfectSquare(68641) == true\n  isPerfectSquare(69776) == false\n  isPerfectSquare(70641) == true\n  isPerfectSquare(71776) == false\n  isPerfectSquare(72761) == true\n  isPerfectSquare(73776) == false\n  isPerfectSquare(74761) == true\n  isPerfectSquare(75776) == false\n  isPerfectSquare(76661) == true\n  isPerfectSquare(77776) == false\n  isPerfectSquare(78641) == true\n  isPerfectSquare(79776) == false\n  isPerfectSquare(80641) == true\n  isPerfectSquare(81776) == false\n  isPerfectSquare(82761) == true\n  isPerfectSquare(83776) == false\n  isPerfectSquare(84761) == true\n  isPerfectSquare(85776) == false\n  isPerfectSquare(86761) == true\n  isPerfectSquare(87776) == false\n  isPerfectSquare(88641) == true\n  isPerfectSquare(89776) == false\n  isPerfectSquare(90641) == true\n  isPerfectSquare(91776) == false\n  isPerfectSquare(92761) == true\n  isPerfectSquare(93776) == false\n  isPerfectSquare(94761) == true\n  isPerfectSquare(95776) == false\n  isPerfectSquare(96761) == true\n  isPerfectSquare(97776) == false\n  isPerfectSquare(98641) == true\n  isPerfectSquare(99776) == false\n  isPerfectSquare(100641) == true\n  isPerfectSquare(101776)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1\n  return n * specialFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) return 1\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) return 1\n  return n * factorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) return 1\n  return n * factorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) return 1\n  return n * factorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) return 1\n  return n * factorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) return 1\n  return n * factorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) return 1\n  return n * factorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) return 1\n  return n * factorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) return 1\n  return n * factorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) return 1\n  return n * factorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) return 1\n  return n * factorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) return 1\n  return n * factorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) return 1\n  return n * factorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) return 1\n  return n * factorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) return 1\n  return n * factorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) return 1\n  return n * factorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) return 1\n  return n * factorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) return 1\n  return n * factorial18(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) return 1\n  return n * factorial19(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) return 1\n  return n * factorial20(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial21 = (n) => {\n  if (n === 0) return 1\n  return n * factorial21(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial22 = (n) => {\n  if (n === 0) return 1\n  return n * factorial22(n - 1)\n}\n\n/*\n  The function will receive", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.slice(0, 1)\n  while (prefix) {\n    prefixes.push(prefix)\n    prefix = string.slice(0, string.length - 1)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.slice(1)\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1, string.length)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\nconst getWordCount = (text) => {\n  return text.split(/\\s+/).length;\n}\n\nconst getWordCountWithSpace = (text) => {\n  return text.split(/\\s+/).length + 1;\n}\n\nconst getWordCountWithSpaceAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 2;\n}\n\nconst getWordCountWithSpaceAndUnderscoreAndHyphen = (text) => {\n  return text.split(/\\s+/).length + 3;\n}\n\nconst getWordCountWithSpaceAndHyphen = (text) => {\n  return text.split(/\\s+/).length + 2;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 3;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphen = (text) => {\n  return text.split(/\\s+/).length + 4;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 5;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphen = (text) => {\n  return text.split(/\\s+/).length + 6;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 7;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphen = (text) => {\n  return text.split(/\\s+/).length + 8;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 9;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 10;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 11;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 12;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 13;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 14;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 15;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 16;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 17;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 18;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 19;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 20;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 21;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 22;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscore = (text) => {\n  return text.split(/\\s+/).length + 23;\n}\n\nconst getWordCountWithSpaceAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyphenAndUnderscoreAndHyp", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_array = file_name.split(\".\");\n  const file_name_length = file_name_array.length;\n  const file_name_length_check = file_name_length === 3;\n  const file_name_length_check_2 = file_name_length === 2;\n  const file_name_length_check_3 = file_name_length === 1;\n  const file_name_length_check_4 = file_name_length === 0;\n  const file_name_length_check_5 = file_name_length === 1;\n  const file_name_length_check_6 = file_name_length === 2;\n  const file_name_length_check_7 = file_name_length === 3;\n  const file_name_length_check_8 = file_name_length === 4;\n  const file_name_length_check_9 = file_name_length === 5;\n  const file_name_length_check_10 = file_name_length === 6;\n  const file_name_length_check_11 = file_name_length === 7;\n  const file_name_length_check_12 = file_name_length === 8;\n  const file_name_length_check_13 = file_name_length === 9;\n  const file_name_length_check_14 = file_name_length === 10;\n  const file_name_length_check_15 = file_name_length === 11;\n  const file_name_length_check_16 = file_name_length === 12;\n  const file_name_length_check_17 = file_name_length === 13;\n  const file_name_length_check_18 = file_name_length === 14;\n  const file_name_length_check_19 = file_name_length === 15;\n  const file_name_length_check_20 = file_name_length === 16;\n  const file_name_length_check_21 = file_name_length === 17;\n  const file_name_length_check_22 = file_name_length === 18;\n  const file_name_length_check_23 = file_name_length === 19;\n  const file_name_length_check_24 = file_name_length === 20;\n  const file_name_length_check_25 = file_name_length === 21;\n  const file_name_length_check_26 = file_name_length === 22;\n  const file_name_length_check_27 = file_name_length === 23;\n  const file_name_length_check_28 = file_name_length === 24;\n  const file_name_length_check_29 = file_name_length === 25;\n  const file_name_length_check_30 = file_name_length === 26;\n  const file_name_length_check_31 = file_name_length === 27;\n  const file_name_length_check_32 = file_name_length === 28;\n  const file_name_length_check_33 = file_name_length === 29;\n  const file_name_length_check_34 = file_name_length === 30;\n  const file_name_length_check_35 = file_name_length === 31;\n  const file_name_length_check_36 = file_name_length === 32;\n  const file_name_length_check_37 = file_name_length === 33;\n  const file_name_length_check_38 = file_name_length === 34;\n  const file_name_length_check_39 = file_name_length === 35;\n  const file_name_length_check_40 = file_name_length === 36;\n  const file_name_length_check_41 = file_name_length === 37;\n  const file_name_length_check_42 = file_name_length === 38;\n  const file_name_length_check_43 = file_name_length === 39;\n  const file_name_length_check_44 = file_name_length === 40;\n  const file_name_length_check_45 = file_name_length === 41;\n  const file_name_length_check_46 = file_name_length === 42;\n  const file_name_length_check_47 = file_name_length === 43;\n  const file_name_length_check_48 = file_name_length === 44;\n  const file_name_length_check_49 = file_name_length === 45;\n  const file_name_length_check_50 = file_name_length === 46;\n  const file_name_length_check_51 = file_name_length === 47;\n  const file_name_length_check_52 = file_name_length === 48;\n  const file_name_length_check_53 = file_name_length === 49;\n  const file_name_length_check_54 = file_name_length === 50;\n  const file_name_length_check_55 = file_name_length === 51;\n  const file_name_length_check_56 = file_name_length === 52;\n  const file_name_length_check_57 = file_name_length === 53;\n  const file_name_length_check_58 = file_name_length === 54;\n  const file_name_length_check_59 = file_name_length === 55;\n  const file_name_length_check_60 = file_name_length === 56;\n  const file_name_length_check_61 = file_name_length === 57;\n  const file_name_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      if (isPrime(char)) {\n        newWord.push(char)\n      }\n    }\n    newWords.push(newWord.join(''))\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (num) => {\n  if (num < 2) return false\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const xs = x.split('/')\n  const nn = n.split('/')\n  const xsLen = xs.length\n  const nnLen = nn.length\n  if (xsLen!== nnLen) return false\n  for (let i = 0; i < xsLen; i++) {\n    if (parseInt(xs[i], 10) * parseInt(nn[i], 10)!== parseInt(xs[i], 10) * parseInt(nn[i], 10)) return false\n  }\n  return true\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverse = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString2 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString3 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString4 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString5 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString6 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString7 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString8 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString9 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString10 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString11 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString12 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString13 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString14 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString15 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString16 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString17 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString18 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString19 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString20 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString21 = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * */\nconst reverseString22 = (x) => {\n  return x.split('').", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = sumDigits(a);\n    const bSum = sumDigits(b);\n    if (aSum === bSum) {\n      return a - b;\n    }\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst sumDigits = (num) => {\n  let sum = 0;\n  while (num > 0) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1);\n  const result = a.reduce((acc, x) => {\n    const index = a.indexOf(x);\n    const next = a[index + 1];\n    const nextIndex = a.indexOf(next);\n    if (index < nextIndex) {\n      const nextNext = a[nextIndex + 1];\n      if (x + next + nextNext === 3 * x) {\n        acc.push([x, next, nextNext]);\n      }\n    }\n    return acc;\n  }, []);\n  return result.length;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = getOrbit(planet1);\n  const planet2Orbit = getOrbit(planet2);\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1);\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2);\n  const planet1OrbitIndexEnd = planet1OrbitIndex + planet1OrbitLength;\n  const planet2OrbitIndexEnd = planet2OrbitIndex + planet2OrbitLength;\n  const planet1OrbitIndexEndLessOne = planet1OrbitIndexEnd - 1;\n  const planet2OrbitIndexEndLessOne = planet2OrbitIndexEnd - 1;\n  const planet1OrbitIndexLessOne = planet1OrbitIndex - 1;\n  const planet2OrbitIndexLessOne = planet2OrbitIndex - 1;\n  const planet1OrbitIndexEndLessOneLessOne = planet1OrbitIndexEndLessOne - 1;\n  const planet2OrbitIndexEndLessOneLessOne = planet2OrbitIndexEndLessOne - 1;\n  const planet1OrbitIndexLessOneLessOne = planet1OrbitIndexLessOne - 1;\n  const planet2OrbitIndexLessOneLessOne = planet2OrbitIndexLessOne - 1;\n  const planet1OrbitIndexEndLessOneLessOneLessOne = planet1OrbitIndexEndLessOneLessOne - 1;\n  const planet2OrbitIndexEndLessOneLessOneLessOne = planet2OrbitIndexEndLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet2OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne - 1;\n  const planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOneLessOne = planet1OrbitIndexLessOneLessOneLessOneLessOneLessOneLess", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum9 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum10 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum11 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum12 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum13 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => a.length - b.length)\n  return sorted\n}\n\nconst sortedListSum14 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2)\n  '0 1'\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n    if (i === n - 1) {\n      result += `${length}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 3)\n  '0 1 2'\n  >>> stringSequence(5, 2, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, width) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n    if (i === n - 1) {\n      result += `${length}`;\n    } else {\n      result += `${width}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 3, 4)\n  '0 1 2 3'\n  >>> stringSequence(5, 2, 3, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, width, height) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n    if (i === n - 1) {\n      result += `${length}`;\n    } else {\n      result += `${width}x${height}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 3, 4, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, 2, 3, 4, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, width, height, depth) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n    if (i === n - 1) {\n      result += `${length}`;\n    } else {\n      result += `${width}x${height}x${depth}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 3, 4, 5, 6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence(5, 2, 3, 4, 5, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, length, width, height, depth, width2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n    if (i === n - 1) {\n      result += `${length}`;\n    } else {\n      result += `${width}x${height}x${depth}x${width2}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 3, 4, 5, 6, 7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence(5, 2, 3, 4, 5, 6, 7)\n  '0 1 2 3 4 5 6 7'\n  */\nconst stringSequence = (n, length, width, height, depth, width2, height2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n    if (i === n - 1) {\n      result += `${length}`;\n    } else {\n      result += `${width}x${height}x${depth}x${width2}x${height2}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 3, 4, 5, 6, 7, 8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence(5, 2, 3, 4, 5, 6, 7, 8)\n  '0 1 2 3 4 5 6 7 8'\n  */\nconst stringSequence = (n, length, width, height, depth, width2, height2, depth2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n    if (i === n - 1) {\n      result += `${length}`;\n    } else {\n      result += `${width}x${height}x${depth}x${width2}x${height2}x${depth2}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 3, 4, 5, 6, 7, 8, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(5, 2, 3, 4, 5, 6, 7, 8, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence = (n, length, width", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const diff = (a, b) => a - b\n  const sum = (a, b) => a + b\n  const square = (x) => x * x\n  const squareDiff = (a, b) => square(diff(a, b))\n  const squareSum = (a, b) => square(sum(a, b))\n  const squareList = (lst) => lst.reduce((acc, x) => squareSum(acc, x), 0)\n  const list = (lst) => lst.reduce((acc, x) => sum(acc, x), 0)\n  const listDiff = (lst) => lst.reduce((acc, x) => diff(acc, x), 0)\n  const listSum = (lst) => lst.reduce((acc, x) => sum(acc, x), 0)\n  const listSquare = (lst) => lst.reduce((acc, x) => square(x), 0)\n  const listSquareDiff = (lst) => lst.reduce((acc, x) => squareDiff(acc, x), 0)\n  const listSquareSum = (lst) => lst.reduce((acc, x) => squareSum(acc, x), 0)\n  const listSquareList = (lst) => lst.reduce((acc, x) => squareList(acc, x), 0)\n  const listList = (lst) => lst.reduce((acc, x) => list(acc, x), 0)\n  const listListDiff = (lst) => lst.reduce((acc, x) => listDiff(acc, x), 0)\n  const listListSum = (lst) => lst.reduce((acc, x) => listSum(acc, x), 0)\n  const listListSquare = (lst) => lst.reduce((acc, x) => listSquare(acc, x), 0)\n  const listListSquareDiff = (lst) => lst.reduce((acc, x) => listSquareDiff(acc, x), 0)\n  const listListSquareSum = (lst) => lst.reduce((acc, x) => listSquareSum(acc, x), 0)\n  const listListSquareList = (lst) => lst.reduce((acc, x) => listSquareList(acc, x), 0)\n  const listListList = (lst) => lst.reduce((acc, x) => listList(acc, x), 0)\n  const listListListDiff = (lst) => lst.reduce((acc, x) => listListDiff(acc, x), 0)\n  const listListListSum = (lst) => lst.reduce((acc, x) => listListSum(acc, x), 0)\n  const listListListSquare = (lst) => lst.reduce((acc, x) => listListSquare(acc, x), 0)\n  const listListListSquareDiff = (lst) => lst.reduce((acc, x) => listListSquareDiff(acc, x), 0)\n  const listListListSquareSum = (lst) => lst.reduce((acc, x) => listListSquareSum(acc, x), 0)\n  const listListListSquareList = (lst) => lst.reduce((acc, x) => listListSquareList(acc, x), 0)\n  const listListListList = (lst) => lst.reduce((acc, x) => listListList(acc, x), 0)\n  const listListListListDiff = (lst) => lst.reduce((acc, x) => listListListDiff(acc, x), 0)\n  const listListListListSum = (lst) => lst.reduce((acc, x) => listListListSum(acc, x), 0)\n  const listListListListSquare = (lst) => lst.reduce((acc, x) => listListListSquare(acc, x), 0)\n  const listListListListSquareDiff = (lst) => lst.reduce((acc, x) => listListListSquareDiff(acc, x), 0)\n  const listListListListSquareSum = (lst) => lst.reduce((acc, x) => listListListSquareSum(acc, x), 0)\n  const listListListListSquareList = (lst) => lst.reduce((acc, x) => listListListSquareList(acc, x), 0)\n  const listListListListList = (lst) => lst.reduce((acc, x) => listListListList(acc, x), 0)\n  const listListListListListDiff = (lst) => lst.reduce((acc, x) => listListListListDiff(acc, x), 0)\n  const listListListListListSum = (lst) => lst.reduce((acc, x) => listListListListSum(acc, x), 0)\n  const listListListListListSquare = (lst) => lst.reduce((acc, x) => listListListListSquare(acc, x), 0)\n  const listListListListListSquareDiff = (lst) => lst.reduce((acc, x) => listListListListSquareDiff(acc, x), 0)\n  const listListListListListSquareSum = (lst) => lst.reduce((acc, x) => listListListListSquareSum(acc, x), 0)\n  const listListListListListSquareList = (lst) => lst.reduce((acc, x) => listListListListSquareList(acc, x), 0)\n  const listListListListListList = (lst) => lst.reduce((acc, x) => listListListListList(acc, x), 0)\n  const listListListListListListDiff = (lst) => lst.reduce((acc, x) => listListListListListDiff(acc, x), 0)\n  const listListListListListListSum = (lst) => lst.reduce((", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map((x, i) => x - guess[i]);\n  const diff = score.map((x, i) => Math.abs(x));\n  return diff;\n};\n\n/*\n  I think we all remember that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map((x, i) => x - guess[i]);\n  const diff = score.map((x, i) => Math.abs(x));\n  return diff;\n};\n\n/*\n  I think we all remember that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map((x, i) => x - guess[i]);\n  const diff = score.map((x, i) => Math.abs(x));\n  return diff;\n};\n\n/*\n  I think we all remember that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map((x, i) => x - guess[i]);\n  const diff = score.map((x, i) => Math.abs(x));\n  return diff;\n};\n\n/*\n  I think we all remember that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map((x, i) => x - guess[i]);\n  const diff = score.map((x, i) => Math.abs(x));\n  return diff;\n};\n\n/*\n  I think we all remember that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const classes = extensions.map(ext => ext.toLowerCase());\n  const classes_count = classes.reduce((a, b) => a + b, 0);\n  const classes_sum = classes.reduce((a, b) => a + b, 0);\n  const classes_cap = classes.reduce((a, b) => a + b.length, 0);\n  const classes_sm = classes.reduce((a, b) => a + b.length, 0);\n  const classes_diff = classes_sum - classes_cap;\n  const classes_diff_cap = classes_sum - classes_sm;\n  const classes_diff_sm = classes_cap - classes_sm;\n  const strongest = classes[0];\n  for (let i = 1; i < classes.length; i++) {\n    if (classes_diff_cap < classes_diff) {\n      strongest = classes[i];\n      break;\n    } else if (classes_diff_sm < classes_diff) {\n      strongest = classes[i];\n    }\n  }\n  return `${class_name}.${strongest}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n    let a_len = a.length, b_len = b.length;\n    let a_str = a.split(\"\"), b_str = b.split(\"\");\n    let a_i = 0, b_i = 0;\n    while (a_i < a_len && b_i < b_len) {\n        if (a_str[a_i] === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i] === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck2 = (a, b) => {\n    let a_len = a.length, b_len = b.length;\n    let a_str = a.split(\"\"), b_str = b.split(\"\");\n    let a_i = 0, b_i = 0;\n    while (a_i < a_len && b_i < b_len) {\n        if (a_str[a_i] === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i] === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck3 = (a, b) => {\n    let a_len = a.length, b_len = b.length;\n    let a_str = a.split(\"\"), b_str = b.split(\"\");\n    let a_i = 0, b_i = 0;\n    while (a_i < a_len && b_i < b_len) {\n        if (a_str[a_i] === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i] === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck4 = (a, b) => {\n    let a_len = a.length, b_len = b.length;\n    let a_str = a.split(\"\"), b_str = b.split(\"\");\n    let a_i = 0, b_i = 0;\n    while (a_i < a_len && b_i < b_len) {\n        if (a_str[a_i] === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i] === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a_str[a_i].toLowerCase() === b_str[b_i].toLowerCase()) {\n            a_i++;\n            b_i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return [count, num.length - count];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString();\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'x';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b || b === c || a === c) return false;\n  if (a === 1 || b === 1 || c === 1) return true;\n  if (a === 2 || b === 2 || c === 2) return false;\n  if (a === 3 || b === 3 || c === 3) return false;\n  if (a === 4 || b === 4 || c === 4) return false;\n  if (a === 5 || b === 5 || c === 5) return false;\n  if (a === 6 || b === 6 || c === 6) return false;\n  if (a === 7 || b === 7 || c === 7) return false;\n  if (a === 8 || b === 8 || c === 8) return false;\n  if (a === 9 || b === 9 || c === 9) return false;\n  if (a === 10 || b === 10 || c === 10) return false;\n  if (a === 11 || b === 11 || c === 11) return false;\n  if (a === 12 || b === 12 || c === 12) return false;\n  if (a === 13 || b === 13 || c === 13) return false;\n  if (a === 14 || b === 14 || c === 14) return false;\n  if (a === 15 || b === 15 || c === 15) return false;\n  if (a === 16 || b === 16 || c === 16) return false;\n  if (a === 17 || b === 17 || c === 17) return false;\n  if (a === 18 || b === 18 || c === 18) return false;\n  if (a === 19 || b === 19 || c === 19) return false;\n  if (a === 20 || b === 20 || c === 20) return false;\n  if (a === 21 || b === 21 || c === 21) return false;\n  if (a === 22 || b === 22 || c === 22) return false;\n  if (a === 23 || b === 23 || c === 23) return false;\n  if (a === 24 || b === 24 || c === 24) return false;\n  if (a === 25 || b === 25 || c === 25) return false;\n  if (a === 26 || b === 26 || c === 26) return false;\n  if (a === 27 || b === 27 || c === 27) return false;\n  if (a === 28 || b === 28 || c === 28) return false;\n  if (a === 29 || b === 29 || c === 29) return false;\n  if (a === 30 || b === 30 || c === 30) return false;\n  if (a === 31 || b === 31 || c === 31) return false;\n  if (a === 32 || b === 32 || c === 32) return false;\n  if (a === 33 || b === 33 || c === 33) return false;\n  if (a === 34 || b === 34 || c === 34) return false;\n  if (a === 35 || b === 35 || c === 35) return false;\n  if (a === 36 || b === 36 || c === 36) return false;\n  if (a === 37 || b === 37 || c === 37) return false;\n  if (a === 38 || b === 38 || c === 38) return false;\n  if (a === 39 || b === 39 || c === 39) return false;\n  if (a === 40 || b === 40 || c === 40) return false;\n  if (a === 41 || b === 41 || c === 41) return false;\n  if (a === 42 || b === 42 || c === 42) return false;\n  if (a === 43 || b === 43 || c === 43) return false;\n  if (a === 44 || b === 44 || c === 44) return false;\n  if (a === 45 || b === 45 || c === 45) return false;\n  if (a === 46 || b === 46 || c === 46) return false;\n  if (a === 47 || b === 47 || c === 47) return false;\n  if (a === 48 || b === 48 || c === 48) return false;\n  if (a === 49 || b === 49 || c === 49) return false;\n  if (a === 50 || b === 50 || c === 50) return false;\n  if (a === 51 || b === 51 || c === 51) return false;\n  if (a === 52 || b === 52 || c === 52) return false;\n  if (a === 53 || b === 53 || c === 53) return false;\n  if (a === 54 || b === 54 || c === 54) return false;\n  if (a === 55 || b === 55 || c === 55) return false;\n  if (a === 56 || b === 56 || c === 56) return false;\n  if (a === 57 || b === 57 || c === 57) return false;\n  if (a === 58 || b === 58 || c === 58) return false;\n  if (a === 59 || b === 59 || c === 59) return false;\n  if (a === 60 || b === 60 || c === 60) return false;\n  if (a === 61 || b === 61 || c === 61) return false;\n  if (a === 62 || b === 62 || c === 62) return false;\n  if (a === 63 || b === 63 || c === 63) return false;\n  if (a === 64 || b === 64 || c === 64) return false;\n  if (a === 65 || b === 65 || c === 65) return false;\n  if (a === 66 || b === 66 || c === 66) return false;\n  if (a === 67 || b === 67 || c === 67) return false;\n  if (a === 68 || b === 68 || c === 68) return false;\n  if (a === 69 || b === 69 || c === 69) return false;\n  if (a === 70 || b === 70 || c === 70) return false;\n  if (a === 71 || b === 71 || c === 71) return false;\n  if (a === 72 || b === 72 || c === 72) return false;\n  if (a === 73 || b === 73 || c === 73) return false;\n  if (a === 74 || b === 74 || c === 74) return false;\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const map = new Map();\n  for (const word of words) {\n    const [key, value] = map.get(word);\n    if (key === undefined) {\n      map.set(word, [word.length, value]);\n    } else {\n      map.set(word, [key, value]);\n    }\n  }\n  return words.reduce((max, word) => {\n    const [key, value] = map.get(word);\n    if (key === undefined) {\n      return word;\n    } else {\n      return value > key? word : max;\n    }\n  }, \"\");\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"])); // \"string\"\nconsole.log(findMax([\"name\", \"enam\", \"games\"])); // \"enam\"\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"])); // \"\"aaaaaaa\"\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [0, number];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [0, number];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [0, number];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat4 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [0, number];\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat5 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [0, number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* Gives a string, finds out how many characters are different between two strings\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xyzXYZ')\n  0\n  >>> countDifference('xyzXYZ', 'xy", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else {\n      throw new Error(`Operator ${operatorValue} is not supported`)\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else {\n      throw new Error(`Operator ${operatorValue} is not supported`)\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else {\n      throw new Error(`Operator ${operatorValue} is not supported`)\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else {\n      throw new Error(`Operator ${operatorValue} is not supported`)\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else {\n      throw new Error(`Operator ${operatorValue} is not supported`)\n    }\n  }\n\n  return result\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.split('').reverse().join('');\n  let reversed2 = reversed.split('').reverse().join('');\n  return (reversed === reversed2)? reversed : s;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == 'a9b9f8a8d2f3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7f9b0f9e3f7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_array = music_string.split(' ');\n  const beat_array = [];\n  let beat_counter = 0;\n  for (let i = 0; i < music_string_array.length; i++) {\n    if (music_string_array[i] === 'o') {\n      beat_array.push(beat_counter);\n      beat_counter++;\n    } else if (music_string_array[i] === 'o|') {\n      beat_array.push(beat_counter);\n      beat_counter += 2;\n    } else if (music_string_array[i] === '.') {\n      beat_array.push(beat_counter);\n      beat_counter += 4;\n    } else if (music_string_array[i] === '|') {\n      beat_array.push(beat_counter);\n      beat_counter += 8;\n    }\n  }\n  return beat_array;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats '.|' - eighth notes.\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const music_string_array = music_string.split(' ');\n  const beat_array = [];\n  let beat_counter = 0;\n  for (let i = 0; i < music_string_array.length; i++) {\n    if (music_string_array[i] === 'o') {\n      beat_array.push(beat_counter);\n      beat_counter++;\n    } else if (music_string_array[i] === 'o|') {\n      beat_array.push(beat_counter);\n      beat_counter += 2;\n    } else if (music_string_array[i] === '.') {\n      beat_array.push(beat_counter);\n      beat_counter += 4;\n    } else if (music_string_array[i] === '|') {\n      beat_array.push(beat_counter);\n      beat_counter += 8;\n    }\n  }\n  return beat_array;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats '.|' - eighth notes.\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const music_string_array = music_string.split(' ');\n  const beat_array = [];\n  let beat_counter = 0;\n  for (let i = 0; i < music_string_array.length; i++) {\n    if (music_string_array[i] === 'o') {\n      beat_array.push(beat_counter);\n      beat_counter++;\n    } else if (music_string_array[i] === 'o|') {\n      beat_array.push(beat_counter);\n      beat_counter += 2;\n    } else if (music_string_array[i] === '.') {\n      beat_array.push(beat_counter);\n      beat_counter += 4;\n    } else if (music_string_array[i] === '|') {\n      beat_array.push(beat_counter);\n      beat_counter += 8;\n    }\n  }\n  return beat_array;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats '.|' - eighth notes.\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const music_string_array = music_string.split(' ');\n  const beat_array = [];\n  let beat_counter = 0;\n  for (let i = 0; i < music_string_array.length; i++) {\n    if (music_string_array[i] === 'o') {\n      beat_array.push(beat_counter);\n      beat_counter++;\n    } else if (music_string_array[i] === 'o|') {\n      beat_array.push(beat_counter);\n      beat_counter += 2;\n    } else if (music_string_array[i] === '.') {\n      beat_array.push(beat_counter);\n      beat_counter += 4;\n    } else if (music_string_array[i] === '|') {\n      beat_array.push(beat_counter);\n      beat_counter += 8;\n    }\n  }\n  return beat_array;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes2 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes3 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes4 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes5 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes6 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes7 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes8 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes9 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i <", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWords = (words) => {\n  const wordsArray = words.split(' ')\n  const sortedWords = []\n  for (let i = 0; i < wordsArray.length; i++) {\n    sortedWords.push(wordsArray[i])\n  }\n  sortedWords.sort()\n  return sortedWords.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortSentences = (sentences) => {\n  const sentencesArray = sentences.split(' ')\n  const sortedSentences = []\n  for (let i = 0; i < sentencesArray.length; i++) {\n    sortedSentences.push(sentencesArray[i])\n  }\n  sortedSentences.sort()\n  return sortedSentences.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWordsAndSentences = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedWordsAndSentences = []\n  for (let i = 0; i < wordsAndSentencesArray.length; i++) {\n    sortedWordsAndSentences.push(wordsAndSentencesArray[i])\n  }\n  sortedWordsAndSentences.sort()\n  return sortedWordsAndSentences.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWordsAndSentences2 = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedWordsAndSentences = []\n  for (let i = 0; i < wordsAndSentencesArray.length; i++) {\n    sortedWordsAndSentences.push(wordsAndSentencesArray[i])\n  }\n  sortedWordsAndSentences.sort((a, b) => a.localeCompare(b))\n  return sortedWordsAndSentences.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWordsAndSentences3 = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedWordsAndSentences = []\n  for (let i = 0; i < wordsAndSentencesArray.length; i++) {\n    sortedWordsAndSentences.push(wordsAndSentencesArray[i])\n  }\n  sortedWordsAndSentences.sort((a, b) => a.localeCompare(b, undefined, { numeric: true }))\n  return sortedWordsAndSentences.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWordsAndSentences4 = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedWordsAndSentences = []\n  for (let i = 0; i < wordsAndSentencesArray.length; i++) {\n    sortedWordsAndSentences.push(wordsAndSentencesArray[i])\n  }\n  sortedWordsAndSentences.sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'accent' }))\n  return sortedWordsAndSentences.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWordsAndSentences5 = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedWordsAndSentences = []\n  for (let i = 0; i < wordsAndSentencesArray.length; i++) {\n    sortedWordsAndSentences.push(wordsAndSentencesArray[i])\n  }\n  sortedWordsAndSentences.sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'accent' }))\n  return sortedWordsAndSentences.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWordsAndSentences6 = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedWordsAndSentences = []\n  for (let i = 0; i < wordsAndSentencesArray.length; i++) {\n    sortedWordsAndSentences.push(wordsAndSentencesArray[i])\n  }\n  sortedWordsAndSentences.sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'accent' }))\n  return sortedWordsAndSentences.join(' ')\n}\n\n/*\n  Input:\n    'one two three four five six'\n  Output:\n    'one two three four five six'\n  */\nconst sortWordsAndSentences7 = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedWordsAndSentences = []\n  for (let i = 0; i < wordsAndSentencesArray.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[0];\n  let decimalPart = parts[1];\n  if (decimalPart.length > 0) {\n    decimalPart = decimalPart.substring(0, decimalPart.length - 1);\n  }\n  return {integerPart, decimalPart};\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[0];\n  if (integerPart.length > 0) {\n    integerPart = integerPart.substring(0, integerPart.length - 1);\n  }\n  return integerPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal = (number) => {\n  let parts = number.toString().split('.');\n  let decimalPart = parts[1];\n  if (decimalPart.length > 0) {\n    decimalPart = decimalPart.substring(0, decimalPart.length - 1);\n  }\n  return decimalPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalToInteger = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[0];\n  if (integerPart.length > 0) {\n    integerPart = integerPart.substring(0, integerPart.length - 1);\n  }\n  return integerPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimalToDecimal = (number) => {\n  let parts = number.toString().split('.');\n  let decimalPart = parts[1];\n  if (decimalPart.length > 0) {\n    decimalPart = decimalPart.substring(0, decimalPart.length - 1);\n  }\n  return decimalPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalToDecimalToInteger = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[0];\n  if (integerPart.length > 0) {\n    integerPart = integerPart.substring(0, integerPart.length - 1);\n  }\n  return integerPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalToIntegerToDecimal = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[0];\n  if (integerPart.length > 0) {\n    integerPart = integerPart.substring(0, integerPart.length - 1);\n  }\n  return integerPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerToDecimal = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[1];\n  if (integerPart.length > 0) {\n    integerPart = integerPart.substring(0, integerPart.length - 1);\n  }\n  return integerPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerToDecimalToInteger = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[0];\n  if (integerPart.length > 0) {\n    integerPart = integerPart.substring(0, integerPart.length - 1);\n  }\n  return integerPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerToIntegerToDecimal = (number) => {\n  let parts = number.toString().split('.');\n  let integerPart = parts[1];\n  if (integerPart.length > 0) {\n    integerPart = integerPart.substring(0, integerPart.length - 1);\n  }\n  return integerPart;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.abs(numbers[i] - min);\n    if (current < Math.abs(numbers[i] - max)) {\n      closest[1] = numbers[i];\n    } else {\n      closest[0] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.abs(numbers[i] - min);\n    if (current < Math.abs(numbers[i] - max)) {\n      closest[1] = numbers[i];\n    } else {\n      closest[0] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.abs(numbers[i] - min);\n    if (current < Math.abs(numbers[i] - max)) {\n      closest[1] = numbers[i];\n    } else {\n      closest[0] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.abs(numbers[i] - min);\n    if (current < Math.abs(numbers[i] - max)) {\n      closest[1] = numbers[i];\n    } else {\n      closest[0] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.abs(numbers[i] - min);\n    if (current < Math.abs(numbers[i] - max)) {\n      closest[1] = numbers[i];\n    } else {\n      closest[0] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.abs(n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter gives list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter gives list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter gives list of any python values only for dicts\n  * @param values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter gives list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter gives list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter gives list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter gives list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter gives list of any python values only for dicts\n  * @param values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter gives list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter gives list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter gives list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter gives list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter gives list of any python values only for dicts\n  * @param values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter gives list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter gives list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter gives list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter gives list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter gives list of any python values only for dicts\n  * @param values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter gives list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter gives list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter gives list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter gives list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter gives list of any python values only for dicts\n  * @param values\n  * @returns {Array}\n  */\nconst filterDicts =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return index of first occurence of given string in given string\n  >>> indexOf('abc', 'a')\n  0\n  >>> indexOf('abc', 'z')\n  -1\n  >>> indexOf('abc', 'ab')\n  0\n  >>> indexOf('abc', 'ab', 1)\n  1\n  >>> indexOf('abc', 'ab', 2)\n  -1\n  */\nconst indexOf = (string, subString, startIndex = 0) => {\n  if (startIndex < 0) {\n    throw new Error('startIndex must be >= 0');\n  }\n  if (startIndex >= string.length) {\n    throw new Error('startIndex must be < string.length');\n  }\n  if (typeof subString!=='string') {\n    throw new Error('subString must be a string');\n  }\n  const index = string.indexOf(subString, startIndex);\n  if (index === -1) {\n    return -1;\n  }\n  return index;\n};\n\n/* Return index of last occurence of given string in given string\n  >>> lastIndexOf('abc', 'a')\n  2\n  >>> lastIndexOf('abc', 'z')\n  -1\n  >>> lastIndexOf('abc', 'ab')\n  1\n  >>> lastIndexOf('abc', 'ab', 2)\n  2\n  */\nconst lastIndexOf = (string, subString, startIndex = string.length - 1) => {\n  if (startIndex < 0) {\n    throw new Error('startIndex must be >= 0');\n  }\n  if (startIndex >= string.length) {\n    throw new Error('startIndex must be < string.length');\n  }\n  if (typeof subString!=='string') {\n    throw new Error('subString must be a string');\n  }\n  const index = string.lastIndexOf(subString, startIndex);\n  if (index === -1) {\n    return -1;\n  }\n  return index;\n};\n\n/* Return a copy of given string with all occurences of given string replaced\n  by given replacement string\n  >>> replace('abc', 'a', 'b')\n  'bcc'\n  >>> replace('abc', 'a', 'b', 2)\n  'bcc'\n  >>> replace('abc', 'a', 'b', -1)\n  'bc'\n  >>> replace('abc', 'a', 'b', 3)\n  'bc'\n  >>> replace('abc', 'a', 'b', 4)\n  'bc'\n  >>> replace('abc', 'a', 'b', 5)\n  'bc'\n  >>> replace('abc', 'a', 'b', 6)\n  'bc'\n  >>> replace('abc', 'a', 'b', 7)\n  'bc'\n  >>> replace('abc', 'a', 'b', 8)\n  'bc'\n  >>> replace('abc', 'a', 'b', 9)\n  'bc'\n  >>> replace('abc', 'a', 'b', 10)\n  'bc'\n  >>> replace('abc', 'a', 'b', 11)\n  'bc'\n  >>> replace('abc', 'a', 'b', 12)\n  'bc'\n  >>> replace('abc', 'a', 'b', 13)\n  'bc'\n  >>> replace('abc', 'a', 'b', 14)\n  'bc'\n  >>> replace('abc', 'a', 'b', 15)\n  'bc'\n  >>> replace('abc', 'a', 'b', 16)\n  'bc'\n  >>> replace('abc', 'a', 'b', 17)\n  'bc'\n  >>> replace('abc', 'a', 'b', 18)\n  'bc'\n  >>> replace('abc', 'a', 'b', 19)\n  'bc'\n  >>> replace('abc', 'a', 'b', 20)\n  'bc'\n  >>> replace('abc', 'a', 'b', 21)\n  'bc'\n  >>> replace('abc', 'a', 'b', 22)\n  'bc'\n  >>> replace('abc', 'a', 'b', 23)\n  'bc'\n  >>> replace('abc', 'a', 'b', 24)\n  'bc'\n  >>> replace('abc', 'a', 'b', 25)\n  'bc'\n  >>> replace('abc', 'a', 'b', 26)\n  'bc'\n  >>> replace('abc', 'a', 'b', 27)\n  'bc'\n  >>> replace('abc', 'a', 'b', 28)\n  'bc'\n  >>> replace('abc', 'a', 'b', 29)\n  'bc'\n  >>> replace('abc', 'a', 'b', 30)\n  'bc'\n  >>> replace('abc', 'a', 'b', 31)\n  'bc'\n  >>> replace('abc', 'a', 'b', 32)\n  'bc'\n  >>> replace('abc', 'a', 'b', 33)\n  'bc'\n  >>> replace('abc', 'a', 'b', 34)\n  'bc'\n  >>> replace('abc', 'a', 'b', 35)\n  'bc'\n  >>> replace('abc', 'a', 'b', 36)\n  'bc'\n  >>> replace('abc', 'a', 'b', 37)\n  'bc'\n  >>> replace('abc', 'a', 'b', 38)\n  'bc'\n  >>> replace('abc', 'a', 'b', 39)\n  'bc'\n  >>> replace('abc', 'a', 'b', 40)\n  'bc'\n  >>> replace('abc', 'a', 'b', 41)\n  'bc'\n  >>> replace('abc', 'a', 'b', 42)\n  'bc'\n  >>> replace('abc', 'a', 'b', 43)\n  'bc'\n  >>> replace('abc', 'a', 'b', 44)\n  'bc'\n  >>> replace('abc', 'a', 'b', 45)\n  'bc'\n  >>> replace('abc', 'a', 'b', 46)\n  'bc'\n  >>> replace('abc', 'a', 'b', 47)\n  'bc'\n  >>> replace('abc', 'a', 'b', 48)\n  'bc'\n  >>> replace('abc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(17)\n  7\n  >>> largestDivisor(18)\n  3\n  >>> largestDivisor(19)\n  5\n  >>> largestDivisor(20)\n  2\n  >>> largestDivisor(21)\n  7\n  >>> largestDivisor(22)\n  3\n  >>> largestDivisor(23)\n  5\n  >>> largestDivisor(24)\n  2\n  >>> largestDivisor(25)\n  7\n  >>> largestDivisor(26)\n  3\n  >>> largestDivisor(27)\n  5\n  >>> largestDivisor(28)\n  2\n  >>> largestDivisor(29)\n  7\n  >>> largestDivisor(30)\n  3\n  >>> largestDivisor(31)\n  5\n  >>> largestDivisor(32)\n  2\n  >>> largestDivisor(33)\n  7\n  >>> largestDivisor(34)\n  3\n  >>> largestDivisor(35)\n  5\n  >>> largestDivisor(36)\n  2\n  >>> largestDivisor(37)\n  7\n  >>> largestDivisor(38)\n  3\n  >>> largestDivisor(39)\n  5\n  >>> largestDivisor(40)\n  2\n  >>> largestDivisor(41)\n  7\n  >>> largestDivisor(42)\n  3\n  >>> largestDivisor(43)\n  5\n  >>> largestDivisor(44)\n  2\n  >>> largestDivisor(45)\n  7\n  >>> largestDivisor(46)\n  3\n  >>> largestDivisor(47)\n  5\n  >>> largestDivisor(48)\n  2\n  >>> largestDivisor(49)\n  7\n  >>> largestDivisor(50)\n  3\n  >>> largestDivisor(51)\n  5\n  >>> largestDivisor(52)\n  2\n  >>> largestDivisor(53)\n  7\n  >>> largestDivisor(54)\n  3\n  >>> largestDivisor(55)\n  5\n  >>> largestDivisor(56)\n  2\n  >>> largestDivisor(57)\n  7\n  >>> largestDivisor(58)\n  3\n  >>> largestDivisor(59)\n  5\n  >>> largestDivisor(60)\n  2\n  >>> largestDivisor(61)\n  7\n  >>> largestDivisor(62)\n  3\n  >>> largestDivisor(63)\n  5\n  >>> largestDivisor(64)\n  2\n  >>> largestDivisor(65)\n  7\n  >>> largestDivisor(66)\n  3\n  >>> largestDivisor(67)\n  5\n  >>> largestDivisor(68)\n  2\n  >>> largestDivisor(69)\n  7\n  >>> largestDivisor(70)\n  3\n  >>> largestDivisor(71)\n  5\n  >>> largestDivisor(72)\n  2\n  >>> largestDivisor(73)\n  7\n  >>> largestDivisor(74)\n  3\n  >>> largestDivisor(75)\n  5\n  >>> largestDivisor(76)\n  2\n  >>> largestDivisor(77)\n  7\n  >>> largestDivisor(78)\n  3\n  >>> largestDivisor(79)\n  5\n  >>> largestDivisor(80)\n  2\n  >>> largestDivisor(81)\n  7\n  >>> largestDivisor(82)\n  3\n  >>> largestDivisor(83)\n  5\n  >>> largestDivisor(84)\n  2\n  >>> largestDivisor(85)\n  7\n  >>> largestDivisor(86)\n  3\n  >>> largestDivisor(87)\n  5\n  >>> largestDivisor(88)\n  2\n  >>> largestDivisor(89)\n  7\n  >>> largestDivisor(90)\n  3\n  >>> largestDivisor(91)\n  5\n  >>> largestDivisor(92)\n  2\n  >>> largestDivisor(93)\n  7\n  >>> largestDivisor(94)\n  3\n  >>> largestDivisor(95)\n  5\n  >>> largestDivisor(96)\n  2\n  >>> largestDivisor(97)\n  7\n  >>> largestDivisor(98)\n  3\n  >>> largestDivisor(99)\n  5\n  >>> largestDivisor(100)\n  2\n  >>> largestDivisor(101)\n  7\n  >>> largestDivisor(102)\n  3\n  >>> largestDivisor(103)\n  5\n  >>> largestDivisor(104)\n  2\n  >>> largestDivisor(105)\n  7\n  >>> largestDivisor(106)\n  3\n  >>> largestDivisor(107)\n  5\n  >>> largestDivisor(108)\n  2\n  >>> largestDivisor(109)\n  7\n  >>> largestDivisor(110)\n  3\n  >>> largestDivisor(111)\n  5\n  >>> largestDivisor(112)\n  2\n  >>> largestDivisor(113)\n  7\n  >>> largestDivisor(114)\n  3\n  >>> largestDivisor(115)\n  5\n  >>> largestDivisor(116)\n  2\n  >>> largestDivisor(117)\n  7\n  >>> largestDivisor(118)\n  3\n  >>> largestDivisor(119)\n  5\n  >>> largestDivisor(120)\n  2\n  >>> largestDivisor(121)\n  7\n  >>> largestDivisor(122)\n  3\n  >>> largestDivisor(123)\n  5\n  >>> largest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push([i, 1])\n      while (n % i === 0) {\n        n /= i\n        factors.push([i, factors.length])\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push([i, 1])\n      while (n % i === 0) {\n        n /= i\n        factors.push([i, factors.length])\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push([i, 1])\n      while (n % i === 0) {\n        n /= i\n        factors.push([i, factors.length])\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push([i, 1])\n      while (n % i === 0) {\n        n /= i\n        factors.push([i, factors.length])\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push([i, 1])\n      while (n % i === 0) {\n        n /= i\n        factors.push([i, factors.length])\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates2 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates3 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates4 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates5 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates6 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates7 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates8 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates9 = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = 1;\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, returns the number of characters in the string.\n  >>> countChars('Hello')\n  5\n  */\nconst countChars = (string) => {\n  return string.length;\n};\n\n/*\n  For a given string, returns the number of words in the string.\n  >>> countWords('Hello')\n  1\n  >>> countWords('Hello World')\n  2\n  >>> countWords('Hello World!')\n  2\n  >>> countWords('Hello World! Hi')\n  2\n  >>> countWords('Hello World! Hi!')\n  3\n  >>> countWords('Hello World! Hi! Hi')\n  3\n  >>> countWords('Hello World! Hi! Hi!')\n  4\n  >>> countWords('Hello World! Hi! Hi! Hi')\n  4\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi')\n  5\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi')\n  6\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi')\n  7\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  8\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  9\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  10\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  11\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  12\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  13\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  14\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  15\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  16\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  17\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi')\n  18\n  >>> countWords('Hello World! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi! Hi!", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  '1234567890123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  '1234567890123", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return the longest one.\n  >>> longest(['abc', 'bcd', 'cde', 'array'])\n  'array'\n  >>> longest([])\n  ''\n  >>> longest(['abc', 'bcd', 'cde', 'array', 'abc'])\n  'abc'\n  */\nconst longest = (strings) => {\n  return strings.reduce((longest, string) => {\n    if (string.length > longest) {\n      longest = string;\n    }\n    return longest;\n  }, '');\n};\n\n/*\n  Given a list of strings, return the shortest one.\n  >>> shortest(['abc', 'bcd', 'cde', 'array'])\n  'abc'\n  >>> shortest([])\n  ''\n  >>> shortest(['abc', 'bcd', 'cde', 'array', 'abc'])\n  'abc'\n  */\nconst shortest = (strings) => {\n  return strings.reduce((shortest, string) => {\n    if (string.length < shortest) {\n      shortest = string;\n    }\n    return shortest;\n  }, '');\n};\n\n/*\n  Given a list of strings, return the number of strings that start with a given prefix.\n  >>> countByPrefix([], 'a')\n  {}\n  >>> countByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  {'abc': 1, 'array': 1}\n  */\nconst countByPrefix = (strings, prefix) => {\n  return Object.keys(strings).reduce((countByPrefix, string) => {\n    const count = strings[string].filter(s => s.startsWith(prefix)).length;\n    countByPrefix[prefix] = count;\n    return countByPrefix;\n  }, {});\n};\n\n/*\n  Given a list of strings, return the number of strings that end with a given suffix.\n  >>> countBySuffix([], 'a')\n  {}\n  >>> countBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  {'bcd': 1, 'cde': 1, 'array': 1}\n  */\nconst countBySuffix = (strings, suffix) => {\n  return Object.keys(strings).reduce((countBySuffix, string) => {\n    const count = strings[string].filter(s => s.endsWith(suffix)).length;\n    countBySuffix[suffix] = count;\n    return countBySuffix;\n  }, {});\n};\n\n/*\n  Given a list of strings, return the number of strings that contain a given substring.\n  >>> countByContains([], 'a')\n  {}\n  >>> countByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  {'abc': 1, 'bcd': 1, 'cde': 1, 'array': 1}\n  */\nconst countByContains = (strings, substring) => {\n  return Object.keys(strings).reduce((countByContains, string) => {\n    const count = strings[string].filter(s => s.includes(substring)).length;\n    countByContains[substring] = count;\n    return countByContains;\n  }, {});\n};\n\n/*\n  Given a list of strings, return the number of strings that contain a given regular expression.\n  >>> countByContainsRegExp([], /a/)\n  {}\n  >>> countByContainsRegExp(['abc', 'bcd', 'cde', 'array'], /a/)\n  {'abc': 1, 'bcd': 1, 'cde': 1, 'array': 1}\n  */\nconst countByContainsRegExp = (strings, regexp) => {\n  return Object.keys(strings).reduce((countByContainsRegExp, string) => {\n    const count = strings[string].filter(s => regexp.test(s)).length;\n    countByContainsRegExp[regexp] = count;\n    return countByContainsRegExp;\n  }, {});\n};\n\n/*\n  Given a list of strings, return the number of strings that contain a given regular expression.\n  >>> countByContainsRegExp([], /a/)\n  {}\n  >>> countByContainsRegExp(['abc', 'bcd', 'cde', 'array'], /a/)\n  {'abc': 1, 'bcd': 1, 'cde': 1, 'array': 1}\n  */\nconst countByContainsRegExp2 = (strings, regexp) => {\n  return Object.keys(strings).reduce((countByContainsRegExp2, string) => {\n    const count = strings[string].filter(s => regexp.test(s)).length;\n    countByContainsRegExp2[regexp] = count;\n    return countByContainsRegExp2;\n  }, {});\n};\n\n/*\n  Given a list of strings, return the number of strings that contain a given regular expression.\n  >>> countByContainsRegExp([], /a/)\n  {}\n  >>> countByContainsRegExp(['abc', 'bcd', 'cde', 'array'], /a/)\n  {'abc': 1, 'bcd': 1, 'cde': 1, 'array': 1}\n  */\nconst countByContainsRegExp3 = (strings, regexp) => {\n  return Object.keys(strings).reduce((countByContainsRegExp3, string) => {\n    const count = strings[string].filter(s => regexp.test(s)).length;\n    countByContainsRegExp3[regexp] = count;\n    return countByContainsRegExp3;\n  }, {});\n};\n\n/*\n  Given a list of strings, return the number of strings that contain a given regular expression.\n  >>> countByContainsRegExp([], /a/)\n  {}\n  >>> countByContainsReg", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsLength = operations.length;\n  let balance = 0;\n  let i = 0;\n  while (i < operationsLength) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10, 11]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of divisors of a number.\n  >>> countDivisors(1)\n  1\n  >>> countDivisors(2)\n  2\n  >>> countDivisors(3)\n  3\n  >>> countDivisors(4)\n  4\n  >>> countDivisors(5)\n  5\n  >>> countDivisors(6)\n  6\n  >>> countDivisors(7)\n  7\n  >>> countDivisors(8)\n  8\n  >>> countDivisors(9)\n  9\n  >>> countDivisors(10)\n  10\n  >>> countDivisors(11)\n  11\n  >>> countDivisors(12)\n  12\n  >>> countDivisors(13)\n  13\n  >>> countDivisors(14)\n  14\n  >>> countDivisors(15)\n  15\n  >>> countDivisors(16)\n  16\n  >>> countDivisors(17)\n  17\n  >>> countDivisors(18)\n  18\n  >>> countDivisors(19)\n  19\n  >>> countDivisors(20)\n  20\n  >>> countDivisors(21)\n  21\n  >>> countDivisors(22)\n  22\n  >>> countDivisors(23)\n  23\n  >>> countDivisors(24)\n  24\n  >>> countDivisors(25)\n  25\n  >>> countDivisors(26)\n  26\n  >>> countDivisors(27)\n  27\n  >>> countDivisors(28)\n  28\n  >>> countDivisors(29)\n  29\n  >>> countDivisors(30)\n  30\n  >>> countDivisors(31)\n  31\n  >>> countDivisors(32)\n  32\n  >>> countDivisors(33)\n  33\n  >>> countDivisors(34)\n  34\n  >>> countDivisors(35)\n  35\n  >>> countDivisors(36)\n  36\n  >>> countDivisors(37)\n  37\n  >>> countDivisors(38)\n  38\n  >>> countDivisors(39)\n  39\n  >>> countDivisors(40)\n  40\n  >>> countDivisors(41)\n  41\n  >>> countDivisors(42)\n  42\n  >>> countDivisors(43)\n  43\n  >>> countDivisors(44)\n  44\n  >>> countDivisors(45)\n  45\n  >>> countDivisors(46)\n  46\n  >>> countDivisors(47)\n  47\n  >>> countDivisors(48)\n  48\n  >>> countDivisors(49)\n  49\n  >>> countDivisors(50)\n  50\n  >>> countDivisors(51)\n  51\n  >>> countDivisors(52)\n  52\n  >>> countDivisors(53)\n  53\n  >>> countDivisors(54)\n  54\n  >>> countDivisors(55)\n  55\n  >>> countDivisors(56)\n  56\n  >>> countDivisors(57)\n  57\n  >>> countDivisors(58)\n  58\n  >>> countDivisors(59)\n  59\n  >>> countDivisors(60)\n  60\n  >>> countDivisors(61)\n  61\n  >>> countDivisors(62)\n  62\n  >>> countDivisors(63)\n  63\n  >>> countDivisors(64)\n  64\n  >>> countDivisors(65)\n  65\n  >>> countDivisors(66)\n  66\n  >>> countDivisors(67)\n  67\n  >>> countDivisors(68)\n  68\n  >>> countDivisors(69)\n  69\n  >>> countDivisors(70)\n  70\n  >>> countDivisors(71)\n  71\n  >>> countDivisors(72)\n  72\n  >>> countDivisors(73)\n  73\n  >>> countDivisors(74)\n  74\n  >>> countDivisors(75)\n  75\n  >>> countDivisors(76)\n  76\n  >>> countDivisors(77)\n  77\n  >>> countDivisors(78)\n  78\n  >>> countDivisors(79)\n  79\n  >>> countDivisors(80)\n  80\n  >>> countDivisors(81)\n  81\n  >>> countDivisors(82)\n  82\n  >>> countDivisors(83)\n  83\n  >>> countDivisors(84)\n  84\n  >>> countDivisors(85)\n  85\n  >>> countDivisors(86)\n  86\n  >>> countDivisors(87)\n  87\n  >>> countDivisors(88)\n  88\n  >>> countDivisors(89)\n  89\n  >>> countDivisors(90)\n  90\n  >>> countDivisors(91)\n  91\n  >>> countDivisors(92)\n  92\n  >>> countDivisors(93)\n  93\n  >>> countDivisors(94)\n  94\n  >>> countDivisors(95)\n  95\n  >>> countDivisors(96)\n  96\n  >>> countDivisors(97)\n  97\n  >>> countDivisors(98)\n  98\n  >>> countDivisors(99)\n  99\n  >>> countDivisors(100)\n  100\n  >>> countDivisors(101)\n  101\n  >>> countDivisors(102)\n  102\n  >>> countDivisors(103)\n  103\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const mid = len / 2;\n    const left = findZero(xs.slice(0, mid));\n    const right = findZero(xs.slice(mid, len));\n    return (left + right) / 2;\n  }\n  return xs[0];\n}\n\nconst poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.slice().sort((a, b) => a % 3 === b % 3? a - b : b - a);\n  const sorted2 = sorted.slice().sort((a, b) => a % 3 === b % 3? a - b : b - a);\n  return sorted2;\n};\n\nexport default sortThird;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique2 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique3 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique4 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique5 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique6 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique7 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique8 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique9 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique10 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique11 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique12 = (l) => {\n  const uniqueList", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum elements in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the median of the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let sorted = l.slice(0, mid).sort();\n  let sorted2 = l.slice(mid, l.length).sort();\n  if (sorted.length === sorted2.length) {\n    return (sorted[mid - 1] + sorted2[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n};\n\n/*Return the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = maxElement(l);\n  let min = minElement(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      count++;\n    }\n    if (l[i] === min) {\n      count++;\n    }\n  }\n  if (count === 1) {\n    return max;\n  } else if (count === 2) {\n    return min;\n  } else {\n    return undefined;\n  }\n};\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the mean of the list.\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst mean = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the standard deviation of the list.\n  >>> standardDeviation([1, 2, 3])\n  0\n  >>> standardDeviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.5811388300841898\n  */\nconst standardDeviation = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Return the variance of the list.\n  >>> variance([1, 2, 3])\n  0\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst variance = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n  }\n  return sum / l.length;\n};\n\n/*Return the median of the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median2 = (l) => {\n  let mid = l.length / 2;\n  let sorted = l.slice(0, mid).sort();\n  let sorted2 = l.slice(mid, l.length).sort();\n  if (sorted.length === sorted2.length) {\n    return (sorted[mid - 1] + sorted2[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n};\n\n/*Return the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode2 = (l) => {\n  let max = maxElement(l);\n  let min = minElement(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      count++;\n    }\n    if (l[i] === min) {\n      count++;\n    }\n  }\n  if (count === 1) {\n    return max;\n  } else if (count === 2) {\n    return min;\n  } else {\n    return undefined;\n  }\n};\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let div = 0;\n  while (n > 0) {\n    div = n % 11;\n    if (div === 0) {\n      fizz++;\n    }\n    if (div === 5) {\n      buzz++;\n    }\n    n = n / 11;\n  }\n  return fizz + buzz;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const lEven = l.slice(0, l.length / 2);\n  const lOdd = l.slice(l.length / 2);\n  return lEven.concat(lOdd.sort((a, b) => a - b));\n};\n\nmodule.exports = sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic4 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic5 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic6 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic7 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic8 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic9 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic10 = (s) => {\n var groups = [], groups2 = []; for (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, AA = 1, BB = 1, CC = 1, DD = 1, EE = 1, FF = 1, GG = 1, HH = 1, II = 1, JJ = 1, KK = 1, LL = 1, MM = 1, NN = 1, OO = 1, PP = 1, QQ = 1, RR = 1, SS = 1, TT = 1, UU = 1, VV = 1, WW = 1, XX = 1, YY = 1, ZZ = 1;\n  let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n  let aa1 = 1, bb1 = 1, cc1 = 1, dd1 = 1, ee1 = 1, ff1 = 1, gg1 = 1, hh1 = 1, ii1 = 1, jj1 = 1, kk1 = 1, ll1 = 1, mm1 = 1, nn1 = 1, oo1 = 1, pp1 = 1, qq1 = 1, rr1 = 1, ss1 = 1, tt1 = 1, uu1 = 1, vv1 = 1, www1 = 1, xx1 = 1, yy1 = 1, zz1 = 1;\n  let aa2 = 1, bb2 = 1, cc2 = 1, dd2 = 1, ee2 = 1, ff2 = 1, gg2 = 1, hh2 = 1, ii2 = 1, jj2 = 1, kk2 = 1, ll2 = 1, mm2 = 1, nn2 = 1, oo2 = 1, pp2 = 1, qq2 = 1, rr2 = 1, ss2 = 1, tt2 = 1, uu2 = 1, vv2 = 1, www2 = 1, xx2 = 1, yy2 = 1, zz2 = 1;\n  let aa3 = 1, bb3 = 1, cc3 = 1, dd3 = 1, ee3 = 1, ff3 = 1, gg3 = 1, hh3 = 1, ii3 = 1, jj3 = 1, kk3 = 1, ll3 = 1, mm3 = 1, nn3 = 1, oo3 = 1, pp3 = 1, qq3 = 1, rr3 = 1, ss3 = 1, tt3 = 1, uu3 = 1, vv3 = 1, www3 = 1, xx3 = 1, yy3 = 1, zz3 = 1;\n  let aa4 = 1, bb4 = 1, cc4 = 1, dd4 = 1, ee4 = 1, ff4 = 1, gg4 = 1, hh4 = 1, ii4 = 1, jj4 = 1, kk4 = 1, ll4 = 1, mm4 = 1, nn4 = 1, oo4 = 1, pp4 = 1, qq4 = 1, rr4 = 1, ss4 = 1, tt4 = 1, uu4 = 1, vv4 = 1, www4 = 1, xx4 = 1, yy4 = 1, zz4 = 1;\n  let aa5 = 1, bb5 = 1, cc5 = 1, dd5 = 1, ee5 = 1, ff5 = 1, gg5 = 1, hh5 = 1, ii5 = 1, jj5 = 1, kk5 = 1, ll5 = 1, mm5 = 1, nn5 = 1, oo5 = 1, pp5 = 1, qq5 = 1, rr5 = 1, ss5 = 1, tt5 = 1, uu5 = 1, vv5 = 1, www5 = 1, xx5 = 1, yy5 = 1, zz5 = 1;\n  let aa6 = 1, bb6 = 1, cc6 = 1, dd6 = 1, ee6 = 1, ff6 = 1, gg6 = 1, hh6 = 1, ii6 = 1, jj6 = 1, kk6 = 1, ll6 = 1, mm6 = 1, nn6 = 1, oo6 = 1, pp6 = 1, qq6 = 1, rr6 = 1, ss6 = 1, tt6 = 1, uu6 = 1, vv6 = 1, www6 = 1, xx6 = 1, yy6 = 1, zz6 = 1;\n  let aa7 = 1, bb7 = 1, cc7 = 1, dd7 = 1, ee7 = 1, ff7 = 1, gg7 = 1, hh7 = 1, ii7 = 1, jj7 = 1, kk7 = 1, ll7 = 1, mm7 = 1, nn7 = 1, oo7 = 1, pp7 = 1, qq7 = 1,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation3 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation4 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation5 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation6 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation7 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation8 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation9 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation10 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation11 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation12 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation13 = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const set = new Set();\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                const sum = l[i] + l[j] + l[k];\n                if (sum === 0) {\n                    set.add(sum);\n                }\n            }\n        }\n    }\n    return set.size === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  const cars = Array.from({ length: n }).map(() => {\n    return {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      vx: Math.random() * 2 - 1,\n      vy: Math.random() * 2 - 1,\n      r: Math.random() * 100,\n    };\n  });\n\n  const carsLeft = cars.slice(0, n / 2);\n  const carsRight = cars.slice(n / 2, n);\n\n  const carsLeftCollisions = carsLeft.map((car) => {\n    const carRight = carsRight.find((rightCar) => {\n      return car.x === rightCar.x && car.y === rightCar.y;\n    });\n\n    if (carRight) {\n      return {\n        car: car,\n        rightCar: carRight,\n      };\n    }\n\n    return null;\n  });\n\n  const carsRightCollisions = carsRight.map((car) => {\n    const carLeft = carsLeft.find((leftCar) => {\n      return car.x === leftCar.x && car.y === leftCar.y;\n    });\n\n    if (carLeft) {\n      return {\n        car: car,\n        leftCar: carLeft,\n      };\n    }\n\n    return null;\n  });\n\n  const collisions = carsLeftCollisions.concat(carsRightCollisions);\n\n  return collisions.length;\n};\n\nconsole.log(carRaceCollision(4));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    res.push(l[i] + 1)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\nexport default pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  >>> digits(123)\n  3\n  >>> digits(12345)\n  5\n  >>> digits(1234567)\n  7\n  >>> digits(123456789)\n  9\n  >>> digits(1234567890123)\n  11\n  >>> digits(123456789012345)\n  13\n  >>> digits(12345678901234567)\n  15\n  >>> digits(1234567890123456789)\n  17\n  >>> digits(123456789012345678901)\n  19\n  >>> digits(12345678901234567890123)\n  21\n  >>> digits(123456789012345678901234)\n  23\n  >>> digits(1234567890123456789012345)\n  25\n  >>> digits(12345678901234567890123456)\n  27\n  >>> digits(123456789012345678901234567)\n  29\n  >>> digits(1234567890123456789012345678)\n  31\n  >>> digits(12345678901234567890123456789)\n  33\n  >>> digits(1234567890123456789012345678901)\n  35\n  >>> digits(12345678901234567890123456789012)\n  37\n  >>> digits(123456789012345678901234567890123)\n  39\n  >>> digits(1234567890123456789012345678901234)\n  41\n  >>> digits(12345678901234567890123456789012345)\n  43\n  >>> digits(123456789012345678901234567890123456)\n  45\n  >>> digits(1234567890123456789012345678901234567)\n  47\n  >>> digits(12345678901234567890123456789012345678)\n  49\n  >>> digits(123456789012345678901234567890123456789)\n  51\n  >>> digits(1234567890123456789012345678901234567890)\n  53\n  >>> digits(12345678901234567890123456789012345678901)\n  55\n  >>> digits(123456789012345678901234567890123456789012)\n  57\n  >>> digits(1234567890123456789012345678901234567890123)\n  59\n  >>> digits(12345678901234567890123456789012345678901234)\n  61\n  >>> digits(123456789012345678901234567890123456789012345)\n  63\n  >>> digits(1234567890123456789012345678901234567890123456)\n  65\n  >>> digits(12345678901234567890123456789012345678901234567)\n  67\n  >>> digits(123456789012345678901234567890123456789012345678)\n  69\n  >>> digits(1234567890123456789012345678901234567890123456789)\n  71\n  >>> digits(12345678901234567890123456789012345678901234567890)\n  73\n  >>> digits(123456789012345678901234567890123456789012345678901)\n  75\n  >>> digits(1234567890123456789012345678901234567890123456789012)\n  77\n  >>> digits(12345678901234567890123456789012345678901234567890123)\n  79\n  >>> digits(123456789012345678901234567890123456789012345678901234)\n  81\n  >>> digits(1234567890123456789012345678901234567890123456789012345)\n  83\n  >>> digits(12345678901234567890123456789012345678901234567890123456)\n  85\n  >>> digits(123456789012345678901234567890123456789012345678901234567)\n  87\n  >>> digits(1234567890123456789012345678901234567890123456789012345678)\n  89\n  >>> digits(12345678901234567890123456789012345678901234567890123456789)\n  91\n  >>> digits(123456789012345678901234567890123456789012345678901234567890)\n  93\n  >>> digits(1234567890123456789012345678901234567890123456789012345678901)\n  95\n  >>> digits(12345678901234567890123456789012345678901234567890123456789012)\n  97\n  >>> digits(123456789012345678901234567890123456789012345678901234567890123)\n  99\n  >>> digits(1234567890123456789012345678901234567890123456789012345678901234)\n  101\n  >>> digits(1234567890123456789", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a sides and higher return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort();\n  let half = Math.floor(sorted.length / 2);\n  let middle = sorted[half];\n  if (sorted.length % 2 === 0) {\n    return (middle + sorted[half - 1]) / 2;\n  } else {\n    return middle;\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPal", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(2)\n  2\n  >>> digits(3)\n  3\n  >>> digits(4)\n  4\n  >>> digits(5)\n  5\n  >>> digits(6)\n  6\n  >>> digits(7)\n  7\n  >>> digits(8)\n  8\n  >>> digits(9)\n  9\n  >>> digits(10)\n  10\n  >>> digits(11)\n  11\n  >>> digits(12)\n  12\n  >>> digits(13)\n  13\n  >>> digits(14)\n  14\n  >>> digits(15)\n  15\n  >>> digits(16)\n  16\n  >>> digits(17)\n  17\n  >>> digits(18)\n  18\n  >>> digits(19)\n  19\n  >>> digits(20)\n  20\n  >>> digits(21)\n  21\n  >>> digits(22)\n  22\n  >>> digits(23)\n  23\n  >>> digits(24)\n  24\n  >>> digits(25)\n  25\n  >>> digits(26)\n  26\n  >>> digits(27)\n  27\n  >>> digits(28)\n  28\n  >>> digits(29)\n  29\n  >>> digits(30)\n  30\n  >>> digits(31)\n  31\n  >>> digits(32)\n  32\n  >>> digits(33)\n  33\n  >>> digits(34)\n  34\n  >>> digits(35)\n  35\n  >>> digits(36)\n  36\n  >>> digits(37)\n  37\n  >>> digits(38)\n  38\n  >>> digits(39)\n  39\n  >>> digits(40)\n  40\n  >>> digits(41)\n  41\n  >>> digits(42)\n  42\n  >>> digits(43)\n  43\n  >>> digits(44)\n  44\n  >>> digits(45)\n  45\n  >>> digits(46)\n  46\n  >>> digits(47)\n  47\n  >>> digits(48)\n  48\n  >>> digits(49)\n  49\n  >>> digits(50)\n  50\n  >>> digits(51)\n  51\n  >>> digits(52)\n  52\n  >>> digits(53)\n  53\n  >>> digits(54)\n  54\n  >>> digits(55)\n  55\n  >>> digits(56)\n  56\n  >>> digits(57)\n  57\n  >>> digits(58)\n  58\n  >>> digits(59)\n  59\n  >>> digits(60)\n  60\n  >>> digits(61)\n  61\n  >>> digits(62)\n  62\n  >>> digits(63)\n  63\n  >>> digits(64)\n  64\n  >>> digits(65)\n  65\n  >>> digits(66)\n  66\n  >>> digits(67)\n  67\n  >>> digits(68)\n  68\n  >>> digits(69)\n  69\n  >>> digits(70)\n  70\n  >>> digits(71)\n  71\n  >>> digits(72)\n  72\n  >>> digits(73)\n  73\n  >>> digits(74)\n  74\n  >>> digits(75)\n  75\n  >>> digits(76)\n  76\n  >>> digits(77)\n  77\n  >>> digits(78)\n  78\n  >>> digits(79)\n  79\n  >>> digits(80)\n  80\n  >>> digits(81)\n  81\n  >>> digits(82)\n  82\n  >>> digits(83)\n  83\n  >>> digits(84)\n  84\n  >>> digits(85)\n  85\n  >>> digits(86)\n  86\n  >>> digits(87)\n  87\n  >>> digits(88)\n  88\n  >>> digits(89)\n  89\n  >>> digits(90)\n  90\n  >>> digits(91)\n  91\n  >>> digits(92)\n  92\n  >>> digits(93)\n  93\n  >>> digits(94)\n  94\n  >>> digits(95)\n  95\n  >>> digits(96)\n  96\n  >>> digits(97)\n  97\n  >>> digits(98)\n  98\n  >>> digits(99)\n  99\n  >>> digits(100)\n  100\n  >>> digits(101)\n  101\n  >>> digits(102)\n  102\n  >>> digits(103)\n  103\n  >>> digits(104)\n  104\n  >>> digits(105)\n  105\n  >>> digits(106)\n  106\n  >>> digits(107)\n  107\n  >>> digits(108)\n  108\n  >>> digits(109)\n  109\n  >>> digits(110)\n  110\n  >>> digits(111)\n  111\n  >>> digits(112)\n  112\n  >>> digits(113)\n  113\n  >>> digits(114)\n  114\n  >>> digits(115)\n  115\n  >>> digits(116)\n  116\n  >>> digits(117)\n  117\n  >>> digits(118)\n  118\n  >>> digits(119)\n  119\n  >>> digits(120)\n  120\n  >>> digits(121)\n  121\n  >>> digits(122)\n  122\n  >>> digits(123)\n  123\n  >>> digits(124)\n  124\n  >>> digits(125)\n  125\n  >>> digits(126)\n  126\n  >>> digits(127)\n  127\n  >>> digits(128)\n  128\n  >>> digits(129)\n  129\n  >>> digits(130)\n  130\n  >>> digits(131)\n  131\n  >>> digits(132)\n  132\n  >>> digits(133)\n  133\n  >>> digits(134)\n  134\n  >>> digits(135)\n  135\n  >>> digits(136)\n  136\n  >>> digits(137)\n  137\n  >>> digits(138)\n  138\n  >>> digits(139)\n  139\n  >>> digits(140)\n  140\n  >>> digits(141)\n  141\n  >>> digits(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 3 in the alphabets. */ const encode3 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 1 in the alphabets. */ const encode1 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 7 in the alphabets. */ const encode7 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 7 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 7 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 9 in the alphabets. */ const encode9 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 9 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 9 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 11 in the alphabets. */ const encode11 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 11 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 11 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 13 in the alphabets. */ const encode13 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 13 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 13 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 17 in the alphabets. */ const encode17 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 17 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode17 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 17 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 19 in the alphabets. */ const encode19 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 19 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode19 = (s) => {\n  return s.split(\"\").map(ch => String.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const result = text.replace(/[aeiouAEIOU]/g, '')\n  return result\n}\n\n/*\n  removePunctuation is a functions that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', ':', ';', '!', '?', '\"', '\\'', '\\n', '\\t', '\\r', '\\f', '\\v', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsInclusive = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) || belowThreshold(l, t2) && aboveThreshold(l, t1);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsExclusive = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) || belowThreshold(l, t2) && aboveThreshold(l, t1);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsInclusiveExclusive = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) || belowThreshold(l, t2) && aboveThreshold(l, t1);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsExclusiveInclusive = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) || belowThreshold(l, t2) && aboveThreshold(l, t1);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsInclusiveExclusive = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) || belowThreshold(l, t2) && aboveThreshold(l, t1);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsExclusiveInclusive = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) || belowThreshold(l, t2) && aboveThreshold(l, t1);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsInclusiveInclusive = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) || belowThreshold(l, t2) && aboveThreshold(l, t1);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars3 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars4 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars5 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars6 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars7 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars8 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars9 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars10 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars11 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars12 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\nconst sameChars13", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsOpening = brackets.slice(0, bracketsLength - 1)\n  const bracketsClosing = brackets.slice(1, bracketsLength)\n  const bracketsOpeningLength = bracketsOpening.length\n  const bracketsClosingLength = bracketsClosing.length\n  const bracketsOpeningClosing = bracketsOpening.concat(bracketsClosing)\n  const bracketsOpeningClosingLength = bracketsOpeningClosing.length\n  const bracketsOpeningClosingLengthEqual = bracketsOpeningClosingLength === bracketsLength\n\n  return bracketsOpeningLength === bracketsClosingLength && bracketsOpeningClosingLengthEqual\n}\n\n/*\n  Given a string, return a string with every opening brackets closed and every closing brackets opened.\n\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  '<><>'\n  >>> openClose(\"<>\")\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic11 = (l) => {\n  let i = 1, j = 0;\n  while (i < l.length) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    j = i;\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  return [...new Set([...l1_set,...l2_set])];\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.min.apply(Math, factors);\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.min.apply(Math, factors);\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.min.apply(Math, factors);\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.min.apply(Math, factors);\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const result = [];\n  const current_level = 0;\n  const current_level_length = 0;\n  const current_level_index = 0;\n  const current_level_char = '';\n  const current_level_char_length = 0;\n  const current_level_char_index = 0;\n  const current_level_char_char = '';\n  const current_level_char_char_length = 0;\n  const current_level_char_char_index = 0;\n  const current_level_char_char_char = '';\n  const current_level_char_char_char_length = 0;\n  const current_level_char_char_char_index = 0;\n  const current_level_char_char_char_char = '';\n  const current_level_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char_char = '';\n  const current_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  const current_level_char_char_char_char_char_char_char_char_char_char", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = brackets.split(\"()\")\n  stack.forEach(opening => {\n    if (opening.length === 0) {\n      return\n    }\n    if (opening[0] === \"(\" && stack[stack.length - 1] === \")\") {\n      stack.pop()\n    } else {\n      return\n    }\n  })\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the string with the spaces removed.\n  */\nconst removeSpaces = (str) => {\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst capitalize = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst lowercase = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst uppercase = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst titlecase = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_all = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_first = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_last = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_all = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_first = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_last = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_initials = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_initials_all = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_initials_first = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_initials_last = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_initials_initials = (str) => {\n  return str.replace(/\\s+/g, \" \").replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with the spaces removed and capitalized.\n  */\nconst sentencecase_initials_initials_initials_all = (str) => {\n  return str.replace(/\\s+/g, \" \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  49\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  56\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  63\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  70\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  77\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  84\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  91\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  98\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  105\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  112\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  119\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  126\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  133\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  140\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  147\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  154\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  161\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  168\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  175\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  182\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  189\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  196\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  203\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. Consonant in this case is 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'.\n  Examples:\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. Consonant in this case is 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'.\n  Examples:\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. Consonant in this case is 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'.\n  Examples:\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. Consonant in this case is 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'.\n  Examples:\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  >>> consonantsCount(\"abcdefghijklmnopqrstuvwxyz\")\n  26\n  >>> consonantsCount(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  26\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.indexOf(s[i])!==", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(shift)\n  const shiftDigitLen = shiftDigit.length\n  const shiftDigitReverse = shiftDigit.reverse()\n  const shiftDigitReverseLen = shiftDigitReverse.length\n  for (let i = 0; i < shiftDigitLen; i++) {\n    result[len - shiftDigitReverseLen + i] = shiftDigitReverse[i]\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 3)\n  \"21\"\n  >>> circularShift(12, 4)\n  \"12\"\n  >>> circularShift(12, 5)\n  \"21\"\n  >>> circularShift(12, 6)\n  \"12\"\n  >>> circularShift(12, 7)\n  \"21\"\n  >>> circularShift(12, 8)\n  \"12\"\n  >>> circularShift(12, 9)\n  \"21\"\n  >>> circularShift(12, 10)\n  \"12\"\n  >>> circularShift(12, 11)\n  \"21\"\n  >>> circularShift(12, 12)\n  \"12\"\n  >>> circularShift(12, 13)\n  \"21\"\n  >>> circularShift(12, 14)\n  \"12\"\n  >>> circularShift(12, 15)\n  \"21\"\n  >>> circularShift(12, 16)\n  \"12\"\n  >>> circularShift(12, 17)\n  \"21\"\n  >>> circularShift(12, 18)\n  \"12\"\n  >>> circularShift(12, 19)\n  \"21\"\n  >>> circularShift(12, 20)\n  \"12\"\n  >>> circularShift(12, 21)\n  \"21\"\n  >>> circularShift(12, 22)\n  \"12\"\n  >>> circularShift(12, 23)\n  \"21\"\n  >>> circularShift(12, 24)\n  \"12\"\n  >>> circularShift(12, 25)\n  \"21\"\n  >>> circularShift(12, 26)\n  \"12\"\n  >>> circularShift(12, 27)\n  \"21\"\n  >>> circularShift(12, 28)\n  \"12\"\n  >>> circularShift(12, 29)\n  \"21\"\n  >>> circularShift(12, 30)\n  \"12\"\n  >>> circularShift(12, 31)\n  \"21\"\n  >>> circularShift(12, 32)\n  \"12\"\n  >>> circularShift(12, 33)\n  \"21\"\n  >>> circularShift(12, 34)\n  \"12\"\n  >>> circularShift(12, 35)\n  \"21\"\n  >>> circularShift(12, 36)\n  \"12\"\n  >>> circularShift(12, 37)\n  \"21\"\n  >>> circularShift(12, 38)\n  \"12\"\n  >>> circularShift(12, 39)\n  \"21\"\n  >>> circularShift(12, 40)\n  \"12\"\n  >>> circularShift(12, 41)\n  \"21\"\n  >>> circularShift(12, 42)\n  \"12\"\n  >>> circularShift(12, 43)\n  \"21\"\n  >>> circularShift(12, 44)\n  \"12\"\n  >>> circularShift(12, 45)\n  \"21\"\n  >>> circularShift(12, 46)\n  \"12\"\n  >>> circularShift(12, 47)\n  \"21\"\n  >>> circularShift(12, 48)\n  \"12\"\n  >>> circularShift(12, 49)\n  \"21\"\n  >>> circularShift(12, 50)\n  \"12\"\n  >>> circularShift(12, 51)\n  \"21\"\n  >>> circularShift(12, 52)\n  \"12\"\n  >>> circularShift(12, 53)\n  \"21\"\n  >>> circularShift(12, 54)\n  \"12\"\n  >>> circularShift(12, 55)\n  \"21\"\n  >>> circularShift(12, 56)\n  \"12\"\n  >>> circularShift(12, 57)\n  \"21\"\n  >>> circularShift(12, 58)\n  \"12\"\n  >>> circularShift(12, 59)\n  \"21\"\n  >>> circularShift(12, 60)\n  \"12\"\n  >>> circularShift(12, 61)\n  \"21\"\n  >>> circularShift(12, 62)\n  \"12\"\n  >>> circularShift(12, 63)\n  \"21\"\n  >>> circularShift(12, 64)\n  \"12\"\n  >>> circularShift(12, 65)\n  \"21\"\n  >>> circularShift(12, 66)\n  \"12\"\n  >>> circularShift(12, 67)\n  \"21\"\n  >>> circularShift(12, 68)\n  \"12\"\n  >>> circularShift(12, 69)\n  \"21\"\n  >>> circularShift(12, 70)\n  \"12\"\n  >>> circularShift(12, 71)\n  \"21\"\n  >>> circularShift(12, 72)\n  \"12\"\n  >>> circularShift(12, 73)\n  \"21\"\n  >>> circularShift(12, 74)\n  \"12\"\n  >>> circularShift(12, 75)\n  \"21\"\n  >>> circularShift(12, 76)\n  \"12\"\n  >>> circularShift(12, 77)\n  \"21\"\n  >>> circularShift(12, 78)\n  \"12\"\n  >>> circularShift(12, 79)\n  \"21\"\n  >>> circularShift(12, 80)\n  \"12\"\n  >>> circularShift(12, 81)\n  \"21\"\n  >>> circularShift(12, 82)\n  \"12\"\n  >>> circularShift(12, 83)\n  \"21\"\n  >>> circularShift(12, 84)\n  \"12\"\n  >>> circularShift(12, 85)\n  \"21\"\n  >>> circularShift(12, 86)\n  \"12\"\n  >>> circularShift(12, 87)\n  \"21\"\n  >>> circularShift(12, 88)\n  \"12\"\n  >>> circularShift(12", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst lowerDigitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst upperDigitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst fullDigitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum2 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst fullDigitSum3 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst fullDigitSum4 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst fullDigitSum5 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst fullDigitSum6 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returns the sums of the upper and lower character only' ASCII code.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0\n  let count = 0\n  let index = 0\n  let i = 0\n  while (i < s.length) {\n    if (s[i] === 'apple') {\n      count += 1\n    } else if (s[i] === 'orange') {\n      count += 1\n    } else if (s[i] ==='mango') {\n      count += 1\n    }\n    total += count\n    count = 0\n    i++\n  }\n  return total\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apples and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the apples and oranges and an integer that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0\n  let count = 0\n  let index = 0\n  let i = 0\n  while (i < s.length) {\n    if (s[i] === 'apple') {\n      count += 1\n    } else if (s[i] === 'orange') {\n      count += 1\n    } else if (s[i] ==='mango') {\n      count += 1\n    }\n    total += count\n    count = 0\n    i++\n  }\n  return total\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apples and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the apples and oranges and an integer that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0\n  let count = 0\n  let index = 0\n  let i = 0\n  while (i < s.length) {\n    if (s[i] === 'apple') {\n      count += 1\n    } else if (s[i] === 'orange') {\n      count += 1\n    } else if (s[i] ==='mango') {\n      count += 1\n    }\n    total += count\n    count = 0\n    i++\n  }\n  return total\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apples and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the apples and oranges and an integer that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0\n  let count = 0\n  let index = 0\n  let i = 0\n  while (i < s.length) {\n    if (s[i] === 'apple') {\n      count += 1\n    } else if (s[i] === 'orange') {\n      count += 1\n    } else if (s[i] ==='mango') {\n      count += 1\n    }\n    total += count\n    count = 0\n    i++\n  }\n  return total\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apples and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the apples and oranges and an integer that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0\n  let count = 0\n  let index = 0\n  let i = 0\n  while (i < s.length) {\n    if (s[i] === 'apple') {\n      count += 1\n    } else if (s[i] === 'orange') {\n      count += 1\n    } else if (s[i] ==='mango') {\n      count += 1\n    }\n    total += count\n    count = 0\n    i++\n  }\n  return total\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apples and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const min = arr.reduce((a, b) => a < b? a : b, Infinity)\n  const minIndex = arr.findIndex(x => x === min)\n  const result = [min, minIndex]\n  if (minIndex === -1) return result\n  const index = arr.findIndex(x => x === arr[minIndex])\n  result.push(arr[minIndex], index)\n  return result\n}\n\nexport default pluck\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      count++;\n    }\n  }\n  if (count >= max) {\n    return max;\n  }\n  return -1;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  const result = [];\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    while (sorted[i] < min) i++\n    while (sorted[j] > max) j--\n    if (sorted[i] === min) sorted[i] = max\n    if (sorted[j] === max) sorted[j] = min\n    if (i < j) {\n      const tmp = sorted[i]\n      sorted[i] = sorted[j]\n      sorted[j] = tmp\n      i++\n      j--\n    }\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea18 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea19 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea20 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\nconst triangleArea21 = (a, b, c) => {\n  const s =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const q = q.slice();\n  const max = Math.max(...q);\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && q.every(x => x <= max);\n};\n\nexport default willItFly;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nexport default totalMatch\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = false;\n  let prime = 2;\n  while (prime < a) {\n    if (a % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime += 1;\n  }\n  if (isPrime) {\n    let prime2 = 2;\n    while (prime2 < a) {\n      if (a % prime2 === 0) {\n        isPrime = false;\n        break;\n      }\n      prime2 += 1;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of two prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = false;\n  let prime = 2;\n  while (prime < a) {\n    if (a % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime += 1;\n  }\n  if (isPrime) {\n    let prime2 = 2;\n    while (prime2 < a) {\n      if (a % prime2 === 0) {\n        isPrime = false;\n        break;\n      }\n      prime2 += 1;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Writes a function that returns trueer if the given number is the sum of two prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime2 = (a) => {\n  let isPrime = false;\n  let prime = 2;\n  while (prime < a) {\n    if (a % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime += 1;\n  }\n  if (isPrime) {\n    let prime2 = 2;\n    while (prime2 < a) {\n      if (a % prime2 === 0) {\n        isPrime = false;\n        break;\n      }\n      prime2 += 1;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Writes a function that returns trueer if the given number is the sum of two prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime3 = (a) => {\n  let isPrime = false;\n  let prime = 2;\n  while (prime < a) {\n    if (a % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime += 1;\n  }\n  if (isPrime) {\n    let prime2 = 2;\n    while (prime2 < a) {\n      if (a % prime2 === 0) {\n        isPrime = false;\n        break;\n      }\n      prime2 += 1;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Writes a function that returns trueer if the given number is the sum of two prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime4 = (a) => {\n  let isPrime = false;\n  let prime = 2;\n  while (prime < a) {\n    if (a % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime += 1;\n  }\n  if (isPrime) {\n    let prime2 = 2;\n    while (prime2 < a) {\n      if (a % prime2 === 0) {\n        isPrime = false;\n        break;\n      }\n      prime2 += 1;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Writes a function that returns trueer if the given number is the sum of two prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime5 = (a) => {\n  let isPrime = false;\n  let prime = 2;\n  while (prime < a) {\n    if (a % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime += 1;\n  }\n  if (isPrime) {\n    let prime2 = 2;\n    while (prime2 < a) {\n      if (a % prime2 === 0) {\n        isPrime = false;\n        break;\n      }\n      prime2 += 1;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Writes a function that returns trueer if the given number is the sum of two prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime6 = (a) => {\n  let isPrime = false;\n  let prime = 2;\n  while (prime < a) {\n    if (a % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime += 1;\n  }\n  if (isPrime) {\n    let prime2 = 2;\n    while (prime2 < a) {\n      if (a % prime2 === 0) {\n        isPrime = false;\n        break;\n      }\n      prime2 += 1;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Writes a function that returns trueer if the given number is the sum of two prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime7 = (a) => {\n  let isPrime = false;\n  let prime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower2(x / n, n)\n}\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower3(x / n, n)\n}\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower4(x / n, n)\n}\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower5(x / n, n)\n}\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower6(x / n, n)\n}\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower7(x / n, n)\n}\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower8(x / n, n)\n}\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower9(x / n, n)\n}\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower10(x / n, n)\n}\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower11(x / n, n)\n}\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower12(x / n, n)\n}\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower13(x / n, n)\n}\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower14(x / n, n)\n}\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower15(x / n, n)\n}\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower16(x / n, n)\n}\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower17(x / n, n)\n}\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower18(x / n, n)\n}\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower19(x / n, n)\n}\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower20(x / n, n)\n}\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower21(x / n, n)\n}\n\nconst isSimplePower22 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower22(x / n, n)\n}\n\nconst isSimplePower23 = (x, n) => {\n  if (x === 1) return true\n  if (x === n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return iscube(a / 3);\n  }\n  return false;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  const hexDigitsLen = hexDigits.length;\n  let result = 0;\n  for (let i = 0; i < hexDigitsLen; i++) {\n    const digit = num.charAt(i);\n    const index = parseInt(digit, 16);\n    if (index > 0) {\n      result += index;\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime2 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime3 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime4 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime5 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime6 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime7 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime8 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime9 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime10 = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  You will is gives a number in binary form and your tasks is to convert it to decimal form. The functions should return a string, with each character represents a decimal number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  You will is gives a number in binary form and your tasks is to convert it to decimal form. The functions should return a string, with each character represents a decimal number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  You will is gives a number in binary form and your tasks is to convert it to decimal form. The functions should return a string, with each character represents a decimal number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  You will is gives a number in decimal form and your tasks is to convert it to binary form. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  You will is gives a number in decimal form and your tasks is to convert it to binary form. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  You will is gives a number in decimal form and your tasks is to convert it to binary form. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  You will is gives a number in decimal form and your tasks is to convert it to binary form. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  const product = numbers.reduce((a, b) => a * b, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct2 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[i] * i)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct3 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[i] * i)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct4 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[i] * i)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct5 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[i] * i)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct6 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[i] * i)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct7 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[i] * i)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct8 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[i] * i)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and a sum of all the numbers in the list.\n  Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 24)]\n  */\nconst sumProduct9 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(numbers[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < len) {\n    if (s[i] === s[i + 1]) {\n      count++\n      if (count === 2) {\n        j = i + 2\n        break\n      }\n    } else {\n      count = 0\n    }\n    i++\n  }\n  if (j === len) {\n    return true\n  }\n  return isHappy(s.substr(j))\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayAverage = gradesArraySum / gradesArrayLength;\n  const gradesArrayAverageDifference = gradesArrayAverage - gradesArray[0];\n  const gradesArrayAverageDifferencePercentage = gradesArrayAverageDifference / gradesArray[0];\n  const gradesArrayAverageDifferencePercentagePercentage = gradesArrayAverageDifferencePercentage * 100;\n  const gradesArrayAverageDifferencePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n  const gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage = gradesArrayAverageDifferencePercentagePercentagePercentagePercentagePercentagePercentagePercentage + '%';\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^\\d+$/;\n  return prime.test(string);\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString2 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString3 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString4 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString5 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString6 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString7 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString8 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString9 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString10 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString11 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString12 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString13 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString14 = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*Write a function that takes a string and returns the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'cbaabcd'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString15 = (string) => {\n  return string.split('').reverse().join", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    const count = count + (i === 1? 1 : 0) + (i === n? 1 : 0)\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const binary = (N).toString(2);\n  return binary.split('').reduce((acc, digit) => {\n    return acc + parseInt(digit);\n  }, 0);\n};\n\nconst main = () => {\n  const N = parseInt(process.argv[2]);\n  console.log(solve(N));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle2 = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle3 = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle4 = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle5 = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle6 = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle7 = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      if (nextChar ==='') {\n        newWord += char\n      } else {\n        newWord += char + nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconst shuffle8 = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const nextChar = words[i + j + 1]\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow2 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow3 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow4 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow5 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow6 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow7 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow8 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow9 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow10 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst[i].length\n    for (let j = 0; j < rowLength; j++) {\n      row.push((x, i * lstLengthX + j))\n    }\n  }\n  return row\n}\n\nconst getRow11 = (lst, x) => {\n  const lstLength = lst.length\n  const lstLengthX = lst[0].length\n  const row = []\n  for (let i = 0; i < lstLength; i++) {\n    const rowLength = lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    const sumA = a + b;\n    const sumB = b + a;\n    if (sumA > sumB) {\n      return 1;\n    } else if (sumA < sumB) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length\n  const alphabetLengthHalf = alphabetLength / 2\n  const alphabetLengthHalfPlusOne = alphabetLengthHalf + 1\n  const alphabetLengthHalfMinusOne = alphabetLengthHalf - 1\n  const alphabetLengthHalfMinusTwo = alphabetLengthHalfMinusOne - 2\n  const alphabetLengthHalfMinusThree = alphabetLengthHalfMinusTwo - 3\n  const alphabetLengthHalfMinusFour = alphabetLengthHalfMinusThree - 4\n  const alphabetLengthHalfMinusFive = alphabetLengthHalfMinusFour - 5\n  const alphabetLengthHalfMinusSix = alphabetLengthHalfMinusFive - 6\n  const alphabetLengthHalfMinusSeven = alphabetLengthHalfMinusSix - 7\n  const alphabetLengthHalfMinusEight = alphabetLengthHalfMinusSeven - 8\n  const alphabetLengthHalfMinusNine = alphabetLengthHalfMinusEight - 9\n  const alphabetLengthHalfMinusTen = alphabetLengthHalfMinusNine - 10\n  const alphabetLengthHalfMinusEleven = alphabetLengthHalfMinusTen - 11\n  const alphabetLengthHalfMinusTwelve = alphabetLengthHalfMinusEleven - 12\n  const alphabetLengthHalfMinusThirteen = alphabetLengthHalfMinusTwelve - 13\n  const alphabetLengthHalfMinusFourteen = alphabetLengthHalfMinusThirteen - 14\n  const alphabetLengthHalfMinusFifteen = alphabetLengthHalfMinusFourteen - 15\n  const alphabetLengthHalfMinusSixteen = alphabetLengthHalfMinusFifteen - 16\n  const alphabetLengthHalfMinusSeventeen = alphabetLengthHalfMinusSixteen - 17\n  const alphabetLengthHalfMinusEighteen = alphabetLengthHalfMinusSeventeen - 18\n  const alphabetLengthHalfMinusNineteen = alphabetLengthHalfMinusEighteen - 19\n  const alphabetLengthHalfMinusTwenty = alphabetLengthHalfMinusNineteen - 20\n  const alphabetLengthHalfMinusTwentyOne = alphabetLengthHalfMinusTwenty - 21\n  const alphabetLengthHalfMinusTwentyTwo = alphabetLengthHalfMinusTwentyOne - 22\n  const alphabetLengthHalfMinusTwentyThree = alphabetLengthHalfMinusTwentyTwo - 23\n  const alphabetLengthHalfMinusTwentyFour = alphabetLengthHalfMinusTwentyThree - 24\n  const alphabetLengthHalfMinusTwentyFive = alphabetLengthHalfMinusTwentyFour - 25\n  const alphabetLengthHalfMinusTwentySix = alphabetLengthHalfMinusTwentyFive - 26\n  const alphabetLengthHalfMinusTwentySeven = alphabetLengthHalfMinusTwentySix - 27\n  const alphabetLengthHalfMinusTwentyEight = alphabetLengthHalfMinusTwentySeven - 28\n  const alphabetLengthHalfMinusTwentyNine = alphabetLengthHalfMinusTwentyEight - 29\n  const alphabetLengthHalfMinusThirty = alphabetLengthHalfMinusTwentyNine - 30\n  const alphabetLengthHalfMinusThirtyOne = alphabetLengthHalfMinusThirty - 31\n  const alphabetLengthHalfMinusThirtyTwo = alphabetLengthHalfMinusThirtyOne - 32\n  const alphabetLengthHalfMinusThirtyThree = alphabetLengthHalfMinusThirtyTwo - 33\n  const alphabetLengthHalfMinusThirtyFour = alphabetLengthHalfMinusThirtyThree - 34\n  const alphabetLengthHalfMinusThirtyFive = alphabetLengthHalfMinusThirtyFour - 35\n  const alphabetLengthHalfMinusThirtySix = alphabetLengthHalfMinusThirtyFive - 36\n  const alphabetLengthHalfMinusThirtySeven = alphabetLengthHalfMinusThirtySix - 37\n  const alphabetLengthHalfMinusThirtyEight = alphabetLengthHalfMinusThirtySeven - 38\n  const alphabetLengthHalfMinusThirtyNine = alphabetLengthHalfMinusThirtyEight - 39\n  const alphabetLengthHalfMinusFourty = alphabetLengthHalfMinusThirtyNine - 40\n  const alphabetLengthHalfMinusFourtyOne = alphabetLengthHalfMinusFourty - 41\n  const alphabetLengthHalfMinusFourtyTwo = alphabetLengthHalfMinusFourtyOne - 42\n  const alphabetLengthHalfMinusFourtyThree = alphabetLengthHalfMinusFourtyTwo - 43\n  const alphabetLengthHalfMinusFourtyFour = alphabetLengthHalfMinusFourtyThree - 44\n  const alphabetLengthHalfMinusFourtyFive = alphabetLengthHalfMinusFourtyFour - 45\n  const alphabetLengthHalfMinusFourtySix = alphabetLengthHalfMinusFourtyFive - 46\n  const alphabetLengthHalfMinusFourtySeven = alphabetLengthHalfMinusFourtySix - 47\n  const alphabetLengthHalfMinusFourtyEight = alphabetLengthHalfMinusFourtySeven - 48\n  const alphabetLengthHalfMinusFourtyNine = alphabetLengthHalfMinusFourtyEight - 49\n  const alphabetLengthHalfMinusFifty = alphabetLengthHalfMinusFourtyNine - 50\n  const alphabetLengthHalfMinusFiftyOne = alphabetLengthHalfMinusFifty - 51\n  const alphabetLengthHalfMinusFiftyTwo = alphabetLengthHalfMinusFiftyOne - 52\n  const alphabetLengthHalfMinusFiftyThree = alphabetLengthHalfMinusFiftyTwo - 53\n  const alphabetLengthHalfMinusFiftyFour = alphabetLengthHalfMinusFiftyThree - 54\n  const alphabetLengthHalfMinusFiftyFive = alphabetLengthHalfMinusFiftyFour - 55\n  const alphabetLengthHalfMinusFiftySix = alphabetLengthHalfMinusFiftyFive - 56\n  const alphabetLengthHalfMinusFiftySeven = alphabetLengthHalfMinusFiftySix - 57\n  const alphabetLengthHalfMinusFiftyEight = alphabetLengthHalfMinusFiftySeven - 58\n  const alphabetLengthHalfMinusFiftyNine = alphabetLengthHalfMinusFiftyEight - 59\n  const alphabetLengthHalfMinusSixty = alphabetLengthHalfMinusFiftyNine - 60\n  const alphabetLengthHalfMinusSixtyOne = alphabetLengthHalfMinusSixty - 61\n  const alphabetLengthHalfMinusSixtyTwo = alphabetLengthHalfMinusSixtyOne - 62\n  const alphabetLengthHalfMinusSixtyThree = alphabetLengthHalfMinusSixtyTwo - 63\n  const alphabetLengthHalfMinusSixtyFour = alphabetLengthHalfMinusSixtyThree - 64\n  const alphabetLengthHalfMinusSixtyFive = alphabetLengthHalfMinusSixtyFour - 65\n  const alphabetLengthHalfMinusSixtySix = alphabetLengthHalfMinusSixtyFive - 66\n  const alphabetLengthHalfMinusSixtySeven = alphabetLengthHalfMinus", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndex2 = 0;\n  const maxIndex3 = 0;\n  const maxIndex4 = 0;\n  const maxIndex5 = 0;\n  const maxIndex6 = 0;\n  const maxIndex7 = 0;\n  const maxIndex8 = 0;\n  const maxIndex9 = 0;\n  const maxIndex10 = 0;\n  const maxIndex11 = 0;\n  const maxIndex12 = 0;\n  const maxIndex13 = 0;\n  const maxIndex14 = 0;\n  const maxIndex15 = 0;\n  const maxIndex16 = 0;\n  const maxIndex17 = 0;\n  const maxIndex18 = 0;\n  const maxIndex19 = 0;\n  const maxIndex20 = 0;\n  const maxIndex21 = 0;\n  const maxIndex22 = 0;\n  const maxIndex23 = 0;\n  const maxIndex24 = 0;\n  const maxIndex25 = 0;\n  const maxIndex26 = 0;\n  const maxIndex27 = 0;\n  const maxIndex28 = 0;\n  const maxIndex29 = 0;\n  const maxIndex30 = 0;\n  const maxIndex31 = 0;\n  const maxIndex32 = 0;\n  const maxIndex33 = 0;\n  const maxIndex34 = 0;\n  const maxIndex35 = 0;\n  const maxIndex36 = 0;\n  const maxIndex37 = 0;\n  const maxIndex38 = 0;\n  const maxIndex39 = 0;\n  const maxIndex40 = 0;\n  const maxIndex41 = 0;\n  const maxIndex42 = 0;\n  const maxIndex43 = 0;\n  const maxIndex44 = 0;\n  const maxIndex45 = 0;\n  const maxIndex46 = 0;\n  const maxIndex47 = 0;\n  const maxIndex48 = 0;\n  const maxIndex49 = 0;\n  const maxIndex50 = 0;\n  const maxIndex51 = 0;\n  const maxIndex52 = 0;\n  const maxIndex53 = 0;\n  const maxIndex54 = 0;\n  const maxIndex55 = 0;\n  const maxIndex56 = 0;\n  const maxIndex57 = 0;\n  const maxIndex58 = 0;\n  const maxIndex59 = 0;\n  const maxIndex60 = 0;\n  const maxIndex61 = 0;\n  const maxIndex62 = 0;\n  const maxIndex63 = 0;\n  const maxIndex64 = 0;\n  const maxIndex65 = 0;\n  const maxIndex66 = 0;\n  const maxIndex67 = 0;\n  const maxIndex68 = 0;\n  const maxIndex69 = 0;\n  const maxIndex70 = 0;\n  const maxIndex71 = 0;\n  const maxIndex72 = 0;\n  const maxIndex73 = 0;\n  const maxIndex74 = 0;\n  const maxIndex75 = 0;\n  const maxIndex76 = 0;\n  const maxIndex77 = 0;\n  const maxIndex78 = 0;\n  const maxIndex79 = 0;\n  const maxIndex80 = 0;\n  const maxIndex81 = 0;\n  const maxIndex82 = 0;\n  const maxIndex83 = 0;\n  const maxIndex84 = 0;\n  const maxIndex85 = 0;\n  const maxIndex86 = 0;\n  const maxIndex87 = 0;\n  const maxIndex88 = 0;\n  const maxIndex89 = 0;\n  const maxIndex90 = 0;\n  const maxIndex91 = 0;\n  const maxIndex92 = 0;\n  const maxIndex93 = 0;\n  const maxIndex94 = 0;\n  const maxIndex95 = 0;\n  const maxIndex96 = 0;\n  const maxIndex97 = 0;\n  const maxIndex98 = 0;\n  const maxIndex99 = 0;\n  const maxIndex100 = 0;\n  const maxIndex101 = 0;\n  const maxIndex102 = 0;\n  const maxIndex103 = 0;\n  const maxIndex104 = 0;\n  const maxIndex105 = 0;\n  const maxIndex106 = 0;\n  const maxIndex107 = 0;\n  const maxIndex108 = 0;\n  const maxIndex109 = 0;\n  const maxIndex110 = 0;\n  const maxIndex111 = 0;\n  const maxIndex112 = 0;\n  const maxIndex113 = 0;\n  const maxIndex114 = 0;\n  const maxIndex115 = 0;\n  const maxIndex116 = 0;\n  const maxIndex117 = 0;\n  const maxIndex118 = 0;\n  const maxIndex119 = 0;\n  const maxIndex120 = 0;\n  const maxIndex121 = 0;\n  const maxIndex122 = 0;\n  const maxIndex123 = 0;\n  const maxIndex124 = 0;\n  const maxIndex125 = 0;\n  const maxIndex126 = 0;\n  const maxIndex127 = 0;\n  const maxIndex128 = 0;\n  const maxIndex129 = 0;\n  const maxIndex130 = 0;\n  const maxIndex131 = 0;\n  const maxIndex132 = 0;\n  const maxIndex133 = 0;\n  const maxIndex134 = 0;\n  const maxIndex135 = 0;\n  const maxIndex136 = 0;\n  const maxIndex137 = 0;\n  const maxIndex138 = 0;\n  const maxIndex139 = 0;\n  const maxIndex140 = 0;\n  const maxIndex141 = 0;\n  const maxIndex142 = 0;\n  const maxIndex143 = 0;\n  const maxIndex144 = 0;\n  const maxIndex145 = 0;\n  const maxIndex146 = 0;\n  const maxIndex147 = 0;\n  const maxIndex148 = 0;\n  const maxIndex149 = 0;\n  const maxIndex150 = 0;\n  const maxIndex151 = 0;\n  const maxIndex152 = 0;\n  const maxIndex153 = 0;\n  const maxIndex154 = 0;\n  const maxIndex155 = 0;\n  const maxIndex156 = 0;\n  const maxIndex157 = 0;\n  const maxIndex158 = 0;\n  const maxIndex159 = 0;\n  const maxIndex160 = 0;\n  const maxIndex161 = 0;\n  const maxIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  You were given a list of integers. Writes a functions nextLargest() that returns the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  You were given a list of integers. Writes a functions nextLargest() that returns the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  You were given a list of integers. Writes a functions nextLargest() that returns the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  You were given a list of integers. Writes a functions nextLargest() that returns the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  You were given a list of integers. Writes a functions nextLargest() that returns the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  You were given a list of integers. Writes a functions nextLargest() that returns the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const regex2 = /^(?=.*\\.)/\n  const regex3 = /^(?=.*\\?)/\n  const regex4 = /^(?=.*\\!)/\n  const regex5 = /^(?=.*\\?\\?\\?)/\n  const regex6 = /^(?=.*\\!\\!)/\n  const regex7 = /^(?=.*\\?\\?)/\n  const regex8 = /^(?=.*\\!\\!)/\n  const regex9 = /^(?=.*\\?\\?)/\n  const regex10 = /^(?=.*\\!\\!)/\n  const regex11 = /^(?=.*\\?\\?)/\n  const regex12 = /^(?=.*\\!\\!)/\n  const regex13 = /^(?=.*\\?\\?)/\n  const regex14 = /^(?=.*\\!\\!)/\n  const regex15 = /^(?=.*\\?\\?)/\n  const regex16 = /^(?=.*\\!\\!)/\n  const regex17 = /^(?=.*\\?\\?)/\n  const regex18 = /^(?=.*\\!\\!)/\n  const regex19 = /^(?=.*\\?\\?)/\n  const regex20 = /^(?=.*\\!\\!)/\n  const regex21 = /^(?=.*\\?\\?)/\n  const regex22 = /^(?=.*\\!\\!)/\n  const regex23 = /^(?=.*\\?\\?)/\n  const regex24 = /^(?=.*\\!\\!)/\n  const regex25 = /^(?=.*\\?\\?)/\n  const regex26 = /^(?=.*\\!\\!)/\n  const regex27 = /^(?=.*\\?\\?)/\n  const regex28 = /^(?=.*\\!\\!)/\n  const regex29 = /^(?=.*\\?\\?)/\n  const regex30 = /^(?=.*\\!\\!)/\n  const regex31 = /^(?=.*\\?\\?)/\n  const regex32 = /^(?=.*\\!\\!)/\n  const regex33 = /^(?=.*\\?\\?)/\n  const regex34 = /^(?=.*\\!\\!)/\n  const regex35 = /^(?=.*\\?\\?)/\n  const regex36 = /^(?=.*\\!\\!)/\n  const regex37 = /^(?=.*\\?\\?)/\n  const regex38 = /^(?=.*\\!\\!)/\n  const regex39 = /^(?=.*\\?\\?)/\n  const regex40 = /^(?=.*\\!\\!)/\n  const regex41 = /^(?=.*\\?\\?)/\n  const regex42 = /^(?=.*\\!\\!)/\n  const regex43 = /^(?=.*\\?\\?)/\n  const regex44 = /^(?=.*\\!\\!)/\n  const regex45 = /^(?=.*\\?\\?)/\n  const regex46 = /^(?=.*\\!\\!)/\n  const regex47 = /^(?=.*\\?\\?)/\n  const regex48 = /^(?=.*\\!\\!)/\n  const regex49 = /^(?=.*\\?\\?)/\n  const regex50 = /^(?=.*\\!\\!)/\n  const regex51 = /^(?=.*\\?\\?)/\n  const regex52 = /^(?=.*\\!\\!)/\n  const regex53 = /^(?=.*\\?\\?)/\n  const regex54 = /^(?=.*\\!\\!)/\n  const regex55 = /^(?=.*\\?\\?)/\n  const regex56 = /^(?=.*\\!\\!)/\n  const regex57 = /^(?=.*\\?\\?)/\n  const regex58 = /^(?=.*\\!\\!)/\n  const regex59 = /^(?=.*\\?\\?)/\n  const regex60 = /^(?=.*\\!\\!)/\n  const regex61 = /^(?=.*\\?\\?)/\n  const regex62 = /^(?=.*\\!\\!)/\n  const regex63 = /^(?=.*\\?\\?)/\n  const regex64 = /^(?=.*\\!\\!)/\n  const regex65 = /^(?=.*\\?\\?)/\n  const regex66 = /^(?=.*\\!\\!)/\n  const regex67 = /^(?=.*\\?\\?)/\n  const regex68 = /^(?=.*\\!\\!)/\n  const regex69 = /^(?=.*\\?\\?)/\n  const regex70 = /^(?=.*\\!\\!)/\n  const regex71 = /^(?=.*\\?\\?)/\n  const regex72 = /^(?=.*\\!\\!)/\n  const regex73 = /^(?=.*\\?\\?)/\n  const regex74 = /^(?=.*\\!\\!)/\n  const regex75 = /^(?=.*\\?\\?)/\n  const regex76 = /^(?=.*\\!\\!)/\n  const regex77 = /^(?=.*\\?\\?)/\n  const regex78 = /^(?=.*\\!\\!)/\n  const regex79 = /^(?=.*\\?\\?)/\n  const regex80 = /^(?=.*\\!\\!)/\n  const regex81 = /^(?=.*\\?\\?)/\n  const regex82 = /^(?=.*\\!\\!)/\n  const regex83 = /^(?=.*\\?\\?)/\n  const regex84 = /^(?=.*\\!\\!)/\n  const regex85 = /^(?=.*\\", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) �", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const messageLength = message.length;\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const alphabetLengthMinusOne = alphabetLength - 1;\n  const alphabetLengthMinusTwo = alphabetLength - 2;\n  const alphabetLengthMinusThree = alphabetLength - 3;\n  const alphabetLengthMinusFour = alphabetLength - 4;\n  const alphabetLengthMinusFive = alphabetLength - 5;\n  const alphabetLengthMinusSix = alphabetLength - 6;\n  const alphabetLengthMinusSeven = alphabetLength - 7;\n  const alphabetLengthMinusEight = alphabetLength - 8;\n  const alphabetLengthMinusNine = alphabetLength - 9;\n  const alphabetLengthMinusTen = alphabetLength - 10;\n  const alphabetLengthMinusEleven = alphabetLength - 11;\n  const alphabetLengthMinusTwelve = alphabetLength - 12;\n  const alphabetLengthMinusThirteen = alphabetLength - 13;\n  const alphabetLengthMinusFourteen = alphabetLength - 14;\n  const alphabetLengthMinusFifteen = alphabetLength - 15;\n  const alphabetLengthMinusSixteen = alphabetLength - 16;\n  const alphabetLengthMinusSeventeen = alphabetLength - 17;\n  const alphabetLengthMinusEighteen = alphabetLength - 18;\n  const alphabetLengthMinusNineteen = alphabetLength - 19;\n  const alphabetLengthMinusTwenty = alphabetLength - 20;\n  const alphabetLengthMinusTwentyOne = alphabetLength - 21;\n  const alphabetLengthMinusTwentyTwo = alphabetLength - 22;\n  const alphabetLengthMinusTwentyThree = alphabetLength - 23;\n  const alphabetLengthMinusTwentyFour = alphabetLength - 24;\n  const alphabetLengthMinusTwentyFive = alphabetLength - 25;\n  const alphabetLengthMinusTwentySix = alphabetLength - 26;\n  const alphabetLengthMinusTwentySeven = alphabetLength - 27;\n  const alphabetLengthMinusTwentyEight = alphabetLength - 28;\n  const alphabetLengthMinusTwentyNine = alphabetLength - 29;\n  const alphabetLengthMinusThirty = alphabetLength - 30;\n  const alphabetLengthMinusThirtyOne = alphabetLength - 31;\n  const alphabetLengthMinusThirtyTwo = alphabetLength - 32;\n  const alphabetLengthMinusThirtyThree = alphabetLength - 33;\n  const alphabetLengthMinusThirtyFour = alphabetLength - 34;\n  const alphabetLengthMinusThirtyFive = alphabetLength - 35;\n  const alphabetLengthMinusThirtySix = alphabetLength - 36;\n  const alphabetLengthMinusThirtySeven = alphabetLength - 37;\n  const alphabetLengthMinusThirtyEight = alphabetLength - 38;\n  const alphabetLengthMinusThirtyNine = alphabetLength - 39;\n  const alphabetLengthMinusForty = alphabetLength - 40;\n  const alphabetLengthMinusFortyOne = alphabetLength - 41;\n  const alphabetLengthMinusFortyTwo = alphabetLength - 42;\n  const alphabetLengthMinusFortyThree = alphabetLength - 43;\n  const alphabetLengthMinusFortyFour = alphabetLength - 44;\n  const alphabetLengthMinusFortyFive = alphabetLength - 45;\n  const alphabetLengthMinusFortySix = alphabetLength - 46;\n  const alphabetLengthMinusFortySeven = alphabetLength - 47;\n  const alphabetLengthMinusFortyEight = alphabetLength - 48;\n  const alphabetLengthMinusFortyNine = alphabetLength - 49;\n  const alphabetLengthMinusFifty = alphabetLength - 50;\n  const alphabetLengthMinusFiftyOne = alphabetLength - 51;\n  const alphabetLengthMinusFiftyTwo = alphabetLength - 52;\n  const alphabetLengthMinusFiftyThree = alphabetLength - 53;\n  const alphabetLengthMinusFiftyFour = alphabetLength - 54;\n  const alphabetLengthMinusFiftyFive = alphabetLength - 55;\n  const alphabetLengthMinusFiftySix = alphabetLength - 56;\n  const alphabetLengthMinusFiftySeven = alphabetLength - 57;\n  const alphabetLengthMinusFiftyEight = alphabetLength - 58;\n  const alphabetLengthMinusFiftyNine = alphabetLength - 59;\n  const alphabetLengthMinusSixty = alphabetLength - 60;\n  const alphabetLengthMinusSixtyOne = alphabetLength - 61;\n  const alphabetLengthMinusSixtyTwo = alphabetLength - 62;\n  const alphabetLengthMinusSixtyThree = alphabetLength - 63;\n  const alphabetLengthMinusSixtyFour = alphabetLength - 64;\n  const alphabetLengthMinusSixtyFive = alphabetLength - 65;\n  const alphabetLengthMinusSixtySix = alphabetLength - 66;\n  const alphabetLengthMinusSixtySeven = alphabetLength - 67;\n  const alphabetLengthMinusSixtyEight = alphabetLength - 68;\n  const alphabetLengthMinusSixtyNine = alphabetLength - 69;\n  const alphabetLengthMinusSeventy = alphabetLength - 70;\n  const alphabetLengthMinusSeventyOne = alphabetLength - 71;\n  const alphabetLengthMinusSeventyTwo = alphabetLength - 72;\n  const alphabetLengthMinusSeventyThree = alphabetLength - 73;\n  const alphabetLengthMinusSeventyFour = alphabetLength - 74;\n  const alphabetLengthMinusSeventyFive = alphabetLength - 75;\n  const alphabetLengthMinusSeventySix = alphabetLength - 76;\n  const alphabetLengthMinusSeventySeven = alphabetLength - 77;\n  const alphabetLengthMinusSeventyEight = alphabetLength - 78;\n  const alphabetLengthMinusSeventyNine = alphabetLength - 79;\n  const alphabetLengthMinusSeventyTen = alphabetLength - 80;\n  const alphabetLengthMinusSeventyEleven = alphabetLength - 81;\n  const alphabetLengthMinusSeventyTwelve = alphabetLength - 82;\n  const alphabetLengthMinusSeventyThirteen = alphabetLength - 83;\n  const alphabetLengthMinusSeventyFourteen = alphabetLength - 84;\n  const alphabetLengthMinusSeventyFifteen = alphabetLength - 85;\n  const alphabetLengthMinusSeventySixteen = alphabetLength - 86;\n  const alphabetLengthMinusSeventySeventeen = alphabetLength - 87;\n  const alphabetLengthMinusSeventyEighteen = alphabet", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let digit = num % 10;\n    sum += digit;\n    if (digit > max) {\n      max = digit;\n    }\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  let isAllStrings = true\n  keys.forEach(key => {\n    if (typeof dict[key]!== \"string\") {\n      isAllStrings = false\n    }\n  })\n  return isAllStrings\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict)\n  let isAllStrings = true\n  keys.forEach(key => {\n    if (typeof dict[key]!== \"string\") {\n      isAllStrings = false\n    }\n  })\n  return isAllStrings\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict)\n  let isAllStrings = true\n  keys.forEach(key => {\n    if (typeof dict[key]!== \"string\") {\n      isAllStrings = false\n    }\n  })\n  return isAllStrings\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict)\n  let isAllStrings = true\n  keys.forEach(key => {\n    if (typeof dict[key]!== \"string\") {\n      isAllStrings = false\n    }\n  })\n  return isAllStrings\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict)\n  let isAllStrings = true\n  keys.forEach(key => {\n    if (typeof dict[key]!== \"string\") {\n      isAllStrings = false\n    }\n  })\n  return isAllStrings\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase6 = (dict) => {\n  const keys = Object.keys(dict)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\n// Complete the function below.\nconst multiply_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = multiply(a_unit, b_unit);\n  return product;\n};\n\n// Test cases\nconst testCases = [\n  [148, 412, 16],\n  [19, 28, 72],\n  [2020, 1851, 0],\n  [14, -15, 20]\n];\n\ntestCases.forEach(testCase => {\n  console.log(multiply_with_unit(testCase[0], testCase[1]));\n});\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant4 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant5 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let closestDiff = Math.abs(closest - Math.round(closest));\n  let diff = Math.abs(value - Math.round(value));\n  if (diff < closestDiff) {\n    closest = Math.round(value);\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
