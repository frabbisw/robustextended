{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  if (len < 2) {\n    return false;\n  }\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n  * @param {number} number\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst round = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision2 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision3 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision4 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision5 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision6 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision7 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision8 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision9 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision10 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision11 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};\n\n/**\n  * @param {number} number\n  * @param {number} precision\n  * @return {number}\n  * @example\n  *   >>> round(1.234567, 2)\n  *   1.23\n  */\nconst roundPrecision12 = (number, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(number * multiplier) / multiplier;\n};"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = [];\n  const result = [];\n  const stack_index = 0;\n  const paren_string_length = paren_string.length;\n  const paren_string_index = 0;\n  let open_paren = 0;\n  let close_paren = 0;\n  while (paren_string_index < paren_string_length) {\n    const current_char = paren_string[paren_string_index];\n    if (current_char === '(') {\n      stack.push(stack_index);\n      stack_index++;\n      open_paren++;\n    } else if (current_char === ')') {\n      stack_index = stack.pop();\n      close_paren++;\n    }\n    paren_string_index++;\n  }\n  if (open_paren!== close_paren) {\n    throw new Error('Unbalanced parentheses');\n  }\n  while (stack.length > 0) {\n    result.push(paren_string.substring(stack[stack.length - 1], stack[stack.length - 1] + 1));\n    stack.pop();\n  }\n  return result;\n};\n\nmodule.exports = separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let parts = number.toString().split('.');\n  return parts[0]? parts[0].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimalsWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimalsWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimalsWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimalsWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimalsWithDecimalsWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWithDecimalsWithDecimalsWithDecimalsWithDecimals = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1]? parts[1].length : 0;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithDecimalsWith"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset.\n  >>> variance([1.0, 2.0, 3.0, 4"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    k++;\n    if (k % delimeter === 0) {\n      result.push(delimeter);\n      k = 0;\n    }\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, 'x')\n  [1, x, 2, x, 3]\n  >>> intersperse([1, 2, 3], 4, 'x', 'y')\n  [1, x, 4, y, 2, x, 4, y, 3]\n  */\nconst intersperse2 = (numbers, delimeter, separator) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    k++;\n    if (k % delimeter === 0) {\n      result.push(separator);\n      k = 0;\n    }\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse2([1, 2, 3], 4, 'x')\n  [1, x, 2, x, 3]\n  >>> intersperse2([1, 2, 3], 4, 'x', 'y')\n  [1, x, 4, y, 2, x, 4, y, 3]\n  */\nconst intersperse3 = (numbers, delimeter, separator, delimiter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    k++;\n    if (k % delimeter === 0) {\n      result.push(delimiter);\n      k = 0;\n    }\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse3([1, 2, 3], 4, 'x', 'y')\n  [1, x, 4, y, 2, x, 4, y, 3]\n  >>> intersperse3([1, 2, 3], 4, 'x', 'y', 'z')\n  [1, x, 4, y, 2, x, 4, y, 3, z]\n  */\nconst intersperse4 = (numbers, delimeter, separator, delimiter, delimiter2) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    k++;\n    if (k % delimeter === 0) {\n      result.push(delimiter);\n      k = 0;\n    }\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse4([1, 2, 3], 4, 'x', 'y', 'z')\n  [1, x, 4, y, 2, x, 4, y, 3, z]\n  >>> intersperse4([1, 2, 3], 4, 'x', 'y', 'z', 'w')\n  [1, x, 4, y, 2, x, 4, y, 3, z, w]\n  */\nconst intersperse5 = (numbers, delimeter, separator, delimiter, delimiter2, delimiter3) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    k++;\n    if (k % delimeter === 0) {\n      result.push(delimiter);\n      k = 0;\n    }\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse5([1, 2, 3], 4, 'x', 'y', 'z', 'w')\n  [1, x, 4, y, 2, x, 4, y, 3, z, w]\n  >>> intersperse5([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'x')\n  [1, x, 4, y, 2, x, 4, y, 3, z, w, x]\n  */\nconst intersperse6 = (numbers, delimeter, separator, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    k++;\n    if (k % delimeter === 0) {\n      result.push(delimiter);\n      k = 0;\n    }\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse6([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'x')\n  [1, x, 4, y, 2, x, 4, y, 3, z, w, x]\n  >>> intersperse6([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'x', 'y')\n  [1, x, 4, y, 2, x, 4, y, 3, z, w, x, y]\n  */\nconst intersperse7 = (numbers, delimeter, separator, delimiter, delimiter2, delimiter"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const stack_max_depth = []\n  const stack_max_depth_index = []\n  const stack_max_depth_index_index = []\n  const stack_max_depth_index_index_index = []\n  const stack_max_depth_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = []\n  const stack_max_depth_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  "}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(1)\n  }\n  for (let i = 1; i < numbers.length; i++) {\n    for (let j = 0; j < i; j++) {\n      sums[j] += numbers[i]\n      products[j] *= numbers[i]\n    }\n  }\n  return {\n    sums,\n    products\n  }\n}\n\n/*\n  Given a list of numbers, return a list of the sum of each number in the list.\n  >>> sumList([1, 2, 3, 4])\n  [1, 5, 9, 14]\n  */\nconst sumList = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the product of each number in the list.\n  >>> productList([1, 2, 3, 4])\n  [1, 2, 6, 24]\n  */\nconst productList = (numbers) => {\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    products.push(numbers[i])\n  }\n  return products\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the squares of each number in the list.\n  >>> sumSquares([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  */\nconst sumSquares = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the squares of the squares of each number in the list.\n  >>> sumSquaresSquares([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  */\nconst sumSquaresSquares = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * numbers[i] * numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the cubes of each number in the list.\n  >>> sumCubes([1, 2, 3, 4])\n  [1, 8, 27, 64]\n  */\nconst sumCubes = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * numbers[i] * numbers[i] * numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the cubes of the cubes of each number in the list.\n  >>> sumCubesCubes([1, 2, 3, 4])\n  [1, 8, 27, 64]\n  */\nconst sumCubesCubes = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the cubes of the cubes of the cubes of each number in the list.\n  >>> sumCubesCubesCubes([1, 2, 3, 4])\n  [1, 8, 27, 64]\n  */\nconst sumCubesCubesCubes = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the cubes of the cubes of the cubes of the cubes of each number in the list.\n  >>> sumCubesCubesCubesCubes([1, 2, 3, 4])\n  [1, 8, 27, 64]\n  */\nconst sumCubesCubesCubesCubes = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the cubes of the cubes of the cubes of the cubes of the cubes of each number in the list.\n  >>> sumCubesCubesCubesCubesCubes([1, 2, 3, 4])\n  [1, 8, 27, 64]\n  */\nconst sumCubesCubesCubesCubesCubes = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i] * numbers[i])\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of each number in the list.\n  "}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = numbers.length;\n  const maxLengthMinusOne = maxLength - 1;\n  const maxLengthMinusTwo = maxLength - 2;\n  const maxLengthMinusThree = maxLength - 3;\n  const maxLengthMinusFour = maxLength - 4;\n  const maxLengthMinusFive = maxLength - 5;\n  const maxLengthMinusSix = maxLength - 6;\n  const maxLengthMinusSeven = maxLength - 7;\n  const maxLengthMinusEight = maxLength - 8;\n  const maxLengthMinusNine = maxLength - 9;\n  const maxLengthMinusTen = maxLength - 10;\n  const maxLengthMinusEleven = maxLength - 11;\n  const maxLengthMinusTwelve = maxLength - 12;\n  const maxLengthMinusThirteen = maxLength - 13;\n  const maxLengthMinusFourteen = maxLength - 14;\n  const maxLengthMinusFifteen = maxLength - 15;\n  const maxLengthMinusSixteen = maxLength - 16;\n  const maxLengthMinusSeventeen = maxLength - 17;\n  const maxLengthMinusEighteen = maxLength - 18;\n  const maxLengthMinusNineteen = maxLength - 19;\n  const maxLengthMinusTwenty = maxLength - 20;\n  const maxLengthMinusTwentyOne = maxLength - 21;\n  const maxLengthMinusTwentyTwo = maxLength - 22;\n  const maxLengthMinusTwentyThree = maxLength - 23;\n  const maxLengthMinusTwentyFour = maxLength - 24;\n  const maxLengthMinusTwentyFive = maxLength - 25;\n  const maxLengthMinusTwentySix = maxLength - 26;\n  const maxLengthMinusTwentySeven = maxLength - 27;\n  const maxLengthMinusTwentyEight = maxLength - 28;\n  const maxLengthMinusTwentyNine = maxLength - 29;\n  const maxLengthMinusThirty = maxLength - 30;\n  const maxLengthMinusThirtyOne = maxLength - 31;\n  const maxLengthMinusThirtyTwo = maxLength - 32;\n  const maxLengthMinusThirtyThree = maxLength - 33;\n  const maxLengthMinusThirtyFour = maxLength - 34;\n  const maxLengthMinusThirtyFive = maxLength - 35;\n  const maxLengthMinusThirtySix = maxLength - 36;\n  const maxLengthMinusThirtySeven = maxLength - 37;\n  const maxLengthMinusThirtyEight = maxLength - 38;\n  const maxLengthMinusThirtyNine = maxLength - 39;\n  const maxLengthMinusForty = maxLength - 40;\n  const maxLengthMinusFortyOne = maxLength - 41;\n  const maxLengthMinusFortyTwo = maxLength - 42;\n  const maxLengthMinusFortyThree = maxLength - 43;\n  const maxLengthMinusFortyFour = maxLength - 44;\n  const maxLengthMinusFortyFive = maxLength - 45;\n  const maxLengthMinusFortySix = maxLength - 46;\n  const maxLengthMinusFortySeven = maxLength - 47;\n  const maxLengthMinusFortyEight = maxLength - 48;\n  const maxLengthMinusFortyNine = maxLength - 49;\n  const maxLengthMinusFifty = maxLength - 50;\n  const maxLengthMinusFiftyOne = maxLength - 51;\n  const maxLengthMinusFiftyTwo = maxLength - 52;\n  const maxLengthMinusFiftyThree = maxLength - 53;\n  const maxLengthMinusFiftyFour = maxLength - 54;\n  const maxLengthMinusFiftyFive = maxLength - 55;\n  const maxLengthMinusFiftySix = maxLength - 56;\n  const maxLengthMinusFiftySeven = maxLength - 57;\n  const maxLengthMinusFiftyEight = maxLength - 58;\n  const maxLengthMinusFiftyNine = maxLength - 59;\n  const maxLengthMinusSixty = maxLength - 60;\n  const maxLengthMinusSixtyOne = maxLength - 61;\n  const maxLengthMinusSixtyTwo = maxLength - 62;\n  const maxLengthMinusSixtyThree = maxLength - 63;\n  const maxLengthMinusSixtyFour = maxLength - 64;\n  const maxLengthMinusSixtyFive = maxLength - 65;\n  const maxLengthMinusSixtySix = maxLength - 66;\n  const maxLengthMinusSixtySeven = maxLength - 67;\n  const maxLengthMinusSixtyEight = maxLength - 68;\n  const maxLengthMinusSixtyNine = maxLength - 69;\n  const maxLengthMinusSeventy = maxLength - 70;\n  const maxLengthMinusSeventyOne = maxLength - 71;\n  const maxLengthMinusSeventyTwo = maxLength - 72;\n  const maxLengthMinusSeventyThree = maxLength - 73;\n  const maxLengthMinusSeventyFour = maxLength - 74;\n  const maxLengthMinusSeventyFive = maxLength - 75;\n  const maxLengthMinusSeventySix = maxLength - 76;\n  const maxLengthMinusSeventySeven = maxLength - 77;\n  const maxLengthMinusSeventyEight = maxLength - 78;\n  const maxLengthMinusSeventyNine = maxLength - 79;\n  const maxLengthMinusSeventyTen = maxLength - 80;\n  const maxLengthMinusSeventyEleven = maxLength - 81;\n  const maxLengthMinusSeventyTwelve = maxLength - 82;\n  const maxLengthMinusSeventyThirteen = maxLength - 83;\n  const maxLengthMinusSeventyFourteen = maxLength - 84;\n  const maxLengthMinusSeventyFifteen = maxLength - 85;\n  const maxLengthMinusSeventySixteen = maxLength - 86;\n  const maxLengthMinusSeventySeventeen = maxLength - 87;\n  const maxLengthMinusSeventyEighteen = maxLength - 88;\n  const maxLengthMinusSeventyNineteen = maxLength - 89;\n  const maxLengthMinusSeventyTwenty = maxLength - 90;\n  const maxLengthMinusSeventyTwentyOne = maxLength - 91;"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  '"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of '1' and '0' characters.\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101')\n  5\n  >>> countOnesAndZeros('01010101"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a < b) {\n    return greatestCommonDivisor(a, b);\n  }\n};\n\n/* Return the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return gcd(b, a);\n  }\n  if (a < b) {\n    return gcd(a, b);\n  }\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the sum of two integers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  30\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the difference of two integers a and b\n  >>> difference(3, 5)\n  2\n  >>> difference(25, 15)\n  10\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/* Return the product of two integers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  225\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Return the quotient of two integers a and b\n  >>> quotient(3, 5)\n  1\n  >>> quotient(25, 15)\n  5\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/* Return the remainder of two integers a and b\n  >>> remainder(3, 5)\n  2\n  >>> remainder(25, 15)\n  10\n  */\nconst remainder = (a, b) => {\n  return a % b;\n};\n\n/* Return the absolute value of an integer\n  >>> abs(3)\n  3\n  >>> abs(25)\n  25\n  */\nconst abs = (a) => {\n  if (a < 0) {\n    return -a;\n  }\n  return a;\n};\n\n/* Return the square root of an integer\n  >>> sqrt(3)\n  1\n  >>> sqrt(25)\n  5\n  */\nconst sqrt = (a) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (a === 1) {\n    return 1;\n  }\n  if (a === 2) {\n    return 1;\n  }\n  if (a % 2 === 0) {\n    return (sqrt(a / 2) + sqrt(a / 2)) / 2;\n  }\n  return Math.sqrt(a);\n};\n\n/* Return the cube root of an integer\n  >>> cubeRoot(3)\n  1\n  >>> cubeRoot(25)\n  5\n  */\nconst cubeRoot = (a) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (a === 1) {\n    return 1;\n  }\n  if (a === 2) {\n    return 1;\n  }\n  if (a % 3 === 0) {\n    return (cubeRoot(a / 3) + cubeRoot(a / 3)) / 3;\n  }\n  return Math.pow(a, 1 / 3);\n};\n\n/* Return the factorial of an integer\n  >>> factorial(3)\n  6\n  >>> factorial(25)\n  40320\n  */\nconst factorial = (a) => {\n  if (a === 0) {\n    return 1;\n  }\n  return a * factorial(a - 1);\n};\n\n/* Return the permutation of a given integer\n  >>> permutation(3)\n  [1, 2, 0]\n  >>> permutation(25)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  */\nconst permutation = (a) => {\n  let result = [];\n  let index = 0;\n  while (a > 0) {\n    result.push(a % 26);\n    a = Math.floor(a / 26);\n  }\n  return result;\n};\n\n/* Return the factorial of a given integer\n  >>> factorial(3)\n  6\n  >>> factorial(25)\n  40320\n  */\nconst factorial = (a) => {\n  if (a === 0) {\n    return 1;\n  }\n  return a * factorial(a - 1);\n};\n\n/* Return the permutation of a given integer\n  >>> permutation(3)\n  [1, 2, 0]\n  >>> permutation(25)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  */\nconst permutation = (a) => {\n  let result = [];\n  let index = 0;\n  while (a > 0) {\n    result.push(a % 26);\n    a = Math.floor(a / 26);\n  }\n  return result;\n};\n\n/* Return the permutation of a given integer"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substring(1, current.length);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCase = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseSensitiveAndCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLocaleLowerCase());\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLocaleLowerCase());\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLocaleLowerCase());\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLocaleLowerCase());\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLocaleLowerCase());\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseSensitiveAndCaseSensitiveAndCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLocaleLowerCase());\n    charSet.add(string[i].toLocaleUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Gives a string, found out how many distincter character ("}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(1)\n    } else if (notes[i] === 'o|') {\n      beats.push(2)\n    } else if (notes[i] === 'o|o') {\n      beats.push(3)\n    } else if (notes[i] === 'o|o|') {\n      beats.push(4)\n    } else if (notes[i] === 'o|o|o') {\n      beats.push(5)\n    } else if (notes[i] === 'o|o|o|') {\n      beats.push(6)\n    } else if (notes[i] === 'o|o|o|o') {\n      beats.push(7)\n    } else if (notes[i] === 'o|o|o|o|') {\n      beats.push(8)\n    } else if (notes[i] === 'o|o|o|o|o') {\n      beats.push(9)\n    } else if (notes[i] === 'o|o|o|o|o|') {\n      beats.push(10)\n    } else if (notes[i] === 'o|o|o|o|o|o') {\n      beats.push(11)\n    } else if (notes[i] === 'o|o|o|o|o|o|') {\n      beats.push(12)\n    } else if (notes[i] === 'o|o|o|o|o|o|o') {\n      beats.push(13)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|') {\n      beats.push(14)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o') {\n      beats.push(15)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|') {\n      beats.push(16)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o') {\n      beats.push(17)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|') {\n      beats.push(18)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o') {\n      beats.push(19)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(20)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o') {\n      beats.push(21)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(22)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o') {\n      beats.push(23)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(24)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o') {\n      beats.push(25)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(26)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(27)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(28)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(29)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(30)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(31)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(32)\n    } else if (notes[i] === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n      beats.push(33)\n    } else if (notes[i] ==="}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'aa')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    - 'eight'\n    - 'nine'\n    - 'zeros'\n    - 'one'\n    - 'two'\n    - 'three'\n    - 'four'\n    - 'five'\n    -'six'\n    -'seven'\n    -"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const diff = [numbers[0] - numbers[1], numbers[1] - numbers[2]];\n  const min = [Math.min(diff[0], diff[1]), Math.min(diff[0], diff[1])];\n  for (let i = 2; i < numbers.length; i++) {\n    const newDiff = [numbers[i] - numbers[i - 1], numbers[i] - numbers[i - 1]];\n    const newMin = [Math.min(newDiff[0], newDiff[1]), Math.min(newDiff[0], newDiff[1])];\n    if (newMin[0] < min[0] || newMin[1] < min[1]) {\n      closest = [numbers[i - 1], numbers[i]];\n      min = newMin;\n    }\n  }\n  return closest;\n};\n\nexport default findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit9 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter(v => typeof v === 'number');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  const filtered = values.filter(v => typeof v ==='string');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  const filtered = values.filter(v => typeof v === 'boolean');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  const filtered = values.filter(v => typeof v === 'object' && v.constructor === Array);\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  [5]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictionaries = (values) => {\n  const filtered = values.filter(v => typeof v === 'object' && v.constructor === Object);\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFunctions = (values) => {\n  const filtered = values.filter(v => typeof v === 'function');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  const filtered = values.filter(v => typeof v === 'object');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  const filtered = values.filter(v => typeof v === 'number');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  const filtered = values.filter(v => typeof v ==='string');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  const filtered = values.filter(v => typeof v === 'boolean');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  const filtered = values.filter(v => typeof v === 'object' && v.constructor === Array);\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  [5]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictionaries = (values) => {\n  const filtered = values.filter(v => typeof v === 'object' && v.constructor === Object);\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFunctions = (values) => {\n  const filtered = values.filter(v => typeof v === 'function');\n  return filtered.length === 0? [] : filtered;\n};\n\n/* Filter gives list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, '"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return string with all whitespace removed\n  >>> strstrip('')\n  ''\n  >>> strstrip('abc')\n  'abc'\n  >>> strstrip('   abc')\n  'abc'\n  */\nconst strstrip = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n};\n\n/* Return string with all whitespace removed and lowercase\n  >>> strlower('')\n  ''\n  >>> strlower('abc')\n  'abc'\n  >>> strlower('   abc')\n  'abc'\n  */\nconst strlower = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').toLowerCase();\n};\n\n/* Return string with all whitespace removed and uppercase\n  >>> strupper('')\n  ''\n  >>> strupper('abc')\n  'ABC'\n  >>> strupper('   abc')\n  'ABC'\n  */\nconst strupper = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').toUpperCase();\n};\n\n/* Return string with all whitespace removed and titlecase\n  >>> strtitle('')\n  ''\n  >>> strtitle('abc')\n  'Abc'\n  >>> strtitle('   abc')\n  'Abc'\n  */\nconst strtitle = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1);\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1);\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1);\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1);\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1);\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1);\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1);\n  });\n};\n\n/* Return string with all whitespace removed and capitalize first letter\n  >>> strcapitalize('')\n  ''\n  >>> strcapitalize('abc')\n  'Abc'\n  >>> strcapitalize('   abc')\n  'Abc'\n  */\nconst strcapitalize = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '').replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  >>> largestDivisor(30)\n  15\n  >>> largestDivisor(40)\n  20\n  >>> largestDivisor(50)\n  25\n  >>> largestDivisor(60)\n  30\n  >>> largestDivisor(70)\n  35\n  >>> largestDivisor(80)\n  40\n  >>> largestDivisor(90)\n  45\n  >>> largestDivisor(100)\n  50\n  >>> largestDivisor(110)\n  55\n  >>> largestDivisor(120)\n  60\n  >>> largestDivisor(130)\n  65\n  >>> largestDivisor(140)\n  70\n  >>> largestDivisor(150)\n  75\n  >>> largestDivisor(160)\n  80\n  >>> largestDivisor(170)\n  85\n  >>> largestDivisor(180)\n  90\n  >>> largestDivisor(190)\n  95\n  >>> largestDivisor(200)\n  100\n  >>> largestDivisor(210)\n  105\n  >>> largestDivisor(220)\n  110\n  >>> largestDivisor(230)\n  115\n  >>> largestDivisor(240)\n  120\n  >>> largestDivisor(250)\n  125\n  >>> largestDivisor(260)\n  130\n  >>> largestDivisor(270)\n  135\n  >>> largestDivisor(280)\n  140\n  >>> largestDivisor(290)\n  145\n  >>> largestDivisor(300)\n  150\n  >>> largestDivisor(310)\n  155\n  >>> largestDivisor(320)\n  160\n  >>> largestDivisor(330)\n  165\n  >>> largestDivisor(340)\n  170\n  >>> largestDivisor(350)\n  175\n  >>> largestDivisor(360)\n  180\n  >>> largestDivisor(370)\n  185\n  >>> largestDivisor(380)\n  190\n  >>> largestDivisor(390)\n  195\n  >>> largestDivisor(400)\n  200\n  >>> largestDivisor(410)\n  205\n  >>> largestDivisor(420)\n  210\n  >>> largestDivisor(430)\n  215\n  >>> largestDivisor(440)\n  220\n  >>> largestDivisor(450)\n  225\n  >>> largestDivisor(460)\n  230\n  >>> largestDivisor(470)\n  235\n  >>> largestDivisor(480)\n  240\n  >>> largestDivisor(490)\n  245\n  >>> largestDivisor(500)\n  250\n  >>> largestDivisor(510)\n  255\n  >>> largestDivisor(520)\n  260\n  >>> largestDivisor(530)\n  265\n  >>> largestDivisor(540)\n  270\n  >>> largestDivisor(550)\n  275\n  >>> largestDivisor(560)\n  280\n  >>> largestDivisor(570)\n  285\n  >>> largestDivisor(580)\n  290\n  >>> largestDivisor(590)\n  295\n  >>> largestDivisor(600)\n  300\n  >>> largestDivisor(610)\n  305\n  >>> largestDivisor(620)\n  310\n  >>> largestDivisor(630)\n  315\n  >>> largestDivisor(640)\n  320\n  >>> largestDivisor(650)\n  325\n  >>> largestDivisor(660)\n  330\n  >>> largestDivisor(670)\n  335\n  >>> largestDivisor(680)\n  340\n  >>> largestDivisor(690)\n  345\n  >>> largestDivisor(700)\n  350\n  >>> largestDivisor(710)\n  355\n  >>> largestDivisor(720)\n  360\n  >>> largestDivisor(730)\n  365\n  >>> largestDivisor(740)\n  370\n  >>> largestDivisor(750)\n  375\n  >>> largestDivisor(760)\n  380\n  >>> largestDivisor(770)\n  385\n  >>> largestDivisor(780)\n  390\n  >>> largestDivisor(790)\n  395\n  >>> largestDivisor(800)\n  400\n  >>> largestDivisor(810)\n  405\n  >>> largestDivisor(820)\n  410\n  >>> largestDivisor(830)\n  415\n  >>> largestDivisor(840)\n  420\n  >>> largestDivisor(850)\n  425\n  >>> largestDivisor(860)\n  430\n  >>> largestDivisor(870)\n  435\n  >>> largestDivisor(880)\n  440\n  >>> largestDivisor(890)\n  445\n  >>> largestDivisor(900)\n  450\n  >>> largestDivisor(910)\n  455\n  >>> largestDivisor(920)\n  460\n  >>> largestDivisor(930)\n  465\n  >>> largestDivisor(940)\n  470\n  >>> largestDivisor(950)\n  475\n  >>> largestDivisor(960)\n  480\n  >>> largestDivisor(970)\n  485\n  >>> largestDivisor(980)\n  490\n  >>> largestDivisor(990)\n  495\n  >>> largestDivisor(1000)\n  500\n  >>> largestDivisor(1010)\n  505\n  >>> largestDivisor(1020)\n  510\n  >>> largestDivisor(1030)\n  515\n  >>> largestDivisor(1040)\n  520\n  >>> largestDivisor(1050)\n  525\n  >>> largestDivisor(1060)\n  530\n  >>> largestDivisor(1070)\n  535\n  >>> largestDivisor(1080)\n  540\n  >>> largestDivisor(1090)\n  545\n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    if (n % 5 === 0) return false\n    if (n % 7 === 0) return false\n    if (n % 11 === 0) return false\n    if (n % 13 === 0) return false\n    if (n % 17 === 0) return false\n    if (n % 19 === 0) return false\n    if (n % 23 === 0) return false\n    if (n % 29 === 0) return false\n    if (n % 31 === 0) return false\n    if (n % 37 === 0) return false\n    if (n % 41 === 0) return false\n    if (n % 43 === 0) return false\n    if (n % 47 === 0) return false\n    if (n % 53 === 0) return false\n    if (n % 59 === 0) return false\n    if (n % 61 === 0) return false\n    if (n % 67 === 0) return false\n    if (n % 71 === 0) return false\n    if (n % 73 === 0) return false\n    if (n % 79 === 0) return false\n    if (n % 83 === 0) return false\n    if (n % 89 === 0) return false\n    if (n % 97 === 0) return false\n    if (n % 101 === 0) return false\n    if (n % 103 === 0) return false\n    if (n % 107 === 0) return false\n    if (n % 109 === 0) return false\n    if (n % 113 === 0) return false\n    if (n % 127 === 0) return false\n    if (n % 131 === 0) return false\n    if (n % 137 === 0) return false\n    if (n % 139 === 0) return false\n    if (n % 149 === 0) return false\n    if (n % 151 === 0) return false\n    if (n % 157 === 0) return false\n    if (n % 163 === 0) return false\n    if (n % 167 === 0) return false\n    if (n % 173 === 0) return false\n    if (n % 179 === 0) return false\n    if (n % 181 === 0) return false\n    if (n % 191 === 0) return false\n    if (n % 193 === 0) return false\n    if (n % 197 === 0) return false\n    if (n % 199 === 0) return false\n    if (n % 211 === 0) return false\n    if (n % 223 === 0) return false\n    if (n % 227 === 0) return false\n    if (n % 229 === 0) return false\n    if (n % 233 === 0) return false\n    if (n % 239 === 0) return false\n    if (n % 241 === 0) return false\n    if (n % 251 === 0) return false\n    if (n % 257 === 0) return false\n    if (n % 263 === 0) return false\n    if (n % 269 === 0) return false\n    if (n % 271 === 0) return false\n    if (n % 277 === 0) return false\n    if (n % 281 === 0) return false\n    if (n % 283 === 0) return false\n    if (n % 293 === 0) return false\n    if (n % 307 === 0) return false\n    if (n % 311 === 0) return false\n    if (n % 313 === 0) return false\n    if (n % 317 === 0) return false\n    if (n % 319 === 0) return false\n    if (n % 331 === 0) return false\n    if (n % 337 === 0) return false\n    if (n % 347 === 0) return false\n    if (n % 349 === 0) return false\n    if (n % 353 === 0) return false\n    if (n % 359 === 0) return false\n    if (n % 367 === 0) return false\n    if (n % 373 === 0) return false\n    if (n % 379 === 0) return false\n    if (n % 383 === 0) return false\n    if (n % 389 === 0) return false\n    if (n % 397 === 0) return false\n    if (n % 401 === 0) return false\n    if (n % 409 === 0) return false\n    if (n % 419 === 0) return false\n    if (n % 421 === 0) return false\n    if (n % 431 === 0) return false\n    if (n % 433 === 0) return false\n    if (n % 439 === 0) return false\n    if (n % 443 === 0) return false\n    if (n % 447 === 0) return false\n    if (n % 457 === 0) return false\n    if (n % 461 === 0) return false\n    if (n % 463 === 0) return false\n    if (n % 467 === 0) return false\n    if (n % 479 === 0) return false\n    if (n % 487 === 0) return false\n    if (n % 491 === 0) return false\n    if (n % 499 === 0) return false\n    if (n % 503 === 0) return false\n    if (n % 509 === 0) return false\n    if (n % 521 === 0) return false\n    if (n % 523 === 0) return false\n    if (n % 541 === 0) return false\n    if (n % 547 === 0) return false\n    if (n % 557 === 0) return false\n    if (n % 563 === 0) return false\n    if (n % 569 === 0) return false\n    if (n % 571 === 0) return false\n    if (n % 577 === 0) return false\n    if (n % 587 === 0) return false\n    if (n % 599 === 0) return false\n    if (n % 601 === 0) return false\n    if (n % 607 === 0) return false\n    if (n % 613 === 0) return false\n    if (n % 617 === 0) return false\n    if (n %"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]]) {\n      continue;\n    }\n    seen[numbers[i]] = true;\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  For a given string, returns the string with all the characters in uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase2 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase3 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase4 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase5 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase6 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase7 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase8 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase9 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase10 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase11 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase12 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase13 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase14 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase15 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase16 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase17 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase18 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase\n  and uppercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase19 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, returns the string with all the characters in lowercase"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate2 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate3 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate4 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate5 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate6 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate7 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate8 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate9 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate10 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate11 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate12 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate13 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate14 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate15 = (strings) => {\n  return strings.reduce((acc, str) => acc + str, ''"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  */\nconst filterOut = (strings, exclude) => {\n  return strings.filter(s => exclude.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a',"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10, 12, 13]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10, 12, 14, 15]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10, 12, 14, 16, 17]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 19]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 23]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10, 12,"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 30) return true\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>> countPrimes(110)"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero2 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero2(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero3 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero3(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero4 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero4(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero5 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero5(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero6 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero6(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero7 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero7(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero8 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero8(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero9 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero9(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero10 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero10(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero11 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero11(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero12 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero12(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero13 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero13(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero14 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero14(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero15 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero15(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero16 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const x = findZero16(xs.slice(1, len));\n    return xs[0] + x * xs[1];\n  }\n  return xs[0];\n}\n\nconst findZero17 = (xs) => {\n  const len = xs.length"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  l2.sort((a, b) => b - a);\n  return l2.concat(l3);\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum elements in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let half = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortBy = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortBy([1, 2, 3])\n  [1, 2, 3]\n  >>> sortBy([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByDesc = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortByDesc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByDesc([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByAsc = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortByAsc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByAsc([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByAscDesc = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortByAscDesc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByAscDesc([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByAscDescAsc = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortByAscDescAsc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByAscDescAsc([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByAscDescAscDesc = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortByAscDescAscDesc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByAscDescAscDesc([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByAscDescAscDescAsc = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_2 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_3 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_4 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_5 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_6 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_7 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_8 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_9 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic_10 = (s) => {\n var groups"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) return 2\n  if (n === 2) return 3\n  if (n === 3) return 5\n  if (n === 4) return 13\n  if (n === 5) return 89\n  return primeFib(n - 1) + primeFib(n - 2)\n}\n\nconsole.log(primeFib(1))\nconsole.log(primeFib(2))\nconsole.log(primeFib(3))\nconsole.log(primeFib(4))\nconsole.log(primeFib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 1\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 2\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 3\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 4\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 5\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return unique.size === 3 && sum === 6\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSum"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  const cars = Array(n).fill(0).map((_, i) => ({\n    x: i,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    speed: 0\n  }))\n  cars.forEach((car, i) => {\n    car.x = i\n    car.y = Math.random() * 100\n    car.vx = Math.random() * 2 - 1\n    car.vy = Math.random() * 2 - 1\n    car.speed = Math.random() * 2 - 1\n  })\n  const carsLeft = cars.slice(0)\n  const carsRight = cars.slice(cars.length - 1)\n  const carsLeftRight = cars.slice(cars.length / 2)\n  const carsRightLeft = cars.slice(cars.length / 2 + 1)\n  carsLeft.forEach((car, i) => {\n    car.x = cars.length - i - 1\n    car.y = Math.random() * 100\n    car.vx = Math.random() * 2 - 1\n    car.vy = Math.random() * 2 - 1\n    car.speed = Math.random() * 2 - 1\n  })\n  carsRight.forEach((car, i) => {\n    car.x = i\n    car.y = Math.random() * 100\n    car.vx = Math.random() * 2 - 1\n    car.vy = Math.random() * 2 - 1\n    car.speed = Math.random() * 2 - 1\n  })\n  carsLeftRight.forEach((car, i) => {\n    car.x = cars.length - i - 1\n    car.y = Math.random() * 100\n    car.vx = Math.random() * 2 - 1\n    car.vy = Math.random() * 2 - 1\n    car.speed = Math.random() * 2 - 1\n  })\n  carsRightLeft.forEach((car, i) => {\n    car.x = i\n    car.y = Math.random() * 100\n    car.vx = Math.random() * 2 - 1\n    car.vy = Math.random() * 2 - 1\n    car.speed = Math.random() * 2 - 1\n  })\n  const carsLeftRightCollision = carsLeft.filter(car => carRight.some(collide => collide.x < car.x && collide.y < car.y))\n  const carsRightLeftCollision = carsRight.filter(car => carLeft.some(collide => collide.x > car.x && collide.y > car.y))\n  const carsLeftRightCollisionCount = carsLeftRightCollision.length\n  const carsRightLeftCollisionCount = carsRightLeftCollision.length\n  return carsLeftRightCollisionCount + carsRightLeftCollisionCount\n}\n\nconsole.log(carRaceCollision(10))\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l.length) {\n    res[j] = l[i];\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList ="}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSum"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 2) {\n    return x.toString(2);\n  }\n  if (base === 8) {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 3) {\n    return x.toString(3);\n  }\n  if (base === 7) {\n    return x.toString(7);\n  }\n  if (base === 9) {\n    return x.toString(9);\n  }\n  if (base === 11) {\n    return x.toString(11);\n  }\n  if (base === 13) {\n    return x.toString(13);\n  }\n  if (base === 15) {\n    return x.toString(15);\n  }\n  if (base === 18) {\n    return x.toString(18);\n  }\n  if (base === 19) {\n    return x.toString(19);\n  }\n  if (base === 23) {\n    return x.toString(23);\n  }\n  if (base === 26) {\n    return x.toString(26);\n  }\n  if (base === 31) {\n    return x.toString(31);\n  }\n  if (base === 37) {\n    return x.toString(37);\n  }\n  if (base === 41) {\n    return x.toString(41);\n  }\n  if (base === 45) {\n    return x.toString(45);\n  }\n  if (base === 50) {\n    return x.toString(50);\n  }\n  if (base === 53) {\n    return x.toString(53);\n  }\n  if (base === 58) {\n    return x.toString(58);\n  }\n  if (base === 64) {\n    return x.toString(64);\n  }\n  if (base === 71) {\n    return x.toString(71);\n  }\n  if (base === 74) {\n    return x.toString(74);\n  }\n  if (base === 77) {\n    return x.toString(77);\n  }\n  if (base === 82) {\n    return x.toString(82);\n  }\n  if (base === 87) {\n    return x.toString(87);\n  }\n  if (base === 91) {\n    return x.toString(91);\n  }\n  if (base === 96) {\n    return x.toString(96);\n  }\n  if (base === 99) {\n    return x.toString(99);\n  }\n  if (base === 102) {\n    return x.toString(102);\n  }\n  if (base === 105) {\n    return x.toString(105);\n  }\n  if (base === 108) {\n    return x.toString(108);\n  }\n  if (base === 111) {\n    return x.toString(111);\n  }\n  if (base === 114) {\n    return x.toString(114);\n  }\n  if (base === 117) {\n    return x.toString(117);\n  }\n  if (base === 120) {\n    return x.toString(120);\n  }\n  if (base === 123) {\n    return x.toString(123);\n  }\n  if (base === 126) {\n    return x.toString(126);\n  }\n  if (base === 129) {\n    return x.toString(129);\n  }\n  if (base === 132) {\n    return x.toString(132);\n  }\n  if (base === 135) {\n    return x.toString(135);\n  }\n  if (base === 138) {\n    return x.toString(138);\n  }\n  if (base === 141) {\n    return x.toString(141);\n  }\n  if (base === 144) {\n    return x.toString(144);\n  }\n  if (base === 147) {\n    return x.toString(147);\n  }\n  if (base === 150) {\n    return x.toString(150);\n  }\n  if (base === 153) {\n    return x.toString(153);\n  }\n  if (base === 156) {\n    return x.toString(156);\n  }\n  if (base === 159) {\n    return x.toString(159);\n  }\n  if (base === 162) {\n    return x.toString(162);\n  }\n  if (base === 165) {\n    return x.toString(165);\n  }\n  if (base === 168) {\n    return x.toString(168);\n  }\n  if (base === 171) {\n    return x.toString(171);\n  }\n  if (base === 174) {\n    return x.toString(174);\n  }\n  if (base === 177) {\n    return x.toString(177);\n  }\n  if (base === 180) {\n    return x.toString(180);\n  }\n  if (base === 183) {\n    return x.toString(183);\n  }\n  if (base === 186) {\n    return x.toString(186);\n  }\n  if (base === 189) {\n    return x.toString(189);\n  }\n  if (base === 192) {\n    return x.toString(192);\n  }\n  if (base === 195) {\n    return x.toString(195);\n  }\n  if (base === 198) {\n    return x.toString(198);\n  }\n  if (base === 201) {\n    return x.toString(201);\n  }\n  if (base === 204) {\n    return x.toString(204);\n  }\n  if (base === 207) {\n    return x.toString(207);\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const n_p = n % p;\n  if (n_p === 0) return 1;\n  return n_p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp2 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp3 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp4 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp5 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp6 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp7 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp8 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp9 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp10 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp11 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp12 = (n, p) => {\n  return n / p;\n};\n\n/*Return the number of times that the number n is divisible by p.\n  >>> divp(3, 5)\n  1\n  >>> divp(1101, 101)\n  2\n  >>> divp(0, 101)\n  0\n  >>> divp(3, 11)\n  0\n  >>> divp(100, 101)\n  1\n  */\nconst divp13 = (n, p) => {"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 3 in the alphabets. */ const encodeShift3 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 1 in the alphabets. */ const encodeShift1 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 2 in the alphabets. */ const encodeShift2 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 4 in the alphabets. */ const encodeShift4 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift5 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 3 in the alphabets. */ const encodeShift3 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 1 in the alphabets. */ const encodeShift1 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 2 in the alphabets. */ const encodeShift2 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift2 = (s) => {\n  return s.split"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const newText = text.replace(/[aeiouAEIOU]/g, '')\n  return newText\n}\n\n/*\n  removePunctuation is a functions that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '%', '$', '*', '+', '{', '}', '|', '\\\\', '/', '<', '>', '=', '@', '#', '$', '^', '&', '~', '`', '~', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^', '|', '^"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 4)\n  true\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was in the range [t1, t2].\n  >>> inRange([1, 2, 4, 10], 5, 100)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 100)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 5)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 4)\n  true\n  */\nconst inRange = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was in the range [t1, t2].\n  >>> inRange([1, 2, 4, 10], 5, 100, true)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 100, true)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 5, true)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 4, true)\n  true\n  */\nconst inRangeWithInclude = (l, t1, t2, include) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was in the range [t1, t2].\n  >>> inRange([1, 2, 4, 10], 5, 100, false)\n  false\n  >>> inRange([1, 20, 4, 10], 5, 100, false)\n  true\n  >>> inRange([1, 2, 4, 10], 5, 5, false)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 4, false)\n  false\n  */\nconst inRangeWithExclude = (l, t1, t2, exclude) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was in the range [t1, t2].\n  >>> inRange([1, 2, 4, 10], 5, 100, true, true)\n  true\n  >>> inRange([1, 20, 4, 10], 5, 100, true, true)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 5, true, true)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 4, true, true)\n  false\n  */\nconst inRangeWithIncludeAndExclude = (l, t1, t2, include, exclude) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was in the range [t1, t2].\n  >>> inRange([1, 2, 4, 10], 5, 100, false, true)\n  false\n  >>> inRange([1, 20, 4, 10], 5, 100, false, true)\n  true\n  >>> inRange([1, 2, 4, 10], 5, 5, false, true)\n  false\n  >>> inRange([1, 2, 4, 10], 5, 4, false, true)\n  false\n  */\nconst inRangeWithIncludeAndExclude = (l, t1, t2, include, exclude) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was in the range [t1, t2].\n  >>> inRange([1, 2, 4, 10], 5, 100, false, false)\n  false\n  >>> inRange([1, 20, 4, 10], 5, 100, false, false)\n  true\n  >>>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  6\n  */\nconst negate = (x) => {\n  return -x;\n};\n\n/*\n  >>> negate(2)\n  -2\n  >>> negate(5)\n  -5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(5)\n  5\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(4)\n  2\n  >>> squareRoot(25)\n  5\n  */\nconst factorial = (x) => {\n  return x < 0? 1 : x * factorial(x - 1);\n};\n\n/*\n  >>> factorial(5)\n  120\n  >>> factorial(0)\n  1\n  >>> factorial(-1)\n  1\n  >>> factorial(-5)\n  1\n  */\nconst factorial2 = (x) => {\n  return x < 0? 1 : x * factorial2(x - 1);\n};\n\n/*\n  >>> factorial2(5)\n  120\n  >>> factorial2(0)\n  1\n  >>> factorial2(-1)\n  1\n  >>> factorial2(-5)\n  1\n  */\nconst factorial3 = (x) => {\n  return x < 0? 1 : x * factorial3(x - 1);\n};\n\n/*\n  >>> factorial3(5)\n  120\n  >>> factorial3(0)\n  1\n  >>> factorial3(-1)\n  1\n  >>> factorial3(-5)\n  1\n  */\nconst factorial4 = (x) => {\n  return x < 0? 1 : x * factorial4(x - 1);\n};\n\n/*\n  >>> factorial4(5)\n  120\n  >>> factorial4(0)\n  1\n  >>> factorial4(-1)\n  1\n  >>> factorial4(-5)\n  1\n  */\nconst factorial5 = (x) => {\n  return x < 0? 1 : x * factorial5(x - 1);\n};\n\n/*\n  >>> factorial5(5)\n  120\n  >>> factorial5(0)\n  1\n  >>> factorial5(-1)\n  1\n  >>> factorial5(-5)\n  1\n  */\nconst factorial6 = (x) => {\n  return x < 0? 1 : x * factorial6(x - 1);\n};\n\n/*\n  >>> factorial6(5)\n  120\n  >>> factorial6(0)\n  1\n  >>> factorial6(-1)\n  1\n  >>> factorial6(-5)\n  1\n  */\nconst factorial7 = (x) => {\n  return x < 0? 1 : x * factorial7(x - 1);\n};\n\n/*\n  >>> factorial7(5)\n  120\n  >>> factorial7(0)\n  1\n  >>> factorial7(-1)\n  1\n  >>> factorial7(-5)\n  1\n  */\nconst factorial8 = (x) => {\n  return x < 0? 1 : x * factorial8(x - 1);\n};\n\n/*\n  >>> factorial8(5)\n  120\n  >>> factorial8(0)\n  1\n  >>> factorial8(-1)\n  1\n  >>> factorial8(-5)\n  1\n  */\nconst factorial9 = (x) => {\n  return x < 0? 1 : x * factorial9(x - 1);\n};\n\n/*\n  >>> factorial9(5)\n  120\n  >>> factorial9(0)\n  1\n  >>> factorial9(-1)\n  1\n  >>> factorial9(-5)\n  1\n  */\nconst factorial10 = (x) => {\n  return x < 0? 1 : x * factorial10(x - 1);\n};\n\n/*\n  >>> factorial10(5)\n  120\n  >>> factorial10(0)\n  1\n  >>> factorial10(-1)\n  1\n  >>> factorial10(-5)\n  1\n  */\nconst factorial11 = (x) => {\n  return x < 0? 1 : x * factorial11(x - 1);\n};\n\n/*\n  >>> factorial11(5)\n  120\n  >>> factorial11(0)\n  1\n  >>> factorial11(-1)\n  1\n  >>> factorial11(-5)\n  1\n  */\nconst factorial12 = (x) => {\n  return x < 0? 1 : x * factorial12(x - 1);\n};\n\n/*\n  >>> factorial12(5)\n  120\n  >>> factorial12(0)\n  1\n  >>> factorial12(-1)\n  1\n  >>> factorial12(-5)\n  1\n  */\nconst factorial13 = (x) => {\n  return x < 0? 1 : x * factorial13(x - 1);\n};\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithLength = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithLengthAndCase = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithLengthAndCaseAndCase = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithLengthAndCaseAndCaseAndCase = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\nmodule.exports = {\n  sameChars,\n  sameCharsWithLength,\n  sameCharsWithLengthAndCase,\n  sameCharsWithLengthAndCaseAndCase,\n  sameCharsWithLengthAndCaseAndCaseAndCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  "}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsOpening = brackets.slice(0, bracketsLength - 1)\n  const bracketsClosing = brackets.slice(1, bracketsLength)\n\n  for (let i = 0; i < bracketsOpening.length; i++) {\n    if (bracketsClosing.indexOf(bracketsOpening[i]) === -1) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Given a string, return a new string with the brackets removed.\n\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\"\n  >>> removeBrackets(\"<>\")\n  \"<>\""}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_idx = {}\n  const l2_idx = {}\n  for (let i = 0; i < l1_len; i++) {\n    l1_idx[l1[i]] = i\n  }\n  for (let i = 0; i < l2_len; i++) {\n    l2_idx[l2[i]] = i\n  }\n  const common_list = []\n  for (let i = 0; i < l1_len; i++) {\n    const l1_item = l1[i]\n    const l2_item = l2[i]\n    if (l1_idx[l1_item]!== undefined && l2_idx[l2_item]!== undefined) {\n      common_list.push(l1_item)\n    }\n  }\n  return common_list\n}\n\nmodule.exports = common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  if (n === 1) return 1\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return p\n    }\n    p += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  if (n === 1) return 1\n  let"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  let bracketsCount = 0\n  let bracketsOpen = 0\n  let bracketsClose = 0\n  let bracketsOpenCount = 0\n  let bracketsCloseCount = 0\n  let bracketsOpenCount2 = 0\n  let bracketsCloseCount2 = 0\n  let bracketsOpenCount3 = 0\n  let bracketsCloseCount3 = 0\n  let bracketsOpenCount4 = 0\n  let bracketsCloseCount4 = 0\n  let bracketsOpenCount5 = 0\n  let bracketsCloseCount5 = 0\n  let bracketsOpenCount6 = 0\n  let bracketsCloseCount6 = 0\n  let bracketsOpenCount7 = 0\n  let bracketsCloseCount7 = 0\n  let bracketsOpenCount8 = 0\n  let bracketsCloseCount8 = 0\n  let bracketsOpenCount9 = 0\n  let bracketsCloseCount9 = 0\n  let bracketsOpenCount10 = 0\n  let bracketsCloseCount10 = 0\n  let bracketsOpenCount11 = 0\n  let bracketsCloseCount11 = 0\n  let bracketsOpenCount12 = 0\n  let bracketsCloseCount12 = 0\n  let bracketsOpenCount13 = 0\n  let bracketsCloseCount13 = 0\n  let bracketsOpenCount14 = 0\n  let bracketsCloseCount14 = 0\n  let bracketsOpenCount15 = 0\n  let bracketsCloseCount15 = 0\n  let bracketsOpenCount16 = 0\n  let bracketsCloseCount16 = 0\n  let bracketsOpenCount17 = 0\n  let bracketsCloseCount17 = 0\n  let bracketsOpenCount18 = 0\n  let bracketsCloseCount18 = 0\n  let bracketsOpenCount19 = 0\n  let bracketsCloseCount19 = 0\n  let bracketsOpenCount20 = 0\n  let bracketsCloseCount20 = 0\n  let bracketsOpenCount21 = 0\n  let bracketsCloseCount21 = 0\n  let bracketsOpenCount22 = 0\n  let bracketsCloseCount22 = 0\n  let bracketsOpenCount23 = 0\n  let bracketsCloseCount23 = 0\n  let bracketsOpenCount24 = 0\n  let bracketsCloseCount24 = 0\n  let bracketsOpenCount25 = 0\n  let bracketsCloseCount25 = 0\n  let bracketsOpenCount26 = 0\n  let bracketsCloseCount26 = 0\n  let bracketsOpenCount27 = 0\n  let bracketsCloseCount27 = 0\n  let bracketsOpenCount28 = 0\n  let bracketsCloseCount28 = 0\n  let bracketsOpenCount29 = 0\n  let bracketsCloseCount29 = 0\n  let bracketsOpenCount30 = 0\n  let bracketsCloseCount30 = 0\n  let bracketsOpenCount31 = 0\n  let bracketsCloseCount31 = 0\n  let bracketsOpenCount32 = 0\n  let bracketsCloseCount32 = 0\n  let bracketsOpenCount33 = 0\n  let bracketsCloseCount33 = 0\n  let bracketsOpenCount34 = 0\n  let bracketsCloseCount34 = 0\n  let bracketsOpenCount35 = 0\n  let bracketsCloseCount35 = 0\n  let bracketsOpenCount36 = 0\n  let bracketsCloseCount36 = 0\n  let bracketsOpenCount37 = 0\n  let bracketsCloseCount37 = 0\n  let bracketsOpenCount38 = 0\n  let bracketsCloseCount38 = 0\n  let bracketsOpenCount39 = 0\n  let bracketsCloseCount39 = 0\n  let bracketsOpenCount40 = 0\n  let bracketsCloseCount40 = 0\n  let bracketsOpenCount41 = 0\n  let bracketsCloseCount41 = 0\n  let bracketsOpenCount42 = 0\n  let bracketsCloseCount42 = 0\n  let bracketsOpenCount43 = 0\n  let bracketsCloseCount43 = 0\n  let bracketsOpenCount44 = 0\n  let bracketsCloseCount44 = 0\n  let bracketsOpenCount45 = 0\n  let bracketsCloseCount45 = 0\n  let bracketsOpenCount46 = 0\n  let bracketsCloseCount46 = 0\n  let bracketsOpenCount47 = 0\n  let bracketsCloseCount47 = 0\n  let bracketsOpenCount48 = 0\n  let bracketsCloseCount48 = 0\n  let bracketsOpenCount49 = 0\n  let bracketsCloseCount49 = 0\n  let bracketsOpenCount50 = 0\n  let bracketsCloseCount50 = 0\n  let bracketsOpenCount51 = 0\n  let bracketsCloseCount51 = 0\n  let bracketsOpenCount52 = 0\n  let bracketsCloseCount52 = 0\n  let bracketsOpenCount53 = 0\n  let bracketsCloseCount53 = 0\n  let bracketsOpenCount54 = 0\n  let bracketsCloseCount54 = 0\n  let bracketsOpenCount55 = 0\n  let bracketsCloseCount55 = 0\n  let bracketsOpenCount56 = 0\n  let bracketsCloseCount56 = 0\n  let bracketsOpenCount57 = 0\n  let bracketsCloseCount57 = 0\n  let bracketsOpenCount58 = 0\n  let bracketsCloseCount58 = 0\n  let bracketsOpenCount59 = 0\n  let bracketsCloseCount59 = 0\n  let bracketsOpenCount60 = 0\n  let bracketsCloseCount60 = 0\n  let bracketsOpenCount61 = 0\n  let bracketsCloseCount61 = 0\n  let bracketsOpenCount62 = 0\n  let bracketsCloseCount62 = 0\n  let bracketsOpenCount63 = 0\n  let bracketsCloseCount63 = 0\n  let bracketsOpenCount64 = 0\n  let bracketsCloseCount64 = 0\n  let bracketsOpenCount65 = 0\n  let bracketsCloseCount65 = 0\n  let bracketsOpenCount66 = 0\n  let bracketsCloseCount66 = 0\n  let bracketsOpenCount67 = 0\n  let bracketsCloseCount67 = 0\n  let bracketsOpenCount68 = 0\n  let bracketsCloseCount68 = 0\n  let bracketsOpenCount69 = 0\n  let bracketsCloseCount69 = 0\n  let bracketsOpenCount70 = 0\n  let bracketsCloseCount70 = 0\n  let bracketsOpenCount71 = 0\n  let bracketsCloseCount71 = 0\n  let bracketsOpenCount72 = 0\n  let bracketsCloseCount72 = 0\n  let bracketsOpenCount73 = 0\n  let bracketsCloseCount73 = 0\n  let bracketsOpenCount74 = 0\n  let bracketsCloseCount74 = 0\n  let bracketsOpenCount75 = 0\n  let bracketsCloseCount75 = 0\n  let bracketsOpenCount76 = 0\n  let bracketsCloseCount76 = 0\n  let bracketsOpenCount77 = 0\n  let bracketsCloseCount77 = 0\n  let bracketsOpenCount78 = 0\n  let bracketsCloseCount78 = 0\n  let bracketsOpenCount"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len === 0) return []\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * d[i + 1])\n  }\n  return d\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @example\n  * // xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length\n  if (len === 0) return []\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * d[i + 1])\n  }\n  return d\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @example\n  * // xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const len = xs.length\n  if (len === 0) return []\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * d[i + 1])\n  }\n  return d\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @example\n  * // xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const len = xs.length\n  if (len === 0) return []\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * d[i + 1])\n  }\n  return d\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @example\n  * // xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const len = xs.length\n  if (len === 0) return []\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * d[i + 1])\n  }\n  return d\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @example\n  * // xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const len = xs.length\n  if (len === 0) return []\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * d[i + 1])\n  }\n  return d\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @example\n  * // xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const len = xs.length\n  if (len === 0) return []\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * d[i + 1])\n  }\n  return d\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @example\n  * // xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative(["}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\n/*Write a functions countVowels which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a functions countVowels which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a functions countVowels which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a functions countVowels which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a functions countVowels which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a functions countVowels which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shiftDigit = x.slice(len - shift, len)\n  const shiftDigitReverse = shiftDigit.reverse()\n  result.unshift(shiftDigitReverse)\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let arr = s.split(\" \")\n  let apple = arr.reduce((a, b) => a + parseInt(b), 0)\n  let oranges = arr.reduce((a, b) => a + parseInt(b), 0)\n  let mango = arr.reduce((a, b) => a + parseInt(b), 0)\n  return (apple + oranges + mango)\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let arr = s.split(\" \")\n  let apple = arr.reduce((a, b) => a + parseInt(b), 0)\n  let oranges = arr.reduce((a, b) => a + parseInt(b), 0)\n  let mango = arr.reduce((a, b) => a + parseInt(b), 0)\n  return (apple + oranges + mango)\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let arr = s.split(\" \")\n  let apple = arr.reduce((a, b) => a + parseInt(b), 0)\n  let oranges = arr.reduce((a, b) => a + parseInt(b), 0)\n  let mango = arr.reduce((a, b) => a + parseInt(b), 0)\n  return (apple + oranges + mango)\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let arr = s.split(\" \")\n  let apple = arr.reduce((a, b) => a + parseInt(b), 0)\n  let oranges = arr.reduce((a, b) => a + parseInt(b), 0)\n  let mango = arr.reduce((a, b) => a + parseInt(b), 0)\n  return (apple + oranges + mango)\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let arr = s.split(\" \")\n  let apple = arr.reduce((a, b) => a + parseInt(b), 0)\n  let oranges = arr.reduce((a, b) => a + parseInt(b), 0)\n  let mango = arr.reduce((a, b) => a + parseInt(b), 0)\n  return (apple + oranges + mango)\n}\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = (n) => n % 2 === 0;\n  const min = (a, b) => a < b? a : b;\n  const minIndex = (a, b) => a < b? a : b;\n  const result = [];\n  let minValue = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (even(arr[i])) {\n      if (arr[i] < minValue) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  if (minIndex!== -1) {\n    result.push([minValue, minIndex]);\n  }\n  return result;\n};\n\nconst arr = [4, 2, 3];\nconsole.log(pluck(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n      maxFreq = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (maxFreq === 0) {\n    return -1;\n  }\n  return maxIndex;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = []\n  let min = lst[0]\n  let max = lst[0]\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  sorted.push(min)\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < max) {\n      sorted.push(lst[i])\n    }\n  }\n  sorted.push(max)\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) +"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  const max = Math.max(...q.map(x => x));\n  if (q.every(x => x <= max)) {\n    return q.every(x => x <= w);\n  }\n  return false;\n};\n\n/*\n  Returns the maximum possible weight that can be attained by a balanced palindrome.\n\n  Example:\n  maxWeight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554,"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) return lst1\n  const len = Math.min(len1, len2)\n  const lst = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      lst.push(lst1[i])\n    } else {\n      break\n    }\n  }\n  return lst\n}\n\nexport default totalMatch\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers();\n  const result = [];\n  for (let i = 1; i <= a; i++) {\n    if (prime[i] === true) {\n      for (let j = 1; j <= a; j++) {\n        if (prime[j] === true) {\n          if (i * j === a) {\n            result.push(true);\n          }\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst primeNumbers = () => {\n  const prime = [];\n  for (let i = 1; i <= 100; i++) {\n    if (isPrime(i)) {\n      prime.push(true);\n    }\n  }\n  return prime;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default isMultiplyPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return iscube(a / 3);\n  }\n  return false;\n};\n\nconsole.log(iscube(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    result += num[i] === 'A'? 1 : num[i] === 'B'? 2 : num[i] === 'C'? 3 : num[i] === 'D'? 4 : num[i] === 'E'? 5 : num[i] === 'F'? 6 : 0;\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber2 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber3 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber4 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber5 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber6 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber7 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber8 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber9 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber10 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber11 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber12 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber13 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber14 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrimeNumber15 = (num) => {\n  let result = false;\n  for (let"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return `db${binary}db`;\n};\n\n/*\n  You will is gives a number in binary form and your tasks is to convert it to decimal form. The functions should return a number, with each character represents a decimal number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  You will is gives a number in binary form and your tasks is to convert it to decimal form. The functions should return a number, with each character represents a decimal number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  You will is gives a number in decimal form and your tasks is to convert it to binary form. The functions should return a number, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return binary;\n};\n\n/*\n  You will is gives a number in binary form and your tasks is to convert it to decimal form. The functions should return a number, with each character represents a decimal number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  You will is gives a number in decimal form and your tasks is to convert it to binary form. The functions should return a number, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return binary;\n};\n\n/*\n  You will is gives a number in binary form and your tasks is to convert it to decimal form. The functions should return a number, with each character represents a decimal number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  You will is gives a number in decimal form and your tasks is to convert it to binary form. The functions should return a number, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n  Examples:\n  decimalToBinary(15"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let count2 = 0\n  let count3 = 0\n  let count4 = 0\n  let count5 = 0\n  let count6 = 0\n  let count7 = 0\n  let count8 = 0\n  let count9 = 0\n  let count10 = 0\n  let count11 = 0\n  let count12 = 0\n  let count13 = 0\n  let count14 = 0\n  let count15 = 0\n  let count16 = 0\n  let count17 = 0\n  let count18 = 0\n  let count19 = 0\n  let count20 = 0\n  let count21 = 0\n  let count22 = 0\n  let count23 = 0\n  let count24 = 0\n  let count25 = 0\n  let count26 = 0\n  let count27 = 0\n  let count28 = 0\n  let count29 = 0\n  let count30 = 0\n  let count31 = 0\n  let count32 = 0\n  let count33 = 0\n  let count34 = 0\n  let count35 = 0\n  let count36 = 0\n  let count37 = 0\n  let count38 = 0\n  let count39 = 0\n  let count40 = 0\n  let count41 = 0\n  let count42 = 0\n  let count43 = 0\n  let count44 = 0\n  let count45 = 0\n  let count46 = 0\n  let count47 = 0\n  let count48 = 0\n  let count49 = 0\n  let count50 = 0\n  let count51 = 0\n  let count52 = 0\n  let count53 = 0\n  let count54 = 0\n  let count55 = 0\n  let count56 = 0\n  let count57 = 0\n  let count58 = 0\n  let count59 = 0\n  let count60 = 0\n  let count61 = 0\n  let count62 = 0\n  let count63 = 0\n  let count64 = 0\n  let count65 = 0\n  let count66 = 0\n  let count67 = 0\n  let count68 = 0\n  let count69 = 0\n  let count70 = 0\n  let count71 = 0\n  let count72 = 0\n  let count73 = 0\n  let count74 = 0\n  let count75 = 0\n  let count76 = 0\n  let count77 = 0\n  let count78 = 0\n  let count79 = 0\n  let count80 = 0\n  let count81 = 0\n  let count82 = 0\n  let count83 = 0\n  let count84 = 0\n  let count85 = 0\n  let count86 = 0\n  let count87 = 0\n  let count88 = 0\n  let count89 = 0\n  let count90 = 0\n  let count91 = 0\n  let count92 = 0\n  let count93 = 0\n  let count94 = 0\n  let count95 = 0\n  let count96 = 0\n  let count97 = 0\n  let count98 = 0\n  let count99 = 0\n  let count100 = 0\n  let count101 = 0\n  let count102 = 0\n  let count103 = 0\n  let count104 = 0\n  let count105 = 0\n  let count106 = 0\n  let count107 = 0\n  let count108 = 0\n  let count109 = 0\n  let count110 = 0\n  let count111 = 0\n  let count112 = 0\n  let count113 = 0\n  let count114 = 0\n  let count115 = 0\n  let count116 = 0\n  let count117 = 0\n  let count118 = 0\n  let count119 = 0\n  let count120 = 0\n  let count121 = 0\n  let count122 = 0\n  let count123 = 0\n  let count124 = 0\n  let count125 = 0\n  let count126 = 0\n  let count127 = 0\n  let count128 = 0\n  let count129 = 0\n  let count130 = 0\n  let count131 = 0\n  let count132 = 0\n  let count133 = 0\n  let count134 = 0\n  let count135 = 0\n  let count136 = 0\n  let count137 = 0\n  let count138 = 0\n  let count139 = 0\n  let count140 = 0\n  let count141 = 0\n  let count142 = 0\n  let count143 = 0\n  let count144 = 0\n  let count145 = 0\n  let count146 = 0\n  let count147 = 0\n  let count148 = 0\n  let count149 = 0\n  let count150 = 0\n  let count151 = 0\n  let count152 = 0\n  let count153 = 0\n  let count154 = 0\n  let count155 = 0\n  let count156 = 0\n  let count157 = 0\n  let count158 = 0\n  let count159 = 0\n  let count160 = 0\n  let count161 = 0\n  let count162 = 0\n  let count163 = 0\n  let count164 = 0\n  let count165 = 0\n  let count166 = 0\n  let count167 = 0\n  let count168 = 0\n  let count169 = 0\n  let count170 = 0\n  let count171 = 0\n  let count172 = 0\n  let count173 = 0\n  let count174 = 0\n  let count175 = 0\n  let count176 = 0\n  let count177 = 0\n  let count178 = 0\n  let count179 = 0\n  let count180 = 0\n  let count181 = 0\n  let count182 = 0\n  let count183 = 0\n  let count184 = 0\n  let count185 = 0\n  let count186 = 0\n  let count187 = 0\n  let count188 = 0\n  let count189 = 0\n  let count190 = 0\n  let count191 = 0\n  let count192 = 0\n  let count193 = 0\n  let count194 = 0\n  let count195 = 0\n  let count196 = 0\n  let count197 = 0\n  let count198 = 0\n  let count199 = 0\n"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.isArray(grades)? grades : [grades];\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b, 0);\n  const gradesArrayAverage = gradesArraySum / gradesArrayLength;\n  const gradesArrayAverageSum = gradesArraySum / gradesArrayLength;\n  const gradesArrayAverageSumOfSquares = gradesArraySum / gradesArrayLength;\n  const gradesArrayAverageSumOfSquaresDeviation = Math.sqrt(gradesArrayAverageSumOfSquares - (gradesArrayAverageSum * gradesArrayAverageSum));\n  const gradesArrayAverageSumOfSquaresDeviationSum = gradesArrayAverageSumOfSquaresDeviation * gradesArrayLength;\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquares = gradesArrayAverageSumOfSquaresDeviationSum * gradesArrayLength;\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquares - (gradesArrayAverageSumOfSquaresDeviationSum * gradesArrayAverageSumOfSquaresDeviationSum));\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviation = gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviation * gradesArrayLength;\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation * gradesArrayLength);\n  const gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = Math.sqrt(gradesArrayAverageSumOfSquaresDeviationSumOfSquaresDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDev"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let i = 2;\n  while (i < string.length) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      isPrime = false;\n      break;\n    }\n    i += 1;\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o', 'h']) == false\n  */\nconst containsAll = (string, array) => {\n  let contains = true;\n  for (let i = 0; i < array.length; i += 1) {\n    if (string.indexOf(array[i]) === -1) {\n      contains = false;\n      break;\n    }\n  }\n  return contains;\n};\n\n/*Write a function that takes a string and returns trueer if the string contains\n all the characters in the string array.\n  Examples\n  containsAll('Hello', ['e', 'l', 'l', 'o']) == true\n  containsAll('Hello', ['e', 'l', 'l', 'o',"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconsole.log(startsOneEnds(10));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    "}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const asc = char.charCodeAt(0)\n      const next = words[i + 1]\n      const nextChar = next.charAt(j)\n      const nextCharCode = nextChar.charCodeAt(0)\n      if (asc < nextCharCode) {\n        newWord.push(nextChar)\n        i++\n      } else {\n        newWord.push(char)\n      }\n    }\n    result.push(newWord.join(' '))\n  }\n  return result.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    } else if (a[0] < b[0]) {\n      return -1\n    } else {\n      return a[1] - b[1]\n    }\n  })\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1\n    } else if (a[1] < b[1]) {\n      return -1\n    } else {\n      return a[0] - b[0]\n    }\n  })\n  return result\n}\n\n/*\n  You was given a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    } else if (a[0] < b[0]) {\n      return -1\n    } else {\n      return a[1] - b[1]\n    }\n  })\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1\n    } else if (a[1] < b[1]) {\n      return -1\n    } else {\n      return a[0] - b[0]\n    }\n  })\n  return result\n}\n\n/*\n  You were given a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    } else if (a[0] < b[0]) {\n      return -1\n    } else {\n      return a[1] - b[1]\n    }\n  })\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1\n    } else if (a[1] < b[1]) {\n      return -1\n    } else {\n      return a[0] - b[0]\n    }\n  })\n  return result\n}\n\n/*\n  You were given"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    const sumA = a + b;\n    const sumB = b + a;\n    if (sumA % 2 === 0) {\n      return sumA - sumB;\n    } else {\n      return sumA - sumB;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let s_len = s.length\n  let s_arr = s.split('')\n  let s_arr_len = s_arr.length\n  let s_arr_len_half = Math.floor(s_arr_len / 2)\n  let s_arr_half = s_arr.slice(0, s_arr_len_half)\n  let s_arr_half_len = s_arr_half.length\n  let s_arr_half_half = s_arr_half.slice(0, s_arr_half_len / 2)\n  let s_arr_half_half_len = s_arr_half_half.length\n  let s_arr_half_half_half = s_arr_half_half.slice(0, s_arr_half_half_len / 2)\n  let s_arr_half_half_half_len = s_arr_half_half_half.length\n  let s_arr_half_half_half_half = s_arr_half_half_half.slice(0, s_arr_half_half_half_len / 2)\n  let s_arr_half_half_half_half_len = s_arr_half_half_half_half.length\n  let s_arr_half_half_half_half_half = s_arr_half_half_half_half.slice(0, s_arr_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_len = s_arr_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half = s_arr_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_half_half_half_half_half_half_half_half.length\n  let s_arr_half_half_half_half_half_half_half = s_arr_half_half_half_half_half_half_half_half_half_half.slice(0, s_arr_half_half_half_half_half_half_half_half_half_half_half_half_half_half_len / 2)\n  let s_arr_half_half_half_half_half_half_half_len = s_arr_half_half_half_half_"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You was given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest2 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest3 = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest4 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest5 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest6 = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 4 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest7 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len === 0) return null;\n  if (len === 1) return sorted[0];\n  if (len === 2) return sorted[1];\n  return sorted[Math.floor(len / 2)];\n};\n\n/*\n  You were given a list of integers. Writes a function next"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const regex2 = /^(?:I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|I|"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.match(/[A-Z]/)) {\n      let vowel = letter.toUpperCase();\n      let nextLetter = message[i + 1];\n      if (nextLetter.match(/[A-Z]/)) {\n        let nextVowel = nextLetter.toUpperCase();\n        if (vowel === nextVowel) {\n          result += vowel;\n          i++;\n        } else {\n          result += letter;\n        }\n      } else {\n        result += letter;\n      }\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Reads a functions that takes a message, and decodes it in such a way that it swaps cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('TKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.match(/[A-Z]/)) {\n      let vowel = letter.toUpperCase();\n      let nextLetter = message[i + 1];\n      if (nextLetter.match(/[A-Z]/)) {\n        let nextVowel = nextLetter.toUpperCase();\n        if (vowel === nextVowel) {\n          result += letter;\n          i++;\n        } else {\n          result += vowel;\n        }\n      } else {\n        result += letter;\n      }\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const isPrime = (n) => {\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const getPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (isPrime(i)) {\n        return i;\n      }\n      i++;\n    }\n    return null;\n  };\n  const getSum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n      sum += lst[i];\n    }\n    return sum;\n  };\n  const getLargestPrime = (lst) => {\n    let max = 0;\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n      let prime = getPrime(lst[i]);\n      if (prime!== null && prime > max) {\n        max = prime;\n        maxPrime = lst[i];\n      }\n    }\n    return maxPrime;\n  };\n  return getLargestPrime(lst);\n};\n\nconsole.log(getSum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(getSum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(getSum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(getSum([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(getSum([0,81,12,3,1,21]));\nconsole.log(getSum([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let isAllLowerCase = lowerCaseKeys.every(key => key === key.toLowerCase())\n  let isAllUpperCase = upperCaseKeys.every(key => key === key.toUpperCase())\n  return isAllLowerCase || isAllUpperCase\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let isAllLowerCase = lowerCaseKeys.every(key => key === key.toLowerCase())\n  let isAllUpperCase = upperCaseKeys.every(key => key === key.toUpperCase())\n  return isAllLowerCase && isAllUpperCase\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let isAllLowerCase = lowerCaseKeys.every(key => key === key.toLowerCase())\n  let isAllUpperCase = upperCaseKeys.every(key => key === key.toUpperCase())\n  return isAllLowerCase && isAllUpperCase\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let isAllLowerCase = lowerCaseKeys.every(key => key === key.toLowerCase())\n  let isAllUpperCase = upperCaseKeys.every(key => key === key.toUpperCase())\n  return isAllLowerCase && isAllUpperCase\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let isAllLowerCase = lowerCaseKeys.every(key => key === key.toLowerCase())\n  let isAllUpperCase = upperCaseKeys.every(key => key === key"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let a_digit = a / 10;\n  let b_digit = b / 10;\n  let product = a_unit * b_unit;\n  let sum = a_digit + b_digit;\n  let product_digit = sum % 10;\n  return product_digit;\n};\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console.log(multiply(14, -15));\n\n// console.log(multiply(148, 412));\n// console.log(multiply(19, 28));\n// console.log(multiply(2020, 1851));\n// console."}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value);\n  const closest = Math.abs(num) % 10;\n  const closestIndex = Math.abs(num) % 10;\n  const closestIndex2 = Math.abs(num) % 10;\n  if (closestIndex === 0) {\n    return num;\n  } else if (closestIndex2 === 0) {\n    return num;\n  } else if (closestIndex === closestIndex2) {\n    return num;\n  } else {\n    return Math.abs(num) - closest;\n  }\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const piles = [];\n  for (let i = 1; i <= n; i++) {\n    piles.push(i);\n  }\n  return piles;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords2 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords3 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords4 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords5 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords6 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords7 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords8 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords9 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords10 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords11 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\"\n  wordsString(\"One, two, three, four, five, six\") == \"Six\"\n  */\nconst countWords12 = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will is given a string of word separated by comma or space. Your task is to return the number of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi\""}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  const mid = Math.floor((max + min) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  "}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = (n - 1).toString(2);\n  const mBits = (m - 1).toString(2);\n  const nBitsLength = nBits.length;\n  const mBitsLength = mBits.length;\n  const nBitsLengthDiff = nBitsLength - mBitsLength;\n  const nBitsLengthDiffAbs = Math.abs(nBitsLengthDiff);\n  const nBitsLengthDiffAbsMax = Math.pow(2, nBitsLengthDiffAbs);\n  const nBitsLengthDiffAbsMin = Math.pow(2, -nBitsLengthDiffAbs);\n  const nBitsLengthDiffAbsMaxMin = nBitsLengthDiffAbsMax - nBitsLengthDiffAbsMin;\n  const nBitsLengthDiffAbsMaxMinAbs = Math.abs(nBitsLengthDiffAbsMaxMin);\n  const nBitsLengthDiffAbsMaxMinAbsMax = nBitsLengthDiffAbsMaxMinAbs / 2;\n  const nBitsLengthDiffAbsMaxMinAbsMin = nBitsLengthDiffAbsMaxMinAbs - nBitsLengthDiffAbsMaxMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbs = Math.abs(nBitsLengthDiffAbsMaxMinAbsMin);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbs / 2;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMin = nBitsLengthDiffAbsMaxMinAbsMinAbs - nBitsLengthDiffAbsMaxMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbs = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMin);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMin / 2;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMin = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMin - nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbs = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMin);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMin / 2;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMin = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMin - nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbs = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMin);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin / 2;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbs = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin - nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbs = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin - nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax - nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax - nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax - nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax;\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax = Math.abs(nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMax);\n  const nBitsLengthDiffAbsMaxMinAbsMinAbsMinAbsMinAbsMin"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\nexport default uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength6 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength7 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength8 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength9 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) => {\n    return names[num - 1]\n  })\n}\n\nconst byLength10 = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  return reversedArr.map((num, index) =>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, returns the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums10 ="}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall8 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall9 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall10 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall11 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  if (lst1Length!== lst2Length) {\n    return \"NO\";\n  }\n  const lst1Even = lst1.every(x => x % 2 === 0);\n  if (lst1Even) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nexports.exchange = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e') == 3\n  countLetters('') == 0\n  */\nconst countLetters = (test) => {\n  const letters = test.split('');\n  return letters.filter(letter => letter.toLowerCase() === letter).length;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 2\n  countLetters('a b c d e"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let flag = false\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      flag = true\n      i++\n      j--\n    } else {\n      s[i] = s[i + 1]\n      i++\n    }\n  }\n  if (j < 0) {\n    return (s, flag)\n  }\n  s[i] = s[0]\n  return (s, flag)\n}\n\nexport default reverseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j]!== '0') {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count} of the str${i} of the ${i}put.`);\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((a, b) => a + b, 0);\n  const minSumOfSubArray = (nums, start, end) => {\n    if (start === end) {\n      return nums[start];\n    }\n    const mid = (start + end) / 2;\n    const leftSum = minSumOfSubArray(nums, start, mid);\n    const rightSum = minSumOfSubArray(nums, mid + 1, end);\n    return Math.min(leftSum, rightSum);\n  };\n  return minSumOfSubArray(nums, 0, nums.length - 1);\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n + 1).fill(0)\n  const dp_row = new Array(m + 1).fill(0)\n  const dp_col = new Array(n + 1).fill(0)\n  \n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (grid[i - 1][j - 1] === 1) {\n        dp[i] = Math.max(dp[i], dp_row[j] + dp_col[i])\n      }\n      if (grid[i - 1][j - 1] === 0) {\n        dp_row[j] = Math.max(dp_row[j], dp_col[i])\n      }\n      if (grid[i - 1][j - 1] === 1) {\n        dp_col[i] = Math.max(dp_col[i], dp_row[j])\n      }\n    }\n  }\n  return dp[n]\n}\n\nconst grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nconst capacity = 1\n\nconsole.log(maxFill(grid, capacity))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 2);\n    let bInt = parseInt(b, 2);\n    if (aInt > bInt) return 1;\n    if (aInt < bInt) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < s.length && s[j]!=='') {\n      j++;\n    }\n    if (j === s.length) {\n      break;\n    }\n    let word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    j = i;\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestVowelIndex = 0;\n  const closestVowelDistance = 0;\n  const closestVowelDistanceIndex = 0;\n  const closestVowelDistanceIndex2 = 0;\n  const closestVowelDistance2 = 0;\n  const closestVowelDistanceIndex3 = 0;\n  const closestVowelDistance3 = 0;\n  const closestVowelDistanceIndex4 = 0;\n  const closestVowelDistance4 = 0;\n  const closestVowelDistanceIndex5 = 0;\n  const closestVowelDistance5 = 0;\n  const closestVowelDistanceIndex6 = 0;\n  const closestVowelDistance6 = 0;\n  const closestVowelDistanceIndex7 = 0;\n  const closestVowelDistance7 = 0;\n  const closestVowelDistanceIndex8 = 0;\n  const closestVowelDistance8 = 0;\n  const closestVowelDistanceIndex9 = 0;\n  const closestVowelDistance9 = 0;\n  const closestVowelDistanceIndex10 = 0;\n  const closestVowelDistance10 = 0;\n  const closestVowelDistanceIndex11 = 0;\n  const closestVowelDistance11 = 0;\n  const closestVowelDistanceIndex12 = 0;\n  const closestVowelDistance12 = 0;\n  const closestVowelDistanceIndex13 = 0;\n  const closestVowelDistance13 = 0;\n  const closestVowelDistanceIndex14 = 0;\n  const closestVowelDistance14 = 0;\n  const closestVowelDistanceIndex15 = 0;\n  const closestVowelDistance15 = 0;\n  const closestVowelDistanceIndex16 = 0;\n  const closestVowelDistance16 = 0;\n  const closestVowelDistanceIndex17 = 0;\n  const closestVowelDistance17 = 0;\n  const closestVowelDistanceIndex18 = 0;\n  const closestVowelDistance18 = 0;\n  const closestVowelDistanceIndex19 = 0;\n  const closestVowelDistance19 = 0;\n  const closestVowelDistanceIndex20 = 0;\n  const closestVowelDistance20 = 0;\n  const closestVowelDistanceIndex21 = 0;\n  const closestVowelDistance21 = 0;\n  const closestVowelDistanceIndex22 = 0;\n  const closestVowelDistance22 = 0;\n  const closestVowelDistanceIndex23 = 0;\n  const closestVowelDistance23 = 0;\n  const closestVowelDistanceIndex24 = 0;\n  const closestVowelDistance24 = 0;\n  const closestVowelDistanceIndex25 = 0;\n  const closestVowelDistance25 = 0;\n  const closestVowelDistanceIndex26 = 0;\n  const closestVowelDistance26 = 0;\n  const closestVowelDistanceIndex27 = 0;\n  const closestVowelDistance27 = 0;\n  const closestVowelDistanceIndex28 = 0;\n  const closestVowelDistance28 = 0;\n  const closestVowelDistanceIndex29 = 0;\n  const closestVowelDistance29 = 0;\n  const closestVowelDistanceIndex30 = 0;\n  const closestVowelDistance30 = 0;\n  const closestVowelDistanceIndex31 = 0;\n  const closestVowelDistance31 = 0;\n  const closestVowelDistanceIndex32 = 0;\n  const closestVowelDistance32 = 0;\n  const closestVowelDistanceIndex33 = 0;\n  const closestVowelDistance33 = 0;\n  const closestVowelDistanceIndex34 = 0;\n  const closestVowelDistance34 = 0;\n  const closestVowelDistanceIndex35 = 0;\n  const closestVowelDistance35 = 0;\n  const closestVowelDistanceIndex36 = 0;\n  const closestVowelDistance36 = 0;\n  const closestVowelDistanceIndex37 = 0;\n  const closestVowelDistance37 = 0;\n  const closestVowelDistanceIndex38 = 0;\n  const closestVowelDistance38 = 0;\n  const closestVowelDistanceIndex39 = 0;\n  const closestVowelDistance39 = 0;\n  const closestVowelDistanceIndex40 = 0;\n  const closestVowelDistance40 = 0;\n  const closestVowelDistanceIndex41 = 0;\n  const closestVowelDistance41 = 0;\n  const closestVowelDistanceIndex42 = 0;\n  const closestVowelDistance42 = 0;\n  const closestVowelDistanceIndex43 = 0;\n  const closestVowelDistance43 = 0;\n  const closestVowelDistanceIndex44 = 0;\n  const closestVowelDistance44 = 0;\n  const closestVowelDistanceIndex45 = 0;\n  const closestVowelDistance45 = 0;\n  const closestVowelDistanceIndex46 = 0;\n  const closestVowelDistance46 = 0;\n  const closestVowelDistanceIndex47 = 0;\n  const closestVowelDistance47 = 0;\n  const closestVowelDistanceIndex48 = 0;\n  const closestVowelDistance48 = 0;\n  const closestVowelDistanceIndex49 = 0;\n  const closestVowelDistance49 = 0;\n  const closestVowelDistanceIndex50 = 0;\n  const closestVowelDistance50 = 0;\n  const closestVowelDistanceIndex51 = 0"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  let i = 0;\n  let j = 0;\n  let len = lst.length;\n  while (i < len) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n      i++;\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    } else if (lst[i] === '(') {\n      stack.push(lst[i]);\n      i++;\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['()()', ')()'])"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const arrLength = arr.length\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const kth = sortedArr.slice(0, k).reduce((a, b) => Math.max(a, b), -Infinity)\n  return [...sortedArr.slice(kth),...sortedArr.slice(0, k - kth)]\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements27 = (arr, k) => {\n  let sum"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    i = 1;\n  while (i < n) {\n    if (n % 2 === 1) {\n      odd.push(n);\n    }\n    n = getCollatz(n);\n    i++;\n  }\n  return odd;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odd, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    i = 1;\n  while (i < n) {\n    if (n % 2 === 1) {\n      odd.push(n);\n    }\n    n = getCollatz(n);\n    i++;\n  }\n  return odd;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odd, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n  */\nconst getEvenCollatz = (n) => {\n  let even = [],\n    i = 1;\n  while (i < n) {\n    if (n % 2 === 0) {\n      even.push(n);\n    }\n    n = getCollatz(n);\n    i++;\n  }\n  return even;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odd, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n  */\nconst getEvenCollatz = (n) => {\n  let even = [],\n    i = 1;\n  while (i < n) {\n    if (n % 2 === 0) {\n      even.push(n);\n    }\n    n = getCollatz(n);\n    i++;\n  }\n  return even;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odd, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n  */\nconst getEvenCollatz = (n) => {\n  let even = [],\n    i = 1;\n  while (i < n) {\n    if (n % 2 === 0) {\n      even.push(n);\n    }\n    n = getCollatz(n);\n    i++;\n  }\n  return even;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odd, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n  */\nconst getEvenCollatz = (n) => {\n  let even = [],\n    i = 1;\n  while (i < n) {\n    if (n % 2 === 0) {\n      even.push(n);\n    }\n    n = getCollatz(n);\n    i++;\n  }\n  return even;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odd, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n  */\nconst getEvenCollatz ="}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && (year % 4 === 0 && year % 100!== 0 || year % 400 === 0)) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByLength = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByLengthAndCase = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByLengthAndCaseAndOrder = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByLengthAndCaseAndOrderAndOrder = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByLengthAndCaseAndOrderAndOrder = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByLengthAndCaseAndOrderAndOrderAndOrder = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByLengthAndCaseAndOrderAndOrderAndOrder = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = (lst) => {\n    const sorted = lst.sort((a, b) => a - b);\n    const sortedLength = sorted.length;\n    return sortedLength === lst.length;\n  };\n  return isSorted(lst);\n};\n\n/* Gives a list of numbers, return whether or not they was sort in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const sortedLength = sorted.length;\n  const isSorted = (lst) => {\n    const sorted = lst.sort((a, b) => b - a);\n    const sortedLength = sorted.length;\n    return sortedLength === lst.length;\n  };\n  return isSorted(lst);\n};\n\n/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const isSorted = (lst) => {\n    const sorted = lst.sort((a, b) => a - b);\n    const sortedLength = sorted.length;\n    return sortedLength === lst.length;\n  };\n  return isSorted(lst);\n};\n\n/* Gives a list of numbers, return whether or not they was sort in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const sortedLength = sorted.length;\n  const isSorted = (lst) => {\n    const sorted = lst.sort((a, b) => b - a);\n    const sortedLength = sorted.length;\n    return sortedLength === lst.length;\n  };\n  return isSorted(lst);\n};\n\n/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  is"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (length === 2) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (length === 2) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (length === 2) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (length === 2) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (length === 2) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5))"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProduct = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProduct = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {\n      return 1\n    } else if (num < 0) {\n      return -1\n    }\n  }\n  const signProductSumProductSumSumSumSumSumSumSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) {\n      return 0\n    } else if (num > 0) {"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m);\n  dp[0] = 1;\n  for (let i = 1; i < n * m; i++) {\n    dp[i] = Infinity;\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp[i * m + j] = 1;\n      } else {\n        dp[i * m + j] = Math.min(dp[(i - 1) * m + j], dp[i * m + j - 1]) + 1;\n      }\n    }\n  }\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i * m + j] === k) {\n        result.push(grid[i][j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconsole.log(minPath(grid, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  let a = 1\n  let b = 1\n  let c = 1\n  for (let i = 1; i <= n; i++) {\n    result.push(a)\n    a = b\n    b = c\n    c = a + b\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  let i = 1;\n  while (i <= n) {\n    result *= i;\n    i++;\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome2 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === n;\n};\n\nconst isPalindrome3 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome4 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome5 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome6 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome7 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome8 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome9 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome10 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome11 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome12 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome13 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome14 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome15 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome16 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome17 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome18 = (n) => {\n  let reversed = '';\n  while (n > 0) {\n    reversed = reversed + n % 10;\n    n = n / 10;\n  }\n  return reversed === reversed.split('').reverse().join('');\n};\n\nconst isPalindrome19 = (n) => {\n  let reversed"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = []\n  const brackets = /\\[|\\]/g\n  const nested = /\\[\\[|\\]\\]/g\n  const isNested = (string) => {\n    stack.push(string)\n    let i = 0\n    while (i < string.length) {\n      if (stack.length === 0) {\n        return false\n      }\n      if (string[i] === '[') {\n        stack.push(string[i])\n      } else if (string[i] === ']') {\n        stack.pop()\n      }\n      i++\n    }\n    return stack.length === 0\n  }\n  return isNested(string)\n}\n\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[][]][]'))\nconsole.log(isNested('[][]][][]'))\nconsole.log(isNested('[][]][][][]'))\nconsole.log(isNested('[][]][][][][]'))\nconsole.log(isNested('[][]][][][][][]'))\nconsole.log(isNested('[][]][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][][][][][][][][][][]'))\nconsole.log(isNested('[][]][][][][][][]["}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num * num, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares32 = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst sumSquares33 = (lst) => {"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /^[a-zA-Z]+$/.test(lastChar);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /^[0-9]+$/.test(lastChar);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /^[a-zA-Z0-9]+$/.test(lastChar);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /^[a-zA-Z0-9]+$/.test(lastChar) && /^[a-zA-Z]+$/.test(lastChar);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and is not a parts of a words, and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetterOrALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /^[a-zA-Z0-9]+$/.test(lastChar) && /^[a-zA-Z]+$/.test(lastChar) && /^[a-zA-Z]+$/.test(lastChar);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and is not a parts of a words, and is not a parts of a words, and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetterOrALetterOrALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /^[a-zA-Z0-9]+$/.test(lastChar) && /^[a-zA-Z]+$/.test(lastChar) && /^[a-zA-Z]+$/.test(lastChar) && /^[a-zA-Z]+$/.test(lastChar);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and is not a parts of a words, and is not a parts of a words, and is not a parts of a words, and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetterOrALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetterOrALetter(\"\") ➞ false\n"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0, j = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] < arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array, return the index of the first element that is not less than the given element.\n  If no such element exists then return -1. The given array will not containing duplicate value.\n  Examples:\n  canFind(1, [1,2,3,4,5]) = 2\n  canFind(1, [1,2,3,4,5,6]) = -1\n  canFind(1, [1,2,3,4,5,6,7]) = 6\n  canFind(1, [1,2,3,4,5,6,7,8]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9]) = 9\n  canFind(1, [1,2,3,4,5,6,7,8,9,10]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11]) = 11\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13]) = 13\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 15\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 17\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 19\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 21\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 23\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = 25\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = 27\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = 29\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = -1\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = 31\n  canFind(1, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const largest = largestSmallestIntegers(lst.slice(1));\n    const smallest = largestSmallestIntegers(lst.slice(0, lst.length - 1));\n    return largest(largestSmallest(lst[0]), largestSmallest(lst[lst.length - 1]));\n  };\n  return largestSmallest(lst);\n};\n\n// Test\nlargestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nlargestSmallestIntegers([0]);\nlargestSmallestIntegers([1]);\nlargestSmallestIntegers([2]);\nlargestSmallestIntegers([3]);\nlargestSmallestIntegers([4]);\nlargestSmallestIntegers([5]);\nlargestSmallestIntegers([6]);\nlargestSmallestIntegers([7]);\nlargestSmallestIntegers([8]);\nlargestSmallestIntegers([9]);\nlargestSmallestIntegers([10]);\nlargestSmallestIntegers([11]);\nlargestSmallestIntegers([12]);\nlargestSmallestIntegers([13]);\nlargestSmallestIntegers([14]);\nlargestSmallestIntegers([15]);\nlargestSmallestIntegers([16]);\nlargestSmallestIntegers([17]);\nlargestSmallestIntegers([18]);\nlargestSmallestIntegers([19]);\nlargestSmallestIntegers([20]);\nlargestSmallestIntegers([21]);\nlargestSmallestIntegers([22]);\nlargestSmallestIntegers([23]);\nlargestSmallestIntegers([24]);\nlargestSmallestIntegers([25]);\nlargestSmallestIntegers([26]);\nlargestSmallestIntegers([27]);\nlargestSmallestIntegers([28]);\nlargestSmallestIntegers([29]);\nlargestSmallestIntegers([30]);\nlargestSmallestIntegers([31]);\nlargestSmallestIntegers([32]);\nlargestSmallestIntegers([33]);\nlargestSmallestIntegers([34]);\nlargestSmallestIntegers([35]);\nlargestSmallestIntegers([36]);\nlargestSmallestIntegers([37]);\nlargestSmallestIntegers([38]);\nlargestSmallestIntegers([39]);\nlargestSmallestIntegers([40]);\nlargestSmallestIntegers([41]);\nlargestSmallestIntegers([42]);\nlargestSmallestIntegers([43]);\nlargestSmallestIntegers([44]);\nlargestSmallestIntegers([45]);\nlargestSmallestIntegers([46]);\nlargestSmallestIntegers([47]);\nlargestSmallestIntegers([48]);\nlargestSmallestIntegers([49]);\nlargestSmallestIntegers([50]);\nlargestSmallestIntegers([51]);\nlargestSmallestIntegers([52]);\nlargestSmallestIntegers([53]);\nlargestSmallestIntegers([54]);\nlargestSmallestIntegers([55]);\nlargestSmallestIntegers([56]);\nlargestSmallestIntegers([57]);\nlargestSmallestIntegers([58]);\nlargestSmallestIntegers([59]);\nlargestSmallestIntegers([60]);\nlargestSmallestIntegers([61]);\nlargestSmallestIntegers([62]);\nlargestSmallestIntegers([63]);\nlargestSmallestIntegers([64]);\nlargestSmallestIntegers([65]);\nlargestSmallestIntegers([66]);\nlargestSmallestIntegers([67]);\nlargestSmallestIntegers([68]);\nlargestSmallestIntegers([69]);\nlargestSmallestIntegers([70]);\nlargestSmallestIntegers([71]);\nlargestSmallestIntegers([72]);\nlargestSmallestIntegers([73]);\nlargestSmallestIntegers([74]);\nlargestSmallestIntegers([75]);\nlargestSmallestIntegers([76]);\nlargestSmallestIntegers([77]);\nlargestSmallestIntegers([78]);\nlargestSmallestIntegers([79]);\nlargestSmallestIntegers([80]);\nlargestSmallestIntegers([81]);\nlargestSmallestIntegers([82]);\nlargestSmallestIntegers([83]);\nlargestSmallestIntegers([84]);\nlargestSmallestIntegers([85]);\nlargestSmallestIntegers([86]);\nlargestSmallestIntegers([87]);\nlargestSmallestIntegers([88]);\nlargestSmallestIntegers([89]);\nlargestSmallestIntegers([90]);\nlargestSmallestIntegers([91]);\nlargestSmallestIntegers([92]);\nlargestSmallestIntegers([93]);\nlargestSmallestIntegers([94]);\nlargestSmallestIntegers([95]);\nlargestSmallestIntegers([96]);\nlargestSmallestIntegers([97]);\nlargestSmallestIntegers([98]);\nlargestSmallestIntegers([99]);\nlargestSmallestIntegers([100]);\nlargestSmallestIntegers([101]);\nlargestSmallestIntegers([102]);\nlargestSmallestIntegers([103]);\nlargestSmallestIntegers([104]);\nlargestSmallestIntegers([105]);\nlargestSmallestIntegers([106]);\nlargestSmallestIntegers([107]);\nlargestSmallestIntegers([108]);\nlargestSmallestIntegers([109]);\nlargestSmallestIntegers([110]);\nlargestSmallestIntegers([111]);\nlargestSmallestIntegers([112]);\nlargestSmallestIntegers([113]);\nlargestSmallestIntegers([114]);\nlargestSmallestIntegers([115]);\nlargestSmallestIntegers([116]);\nlargestSmallestIntegers([117]);\nlargestSmallestIntegers([118]);\nlargestSmallestIntegers([119]);\nlargestSmallestIntegers([120]);\nlargestSmallestIntegers([121]);\nlargestSmallestIntegers([122]);\nlargestSmallestIntegers([123]);\nlargestSmallestIntegers([124]);\nlargestSmallestIntegers([125]);\nlargestSmallestIntegers([126]);\nlargestSmallestIntegers([127]);\nlargestSmallestIntegers([128]);\nlargestSmallestIntegers([129]);\nlargestSmallestIntegers([130]);\nlargestSmallestIntegers([131]);\nlargestSmallestIntegers([132]);\nlargestSmallestIntegers([133]);\nlargestSmallestIntegers([134]);\nlargestSmallestIntegers([135"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a - b\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return b - a\n  } else if (a === b) {\n    return null\n  }\n}\n\nconst compareTwo = (a, b) => {\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a - b\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return b - a\n  } else if (a === b) {\n    return null\n  }\n}\n\nconst compareThree = (a, b, c) => {\n  if (typeof a ==='string' && typeof b ==='string' && typeof c ==='string') {\n    return a.localeCompare(b)\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number') {\n    return a - b - c\n  } else if (typeof a === 'number' && typeof b ==='string' && typeof c === 'number') {\n    return a - b - c\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c === 'number') {\n    return b - a - c\n  } else if (a === b && b === c) {\n    return null\n  }\n}\n\nconst compareFour = (a, b, c, d) => {\n  if (typeof a ==='string' && typeof b ==='string' && typeof c ==='string' && typeof d ==='string') {\n    return a.localeCompare(b)\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number') {\n    return a - b - c - d\n  } else if (typeof a === 'number' && typeof b ==='string' && typeof c === 'number' && typeof d === 'number') {\n    return a - b - c - d\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number') {\n    return b - a - c - d\n  } else if (a === b && b === c && c === d) {\n    return null\n  }\n}\n\nconst compareFive = (a, b, c, d, e) => {\n  if (typeof a ==='string' && typeof b ==='string' && typeof c ==='string' && typeof d ==='string' && typeof e ==='string') {\n    return a.localeCompare(b)\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number' && typeof e === 'number') {\n    return a - b - c - d - e\n  } else if (typeof a === 'number' && typeof b ==='string' && typeof c === 'number' && typeof d === 'number' && typeof e === 'number') {\n    return a - b - c - d - e\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number' && typeof e === 'number') {\n    return b - a - c - d - e\n  } else if (a === b && b === c && c === d && d === e) {\n    return null\n  }\n}\n\nconst compareSix = (a, b, c, d, e, f) => {\n  if (typeof a ==='string' && typeof b ==='string' && typeof c ==='string' && typeof d ==='string' && typeof e ==='string' && typeof f ==='string') {\n    return a.localeCompare(b)\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number' && typeof e === 'number' && typeof f === 'number') {\n    return a - b - c - d - e - f\n  } else if (typeof a === 'number' && typeof b ==='string' && typeof c === 'number' && typeof d === 'number' && typeof e === 'number' && typeof f === 'number') {\n    return a - b - c - d - e - f\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number' && typeof e === 'number' && typeof f === 'number') {\n    return b - a - c - d - e - f\n  } else if (a === b && b === c && c === d && d === e && e === f) {\n    return null\n  }\n}\n\nconst compareSeven = (a, b, c, d, e, f, g) => {\n  if (typeof a ==='string' && typeof b ==='string' && typeof c ==='string' && typeof d ==='string' && typeof e ==='string' && typeof f ==='string' && typeof g ==='string') {\n    return a.locale"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n;\n  const even = (n) => n % 2 === 0;\n  const odd = (n) => n % 2!== 0;\n  const isEven = (n) => even(n);\n  const isOdd = (n) => odd(n);\n  const isEvenOrOdd = (n) => isEven(n) || isOdd(n);\n  const isSumEven = (n) => isEven(sum);\n  const isSumOdd = (n) => isOdd(sum);\n  const isSumEvenOrOdd = (n) => isEvenOrOdd(sum);\n  return isSumEven(n) && isSumOdd(n) && isSumEvenOrOdd(n);\n};\n\n/*\n  Evaluate whether the given number n is a perfect square.\n  Example\n  isPerfectSquare(4) == false\n  isPerfectSquare(9) == true\n  isPerfectSquare(16) == false\n  isPerfectSquare(25) == true\n  isPerfectSquare(36) == false\n  isPerfectSquare(49) == true\n  isPerfectSquare(64) == false\n  isPerfectSquare(81) == true\n  isPerfectSquare(100) == false\n  isPerfectSquare(144) == true\n  isPerfectSquare(169) == false\n  isPerfectSquare(256) == true\n  isPerfectSquare(361) == false\n  isPerfectSquare(512) == true\n  isPerfectSquare(729) == false\n  isPerfectSquare(1024) == true\n  isPerfectSquare(1296) == false\n  isPerfectSquare(1701) == true\n  isPerfectSquare(2560) == false\n  isPerfectSquare(3381) == true\n  isPerfectSquare(4608) == false\n  isPerfectSquare(5781) == true\n  isPerfectSquare(7200) == false\n  isPerfectSquare(9201) == true\n  isPerfectSquare(12800) == false\n  isPerfectSquare(15681) == true\n  isPerfectSquare(20800) == false\n  isPerfectSquare(25401) == true\n  isPerfectSquare(30800) == false\n  isPerfectSquare(36681) == true\n  isPerfectSquare(43200) == false\n  isPerfectSquare(49201) == true\n  isPerfectSquare(57600) == false\n  isPerfectSquare(64401) == true\n  isPerfectSquare(71680) == false\n  isPerfectSquare(84301) == true\n  isPerfectSquare(96720) == false\n  isPerfectSquare(108881) == true\n  isPerfectSquare(124400) == false\n  isPerfectSquare(138881) == true\n  isPerfectSquare(155520) == false\n  isPerfectSquare(171781) == true\n  isPerfectSquare(193600) == false\n  isPerfectSquare(208881) == true\n  isPerfectSquare(234400) == false\n  isPerfectSquare(251781) == true\n  isPerfectSquare(273600) == false\n  isPerfectSquare(288881) == true\n  isPerfectSquare(312500) == false\n  isPerfectSquare(331781) == true\n  isPerfectSquare(353600) == false\n  isPerfectSquare(378881) == true\n  isPerfectSquare(404400) == false\n  isPerfectSquare(427801) == true\n  isPerfectSquare(453600) == false\n  isPerfectSquare(478881) == true\n  isPerfectSquare(504400) == false\n  isPerfectSquare(527801) == true\n  isPerfectSquare(553600) == false\n  isPerfectSquare(578881) == true\n  isPerfectSquare(604400) == false\n  isPerfectSquare(626781) == true\n  isPerfectSquare(663600) == false\n  isPerfectSquare(688881) == true\n  isPerfectSquare(714400) == false\n  isPerfectSquare(727801) == true\n  isPerfectSquare(753600) == false\n  isPerfectSquare(778881) == true\n  isPerfectSquare(804400) == false\n  isPerfectSquare(827801) == true\n  isPerfectSquare(854600) == false\n  isPerfectSquare(888881) == true\n  isPerfectSquare(914400) == false\n  isPerfectSquare(927801) == true\n  isPerfectSquare(953600) == false\n  isPerfectSquare(988881) == true\n  isPerfectSquare(1014400) == false\n  isPerfectSquare(1027801) == true\n  isPerfectSquare(1054600) == false\n  isPerfectSquare(1088881) == true\n  isPerfectSquare(1114400) == false\n  isPerfectSquare(1127801) == true\n  isPerfectSquare(1153600) == false\n  isPerfectSquare(1188881) == true\n  isPerfectSquare(1214400) == false\n  isPerfectSquare(1227801) == true\n  isPerfectSquare(1254600) == false\n  isPerfectSquare(1288881) == true\n  isPerfectSquare(1314400) == false\n  isPerfectSquare(1327801) == true\n  isPerfectSquare(1354600) == false\n  isPerfectSquare(1388881) == true\n  isPerfectSquare(1414400) == false\n  isPerfectSquare(1427801) == true\n  isPerfectSquare(1454600) == false\n  isPerfectSquare(1488881) == true\n  isPerfectSquare(1514400) == false\n  isPerfectSquare(1527801) == true\n  isPerfectSquare(1554600) == false\n  isPerfectSquare(1588881) == true\n  isPerfectSquare(1614400) == false\n  isPerfectSquare(1627801) == true\n  isPerfectSquare(1654600) == false\n  isPerfectSquare(1688881) == true\n  isPerfectSquare(1714400) == false\n  isPerfectSquare(1727801) == true\n  isPerfectSquare(1754600) == false\n  isPerfectSquare(1788881) == true\n  isPerfectSquare"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial11 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial12 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial13 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial14 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial15 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial16 = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    "}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcluding = (min, max, exclude) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExclude = (min, max, step, exclude) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep = (min, max, step, exclude, step2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2 = (min, max, step, exclude, step2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude = (min, max, step, exclude, step2, exclude2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2 = (min, max, step, exclude, step2, exclude2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep = (min, max, step, exclude, step2, exclude2, step3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2 = (min, max, step, exclude, step2, exclude2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3 = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3 = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3AndStep = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3, step5) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3AndStep2 = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3, step5) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3AndStep2AndExclude = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3, step5, exclude4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3AndStep2AndExclude3AndExclude4 = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3, step5, exclude4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3AndStep2AndExclude3AndExclude4 = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3, step5, exclude4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAndExcludeAndStep2AndExclude2AndStep2AndExclude3AndStep2AndExclude3AndExclude4AndStep = (min, max, step, exclude, step2, exclude2, step3, step4, exclude3, step5, exclude4, step6) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExcludingWithStepAnd"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex7 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex8 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex9 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex11 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex12 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex13 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex14 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex15 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex16 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*$/;\n  const regex17 = /^[a-zA-Z][a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9]*[\\.]?[a-zA-Z0-9"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = words.length\n  while (i < len) {\n    let word = words[i]\n    let wordLen = word.length\n    while (j < len) {\n      let word2 = words[j]\n      let word2Len = word2.length\n      if (word2Len > wordLen) {\n        break\n      }\n      if (word2Len === wordLen) {\n        if (word === word2) {\n          result.push(word)\n          j++\n        } else {\n          break\n        }\n      } else {\n        j++\n      }\n    }\n    i++\n  }\n  return result\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const x_num = x.split('/')[0]\n  const x_den = x.split('/')[1]\n  const n_num = n.split('/')[0]\n  const n_den = n.split('/')[1]\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  if (x_num"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = sumDigits(a);\n    const bSum = sumDigits(b);\n    if (aSum < bSum) return -1;\n    if (aSum > bSum) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n\n For example:\n  >>> sumDigits(1) == 1\n  >>> sumDigits(12) == 2\n  >>> sumDigits(123) == 3\n  >>> sumDigits(1234) == 4\n  >>> sumDigits(12345) == 5\n  >>> sumDigits(123456) == 6\n  >>> sumDigits(1234567) == 7\n  >>> sumDigits(12345678) == 8\n  >>> sumDigits(123456789) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    sum += num.toString().charAt(i);\n  }\n  return sum;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n\n For example:\n  >>> sumDigits(1) == 1\n  >>> sumDigits(12) == 2\n  >>> sumDigits(123) == 3\n  >>> sumDigits(1234) == 4\n  >>> sumDigits(12345) == 5\n  >>> sumDigits(123456) == 6\n  >>> sumDigits(1234567) == 7\n  >>> sumDigits(12345678) == 8\n  >>> sumDigits(123456789) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    sum += num.toString().charAt(i);\n  }\n  return sum;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n\n For example:\n  >>> sumDigits(1) == 1\n  >>> sumDigits(12) == 2\n  >>> sumDigits(123) == 3\n  >>> sumDigits(1234) == 4\n  >>> sumDigits(12345) == 5\n  >>> sumDigits(123456) == 6\n  >>> sumDigits(1234567) == 7\n  >>> sumDigits(12345678) == 8\n  >>> sumDigits(123456789) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    sum += num.toString().charAt(i);\n  }\n  return sum;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n\n For example:\n  >>> sumDigits(1) == 1\n  >>> sumDigits(12) == 2\n  >>> sumDigits(123) == 3\n  >>> sumDigits(1234) == 4\n  >>> sumDigits(12345) == 5\n  >>> sumDigits(123456) == 6\n  >>> sumDigits(1234567) == 7\n  >>> sumDigits(12345678) == 8\n  >>> sumDigits(123456789) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    sum += num.toString().charAt(i);\n  }\n  return sum;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n\n For example:\n  >>> sumDigits(1) == 1\n  >>> sumDigits(12) == 2\n  >>> sumDigits(123) == 3\n  >>> sumDigits(1234) == 4\n  >>> sumDigits(12345) == 5\n  >>> sumDigits(123456) == 6\n  >>> sumDigits(1234567) == 7\n  >>> sumDigits(12345678) == 8\n  >>> sumDigits(123456789) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    sum += num.toString().charAt(i);\n  }\n  return sum;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n\n For example:\n  >>> sumDigits(1) == 1\n  >>> sumDigits(12) == 2\n  >>> sumDigits(123) == 3\n  >>> sumDigits(1234) == 4\n  >>> sumDigits(12345) == 5\n  >>> sumDigits(123456) == 6\n  >>> sumDigits(1234567) == 7\n  >>> sumDigits(12345678) == 8\n  >>> sumDigits(123456789) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    sum += num.toString().charAt(i);\n  }\n  return sum;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n\n For example:\n  >>> sumDigits(1) == 1\n  >>> sumDigits(12) == 2\n  >>> sumDigits(123) == 3\n  >>> sumDigits(1234) == 4\n  >>> sumDigits(12345) == 5\n  >>> sumDigits(123456) == 6\n  >>> sumDigits(1234567) == 7\n  >>> sumDigits(12345678) == 8\n  >>> sumDigits(123456789) == 9\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.toString().length;"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 10 === 1 && n % 100!== 11);\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({ length: n }, (x) => x * x - x + 1)\n  const result = a.reduce((acc, x) => {\n    const sum = x + acc\n    if (sum % 3 === 0) {\n      return sum\n    }\n    return 0\n  }, 0)\n  return result\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1_name = planet1.toUpperCase();\n  let planet2_name = planet2.toUpperCase();\n  let planet1_orbit = getOrbit(planet1_name);\n  let planet2_orbit = getOrbit(planet2_name);\n  let planet1_proximity = getProximity(planet1_name);\n  let planet2_proximity = getProximity(planet2_name);\n  let planet1_orbit_proximity = getProximity(planet1_orbit);\n  let planet2_orbit_proximity = getProximity(planet2_orbit);\n  let planet1_orbit_proximity_diff = planet1_orbit_proximity - planet2_orbit_proximity;\n  let planet2_orbit_proximity_diff = planet2_orbit_proximity - planet1_orbit_proximity;\n  let planet1_orbit_proximity_diff_abs = Math.abs(planet1_orbit_proximity_diff);\n  let planet2_orbit_proximity_diff_abs = Math.abs(planet2_orbit_proximity_diff);\n  let planet1_orbit_proximity_diff_abs_min = Math.min(planet1_orbit_proximity_diff_abs, planet2_orbit_proximity_diff_abs);\n  let planet1_orbit_proximity_diff_abs_max = Math.max(planet1_orbit_proximity_diff_abs, planet2_orbit_proximity_diff_abs);\n  let planet1_orbit_proximity_diff_abs_avg = (planet1_orbit_proximity_diff_abs_min + planet1_orbit_proximity_diff_abs_max) / 2;\n  let planet1_orbit_proximity_diff_abs_avg_abs = Math.abs(planet1_orbit_proximity_diff_abs_avg);\n  let planet1_orbit_proximity_diff_abs_avg_abs_min = Math.min(planet1_orbit_proximity_diff_abs_abs, planet2_orbit_proximity_diff_abs_abs);\n  let planet1_orbit_proximity_diff_abs_avg_abs_max = Math.max(planet1_orbit_proximity_diff_abs_abs, planet2_orbit_proximity_diff_abs_abs);\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg = (planet1_orbit_proximity_diff_abs_avg_abs_min + planet1_orbit_proximity_diff_abs_avg_abs_max) / 2;\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs = Math.abs(planet1_orbit_proximity_diff_abs_avg_abs_avg);\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_min = Math.min(planet1_orbit_proximity_diff_abs_avg_abs_avg_abs, planet2_orbit_proximity_diff_abs_avg_abs_avg_abs);\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_max = Math.max(planet1_orbit_proximity_diff_abs_avg_abs_avg_abs, planet2_orbit_proximity_diff_abs_avg_abs_avg_abs);\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg = (planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_min + planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_max) / 2;\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs = Math.abs(planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs);\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs_min = Math.min(planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs, planet2_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs);\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs_max = Math.max(planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs, planet2_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs);\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs_avg = (planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs_min + planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs_max) / 2;\n  let planet1_orbit_proximity_diff_abs_avg_abs_avg_abs_avg_abs_avg_abs = Math.abs(planet1_orbit_pro"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  let sum = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181 = 0\n  let temp182 = 0\n  let temp183 = 0\n  let temp184 = 0\n  let temp185 = 0\n  let temp186 = 0\n  let temp187 = 0\n  let temp188 = 0\n"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOr"}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sum = (...numbers) => numbers.reduce((a, b) => a + b, 0);\n  const square = (...numbers) => numbers.reduce((a, b) => a + b * b, 0);\n  const difference = (...numbers) => sum(...numbers) - square(...numbers);\n  return difference(...lst);\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = game.map((x, i) => x * i);\n  let guess = guess.map((x, i) => x * i);\n  let diff = score.filter((x, i) => x!== guess[i]);\n  return diff;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_split = class_name.split('.');\n  const class_name_cap = class_name_split.map(x => x.charAt(0).toUpperCase() + x.slice(1));\n  const class_name_cap_len = class_name_cap.length;\n  const class_name_cap_len_max = class_name_cap.length - 1;\n  const class_name_cap_len_min = class_name_cap.length - 1;\n  const class_name_cap_len_sum = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_sum = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_sum = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_min_sum = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_min_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_min_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_min_min_min = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_min_min_min_max = class_name_cap.reduce((a, b) => a + b, 0);\n  const class_name_cap_sum_max_min_sum_min_min_min_min_min_min_min_min_min = class_name_cap."}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_2 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_3 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_4 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_5 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_6 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_7 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_8 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_9 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_10 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_11 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_12 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_13 = (a, b) => {\n    const a_length = a.length;\n    const b_length = b.length;\n    if (a_length!== b_length) return false;\n    for (let i = 0; i < a_length; i++) {\n        if (a[i]!== b[i]) return false;\n    }\n    return true;\n};\n\nconst check_cycpattern_14 = (a, b) =>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n  }\n  return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (num > 0) {\n    if (num % 10 === 1) {\n      result[i] = 'i';\n      i++;\n    } else if (num % 10 === 2) {\n      result[i] = 'ii';\n      i++;\n    } else if (num % 10 === 3) {\n      result[i] = 'iii';\n      i++;\n    } else if (num % 10 === 4) {\n      result[i] = 'iv';\n      i++;\n    } else if (num % 10 === 5) {\n      result[i] = 'v';\n      i++;\n    } else if (num % 10 === 6) {\n      result[i] = 'vi';\n      i++;\n    } else if (num % 10 === 7) {\n      result[i] = 'vii';\n      i++;\n    } else if (num % 10 === 8) {\n      result[i] = 'viii';\n      i++;\n    } else if (num % 10 === 9) {\n      result[i] = 'ix';\n      i++;\n    }\n    num = num / 10;\n  }\n  return result.join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle4 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle5 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle6 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle7 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle8 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle9 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle10 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle11 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle12 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle13 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle14 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n\n  return (ab + ac + bc) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle15 = (a, b, c) => {\n  const ab = Math.abs(a - b"}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    }\n    return a\n  })\n  return max.length\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set()\n  const max = words.reduce((a, b)"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, need - number];\n  }\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test28 = [\n  [5, 6, 10],"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    }\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    } else if (operatorValue === '+') {\n      "}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == 'a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7a9d7a8f4d6a3d5f7a0b4c7"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n"}
