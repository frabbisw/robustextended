{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const last = sorted[len - 1]\n  const lastIndex = sorted.indexOf(last)\n  const lastIndex2 = sorted.indexOf(last, lastIndex + 1)\n  if (lastIndex2 === -1) {\n    return false\n  }\n  const diff = Math.abs(last - sorted[lastIndex2])\n  return diff < threshold\n}\n\n/**\n  * @param {Array} numbers\n  * @param {number} threshold\n  * @returns {boolean}\n  * @description\n  * Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  * @example\n  * hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  * // false\n  * hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  * // true\n  */\nexport const hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const last = sorted[len - 1]\n  const lastIndex = sorted.indexOf(last)\n  const lastIndex2 = sorted.indexOf(last, lastIndex + 1)\n  if (lastIndex2 === -1) {\n    return false\n  }\n  const diff = Math.abs(last - sorted[lastIndex2])\n  return diff < threshold\n}\n\n/**\n  * @param {Array} numbers\n  * @param {number} threshold\n  * @returns {boolean}\n  * @description\n  * Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  * @example\n  * hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  * // false\n  * hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  * // true\n  */\nexport const hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const last = sorted[len - 1]\n  const lastIndex = sorted.indexOf(last)\n  const lastIndex2 = sorted.indexOf(last, lastIndex + 1)\n  if (lastIndex2 === -1) {\n    return false\n  }\n  const diff = Math.abs(last - sorted[lastIndex2])\n  return diff < threshold\n}\n\n/**\n  * @param {Array} numbers\n  * @param {number} threshold\n  * @returns {boolean}\n  * @description\n  * Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  * @example\n  * hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  * // false\n  * hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  * // true\n  */\nexport const hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const last = sorted[len - 1]\n  const lastIndex = sorted.indexOf(last)\n  const lastIndex2 = sorted.indexOf(last, lastIndex + 1)\n  if (lastIndex2 === -1) {\n    return false\n  }\n  const diff = Math.abs(last - sorted[lastIndex2])\n  return diff < threshold\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = []\n  const output = []\n  let current_string = ''\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        output.push(current_string)\n        current_string = ''\n      } else {\n        stack.pop()\n      }\n    } else {\n      current_string += c\n    }\n  }\n  if (stack.length!== 0) {\n    output.push(current_string)\n  }\n  return output\n}\n\n/*\n  Input:\n  '((()))'\n  Output:\n  '((()))'\n  */\nconst removeParenthesis = (paren_string) => {\n  const stack = []\n  const output = []\n  let current_string = ''\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        output.push(current_string)\n        current_string = ''\n      } else {\n        stack.pop()\n      }\n    } else {\n      current_string += c\n    }\n  }\n  if (stack.length!== 0) {\n    output.push(current_string)\n  }\n  return output\n}\n\n/*\n  Input:\n  '((()))'\n  Output:\n  '((()))'\n  */\nconst removeParenthesis2 = (paren_string) => {\n  const stack = []\n  const output = []\n  let current_string = ''\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        output.push(current_string)\n        current_string = ''\n      } else {\n        stack.pop()\n      }\n    } else {\n      current_string += c\n    }\n  }\n  if (stack.length!== 0) {\n    output.push(current_string)\n  }\n  return output\n}\n\n/*\n  Input:\n  '((()))'\n  Output:\n  '((()))'\n  */\nconst removeParenthesis3 = (paren_string) => {\n  const stack = []\n  const output = []\n  let current_string = ''\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        output.push(current_string)\n        current_string = ''\n      } else {\n        stack.pop()\n      }\n    } else {\n      current_string += c\n    }\n  }\n  if (stack.length!== 0) {\n    output.push(current_string)\n  }\n  return output\n}\n\n/*\n  Input:\n  '((()))'\n  Output:\n  '((()))'\n  */\nconst removeParenthesis4 = (paren_string) => {\n  const stack = []\n  const output = []\n  let current_string = ''\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        output.push(current_string)\n        current_string = ''\n      } else {\n        stack.pop()\n      }\n    } else {\n      current_string += c\n    }\n  }\n  if (stack.length!== 0) {\n    output.push(current_string)\n  }\n  return output\n}\n\n/*\n  Input:\n  '((()))'\n  Output:\n  '((()))'\n  */\nconst removeParenthesis5 = (paren_string) => {\n  const stack = []\n  const output = []\n  let current_string = ''\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        output.push(current_string)\n        current_string = ''\n      } else {\n        stack.pop()\n      }\n    } else {\n      current_string += c\n    }\n  }\n  if (stack.length!== 0) {\n    output.push(current_string)\n  }\n  return output\n}\n\n/*\n  Input:\n  '((()))'\n  Output:\n  '((()))'\n  */\nconst removeParenthesis6 = (paren_string) => {\n  const stack = []\n  const output = []\n  let current_string = ''\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        output.push(current_string)\n        current_string = ''\n      } else {\n        stack.pop()\n      }\n    } else {\n      current_", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!= string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      if (isPalindrome(prefix) && isPalindrome(postfix)) {\n        return prefix + postfix;\n      }\n    }\n  }\n  return '';\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!= string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      if (isPalindrome(prefix) && isPalindrome(postfix)) {\n        return prefix + postfix;\n      }\n    }\n  }\n  return '';\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!= string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      if (isPalindrome(prefix) && isPalindrome(postfix)) {\n        return prefix + postfix;\n      }\n    }\n  }\n  return '';\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!= string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      if (isPalindrome(prefix) && isPalindrome(postfix)) {\n        return prefix + postfix;\n      }\n    }\n  }\n  return '';\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!= string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.slice(i, j + 1);\n      postfix = string.slice(j, i + 1).split('').reverse().join('');\n      if (isPalindrome(prefix) && isPalindrome(postfix)) {\n        return prefix + postfix;\n      }\n    }\n  }\n  return '';\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Al", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n    if (i % 2 === 0) {\n      result.push(i + 1)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n    if (i % 2 === 1) {\n      result.push(i + 1)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile3 = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n    if (i % 2 === 1) {\n      result.push(i + 1)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile4 = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n    if (i % 2 === 0) {\n      result.push(i + 1)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile5 = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n    if (i % 2 === 1) {\n      result.push(i + 1)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile6 = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n    if (i % 2 === 0) {\n      result.push(i + 1)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile7 = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n    if (i % 2 === 1) {\n      result.push(i + 1)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (words) => {\n  const uniqueWords = [];\n  words.forEach((word) => {\n    if (uniqueWords.indexOf(word) === -1) {\n      uniqueWords.push(word);\n    }\n  });\n  return uniqueWords;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayUnique = (words) => {\n  const uniqueWords = [];\n  words.forEach((word) => {\n    if (uniqueWords.indexOf(word) === -1) {\n      uniqueWords.push(word);\n    }\n  });\n  return uniqueWords;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayUnique2 = (words) => {\n  const uniqueWords = [];\n  words.forEach((word) => {\n    if (uniqueWords.indexOf(word) === -1) {\n      uniqueWords.push(word);\n    }\n  });\n  return uniqueWords;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayUnique3 = (words) => {\n  const uniqueWords = [];\n  words.forEach((word) => {\n    if (uniqueWords.indexOf(word) === -1) {\n      uniqueWords.push(word);\n    }\n  });\n  return uniqueWords;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayUnique4 = (words) => {\n  const uniqueWords = [];\n  words.forEach((word) => {\n    if (uniqueWords.indexOf(word) === -1) {\n      uniqueWords.push(word);\n    }\n  });\n  return uniqueWords;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayUnique5 = (words) => {\n  const uniqueWords = [];\n  words.forEach((word) => {\n    if (uniqueWords.indexOf(word) === -1) {\n      uniqueWords.push(word);\n    }\n  });\n  return uniqueWords;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayUnique6 = (words) => {\n  const uniqueWords = [];\n  words.forEach((word) => {\n    if (uniqueWords.indexOf(word) === -1) {\n      uniqueWords.push(word);\n    }\n  });\n  return uniqueWords;\n};\n\n/*\n  You will is given an array of words. Your task is to return an array of the words that contains only the unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) ==", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n\n  let result = x;\n  while (result < y) {\n    result += 2;\n  }\n\n  return result;\n};\n\nexport default chooseNum;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const avg = (n + m) / 2;\n  const rounded = Math.round(avg);\n  return rounded.toString(2);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const digit = x % 10;\n    if (digit % 2 === 0) {\n      digits.push(x);\n    }\n    x = Math.floor(x / 10);\n  }\n  return digits;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength10 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength11 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength12 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.find(x => x === name))\n  return reversedNames\n}\n\nconst byLength13 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map(name => reversed.", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f2(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f3(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f4(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f5(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f6(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f7(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f8(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f9(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f10(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f11(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f12(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f13(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f14(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f15 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f15(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f16 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f16(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f17 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f17(i", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n  }\n  return (even, odd)\n}\n\nconst evenOddPalindrome", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Returns the sum of the first n digits of a number.\n  >>> sumDigits(0) == 0\n  >>> sumDigits(1) == 1\n  >>> sumDigits(2) == 2\n  >>> sumDigits(3) == 3\n  >>> sumDigits(4) == 4\n  >>> sumDigits(5) == 5\n  >>> sumDigits(6) == 6\n  >>> sumDigits(7) == 7\n  >>> sumDigits(8) == 8\n  >>> sumDigits(9) == 9\n  >>> sumDigits(10) == 10\n  >>> sumDigits(11) == 11\n  >>> sumDigits(12) == 12\n  >>> sumDigits(13) == 13\n  >>> sumDigits(14) == 14\n  >>> sumDigits(15) == 15\n  >>> sumDigits(16) == 16\n  >>> sumDigits(17) == 17\n  >>> sumDigits(18) == 18\n  >>> sumDigits(19) == 19\n  >>> sumDigits(20) == 20\n  >>> sumDigits(21) == 21\n  >>> sumDigits(22) == 22\n  >>> sumDigits(23) == 23\n  >>> sumDigits(24) == 24\n  >>> sumDigits(25) == 25\n  >>> sumDigits(26) == 26\n  >>> sumDigits(27) == 27\n  >>> sumDigits(28) == 28\n  >>> sumDigits(29) == 29\n  >>> sumDigits(30) == 30\n  >>> sumDigits(31) == 31\n  >>> sumDigits(32) == 32\n  >>> sumDigits(33) == 33\n  >>> sumDigits(34) == 34\n  >>> sumDigits(35) == 35\n  >>> sumDigits(36) == 36\n  >>> sumDigits(37) == 37\n  >>> sumDigits(38) == 38\n  >>> sumDigits(39) == 39\n  >>> sumDigits(40) == 40\n  >>> sumDigits(41) == 41\n  >>> sumDigits(42) == 42\n  >>> sumDigits(43) == 43\n  >>> sumDigits(44) == 44\n  >>> sumDigits(45) == 45\n  >>> sumDigits(46) == 46\n  >>> sumDigits(47) == 47\n  >>> sumDigits(48) == 48\n  >>> sumDigits(49) == 49\n  >>> sumDigits(50) == 50\n  >>> sumDigits(51) == 51\n  >>> sumDigits(52) == 52\n  >>> sumDigits(53) == 53\n  >>> sumDigits(54) == 54\n  >>> sumDigits(55) == 55\n  >>> sumDigits(56) == 56\n  >>> sumDigits(57) == 57\n  >>> sumDigits(58) == 58\n  >>> sumDigits(59) == 59\n  >>> sumDigits(60) == 60\n  >>> sumDigits(61) == 61\n  >>> sumDigits(62) == 62\n  >>> sumDigits(63) == 63\n  >>> sumDigits(64) == 64\n  >>> sumDigits(65) == 65\n  >>> sumDigits(66) == 66\n  >>> sumDigits(67) == 67\n  >>> sumDigits(68) == 68\n  >>> sumDigits(69) == 69\n  >>> sumDigits(70) == 70\n  >>> sumDigits(71) == 71\n  >>> sumDigits(72) == 72\n  >>> sumDigits(73) == 73\n  >>> sumDigits(74) == 74\n  >>> sumDigits(75) == 75\n  >>> sumDigits(76) == 76\n  >>> sumDigits(77) == 77\n  >>> sumDigits(78) == 78\n  >>> sumDigits(79) == 79\n  >>> sumDigits(80) == 80\n  >>> sumDigits(81) == 81\n  >>> sumDigits(82) == 82\n  >>> sumDigits(83) == 83\n  >>> sumDigits(84) == 84\n  >>> sumDigits(85) == 85\n  >>> sumDigits(86) == 86\n  >>> sumDigits(87) == 87\n  >>> sumDigits(88) == 88\n  >>> sumDigits(89) == 89\n  >>> sumDigits(90) == 90\n  >>> sumDigits(91) == 91\n  >>> sumDigits(92) == 92\n  >>> sumDigits(93) == 93\n  >>> sumDigits(94) == 94\n  >>> sumDigits(95) == 95\n  >>> sumDigits(96) == 96\n  >>> sumDigits(97) == 97\n  >>> sumDigits(98) == 98\n  >>> sumDigits(99) == 99\n  >>> sumDigits(100) == 100\n  >>> sumDigits(101) == 101\n  >>> sumDigits(102) == 102\n  >>> sumDigits(103) == 103\n  >>> sumDigits(104) == 104\n  >>> sumDigits(105) == 105\n  >>> sumDigits(106) == 106\n  >>> sumDigits(107) == 107\n  >>> sumDigits(108) == 108\n  >>> sumDigits(109) == 109\n  >>> sumDigits(110) == 110\n  >>> sumDigits(111) == 111\n  >>> sumDigits(112) == 112\n  >>> sumDigits(113) == 113\n  >>> sumDigits(114) == 114\n  >>> sumDigits(115) == 115\n  >>> sumDigits(116) == 116\n  >>> sumDigits(117) == 117\n  >>> sumDigits(118) == 118\n  >>> sumDigits(119) == 119\n  >>> sumDigits(120) == 120\n  >>> sumDigits(121)", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = true;\n      }\n    } else {\n      if (flag) {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = true;\n      }\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = true;\n      }\n    } else {\n      if (flag) {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = true;\n      }\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = true;\n      }\n    } else {\n      if (flag) {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = true;\n      }\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = true;\n      }\n    } else {\n      if (flag) {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = true;\n      }\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] - 1;\n        arr[j] = arr[j] + 1;\n        flag = true;\n      }\n    } else {\n      if (flag) {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = false;\n      } else {\n        arr[i] = arr[i] + 1;\n        arr[j] = arr[j] - 1;\n        flag = true;\n      }\n    }\n    ", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor2 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor3 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor4 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor5 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor6 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor7 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor8 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor9 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor10 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor11 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor12 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '1101'\n  b = '1011'\n  Output:\n  '1101'\n  */\nconst stringXor13 = (a, b) => {\n  const aLength =", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  if (lst1Length!== lst2Length) {\n    return \"NO\";\n  }\n  const lst1Even = lst1.every(x => x % 2 === 0);\n  if (lst1Even) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst test = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example:\n  countLetters('a b c') == 3\n  countLetters('a b c d') == 3\n  countLetters('a b c d e') == 4\n  countLetters('a b c d e f') == 4\n  countLetters('a b c d e f g') == 5\n  countLetters('a b c d e f g h') == 5\n  countLetters('a b c d e f g h i') == 6\n  countLetters('a b c d e f g h i j') == 6\n  countLetters('a b c d e f g h i j k') == 7\n  countLetters('a b c d e f g h i j k l') == 7\n  countLetters('a b c d e f g h i j k l m') == 8\n  countLetters('a b c d e f g h i j k l m n') == 8\n  countLetters('a b c d e f g h i j k l m n o') == 9\n  countLetters('a b c d e f g h i j k l m n o p') == 9\n  countLetters('a b c d e f g h i j k l m n o p q') == 10\n  countLetters('a b c d e f g h i j k l m n o p q r') == 10\n  countLetters('a b c d e f g h i j k l m n o p q r s') == 11\n  countLetters('a b c d e f g h i j k l m n o p q r s t') == 11\n  countLetters('a b c d e f g h i j k l m n o p q r s t u') == 12\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v') == 12\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w') == 13\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x') == 13\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y') == 14\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 14\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a') == 15\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b') == 15\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c') == 16\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d') == 16\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e') == 17\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f') == 17\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g') == 18\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h') == 18\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i') == 19\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j') == 19\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k') == 20\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l') == 20\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m') == 21\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n') == 21\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o') == 22\n  countLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p') ==", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return [result.reverse().join(''), result.length === s.length];\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\ntest.forEach(t => {\n  console.log(reverseDelete(t[0], t[1]));\n});\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (lst) => {\n    const oddCount = (lst) => {\n      const oddCount = (lst) => {\n        const oddCount = (lst) => {\n          const oddCount = (lst) => {\n            const oddCount = (lst) => {\n              const oddCount = (lst) => {\n                const oddCount = (lst) => {\n                  const oddCount = (lst) => {\n                    const oddCount = (lst) => {\n                      const oddCount = (lst) => {\n                        const oddCount = (lst) => {\n                          const oddCount = (lst) => {\n                            const oddCount = (lst) => {\n                              const oddCount = (lst) => {\n                                const oddCount = (lst) => {\n                                  const oddCount = (lst) => {\n                                    const oddCount = (lst) => {\n                                      const oddCount = (lst) => {\n                                        const oddCount = (lst) => {\n                                          const oddCount = (lst) => {\n                                            const oddCount = (lst) => {\n                                              const oddCount = (lst) => {\n                                                const oddCount = (lst) => {\n                                                  const oddCount = (lst) => {\n                                                    const oddCount = (lst) => {\n                                                      const oddCount = (lst) => {\n                                                        const oddCount = (lst) => {\n                                                          const oddCount = (lst) => {\n                                                           const oddCount = (lst) => {\n                                                            const oddCount = (lst) => {\n                                                              const oddCount = (lst) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return oddCount(lst)\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => acc + num, 0);\n  const minSumOfSubArrays = nums.reduce((acc, num) => {\n    const subArray = nums.slice(0, num);\n    const sum = subArray.reduce((acc, num) => acc + num, 0);\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    return sum;\n  }, 0);\n  return minSumOfSubArrays;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n).fill(0)\n  const buckets = new Array(n).fill(0)\n  const buckets_used = new Array(n).fill(0)\n  const buckets_left = new Array(n).fill(0)\n  const buckets_left_used = new Array(n).fill(0)\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        dp[i][j] = 1\n        buckets[i][j] = 1\n        buckets_used[i][j] = 1\n        buckets_left[i][j] = capacity\n        buckets_left_used[i][j] = 0\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j] === 1) {\n        for (let k = 0; k < n; k++) {\n          if (dp[k][j] === 1) {\n            for (let l = 0; l < m; l++) {\n              if (grid[k][l] === 1) {\n                dp[k][l] = dp[i][j] + dp[k][l]\n                buckets[k][l] = buckets[i][j]\n                buckets_used[k][l] = buckets_used[i][j]\n                buckets_left[k][l] = buckets_left[i][j]\n                buckets_left_used[k][l] = buckets_left_used[i][j]\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j] === 1) {\n        if (buckets_left[i][j] > 0) {\n          result++\n          buckets_left[i][j]--\n          buckets_left_used[i][j]++\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nconsole.log(dp(grid, 1))\nconsole.log(dp(grid, 2))\nconsole.log(dp(grid, 5))\nconsole.log(dp(grid, 10))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < s.length && s[j] ==='') {\n      j++;\n    }\n    let word = s.slice(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n    while (i < s.length && s[i] ==='') {\n      i++;\n    }\n    j = i;\n  }\n  return words;\n};\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4));\nconsole.log(selectWords(\"Mary had a little lamb\", 3));\nconsole.log(selectWords(\"simple white space\", 2));\nconsole.log(selectWords(\"Hello world\", 4));\nconsole.log(selectWords(\"Uncle sam\", 3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestVowelIndex = 0;\n  const closestVowelDistance = 0;\n  const closestVowelDistanceIndex = 0;\n  const closestVowelDistanceIndex2 = 0;\n  const closestVowelDistanceIndex3 = 0;\n  const closestVowelDistanceIndex4 = 0;\n  const closestVowelDistanceIndex5 = 0;\n  const closestVowelDistanceIndex6 = 0;\n  const closestVowelDistanceIndex7 = 0;\n  const closestVowelDistanceIndex8 = 0;\n  const closestVowelDistanceIndex9 = 0;\n  const closestVowelDistanceIndex10 = 0;\n  const closestVowelDistanceIndex11 = 0;\n  const closestVowelDistanceIndex12 = 0;\n  const closestVowelDistanceIndex13 = 0;\n  const closestVowelDistanceIndex14 = 0;\n  const closestVowelDistanceIndex15 = 0;\n  const closestVowelDistanceIndex16 = 0;\n  const closestVowelDistanceIndex17 = 0;\n  const closestVowelDistanceIndex18 = 0;\n  const closestVowelDistanceIndex19 = 0;\n  const closestVowelDistanceIndex20 = 0;\n  const closestVowelDistanceIndex21 = 0;\n  const closestVowelDistanceIndex22 = 0;\n  const closestVowelDistanceIndex23 = 0;\n  const closestVowelDistanceIndex24 = 0;\n  const closestVowelDistanceIndex25 = 0;\n  const closestVowelDistanceIndex26 = 0;\n  const closestVowelDistanceIndex27 = 0;\n  const closestVowelDistanceIndex28 = 0;\n  const closestVowelDistanceIndex29 = 0;\n  const closestVowelDistanceIndex30 = 0;\n  const closestVowelDistanceIndex31 = 0;\n  const closestVowelDistanceIndex32 = 0;\n  const closestVowelDistanceIndex33 = 0;\n  const closestVowelDistanceIndex34 = 0;\n  const closestVowelDistanceIndex35 = 0;\n  const closestVowelDistanceIndex36 = 0;\n  const closestVowelDistanceIndex37 = 0;\n  const closestVowelDistanceIndex38 = 0;\n  const closestVowelDistanceIndex39 = 0;\n  const closestVowelDistanceIndex40 = 0;\n  const closestVowelDistanceIndex41 = 0;\n  const closestVowelDistanceIndex42 = 0;\n  const closestVowelDistanceIndex43 = 0;\n  const closestVowelDistanceIndex44 = 0;\n  const closestVowelDistanceIndex45 = 0;\n  const closestVowelDistanceIndex46 = 0;\n  const closestVowelDistanceIndex47 = 0;\n  const closestVowelDistanceIndex48 = 0;\n  const closestVowelDistanceIndex49 = 0;\n  const closestVowelDistanceIndex50 = 0;\n  const closestVowelDistanceIndex51 = 0;\n  const closestVowelDistanceIndex52 = 0;\n  const closestVowelDistanceIndex53 = 0;\n  const closestVowelDistanceIndex54 = 0;\n  const closestVowelDistanceIndex55 = 0;\n  const closestVowelDistanceIndex56 = 0;\n  const closestVowelDistanceIndex57 = 0;\n  const closestVowelDistanceIndex58 = 0;\n  const closestVowelDistanceIndex59 = 0;\n  const closestVowelDistanceIndex60 = 0;\n  const closestVowelDistanceIndex61 = 0;\n  const closestVowelDistanceIndex62 = 0;\n  const closestVowelDistanceIndex63 = 0;\n  const closestVowelDistanceIndex64 = 0;\n  const closestVowelDistanceIndex65 = 0;\n  const closestVowelDistanceIndex66 = 0;\n  const closestVowelDistanceIndex67 = 0;\n  const closestVowelDistanceIndex68 = 0;\n  const closestVowelDistanceIndex69 = 0;\n  const closestVowelDistanceIndex70 = 0;\n  const closestVowelDistanceIndex71 = 0;\n  const closestVowelDistanceIndex72 = 0;\n  const closestVowelDistanceIndex73 = 0;\n  const closestVowelDistanceIndex74 = 0;\n  const closestVowelDistanceIndex75 = 0;\n  const closestVowelDistanceIndex76 = 0;\n  const closestVowelDistanceIndex77 = 0;\n  const closestVowelDistanceIndex78 = 0;\n  const closestVowelDistanceIndex79 = 0;\n  const closestVowelDistanceIndex80 = 0;\n  const closestVowelDistanceIndex81 = 0;\n  const closestVowelDistanceIndex82 = 0;\n  const closestVowelDistanceIndex83 = 0;\n  const closestVowelDistanceIndex84 = 0;\n  const closestVowelDistanceIndex85 = 0;\n  const closestVowelDistanceIndex86 = 0;\n  const closestVowelDistanceIndex87 = 0;\n  const closestVowelDistanceIndex88 = 0;\n  const closestVowelDistanceIndex89 = 0;\n  const closestVowelDistanceIndex90 = 0;\n  const closestVowelDistanceIndex91 = 0;\n  const closestVowelDistanceIndex92 = 0;\n  const closestVowelDistanceIndex93 = 0;\n  const closestVowelDistanceIndex94 = 0;\n  const closestVowelDistanceIndex95 = 0;\n  const closestVowelDistanceIndex96 = 0", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i];\n    if (cur === '(') {\n      stack.push(cur);\n    } else if (cur === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['()()', ')()']));\nconsole.log(matchParens(['(())', '()()']));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', '", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const arrLen = arr.length\n  const k = Math.min(k, arrLen)\n  const arrMax = arr.slice(0, k)\n  const arrMin = arr.slice(arrLen - k, arrLen)\n  return [...arrMax,...arrMin]\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements(arr, i));\n  }\n  return result;\n};\n\nconst addElements2 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements2(arr, i));\n  }\n  return result;\n};\n\nconst addElements3 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements3(arr, i));\n  }\n  return result;\n};\n\nconst addElements4 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements4(arr, i));\n  }\n  return result;\n};\n\nconst addElements5 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements5(arr, i));\n  }\n  return result;\n};\n\nconst addElements6 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements6(arr, i));\n  }\n  return result;\n};\n\nconst addElements7 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements7(arr, i));\n  }\n  return result;\n};\n\nconst addElements8 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements8(arr, i));\n  }\n  return result;\n};\n\nconst addElements9 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements9(arr, i));\n  }\n  return result;\n};\n\nconst addElements10 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements10(arr, i));\n  }\n  return result;\n};\n\nconst addElements11 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements11(arr, i));\n  }\n  return result;\n};\n\nconst addElements12 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements12(arr, i));\n  }\n  return result;\n};\n\nconst addElements13 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements13(arr, i));\n  }\n  return result;\n};\n\nconst addElements14 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + addElements14(arr, i));\n  }\n  return result;\n};\n\nconst addElements15 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  ", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even].concat(collatz(odd));\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd =", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n\n  if (month === 2 && day > days[28]) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > days[30]) {\n      return false;\n    }\n  }\n\n  if (month === 3 && year % 4 === 0) {\n    if (day > days[29]) {\n      return false;\n    }\n  }\n\n  if (month === 5 && year % 4 === 0) {\n    if (day > days[28]) {\n      return false;\n    }\n  }\n\n  if (month === 8 && year % 4 === 0) {\n    if (day > days[31]) {\n      return false;\n    }\n  }\n\n  if (month === 1 && year % 4 === 0) {\n    if (day > days[28]) {\n      return false;\n    }\n  }\n\n  if (month === 7 && year % 4 === 0) {\n    if (day > days[31]) {\n      return false;\n    }\n  }\n\n  if (month === 10 && year % 4 === 0) {\n    if (day > days[31]) {\n      return false;\n    }\n  }\n\n  if (month === 12 && year % 4 === 0) {\n    if (day > days[30]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default validDate;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords20 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords21 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords22 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords23 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords24 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords25 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords26 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords27 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\nconst splitWords28 = (txt) => {\n  const words = txt.split(/\\s+/);", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const sortedIsSorted = sorted.every((x, i) => x === sorted[i + 1 - sortedLength]);\n  return sortedIsSorted;\n};\n\nexport default isSorted;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return 'NO';\n  }\n  const [start, end] = [start1, end1];\n  const [start2, end2] = [start2, end2];\n  const [end, end2] = [end, end2];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start2, end];\n  const [start, end2] = [start, end2];\n  const [start2, end] = [start", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const sign = arr.reduce((acc, num) => {\n    if (num === 0) {\n      return acc;\n    }\n    if (num < 0) {\n      return acc - 1;\n    }\n    return acc + 1;\n  }, 0);\n  return sign * arr.reduce((acc, num) => {\n    if (num === 0) {\n      return acc;\n    }\n    if (num < 0) {\n      return acc * -1;\n    }\n    return acc * num;\n  }, 1);\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const [row, col] = [0, 0];\n  const dp = new Array(N);\n  dp[row][col] = grid[row][col];\n  dp[row][col] = 1;\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (j === 0) {\n        dp[row][col] = Math.min(dp[row][col], dp[row][col - 1] + grid[row][col]);\n      } else if (j === N - 1) {\n        dp[row][col] = Math.min(dp[row][col], dp[row][col - 1] + grid[row][col]);\n      } else {\n        dp[row][col] = Math.min(dp[row][col], dp[row][col - 1] + dp[row + 1][col - 1] + grid[row][col]);\n      }\n    }\n  }\n  return dp[N - 1][N - 1];\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconsole.log(minPath(grid, 3));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  while (a!== 1) {\n    const tmp = a;\n    a = b % a;\n    b = tmp;\n  }\n  return b;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n  }\n  return tri\n}\n\nconst tri2 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n  }\n  return tri\n}\n\nconst tri3 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n    tri.push(1 + i / 2 + i / 3 + i / 4)\n  }\n  return tri\n}\n\nconst tri4 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n    tri.push(1 + i / 2 + i / 3 + i / 4)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5)\n  }\n  return tri\n}\n\nconst tri5 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n    tri.push(1 + i / 2 + i / 3 + i / 4)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6)\n  }\n  return tri\n}\n\nconst tri6 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n    tri.push(1 + i / 2 + i / 3 + i / 4)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6 + i / 7)\n  }\n  return tri\n}\n\nconst tri7 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n    tri.push(1 + i / 2 + i / 3 + i / 4)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6 + i / 7)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6 + i / 7 + i / 8)\n  }\n  return tri\n}\n\nconst tri8 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n    tri.push(1 + i / 2 + i / 3 + i / 4)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6 + i / 7)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6 + i / 7 + i / 8)\n    tri.push(1 + i / 2 + i / 3 + i / 4 + i / 5 + i / 6 + i / 7 + i / 8 + i / 9)\n  }\n  return tri\n}\n\nconst tri9 = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i / 2 + i / 3)\n    tri.push(1 + i", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst odd = (n) => {\n  return isOdd(n);\n};\n\nconst even = (n) => {\n  return isEven(n);\n};\n\nconst oddEven = (n) => {\n  return odd(n) && even(n);\n};\n\nconst oddEven2 = (n) => {\n  return odd(n) && odd(n);\n};\n\nconst oddEven3 = (n) => {\n  return odd(n) && odd(n) && even(n);\n};\n\nconst oddEven4 = (n) => {\n  return odd(n) && odd(n) && odd(n);\n};\n\nconst oddEven5 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n);\n};\n\nconst oddEven6 = (n) => {\n  return odd(n) && odd(n) && even(n) && odd(n);\n};\n\nconst oddEven7 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven8 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven9 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven10 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven11 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven12 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven13 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven14 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven15 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven16 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven17 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven18 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven19 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven20 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven21 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven22 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven23 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven24 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven25 = (n) => {\n  return odd(n) && odd(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && even(n) && odd(n);\n};\n\nconst oddEven26 = (n) => {\n  return odd(n) && odd(n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = []\n  const brackets = /\\[|\\]/g\n  const nest = /\\[\\]/g\n  const nestStack = /\\[\\]/g\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStackLength = 0\n  const nestStackIndex = 0\n  const nestStack = []\n  const nestStack", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num * num, 0);\n  return sum;\n};\n\nconst test = {\n  sumSquares([1,2,3]),\n  sumSquares([1,4,9]),\n  sumSquares([1,3,5,7]),\n  sumSquares([1.4,4.2,0]),\n  sumSquares([-2.4,1,1]),\n};\n\nconsole.log(sumSquares(test));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(\" \");\n};\n\n/*\n  Create a functions that returns trueer if the last character of a gives string is a number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber &&!isANumber.includes(\" \");\n};\n\n/*\n  Create a functions that returns trueer if the last character of a gives string is a letter or a number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetterOrANumber = lastChar.match(/[a-zA-Z0-9]/);\n  return isALetterOrANumber &&!isALetterOrANumber.includes(\" \");\n};\n\n/*\n  Create a functions that returns trueer if the last character of a gives string is a letter or a number or a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetterOrANumberOrALetter = lastChar.match(/[a-zA-Z0-9 ]/);\n  return isALetterOrANumberOrALetter &&!isALetterOrANumberOrALetter.includes(\" \");\n};\n\n/*\n  Create a functions that returns trueer if the last character of a gives string is a letter or a number or a parts of a words, and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetterNotWords = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetterOrANumberOrALetterNotWords = lastChar.match(/[a-zA-Z0-9 ]/);\n  return isALetterOrANumberOrALetterNotWords &&!isALetterOrANumberOrALetterNotWords.includes(\" \");\n};\n\n/*\n  Create a functions that returns trueer if the last character of a gives string is a letter or a number or a parts of a words, and is not a parts of a words, and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrALetterNotWords(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetterNotWords(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrALetterNotWords(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrALetterNotWords(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetterNotWordsNotWords = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetterOrANumberOrALetterNotWordsNotWords = lastChar.match(/[a-zA-Z0-9 ]/);\n  return isALetterOrANumberOrALetterNotWordsNotWords &&!isALetterOrANumberOrALetterNotWordsNotWords.includes(\" \");\n};\n\n/*\n  Create a functions that returns trueer if the last character of a gives string is a letter or a number or a parts of a words, and is not a parts of a words, and is not a parts of a words, and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrAL", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let max = -1;\n  let maxIndex = -1;\n  while (i < len) {\n    while (j < len && arr[j] <= arr[i]) {\n      j++;\n    }\n    if (j - i > max) {\n      max = j - i;\n      maxIndex = i;\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\n/*\n  Given a sorted array, find the index of the element that is not less than the given element.\n  If no such element exists then return -1. The given array will not containing duplicate value.\n  Examples:\n  canFind([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([]));\nconsole.log(largestSmallestIntegers([0]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string')", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Evaluate whether the given number n is a perfect number\n  Example\n  isPerfectNumber(12) == true\n  isPerfectNumber(14) == false\n  isPerfectNumber(15) == false\n  isPerfectNumber(16) == true\n  isPerfectNumber(17) == false\n  isPerfectNumber(18) == true\n  isPerfectNumber(19) == false\n  isPerfectNumber(20) == true\n  isPerfectNumber(21) == false\n  isPerfectNumber(22) == true\n  isPerfectNumber(23) == false\n  isPerfectNumber(24) == true\n  isPerfectNumber(25) == false\n  isPerfectNumber(26) == true\n  isPerfectNumber(27) == false\n  isPerfectNumber(28) == true\n  isPerfectNumber(29) == false\n  isPerfectNumber(30) == true\n  isPerfectNumber(31) == false\n  isPerfectNumber(32) == true\n  isPerfectNumber(33) == false\n  isPerfectNumber(34) == true\n  isPerfectNumber(35) == false\n  isPerfectNumber(36) == true\n  isPerfectNumber(37) == false\n  isPerfectNumber(38) == true\n  isPerfectNumber(39) == false\n  isPerfectNumber(40) == true\n  isPerfectNumber(41) == false\n  isPerfectNumber(42) == true\n  isPerfectNumber(43) == false\n  isPerfectNumber(44) == true\n  isPerfectNumber(45) == false\n  isPerfectNumber(46) == true\n  isPerfectNumber(47) == false\n  isPerfectNumber(48) == true\n  isPerfectNumber(49) == false\n  isPerfectNumber(50) == true\n  isPerfectNumber(51) == false\n  isPerfectNumber(52) == true\n  isPerfectNumber(53) == false\n  isPerfectNumber(54) == true\n  isPerfectNumber(55) == false\n  isPerfectNumber(56) == true\n  isPerfectNumber(57) == false\n  isPerfectNumber(58) == true\n  isPerfectNumber(59) == false\n  isPerfectNumber(60) == true\n  isPerfectNumber(61) == false\n  isPerfectNumber(62) == true\n  isPerfectNumber(63) == false\n  isPerfectNumber(64) == true\n  isPerfectNumber(65) == false\n  isPerfectNumber(66) == true\n  isPerfectNumber(67) == false\n  isPerfectNumber(68) == true\n  isPerfectNumber(69) == false\n  isPerfectNumber(70) == true\n  isPerfectNumber(71) == false\n  isPerfectNumber(72) == true\n  isPerfectNumber(73) == false\n  isPerfectNumber(74) == true\n  isPerfectNumber(75) == false\n  isPerfectNumber(76) == true\n  isPerfectNumber(77) == false\n  isPerfectNumber(78) == true\n  isPerfectNumber(79) == false\n  isPerfectNumber(80) == true\n  isPerfectNumber(81) == false\n  isPerfectNumber(82) == true\n  isPerfectNumber(83) == false\n  isPerfectNumber(84) == true\n  isPerfectNumber(85) == false\n  isPerfectNumber(86) == true\n  isPerfectNumber(87) == false\n  isPerfectNumber(88) == true\n  isPerfectNumber(89) == false\n  isPerfectNumber(90) == true\n  isPerfectNumber(91) == false\n  isPerfectNumber(92) == true\n  isPerfectNumber(93) == false\n  isPerfectNumber(94) == true\n  isPerfectNumber(95) == false\n  isPerfectNumber(96) == true\n  isPerfectNumber(97) == false\n  isPerfectNumber(98) == true\n  isPerfectNumber(99) == false\n  isPerfectNumber(100) == true\n  isPerfectNumber(101) == false\n  isPerfectNumber(102) == true\n  isPerfectNumber(103) == false\n  isPerfectNumber(104) == true\n  isPerfectNumber(105) == false\n  isPerfectNumber(106) == true\n  isPerfectNumber(107) == false\n  isPerfectNumber(108) == true\n  isPerfectNumber(109) == false\n  isPerfectNumber(110) == true\n  isPerfectNumber(111) == false\n  isPerfectNumber(112) == true\n  isPerfectNumber(113) == false\n  isPerfectNumber(114) == true\n  isPerfectNumber(115) == false\n  isPerfectNumber(116) == true\n  isPerfectNumber(117) == false\n  isPerfectNumber(118) == true\n  isPerfectNumber(119) == false\n  isPerfectNumber(120) == true\n  isPerfectNumber(121) == false\n  isPerfectNumber(122) == true\n  isPerfectNumber(123) == false\n  isPerfectNumber(124) == true\n  isPerfectNumber(125) == false\n  isPerfectNumber(126) == true\n  isPerfectNumber(127) == false\n  isPerfectNumber(128) == true\n  isPerfectNumber(129) == false\n  isPerfectNumber(130) == true\n  isPerfectNumber(131) == false\n  isPerfectNumber(132) == true\n  isPerfectNumber(133) == false\n  isPerfectNumber(134) == true\n  isPerfectNumber(135) == false\n  isPerfectNumber(136) == true\n  isPerfectNumber(137) == false\n  isPerfectNumber(138) == true\n  isPerfectNumber(139) == false\n  isPerfectNumber(140) == true\n  isPerfectNumber(141) == false\n  isPerfectNumber(142) == true\n  isPerfectNumber(143) == false\n  isPerfectNumber(144) == true\n  isPerfectNumber(145) == false\n  isPerfectNumber(146) == true\n  isPerfectNumber(147) == false\n  isPerfectNumber(148) == true\n  isPerfectNumber(149) == false\n  isPerfectNumber(150) == true\n  isPerfectNumber(151) == false\n  isPerfectNumber(152) == true\n  isPerfectNumber(153) == false\n  isPerfectNumber(", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci2(n - 1) + fibonacci2(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci3(n - 1) + fibonacci3(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci4(n - 1) + fibonacci4(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci5 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci5(n - 1) + fibonacci5(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci6 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci6(n - 1) + fibonacci6(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci7 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci7(n - 1) + fibonacci7(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci8 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci8(n - 1) + fibonacci8(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci9 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci9(n - 1) + fibonacci9(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci10 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci10(n - 1) + fibonacci10(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci11 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci11(n - 1) + fibonacci11(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci12 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci12(n - 1) + fibonacci12(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibonacci number.\n  */\nconst fibonacci13 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci13(n - 1) + fibonacci13(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  fibon", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces11 = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces12 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Gives a string text, replacing all space in", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex7 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex9 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex11 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex13 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex14 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex15 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex16 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex17 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex18 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex19 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex20 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex21 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex22 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex23 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex24 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex25 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex26 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex27 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex28 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex29 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex30 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex31 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex32 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex33 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex34 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex35 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex36 = /^[a-zA-Z][a-zA-Z0-", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += l", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(' ')\n    const newWords = []\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i]\n        const newWord = []\n        for (let j = 0; j < word.length; j++) {\n            const char = word[j]\n            if (isPrime(char)) {\n                newWord.push(char)\n            }\n        }\n        newWords.push(newWord.join(''))\n    }\n    return newWords.join(' ')\n}\n\nconst isPrime = (num) => {\n    let i = 2\n    while (i < num) {\n        if (num % i === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  let xs = x.split('/');\n  let ns = n.split('/');\n  let xn = parseInt(xs[0], 10) / parseInt(xs[1], 10);\n  let nn = parseInt(ns[0], 10) / parseInt(ns[1], 10);\n  return xn === nn;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = sumDigits(a);\n    const bSum = sumDigits(b);\n    if (aSum === bSum) {\n      return a - b;\n    }\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\n/*\n  Returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(12)\n  2\n  >>> sumDigits(123)\n  3\n  >>> sumDigits(1234)\n  4\n  >>> sumDigits(12345)\n  5\n  >>> sumDigits(123456)\n  6\n  >>> sumDigits(1234567)\n  7\n  >>> sumDigits(12345678)\n  8\n  >>> sumDigits(123456789)\n  9\n  >>> sumDigits(1234567890)\n  10\n  */\nconst sumDigits = (num) => {\n  return num.toString(10).split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\n/*\n  Returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(12)\n  2\n  >>> sumDigits(123)\n  3\n  >>> sumDigits(1234)\n  4\n  >>> sumDigits(12345)\n  5\n  >>> sumDigits(123456)\n  6\n  >>> sumDigits(1234567)\n  7\n  >>> sumDigits(12345678)\n  8\n  >>> sumDigits(123456789)\n  9\n  >>> sumDigits(1234567890)\n  10\n  */\nconst sumDigits2 = (num) => {\n  return num.toString(10).split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\n/*\n  Returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(12)\n  2\n  >>> sumDigits(123)\n  3\n  >>> sumDigits(1234)\n  4\n  >>> sumDigits(12345)\n  5\n  >>> sumDigits(123456)\n  6\n  >>> sumDigits(1234567)\n  7\n  >>> sumDigits(12345678)\n  8\n  >>> sumDigits(123456789)\n  9\n  >>> sumDigits(1234567890)\n  10\n  */\nconst sumDigits3 = (num) => {\n  return num.toString(10).split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\n/*\n  Returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(12)\n  2\n  >>> sumDigits(123)\n  3\n  >>> sumDigits(1234)\n  4\n  >>> sumDigits(12345)\n  5\n  >>> sumDigits(123456)\n  6\n  >>> sumDigits(1234567)\n  7\n  >>> sumDigits(12345678)\n  8\n  >>> sumDigits(123456789)\n  9\n  >>> sumDigits(1234567890)\n  10\n  */\nconst sumDigits4 = (num) => {\n  return num.toString(10).split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\n/*\n  Returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(12)\n  2\n  >>> sumDigits(123)\n  3\n  >>> sumDigits(1234)\n  4\n  >>> sumDigits(12345)\n  5\n  >>> sumDigits(123456)\n  6\n  >>> sumDigits(1234567)\n  7\n  >>> sumDigits(12345678)\n  8\n  >>> sumDigits(123456789)\n  9\n  >>> sumDigits(1234567890)\n  10\n  */\nconst sumDigits5 = (num) => {\n  return num.toString(10).split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\n/*\n  Returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(12)\n  2\n  >>> sumDigits(123)\n  3\n  >>> sumDigits(1234)\n  4\n  >>> sumDigits(12345)\n  5\n  >>> sumDigits(123456)\n  6\n  >>> sumDigits(1234567)\n  7\n  >>> sumDigits(12345678)\n  8\n  >>> sumDigits(123456789)\n  9\n  >>> sumDigits(1234567890)\n  10\n  */\nconst sumDigits6 = (num) => {\n  return num.toString(10).split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\n/*\n  Returns the sum of the digits of the given number.\n  For example:\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(12)\n  2\n  >>> sumDigits(123)\n  3\n  >>> sumDigits(1234)\n  4\n  >>> sumDigits(12345)\n  5\n  >>> sumDigits(123456)\n  6\n  >>> sumDigits(1234567)\n  7\n  >>> sumDigits(12345678)\n  8\n  >>> sumDig", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = getOrbit(planet1);\n  let planet2Orbit = getOrbit(planet2);\n  let planet1OrbitLength = planet1Orbit.length;\n  let planet2OrbitLength = planet2Orbit.length;\n  let planet1OrbitIndex = 0;\n  let planet2OrbitIndex = 0;\n  let planet1OrbitIndexEnd = planet1OrbitIndex + planet1OrbitLength;\n  let planet2OrbitIndexEnd = planet2OrbitIndex + planet2OrbitLength;\n  let planet1OrbitIndexEndOrbit = planet1OrbitIndexEnd + 1;\n  let planet2OrbitIndexEndOrbit = planet2OrbitIndexEnd + 1;\n  let planet1OrbitIndexEndOrbitOrbit = planet1OrbitIndexEndOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbit = planet2OrbitIndexEndOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit + 1;\n  let planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitIndexEndOrbitOrbitOrbitOrbitOrbit", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_11 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_12 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-')\n  '0-1-2-3-4-5'\n  >>> stringSequence(5, '-', '.')\n  '0.1.2.3.4.5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar2}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar2}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='', delimiterChar3 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar3}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='', delimiterChar3 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar3}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='', delimiterChar3 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar3}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='', delimiterChar3 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar3}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='', delimiterChar3 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar3}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n, delimiter = '-', delimiterChar = '.', delimiterChar2 ='', delimiterChar3 ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiterChar3}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, '-', '.','','')\n  '0. 1. 2. 3. 4. 5'\n  */\nconst stringSequence = (n", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOr", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >= 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n};\n\n/* Gives a list of numbers, return the sum of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSum([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6 doubleTheSum([-1, -2, 0]) == 0 doubleTheSum([9, -2]) == 9 doubleTheSum([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    return sum;\n};\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSquareSum([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheSquareSum([-1, -2, 0]) == 0 doubleTheSquareSum([9, -2]) == 81 doubleTheSquareSum([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSquareSum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n};\n\n/* Gives a list of numbers, return the product of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheProduct([1, 3, 2, 0]) == 1 * 3 * 2 * 0 = 0 doubleTheProduct([-1, -2, 0]) == 0 doubleTheProduct([9, -2]) == 9 * -2 = -18 doubleTheProduct([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheProduct = (lst) => {\n    let product = 1;\n    for (let i = 0; i < lst.length; i++) {\n        product *= lst[i];\n    }\n    return product;\n};\n\n/* Gives a list of numbers, return the difference of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 - 3 - 2 - 0 = -2 doubleTheDifference([-1, -2, 0]) == -2 doubleTheDifference([9, -2]) == 9 - 2 = 7 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i] - i;\n    }\n    return sum;\n};\n\n/* Gives a list of numbers, return the sum of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSum([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6 doubleTheSum([-1, -2, 0]) == 0 doubleTheSum([9, -2]) == 9 doubleTheSum([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    return sum;\n};\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSquareSum([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheSquareSum([-1, -2, 0]) == 0 doubleTheSquareSum([9, -2]) == 81 doubleTheSquareSum([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSquareSum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n};\n\n/* Gives a list of numbers, return the product of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheProduct([1, 3, 2, 0]) == 1 * 3 * 2 * 0 = 0 doubleTheProduct([-1, -2, 0]) == 0 doubleTheProduct([9, -2]) == 9 * -2 = -18 doubleTheProduct([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheProduct = (lst) => {\n    let product = 1;\n    for (let i = 0; i < lst.length; i++) {\n        product *= lst[i];\n    }\n    return product;\n};\n\n/* Gives a list of numbers, return the difference of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 - 3 - 2 - 0 = -2 doubleTheDifference([-1, -2, 0]) == -2 doubleTheDifference([9, -2]) == 9 - 2 = 7 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i] - i;\n    }\n    return sum;\n};\n\n/* Gives a list of numbers, return the sum of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleThe", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = game.map((item, index) => {\n    return item - guess[index];\n  });\n  let difference = score.map((item, index) => {\n    return Math.abs(item);\n  });\n  return difference;\n};\n\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_split = class_name.split('.');\n  const class_name_cap = class_name_split.map(x => x.charAt(0).toUpperCase() + x.slice(1));\n  const class_name_cap_length = class_name_cap.length;\n  const class_name_cap_strength = class_name_cap.reduce((a, b, i) => {\n    return a + (b.length - class_name_cap[i - 1].length);\n  }, 0);\n  const class_name_cap_strength_extensions = extensions.reduce((a, b, i) => {\n    return a + (b.length - class_name_cap[i].length);\n  }, 0);\n  const class_name_cap_strength_extensions_strength = class_name_cap_strength_extensions - class_name_cap_strength;\n  const strongest_extension = extensions.find(x => class_name_cap_strength_extensions_strength === x.length);\n  return class_name_cap[class_name_cap_length - 1] + '.' + strongest_extension;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n    let a_ = a.split(\"\").reverse().join(\"\");\n    let b_ = b.split(\"\").reverse().join(\"\");\n    let a_len = a_.length;\n    let b_len = b_.length;\n    let i = 0;\n    let j = 0;\n    while (i < a_len && j < b_len) {\n        if (a_[i] === b_[j]) {\n            i++;\n            j++;\n        } else if (a_[i] === b_[j] + a_[i + 1]) {\n            i += 2;\n            j++;\n        } else if (a_[i] === a_[i + 1] + b_[j]) {\n            i += 2;\n            j++;\n        } else if (a_[i] === a_[i + 1] + b_[j] + a_[i + 2]) {\n            i += 3;\n            j++;\n        } else if (a_[i] === a_[i + 1] + b_[j] + a_[i + 2] + a_[i + 3]) {\n            i += 4;\n            j++;\n        } else if (a_[i] === a_[i + 1] + b_[j] + a_[i + 2] + a_[i + 3] + a_[i + 4]) {\n            i += 5;\n            j++;\n        } else if (a_[i] === a_[i + 1] + b_[j] + a_[i + 2] + a_[i + 3] + a_[i + 4] + a_[i + 5]) {\n            i += 6;\n            j++;\n        } else if (a_[i] === a_[i + 1] + b_[j] + a_[i + 2] + a_[i + 3] + a_[i + 4] + a_[i + 5] + a_[i + 6]) {\n            i += 7;\n            j++;\n        } else if (a_[i] === a_[i + 1] + b_[j] + a_[i + 2] + a_[i + 3] + a_[i + 4] + a_[i + 5] + a_[i + 6] + a_[i + 7]) {\n            i += 8;\n            j++;\n        } else {\n            return false;\n        }\n    }\n    return i === a_len && j === b_len;\n};\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"));\nconsole.log(cycpatternCheck(\"hello\",\"ell\"));\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"));\nconsole.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString();\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'x';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in upper case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'C';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n      number--;\n    }\n    i++;\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanMixed = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'C';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n      number--;\n    }\n    i++;\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lower case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanLower = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'c';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in upper case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanUpper = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'C';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n      number--;\n    }\n    i++;\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanMixed = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'C';\n      ", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const ac = Math.abs(a - c);\n  const bc = Math.abs(b - c);\n  return (ab + ac + bc) === Math.max(ab, Math.max(ac, bc));\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  const ab = Math.abs(a - b", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Set(words)\n  const max = words[0]\n  for (let i = 1; i < words.length; i++) {\n    if (unique.size < words[i].length) {\n      unique.add(words[i])\n      max = words[i]\n    }\n  }\n  return max\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with minimum number of unique character. If multiple strings had minimum number of unique character, return the one which comes first in lexicographical order. findMin([\"name\", \"of\", \"string\"]) === \"name\" findMin([\"name\", \"enam\", \"games\"]) === \"name\" findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\" */ const findMin = (words) => {\n  const unique = new Set(words)\n  const min = words[0]\n  for (let i = 1; i < words.length; i++) {\n    if (unique.size > words[i].length) {\n      unique.add(words[i])\n      min = words[i]\n    }\n  }\n  return min\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"name\" findMax([\"name\", \"enam\", \"games\"]) === \"name\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\" */ const findMaxLength = (words) => {\n  const unique = new Set(words)\n  const max = words[0].length\n  for (let i = 1; i < words.length; i++) {\n    if (unique.size < words[i].length) {\n      unique.add(words[i])\n      max = words[i].length\n    }\n  }\n  return max\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with minimum number of unique character. If multiple strings had minimum number of unique character, return the one which comes first in lexicographical order. findMin([\"name\", \"of\", \"string\"]) === \"name\" findMin([\"name\", \"enam\", \"games\"]) === \"name\" findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\" */ const findMinLength = (words) => {\n  const unique = new Set(words)\n  const min = words[0].length\n  for (let i = 1; i < words.length; i++) {\n    if (unique.size > words[i].length) {\n      unique.add(words[i])\n      min = words[i].length\n    }\n  }\n  return min\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"string\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"string\" */ const findMaxLengthUnique = (words) => {\n  const unique = new Set(words)\n  const max = words[0].length\n  for (let i = 1; i < words.length; i++) {\n    if (unique.size > words[i].length) {\n      unique.add(words[i])\n      max = words[i].length\n    }\n  }\n  return max\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with minimum number of unique character. If multiple strings had minimum number of unique character, return the one which comes first in lexicographical order. findMin([\"name\", \"of\", \"string\"]) === \"name\" findMin([\"name\", \"enam\", \"games\"]) === \"name\" findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\" */ const findMinLengthUnique = (words) => {\n  const unique = new Set(words)\n  const min = words[0].length\n  for (let i = 1; i < words.length; i++) {\n    if (unique.size < words[i].length) {\n      unique.add(words[i])\n      min = words[i].length\n    }\n  }\n  return min\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"string\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\" */ const findMaxLengthUnique = (words) => {\n  const unique = new Set(words)\n  const max = words[0].length\n  for (let i = 1; i < words.length; i++) {\n    if (unique.size > words[i].length) {\n      unique.add(words[i])\n      max = words[i].length\n    }\n  }\n  return max\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with minimum number of unique character. If multiple strings had minimum number of unique character, return the one which comes first in lexicographical order. findMin([\"name\", \"of\", \"string\"]) === \"name\" findMin([\"name\", \"enam\", \"games\"]) === \"name\" findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\" */ const findMinLengthUnique = (words) => {\n  const unique = new Set(words)\n  const min = words[0].length\n  for (", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining < need) {\n    return [need - remaining, remaining];\n  }\n  return [number, remaining];\n}\n\nconst number = 5;\nconst need = 6;\nconst remaining = 10;\n\nconst result = eat(number, need, remaining);\n\nconsole.log(`The number of eaten carrots is ${result[0]} and the number of remaining carrots is ${result[1]}`);\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless of case) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  const charArray = string.split('')\n  const charSet = new Set(charArray)\n  return charSet.size\n}\n\n/* Gives a string, found out how many distincter character (regardless", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue + operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue * operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue - operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue / operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue ** operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue % operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue + operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue - operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue * operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue % operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra11 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue ** operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra12 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    const operatorResult = operatorValue + operandValue\n    result.push(operatorResult)\n  }\n  return result\n}\n\nconst doAlgebra13 = (operator, oper", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == 'e5a7f5d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3c0a9f4c9f5c9f6d9b9a8b7f0a8f3", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  const", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(8);\n    } else {\n      beats.push(16);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats 'o o' - two whole notes, last two beat 'o|o' - two halves notes, last one beats 'o|o'\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(8);\n    } else if (notes[i] === 'o o') {\n      beats.push(16);\n    } else {\n      beats.push(32);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats 'o o' - two whole notes, last two beat 'o|o' - two halves notes, last one beats 'o|o'\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(8);\n    } else if (notes[i] === 'o o') {\n      beats.push(16);\n    } else {\n      beats.push(32);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats 'o o' - two whole notes, last two beat 'o|o' - two halves notes, last one beats 'o|o'\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(8);\n    } else if (notes[i] === 'o o') {\n      beats.push(16);\n    } else {\n      beats.push(32);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this functions is a string represents musical note in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats 'o o' - two whole notes, last two beat 'o|o' - two halves notes, last one beats 'o|o'\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWords = (words) => {\n  const wordsArray = words.split(' ')\n  const sortedArray = wordsArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortSentences = (sentences) => {\n  const sentencesArray = sentences.split(' ')\n  const sortedArray = sentencesArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsAndSentences = (wordsAndSentences) => {\n  const wordsAndSentencesArray = wordsAndSentences.split(' ')\n  const sortedArray = wordsAndSentencesArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsAndSentencesAndNumbers = (wordsAndSentencesAndNumbers) => {\n  const wordsAndSentencesAndNumbersArray = wordsAndSentencesAndNumbers.split(' ')\n  const sortedArray = wordsAndSentencesAndNumbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsAndSentencesAndNumbersAndWords = (wordsAndSentencesAndNumbersAndWords) => {\n  const wordsAndSentencesAndNumbersAndWordsArray = wordsAndSentencesAndNumbersAndWords.split(' ')\n  const sortedArray = wordsAndSentencesAndNumbersAndWordsArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsAndSentencesAndNumbersAndWordsAndSentences = (wordsAndSentencesAndNumbersAndWordsAndSentences) => {\n  const wordsAndSentencesAndNumbersAndWordsAndSentencesArray = wordsAndSentencesAndNumbersAndWordsAndSentences.split(' ')\n  const sortedArray = wordsAndSentencesAndNumbersAndWordsAndSentencesArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbers = (wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbers) => {\n  const wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersArray = wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbers.split(' ')\n  const sortedArray = wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWords = (wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWords) => {\n  const wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWordsArray = wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWords.split(' ')\n  const sortedArray = wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWordsArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWordsAndSentences = (wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWordsAndSentences) => {\n  const wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWordsAndSentencesArray = wordsAndSentencesAndNumbersAndWordsAndSentencesAndNumbersAndWordsAndSent", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const parts = number.toString().split('.');\n  const integer = parts[0];\n  const decimals = parts[1];\n  return integer + '.' + decimals;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const parts = number.toString().split('.');\n  const integer = parts[0];\n  return integer;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal2 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal3 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal4 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal5 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal6 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal7 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal8 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal9 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal10 = (number) => {\n  const parts = number.toString().split('.');\n  const decimals = parts[1];\n  return number.toString().split('.')[1];\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal11 = (number) => {\n  const parts = number.toString().split('.'", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = {\n    smaller: null,\n    larger: null,\n    distance: null,\n  };\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const distance = Math.abs(numbers[i] - numbers[j]);\n      if (closest.distance === null || distance < closest.distance) {\n        closest.smaller = numbers[i];\n        closest.larger = numbers[j];\n        closest.distance = distance;\n      }\n    }\n  }\n\n  return closest;\n};\n\nexport default findClosestElements;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit9 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for strings\n  * @example\n  * >>> filterStrings(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] ==='string') {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for booleans\n  * @example\n  * >>> filterBooleans(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filterBooleans = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'boolean') {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for objects\n  * @example\n  * >>> filterObjects(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filterObjects = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'object') {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for lists\n  * @example\n  * >>> filterLists(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterLists([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filterLists = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (Array.isArray(values[i])) {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for dictionaries\n  * @example\n  * >>> filterDictionaries(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filterDictionaries = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'object') {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for numbers\n  * @example\n  * >>> filterNumbers(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filterNumbers = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for strings\n  * @example\n  * >>> filterStrings(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] ==='string') {\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @param {Array} values\n  * @returns {Array}\n  * @description\n  * Filter gives list of any python values only for booleans\n  * @example\n  * >>> filterBooleans(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filterBooleans([1, 2, 3,", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return a copy of given string\n  >>> strcopy('abc')\n  'abc'\n  >>> strcopy('abc')\n  'abc'\n  */\nconst strcopy = (string) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      if (divisor > largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(17)\n  7\n  >>> largestDivisor(18)\n  3\n  >>> largestDivisor(19)\n  11\n  >>> largestDivisor(20)\n  5\n  >>> largestDivisor(21)\n  7\n  >>> largestDivisor(22)\n  11\n  >>> largestDivisor(23)\n  13\n  >>> largestDivisor(24)\n  17\n  >>> largestDivisor(25)\n  19\n  >>> largestDivisor(26)\n  23\n  >>> largestDivisor(27)\n  29\n  >>> largestDivisor(28)\n  31\n  >>> largestDivisor(29)\n  37\n  >>> largestDivisor(30)\n  41\n  >>> largestDivisor(31)\n  43\n  >>> largestDivisor(32)\n  47\n  >>> largestDivisor(33)\n  53\n  >>> largestDivisor(34)\n  59\n  >>> largestDivisor(35)\n  67\n  >>> largestDivisor(36)\n  71\n  >>> largestDivisor(37)\n  79\n  >>> largestDivisor(38)\n  83\n  >>> largestDivisor(39)\n  89\n  >>> largestDivisor(40)\n  97\n  >>> largestDivisor(41)\n  101\n  >>> largestDivisor(42)\n  107\n  >>> largestDivisor(43)\n  113\n  >>> largestDivisor(44)\n  121\n  >>> largestDivisor(45)\n  129\n  >>> largestDivisor(46)\n  137\n  >>> largestDivisor(47)\n  145\n  >>> largestDivisor(48)\n  153\n  >>> largestDivisor(49)\n  161\n  >>> largestDivisor(50)\n  169\n  >>> largestDivisor(51)\n  177\n  >>> largestDivisor(52)\n  185\n  >>> largestDivisor(53)\n  193\n  >>> largestDivisor(54)\n  201\n  >>> largestDivisor(55)\n  209\n  >>> largestDivisor(56)\n  217\n  >>> largestDivisor(57)\n  225\n  >>> largestDivisor(58)\n  233\n  >>> largestDivisor(59)\n  241\n  >>> largestDivisor(60)\n  249\n  >>> largestDivisor(61)\n  257\n  >>> largestDivisor(62)\n  265\n  >>> largestDivisor(63)\n  273\n  >>> largestDivisor(64)\n  281\n  >>> largestDivisor(65)\n  289\n  >>> largestDivisor(66)\n  297\n  >>> largestDivisor(67)\n  305\n  >>> largestDivisor(68)\n  313\n  >>> largestDivisor(69)\n  321\n  >>> largestDivisor(70)\n  329\n  >>> largestDivisor(71)\n  337\n  >>> largestDivisor(72)\n  345\n  >>> largestDivisor(73)\n  353\n  >>> largestDivisor(74)\n  361\n  >>> largestDivisor(75)\n  369\n  >>> largestDivisor(76)\n  377\n  >>> largestDivisor(77)\n  385\n  >>> largestDivisor(78)\n  393\n  >>> largestDivisor(79)\n  401\n  >>> largestDivisor(80)\n  409\n  >>> largestDivisor(81)\n  417\n  >>> largestDivisor(82)\n  425\n  >>> largestDivisor(83)\n  433\n  >>> largestDivisor(84)\n  441\n  >>> largestDivisor(85)\n  449\n  >>> largestDivisor(86)\n  457\n  >>> largestDivisor(87)\n  465\n  >>> largestDivisor(88)\n  473\n  >>> largestDivisor(89)\n  481\n  >>> largestDivisor(90)\n  489\n  >>> largestDivisor(91)\n  497\n  >>> largestDivisor(92)\n  505\n  >>> largestDivisor(93)\n  513\n  >>> largestDivisor(94)\n  521\n  >>> largestDivisor(95)\n  529\n  >>> largestDivisor(96)\n  537\n  >>> largestDivisor(97)\n  545\n  >>> largestDivisor(98)\n  553\n  >>> largestDivisor(99)\n  561\n  >>> largestDivisor(100)\n  569\n  >>> largestDivisor(101)\n  577\n  >>> largestDivisor(102)\n  585\n  >>> largestDivisor(103)\n  593\n  >>> largestDivisor(104)\n  601\n  >>> largestDivisor(105)\n  609\n  >>> largestDivisor(106)\n  617\n  >>> largestDivisor(107)\n  625\n  >>> largestDivisor(108)\n  633\n  >>> largestDivisor(109)\n  641\n  >>> largestDivisor(110)\n  649\n  >>> largestDivisor(111)\n  657\n  >>> largestDivisor(112)\n  665\n  >>> largestDivisor(113)\n  673\n  >>> largestDivisor(114)\n  681\n  >>> largestDivisor(115)\n  689\n  >>> largestDivisor(116)\n  697\n  >>> largestDivisor(117)\n  705\n  >>> largestDivisor(118)\n  713\n  >>> largestDivisor(119)\n  721\n  >>> largestDivisor(120)\n  729\n  >>> largestDivisor(121)\n  737\n  >>> largestDivisor", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    if (n % 5 === 0) return false\n    if (n % 7 === 0) return false\n    if (n % 11 === 0) return false\n    if (n % 13 === 0) return false\n    if (n % 17 === 0) return false\n    if (n % 19 === 0) return false\n    if (n % 23 === 0) return false\n    if (n % 29 === 0) return false\n    if (n % 31 === 0) return false\n    if (n % 37 === 0) return false\n    if (n % 41 === 0) return false\n    if (n % 43 === 0) return false\n    if (n % 47 === 0) return false\n    if (n % 53 === 0) return false\n    if (n % 59 === 0) return false\n    if (n % 61 === 0) return false\n    if (n % 67 === 0) return false\n    if (n % 71 === 0) return false\n    if (n % 73 === 0) return false\n    if (n % 79 === 0) return false\n    if (n % 83 === 0) return false\n    if (n % 89 === 0) return false\n    if (n % 97 === 0) return false\n    if (n % 101 === 0) return false\n    if (n % 103 === 0) return false\n    if (n % 107 === 0) return false\n    if (n % 109 === 0) return false\n    if (n % 113 === 0) return false\n    if (n % 127 === 0) return false\n    if (n % 131 === 0) return false\n    if (n % 137 === 0) return false\n    if (n % 139 === 0) return false\n    if (n % 149 === 0) return false\n    if (n % 151 === 0) return false\n    if (n % 157 === 0) return false\n    if (n % 163 === 0) return false\n    if (n % 167 === 0) return false\n    if (n % 173 === 0) return false\n    if (n % 179 === 0) return false\n    if (n % 181 === 0) return false\n    if (n % 191 === 0) return false\n    if (n % 193 === 0) return false\n    if (n % 197 === 0) return false\n    if (n % 199 === 0) return false\n    if (n % 211 === 0) return false\n    if (n % 223 === 0) return false\n    if (n % 227 === 0) return false\n    if (n % 229 === 0) return false\n    if (n % 233 === 0) return false\n    if (n % 239 === 0) return false\n    if (n % 241 === 0) return false\n    if (n % 251 === 0) return false\n    if (n % 257 === 0) return false\n    if (n % 263 === 0) return false\n    if (n % 269 === 0) return false\n    if (n % 271 === 0) return false\n    if (n % 277 === 0) return false\n    if (n % 281 === 0) return false\n    if (n % 283 === 0) return false\n    if (n % 293 === 0) return false\n    if (n % 307 === 0) return false\n    if (n % 311 === 0) return false\n    if (n % 313 === 0) return false\n    if (n % 317 === 0) return false\n    if (n % 331 === 0) return false\n    if (n % 337 === 0) return false\n    if (n % 347 === 0) return false\n    if (n % 349 === 0) return false\n    if (n % 353 === 0) return false\n    if (n % 359 === 0) return false\n    if (n % 367 === 0) return false\n    if (n % 373 === 0) return false\n    if (n % 379 === 0) return false\n    if (n % 383 === 0) return false\n    if (n % 389 === 0) return false\n    if (n % 397 === 0) return false\n    if (n % 401 === 0) return false\n    if (n % 409 === 0) return false\n    if (n % 419 === 0) return false\n    if (n % 421 === 0) return false\n    if (n % 431 === 0) return false\n    if (n % 433 === 0) return false\n    if (n % 439 === 0) return false\n    if (n % 443 === 0) return false\n    if (n % 447 === 0) return false\n    if (n % 457 === 0) return false\n    if (n % 461 === 0) return false\n    if (n % 463 === 0) return false\n    if (n % 467 === 0) return false\n    if (n % 479 === 0) return false\n    if (n % 487 === 0) return false\n    if (n % 491 === 0) return false\n    if (n % 499 === 0) return false\n    if (n % 503 === 0) return false\n    if (n % 509 === 0) return false\n    if (n % 521 === 0) return false\n    if (n % 523 === 0) return false\n    if (n % 541 === 0) return false\n    if (n % 547 === 0) return false\n    if (n % 557 === 0) return false\n    if (n % 563 === 0) return false\n    if (n % 569 === 0) return false\n    if (n % 571 === 0) return false\n    if (n % 577 === 0) return false\n    if (n % 587 === 0) return false\n    if (n % 599 === 0) return false\n    if (n % 601 === 0) return false\n    if (n % 607 === 0) return false\n    if (n % 613 === 0) return false\n    if (n % 617 === 0) return false\n    if (n % 619 === 0) return false\n    if (n", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return result;\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOut = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsLength = operations.length;\n  let currentBalance = 0;\n  let previousBalance = 0;\n  let currentOperation = 0;\n  let previousOperation = 0;\n  let currentOperationIndex = 0;\n  let previousOperationIndex = 0;\n  let currentOperationIsNegative = false;\n  let previousOperationIsNegative = false;\n  let currentOperationIsZero = false;\n  let previousOperationIsZero = false;\n  let currentOperationIsNegativeOrZero = false;\n  let previousOperationIsNegativeOrZero = false;\n  let currentOperationIsPositive = false;\n  let previousOperationIsPositive = false;\n  let currentOperationIsPositiveOrZero = false;\n  let previousOperationIsPositiveOrZero = false;\n  let currentOperationIsPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZero = false;\n  let previousOperationIsPositiveOrNegativeOrZero = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositive = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositive = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZero = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZero = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZero = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZero = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositive = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositive = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let currentOperationIsPositiveOrNegativeOrZeroOrPositiveOrNegativeOrZeroOrPositiveOrNegative = false;\n  let previousOperationIsPositiveOrNegativeOrZeroOrPositiveOrNeg", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*\n  >>> getEven([2, 4, 6, 8, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  3\n  >>> divisors(13441)\n  30\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  3\n  >>> divisors(13441)\n  30\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  3\n  >>> divisors(13441)\n  30\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  3\n  >>> divisors(13441)\n  30\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  3\n  >>> divisors(13441)\n  30\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  3\n  >>> divisors(13441)\n  30\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  3\n  >>> divisors(13441)\n  30\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors7 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of n.\n  >>> divisors(6)\n  2\n  >>> divisors(101)\n  20\n  >>> div", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let z = 0;\n  let m = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x1 = 0;\n  let x2 = 0;\n  let x3 = 0;\n  let x4 = 0;\n  let x5 = 0;\n  let x6 = 0;\n  let x7 = 0;\n  let x8 = 0;\n  let x9 = 0;\n  let x10 = 0;\n  let x11 = 0;\n  let x12 = 0;\n  let x13 = 0;\n  let x14 = 0;\n  let x15 = 0;\n  let x16 = 0;\n  let x17 = 0;\n  let x18 = 0;\n  let x19 = 0;\n  let x20 = 0;\n  let x21 = 0;\n  let x22 = 0;\n  let x23 = 0;\n  let x24 = 0;\n  let x25 = 0;\n  let x26 = 0;\n  let x27 = 0;\n  let x28 = 0;\n  let x29 = 0;\n  let x30 = 0;\n  let x31 = 0;\n  let x32 = 0;\n  let x33 = 0;\n  let x34 = 0;\n  let x35 = 0;\n  let x36 = 0;\n  let x37 = 0;\n  let x38 = 0;\n  let x39 = 0;\n  let x40 = 0;\n  let x41 = 0;\n  let x42 = 0;\n  let x43 = 0;\n  let x44 = 0;\n  let x45 = 0;\n  let x46 = 0;\n  let x47 = 0;\n  let x48 = 0;\n  let x49 = 0;\n  let x50 = 0;\n  let x51 = 0;\n  let x52 = 0;\n  let x53 = 0;\n  let x54 = 0;\n  let x55 = 0;\n  let x56 = 0;\n  let x57 = 0;\n  let x58 = 0;\n  let x59 = 0;\n  let x60 = 0;\n  let x61 = 0;\n  let x62 = 0;\n  let x63 = 0;\n  let x64 = 0;\n  let x65 = 0;\n  let x66 = 0;\n  let x67 = 0;\n  let x68 = 0;\n  let x69 = 0;\n  let x70 = 0;\n  let x71 = 0;\n  let x72 = 0;\n  let x73 = 0;\n  let x74 = 0;\n  let x75 = 0;\n  let x76 = 0;\n  let x77 = 0;\n  let x78 = 0;\n  let x79 = 0;\n  let x80 = 0;\n  let x81 = 0;\n  let x82 = 0;\n  let x83 = 0;\n  let x84 = 0;\n  let x85 = 0;\n  let x86 = 0;\n  let x87 = 0;\n  let x88 = 0;\n  let x89 = 0;\n  let x90 = 0;\n  let x91 = 0;\n  let x92 = 0;\n  let x93 = 0;\n  let x94 = 0;\n  let x95 = 0;\n  let x96 = 0;\n  let x97 = 0;\n  let x98 = 0;\n  let x99 = 0;\n  let x100 = 0;\n  let x101 = 0;\n  let x102 = 0;\n  let x103 = 0;\n  let x104 = 0;\n  let x105 = 0;\n  let x106 = 0;\n  let x107 = 0;\n  let x108 = 0;\n  let x109 = 0;\n  let x110 = 0;\n  let x111 = 0;\n  let x112 = 0;\n  let x113 = 0;\n  let x114 = 0;\n  let x115 = 0;\n  let x116 = 0;\n  let x117 = 0;\n  let x118 = 0;\n  let x119 = 0;\n  let x120 = 0;\n  let x121 = 0;\n  let x122 = 0;\n  let x123 = 0;\n  let x124 = 0;\n  let x125 = 0;\n  let x126 = 0;\n  let x127 = 0;\n  let x128 = 0;\n  let x129 = 0;\n  let x130 = 0;\n  let x131 = 0;\n  let x132 = 0;\n  let x133 = 0;\n  let x134 = 0;\n  let x135 = 0;\n  let x136 = 0;\n  let x137 = 0;\n  let x138 = 0;\n  let x139 = 0;\n  let x140 = 0;\n  let x141 = 0;\n  let x142 = 0;\n  let x143 = 0;\n  let x144 = 0;\n  let x145 = 0;\n  let x146 = 0;\n  let x147 = 0;\n  let x148 = 0;\n", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lCopy = l.slice();\n  const lCopySorted = lCopy.sort();\n  const lCopySortedLength = lCopySorted.length;\n  const lCopySortedLengthDivThree = lCopySortedLength / 3;\n  const lCopySortedLengthRemainder = lCopySortedLength % 3;\n  const lCopySortedLengthDivThreeRemainder = lCopySortedLengthDivThree % 3;\n  const lCopySortedLengthDivThreeRemainderRemainder = lCopySortedLengthDivThreeRemainder % 3;\n  const lCopySortedLengthRemainderRemainderRemainder = lCopySortedLengthRemainderRemainder % 3;\n  const lCopySortedLengthRemainderRemainderRemainderRemainder = lCopySortedLengthRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthRemainderRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthRemainderRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemain", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return the first element of a list\n  >>> first([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst first = (l) => {\n  return l[0];\n};\n\n/*Return the last element of a list\n  >>> last([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst last = (l) => {\n  return l[l.length - 1];\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  2\n  */\nconst indexOf = (l, value) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, 2)\n  2\n  */\nconst indexOf2 = (l, value, start) => {\n  for (let i = start; i < l.length; i++) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, 1)\n  2\n  */\nconst indexOf3 = (l, value, start) => {\n  for (let i = start; i < l.length; i++) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -1)\n  2\n  */\nconst indexOf4 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -2)\n  2\n  */\nconst indexOf5 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -3)\n  2\n  */\nconst indexOf6 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -4)\n  2\n  */\nconst indexOf7 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -5)\n  2\n  */\nconst indexOf8 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -6)\n  2\n  */\nconst indexOf9 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -7)\n  2\n  */\nconst indexOf10 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -8)\n  2\n  */\nconst indexOf11 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Return the index of a value in a list\n  >>> indexOf([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, -9)\n  2\n  */\nconst indexOf12 = (l, value, start) => {\n  for (let i = start; i >= 0; i--) {\n    if (l[i", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*\n  Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst median = (l) => {\n  let sorted = l.slice().sort();\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*\n  Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*\n  Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*\n  Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*\n  Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*\n  Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*\n  Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  ", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nexport default fizzBuzz;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const lEven = l.slice(0, l.length / 2);\n  const lOdd = l.slice(l.length / 2);\n  const lEvenSorted = sort(lEven);\n  const lOddSorted = sort(lOdd);\n  return lEvenSorted.concat(lOddSorted);\n};\n\nmodule.exports = sortEven;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic4 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic5 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1] + group[2] + group[3]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic6 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1] + group[2] + group[3] + group[4]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic7 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1] + group[2] + group[3] + group[4] + group[5]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic8 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(2) + group[0] + group[1] + group[2] + group[3] + group[4] + group[5] + group[6]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic9 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, $ = 1, _ = 1, aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, ww = 1, xx = 1, yy = 1, zz = 1, Aa = 1, Bb = 1, Cc = 1, Dd = 1, Ee = 1, Ff = 1, Gg = 1, Hh = 1, Ii = 1, Jj = 1, Kk = 1, Ll = 1, Mm = 1, Nn = 1, Oo = 1, Pp = 1, Qq = 1, Rr = 1, Ss = 1, Tt = 1, Uu = 1, Vv = 1, Ww = 1, Xx = 1, Yy = 1, Zz = 1, $A = 1, $B = 1, $C = 1, $D = 1, $E = 1, $F = 1, $G = 1, $H = 1, $I = 1, $J = 1, $K = 1, $L = 1, $M = 1, $N = 1, $O = 1, $P = 1, $Q = 1, $R = 1, $S = 1, $T = 1, $U = 1, $V = 1, $W = 1, $X = 1, $Y = 1, $Z = 1, $0 = 1, $1 = 1, $2 = 1, $3 = 1, $4 = 1, $5 = 1, $6 = 1, $7 = 1, $8 = 1, $9 = 1, $10 = 1, $11 = 1, $12 = 1, $13 = 1, $14 = 1, $15 = 1, $16 = 1, $17 = 1, $18 = 1, $19 = 1, $20 = 1, $21 = 1, $22 = 1, $23 = 1, $24 = 1, $25 = 1, $26 = 1, $27 = 1, $28 = 1, $29 = 1, $30 = 1, $31 = 1, $32 = 1, $33 = 1, $34 = 1, $35 = 1, $36 = 1, $37 = 1, $38 = 1, $39 = 1, $40 = 1, $41 = 1, $42 = 1, $43 = 1, $44 = 1, $45 = 1, $46 = 1, $47 = 1, $48 = 1, $49 = 1, $50 = 1, $51 = 1, $52 = 1, $53 = 1, $54 = 1, $55 = 1, $56 = 1, $57 = 1, $58 = 1, $59 = 1, $60 = 1, $61 = 1, $62 = 1, $63 = 1, $64 = 1, $65 = 1, $66 = 1, $67 = 1, $68 = 1, $69 = 1, $70 = 1, $71 = 1, $72 = 1, $73 = 1, $74 = 1, $75 = 1, $76 = 1, $77 = 1, $78 = 1, $79 = 1, $80 = 1, $81 = 1, $82 = 1, $83 = 1, $84 = 1, $85 = 1, $86 = 1, $87 = 1, $88 = 1, $89 = 1, $90 = 1, $91 = 1, $92 = 1, $93 = 1, $94 = 1, $95 = 1, $96 = 1, $97 = 1, $98 = 1, $99 = 1, $100 = 1, $101 = 1, $102 = 1, $103 = 1, $104 = 1, $105 = 1, $106 = 1, $107 = 1, $108 = 1, $109 = 1, $110 = 1, $111 = 1, $112 = 1, $113 = 1, $114 = 1, $115 = 1, $116 = 1, $117 = 1, $118 = 1, $119 = 1, $120 = 1, $121 = 1, $122 = 1, $123 = 1, $124 = 1, $125 = 1, $126 = 1, $127 = 1, $128 = 1, $129 = 1, $130 = 1, $131 = 1, $132 = 1, $133 = 1, $134 = 1, $135 = 1, $136 = 1, $137 = 1, $138 = 1, $139 = 1, $140 = 1, $141 = 1, $142 = 1, $143 = 1, $144 = 1, $145 = 1, $146 = 1, $147 = 1, $148 = 1, $149 = 1, $150 = 1, $151 = 1, $152 = 1, $153 = 1, $154 = 1, $155 = 1, $156 = 1, $157 = 1, $158 = 1, $159 = 1, $160 = 1, $161 = 1, $162 = 1, $163 = 1, $164 = 1, $165 = 1, $166 = 1, $167 = 1,", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset.\n  >>>", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 1\n}\n\n/*\n  triplesSumToOne takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  false\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 2\n}\n\n/*\n  triplesSumToTwo takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  false\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 3\n}\n\n/*\n  triplesSumToThree takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  false\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 4\n}\n\n/*\n  triplesSumToFour takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  false\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 5\n}\n\n/*\n  triplesSumToFive takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  false\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 6\n}\n\n/*\n  triplesSumToSix takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  false\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 7\n}\n\n/*\n  triplesSumToSeven takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  cars.sort((a, b) => b.x - a.x);\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].x + cars[i].speed < cars[j].x) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst cars = [\n  new Car(0, 0),\n  new Car(1, 1),\n  new Car(2, 2),\n  new Car(3, 3),\n  new Car(4, 4),\n  new Car(5, 5),\n  new Car(6, 6),\n  new Car(7, 7),\n  new Car(8, 8),\n  new Car(9, 9),\n  new Car(10, 10),\n  new Car(11, 11),\n  new Car(12, 12),\n  new Car(13, 13),\n  new Car(14, 14),\n  new Car(15, 15),\n  new Car(16, 16),\n  new Car(17, 17),\n  new Car(18, 18),\n  new Car(19, 19),\n  new Car(20, 20),\n  new Car(21, 21),\n  new Car(22, 22),\n  new Car(23, 23),\n  new Car(24, 24),\n  new Car(25, 25),\n  new Car(26, 26),\n  new Car(27, 27),\n  new Car(28, 28),\n  new Car(29, 29),\n  new Car(30, 30),\n  new Car(31, 31),\n  new Car(32, 32),\n  new Car(33, 33),\n  new Car(34, 34),\n  new Car(35, 35),\n  new Car(36, 36),\n  new Car(37, 37),\n  new Car(38, 38),\n  new Car(39, 39),\n  new Car(40, 40),\n  new Car(41, 41),\n  new Car(42, 42),\n  new Car(43, 43),\n  new Car(44, 44),\n  new Car(45, 45),\n  new Car(46, 46),\n  new Car(47, 47),\n  new Car(48, 48),\n  new Car(49, 49),\n  new Car(50, 50),\n  new Car(51, 51),\n  new Car(52, 52),\n  new Car(53, 53),\n  new Car(54, 54),\n  new Car(55, 55),\n  new Car(56, 56),\n  new Car(57, 57),\n  new Car(58, 58),\n  new Car(59, 59),\n  new Car(60, 60),\n  new Car(61, 61),\n  new Car(62, 62),\n  new Car(63, 63),\n  new Car(64, 64),\n  new Car(65, 65),\n  new Car(66, 66),\n  new Car(67, 67),\n  new Car(68, 68),\n  new Car(69, 69),\n  new Car(70, 70),\n  new Car(71, 71),\n  new Car(72, 72),\n  new Car(73, 73),\n  new Car(74, 74),\n  new Car(75, 75),\n  new Car(76, 76),\n  new Car(77, 77),\n  new Car(78, 78),\n  new Car(79, 79),\n  new Car(80, 80),\n  new Car(81, 81),\n  new Car(82, 82),\n  new Car(83, 83),\n  new Car(84, 84),\n  new Car(85, 85),\n  new Car(86, 86),\n  new Car(87, 87),\n  new Car(88, 88),\n  new Car(89, 89),\n  new Car(90, 90),\n  new Car(91, 91),\n  new Car(92, 92),\n  new Car(93, 93),\n  new Car(94, 94),\n  new Car(95, 95),\n  new Car(96, 96),\n  new Car(97, 97),\n  new Car(98, 98),\n  new Car(99, 99),\n  new Car(100, 100),\n  new Car(101, 101),\n  new Car(102, 102),\n  new Car(103, 103),\n  new Car(104, 104),\n  new Car(105, 105),\n  new Car(106, 106),\n  new Car(107, 107),\n  new Car(108, 108),\n  new Car(109, 109),\n  new Car(110, 110),\n  new Car(111, 111),\n  new Car(112, 112),\n  new Car(113, 113),\n  new Car(114, 114),\n  new Car(115, 115),\n  new Car(116, 116),\n  new Car(117, 117),\n  new Car(118, 118),\n  new Car(119, 119),\n  new Car(120, 120),\n  new Car(121, 121),\n  new Car(122, 122),\n  new Car(123, 123),\n  new Car(124, 124),\n  new Car(125, 125),\n  new Car(126, 126),\n  new Car(127, 127),\n  new Car(128, 128),\n  new Car(129, 129),\n  new Car(130, 130),\n  new Car(131, 131),\n  new Car(132, 132),\n  new Car(133, 133),\n  new Car(134, 134),\n  new Car(135, 135),\n  new Car(136, 136", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (l, i) => l.slice(0, i)\n  const incr2 = (l, i) => [...l, i + 1]\n  const incr3 = (l, i) => [...l,...l.slice(0, i), i + 1]\n  const incr4 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1), i + 1]\n  const incr5 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2), i + 1]\n  const incr6 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3), i + 1]\n  const incr7 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4), i + 1]\n  const incr8 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5), i + 1]\n  const incr9 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6), i + 1]\n  const incr10 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7), i + 1]\n  const incr11 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7),...l.slice(i + 8), i + 1]\n  const incr12 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7),...l.slice(i + 8),...l.slice(i + 9), i + 1]\n  const incr13 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7),...l.slice(i + 8),...l.slice(i + 9),...l.slice(i + 10), i + 1]\n  const incr14 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7),...l.slice(i + 8),...l.slice(i + 9),...l.slice(i + 10),...l.slice(i + 11), i + 1]\n  const incr15 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7),...l.slice(i + 8),...l.slice(i + 9),...l.slice(i + 10),...l.slice(i + 11),...l.slice(i + 12), i + 1]\n  const incr16 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7),...l.slice(i + 8),...l.slice(i + 9),...l.slice(i + 10),...l.slice(i + 11),...l.slice(i + 12),...l.slice(i + 13), i + 1]\n  const incr17 = (l, i) => [...l,...l.slice(0, i),...l.slice(i + 1),...l.slice(i + 2),...l.slice(i + 3),...l.slice(i + 4),...l.slice(i + 5),...l.slice(i + 6),...l.slice(i + 7),...l.slice(i + 8),...l.slice(i + 9),...l.slice(i + 10),...l.slice(i + 11),...l.slice(i + 12),...l.slice(i + 13),...l.slice(i + 14), i + 1]\n  const incr18 = (l", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 1) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 2) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 3) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 4) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 5) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Convert a number to a string representation in base 10.\n  >>> toBase(2, 3)\n  '2'\n  >>> toBase(2, 2)\n  '10'\n  >>> toBase(2, 1)\n  '2'\n  >>> toBase(2, 0)\n  '0'\n  >>> toBase(2, -1)\n  '0'\n  >>> toBase(2, -2)\n  '0'\n  >>> toBase(2, -3)\n  '0'\n  >>> toBase(2, -4)\n  '0'\n  >>> toBase(2, -5)\n  '0'\n  >>> toBase(2, -6)\n  '0'\n  >>> toBase(2, -7)\n  '0'\n  >>> toBase(2, -8)\n  '0'\n  >>> toBase(2, -9)\n  '0'\n  >>> toBase(2, -10)\n  '0'\n  >>> toBase(2, -11)\n  '0'\n  >>> toBase(2, -12)\n  '0'\n  >>> toBase(2, -13)\n  '0'\n  >>> toBase(2, -14)\n  '0'\n  >>> toBase(2, -15)\n  '0'\n  >>> toBase(2, -16)\n  '0'\n  >>> toBase(2, -17)\n  '0'\n  >>> toBase(2, -18)\n  '0'\n  >>> toBase(2, -19)\n  '0'\n  >>> toBase(2, -20)\n  '0'\n  >>> toBase(2, -21)\n  '0'\n  >>> toBase(2, -22)\n  '0'\n  >>> toBase(2, -23)\n  '0'\n  >>> toBase(2, -24)\n  '0'\n  >>> toBase(2, -25)\n  '0'\n  >>> toBase(2, -26)\n  '0'\n  >>> toBase(2, -27)\n  '0'\n  >>> toBase(2, -28)\n  '0'\n  >>> toBase(2, -29)\n  '0'\n  >>> toBase(2, -30)\n  '0'\n  >>> toBase(2, -31)\n  '0'\n  >>> toBase(2, -32)\n  '0'\n  >>> toBase(2, -33)\n  '0'\n  >>> toBase(2, -34)\n  '0'\n  >>> toBase(2, -35)\n  '0'\n  >>> toBase(2, -36)\n  '0'\n  >>> toBase(2, -37)\n  '0'\n  >>> toBase(2, -38)\n  '0'\n  >>> toBase(2, -39)\n  '0'\n  >>> toBase(2, -40)\n  '0'\n  >>> toBase(2, -41)\n  '0'\n  >>> toBase(2, -42)\n  '0'\n  >>> toBase(2, -43)\n  '0'\n  >>> toBase(2, -44)\n  '0'\n  >>> toBase(2, -45)\n  '0'\n  >>> toBase(2, -46)\n  '0'\n  >>> toBase(2, -47)\n  '0'\n  >>> toBase(2, -48)\n  '0'\n  >>> toBase(2, -49)\n  '0'\n  >>> toBase(2, -50)\n  '0'\n  >>> toBase(2, -51)\n  '0'\n  >>> toBase(2, -52)\n  '0'\n  >>> toBase(2, -53)\n  '0'\n  >>> toBase(2, -54)\n  '0'\n  >>> toBase(2, -55)\n  '0'\n  >>> toBase(2, -56)\n  '0'\n  >>> toBase(2, -57)\n  '0'\n  >>> toBase(2, -58)\n  '0'\n  >>> toBase(2, -59)\n  '0'\n  >>> toBase(2, -60)\n  '0'\n  >>> toBase(2, -61)\n  '0'\n  >>> toBase(2, -62)\n  '0'\n  >>> toBase(2, -63)\n  '0'\n  >>> toBase(2, -64)\n  '0'\n  >>> toBase(2, -65)\n  '0'\n  >>> toBase(2, -66)\n  '0'\n  >>> toBase(2, -67)\n  '0'\n  >>> toBase(2, -68)\n  '0'\n  >>> toBase(2, -69)\n  '0'\n  >>> toBase(2, -70)\n  '0'\n  >>> toBase(2, -71)\n  '0'\n  >>> toBase(2, -72)\n  '0'\n  >>> toBase(2, -73)\n  '0'\n  >>> toBase(2, -74)\n  '0'\n  >>> toBase(2, -75)\n  '0'\n  >>> toBase(2, -76)\n  '0'\n  >>> toBase(2, -77)\n  '0'\n  >>> toBase(2, -78)\n  '0'\n  >>> toBase(2, -79)\n  '0'\n  >>> toBase(2, -80)\n  '0'\n  >>> toBase(2, -81)\n  '0'\n  >>> toBase(2, -82)\n  '0'\n  >>> toBase(2, -83)", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n  return triangleArea(a, h);\n};\n\n/*\n  Given a triangle, return the area of the triangle.\n  >>> triangleArea(3", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome16 = (text) => {", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let x = n % p\n  while (x < 0) {\n    x += p\n  }\n  return x\n}\n\n/*Return n^2 modulo p (is aware of numerics).\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  10\n  >>> modp2(0, 101)\n  0\n  >>> modp2(3, 11)\n  6\n  >>> modp2(100, 101)\n  0\n  */\nconst modp2 = (n, p) => {\n  return (n * n) % p\n}\n\n/*Return n^3 modulo p (is aware of numerics).\n  >>> modp3(3, 5)\n  9\n  >>> modp3(1101, 101)\n  10\n  >>> modp3(0, 101)\n  0\n  >>> modp3(3, 11)\n  6\n  >>> modp3(100, 101)\n  0\n  */\nconst modp3 = (n, p) => {\n  return (n * n * n) % p\n}\n\n/*Return n^4 modulo p (is aware of numerics).\n  >>> modp4(3, 5)\n  9\n  >>> modp4(1101, 101)\n  10\n  >>> modp4(0, 101)\n  0\n  >>> modp4(3, 11)\n  6\n  >>> modp4(100, 101)\n  0\n  */\nconst modp4 = (n, p) => {\n  return (n * n * n * n) % p\n}\n\n/*Return n^5 modulo p (is aware of numerics).\n  >>> modp5(3, 5)\n  9\n  >>> modp5(1101, 101)\n  10\n  >>> modp5(0, 101)\n  0\n  >>> modp5(3, 11)\n  6\n  >>> modp5(100, 101)\n  0\n  */\nconst modp5 = (n, p) => {\n  return (n * n * n * n * n) % p\n}\n\n/*Return n^6 modulo p (is aware of numerics).\n  >>> modp6(3, 5)\n  9\n  >>> modp6(1101, 101)\n  10\n  >>> modp6(0, 101)\n  0\n  >>> modp6(3, 11)\n  6\n  >>> modp6(100, 101)\n  0\n  */\nconst modp6 = (n, p) => {\n  return (n * n * n * n * n * n) % p\n}\n\n/*Return n^7 modulo p (is aware of numerics).\n  >>> modp7(3, 5)\n  9\n  >>> modp7(1101, 101)\n  10\n  >>> modp7(0, 101)\n  0\n  >>> modp7(3, 11)\n  6\n  >>> modp7(100, 101)\n  0\n  */\nconst modp7 = (n, p) => {\n  return (n * n * n * n * n * n * n) % p\n}\n\n/*Return n^8 modulo p (is aware of numerics).\n  >>> modp8(3, 5)\n  9\n  >>> modp8(1101, 101)\n  10\n  >>> modp8(0, 101)\n  0\n  >>> modp8(3, 11)\n  6\n  >>> modp8(100, 101)\n  0\n  */\nconst modp8 = (n, p) => {\n  return (n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^9 modulo p (is aware of numerics).\n  >>> modp9(3, 5)\n  9\n  >>> modp9(1101, 101)\n  10\n  >>> modp9(0, 101)\n  0\n  >>> modp9(3, 11)\n  6\n  >>> modp9(100, 101)\n  0\n  */\nconst modp9 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^10 modulo p (is aware of numerics).\n  >>> modp10(3, 5)\n  9\n  >>> modp10(1101, 101)\n  10\n  >>> modp10(0, 101)\n  0\n  >>> modp10(3, 11)\n  6\n  >>> modp10(100, 101)\n  0\n  */\nconst modp10 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^11 modulo p (is aware of numerics).\n  >>> modp11(3, 5)\n  9\n  >>> modp11(1101, 101)\n  10\n  >>> modp11(0, 101)\n  0\n  >>> modp11(3, 11)\n  6\n  >>> modp11(100, 101)\n  0\n  */\nconst modp11 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^12 modulo p (is aware of numerics).\n  >>> modp12(3, 5)\n  9\n  >>> modp12(1101, 101)\n  10\n  >>> modp12(0, 101)\n  0\n  >>> modp12(3, 11)\n  6\n  >>> modp12(100, 101)\n  0\n  */\nconst modp12 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^13 modulo p (is aware of numerics).\n  >>> modp13(3, 5)\n  9", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  */\nconst intersperse3 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  */\nconst intersperse4 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  */\nconst intersperse5 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  */\nconst intersperse6 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  */\nconst intersperse7 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  */\nconst intersperse8 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    if (i < numbers.length) {\n      result.push(delimeter);\n      i++;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], '", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 3 in the alphabets. */ const encodeShift3 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 1 in the alphabets. */ const encodeShift1 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 2 in the alphabets. */ const encodeShift2 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 4 in the alphabets. */ const encodeShift4 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 6 in the alphabets. */ const encodeShift6 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 8 in the alphabets. */ const encodeShift8 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 8 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 8 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 10 in the alphabets. */ const encodeShift10 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 10 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 10 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n}\n\n/*\n  returns encoding string by shifting every character by 12 in the alphabets. */ const encodeShift12 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 12 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift12 = (s)", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.toLowerCase().replace(/[aeiou]/g, '');\n  return newText;\n};\n\n/*\n  removePunctuation is a functions that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aB'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuationpassed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold15 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold16 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold17 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold18 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold19 = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold20 = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> subtract(2, 3)\n  * 1\n  * >>> subtract(5, 7)\n  * 4\n  * */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> multiply(2, 3)\n  * 6\n  * >>> multiply(5, 7)\n  * 35\n  * */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> divide(2, 3)\n  * 0.6666666666666666\n  * >>> divide(5, 7)\n  * 2.5\n  * */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> modulo(2, 3)\n  * 1\n  * >>> modulo(5, 7)\n  * 4\n  * */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Get the absolute value of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> abs(2)\n  * 2\n  * >>> abs(-2)\n  * 2\n  * */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  * Get the square root of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> sqrt(2)\n  * 1.414213562373095\n  * */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  * Get the square of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> square(2)\n  * 4\n  * */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  * Get the cube of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> cube(2)\n  * 8\n  * */\nconst cube = (x) => {\n  return x * x * x;\n};\n\n/*\n  * Get the cube root of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> cubeRoot(2)\n  * 1.7320508075688772\n  * */\nconst cubeRoot = (x) => {\n  return Math.pow(x, 1 / 3);\n};\n\n/*\n  * Get the natural logarithm of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> log(2)\n  * 0.6931471805599453\n  * */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  * Get the logarithm base 10 of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> log10(2)\n  * 0.3010299956639812\n  * */\nconst log10 = (x) => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*\n  * Get the square root of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> sqrt(2)\n  * 1.414213562373095\n  * */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  * Get the square of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> square(2)\n  * 4\n  * */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  * Get the cube of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> cube(2)\n  * 8\n  * */\nconst cube = (x) => {\n  return x * x * x;\n};\n\n/*\n  * Get the cube root of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> cubeRoot(2)\n  * 1.7320508075688772\n  * */\nconst cubeRoot = (x) => {\n  return Math.pow(x, 1 / 3);\n};\n\n/*\n  * Get the natural logarithm of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * >>> log(2)\n  * 0.6931471805599453\n  * */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  * Get the logarithm base 10 of a number\n  * @param x\n  ", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nexport default sameChars;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  ", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  let bracketsCount = 0\n  let bracketsIndex = 0\n  let bracketsClosingIndex = 0\n  let bracketsOpeningIndex = 0\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let bracketsClosing = false\n  let bracketsOpening = false\n  let", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic11 = (l) => {\n  let prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    prev", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = l1_set.intersection(l2_set);\n  return intersection.values();\n};\n\nexport default common;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor14", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  let current_level = 0\n  let current_paren = 0\n  let current_paren_string = ''\n  paren_string.split(' ').forEach((char) => {\n    if (char === '(') {\n      current_level += 1\n      current_paren_string += char\n      paren_stack.push(current_level)\n      current_paren += 1\n    } else if (char === ')') {\n      current_level -= 1\n      current_paren_string += char\n      current_paren -= 1\n      if (current_paren === 0) {\n        paren_stack.pop()\n      }\n    } else {\n      current_paren_string += char\n    }\n  })\n  return paren_stack\n}\n\n/*\n  Given a string, output the string with all the characters in lowercase.\n  E.g. 'ABC' -> 'abc'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase()\n}\n\n/*\n  Given a string, output the string with all the characters in uppercase.\n  E.g. 'abc' -> 'ABC'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase()\n}\n\n/*\n  Given a string, output the string with all the characters in title case.\n  E.g. 'abc' -> 'Abc'\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/\\w\\S*/g, (txt) => {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  })\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWords = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseSentence = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentence = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentence = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWordsSentence = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWordsSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWordsSentenceWordsSentence = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWordsSentenceWordsSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWordsSentenceWordsSentenceWordsSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWordsSentenceWordsSentenceWordsSentenceWordsSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ')\n}\n\n/*\n  Given a string, output the string with all the characters in reversed.\n  E.g. 'abc' -> 'cba'\n  */\nconst reverseWordsSentenceWordsSentenceWordsSentenceWordsSentenceWordsSentence", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the string with every opening brackets closed and every closing brackets opened.\n\n  >>> openClose(\"(()())\")\n  '(()())'\n  >>> openClose(\"(())\")\n  '(())'\n  >>> openClose(\"()\")\n  '()'\n  >>> openClose(\"(\")\n  '('\n  >>> openClose(\"\")\n  ''\n  >>> openClose(\"(()\")\n  '(()'\n  >>> openClose(\"()\")\n  '()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'\n  >>> openClose(\"()()\")\n  '()()'", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] = d[i] + xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  49\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  56\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  63\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  70\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  77\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  84\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  91\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  98\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  105\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  112\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  119\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  126\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  133\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  140\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  147\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  154\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  161\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  168\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  175\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  182\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  189\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  196\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  203\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = [0, 1];\n  let fib2 = [0, 1];\n  let fib3 = [0, 1];\n  let fib4 = [0, 1];\n  let fib5 = [0, 1];\n  let fib6 = [0, 1];\n  let fib7 = [0, 1];\n  let fib8 = [0, 1];\n  let fib9 = [0, 1];\n  let fib10 = [0, 1];\n  let fib11 = [0, 1];\n  let fib12 = [0, 1];\n  let fib13 = [0, 1];\n  let fib14 = [0, 1];\n  let fib15 = [0, 1];\n  let fib16 = [0, 1];\n  let fib17 = [0, 1];\n  let fib18 = [0, 1];\n  let fib19 = [0, 1];\n  let fib20 = [0, 1];\n  let fib21 = [0, 1];\n  let fib22 = [0, 1];\n  let fib23 = [0, 1];\n  let fib24 = [0, 1];\n  let fib25 = [0, 1];\n  let fib26 = [0, 1];\n  let fib27 = [0, 1];\n  let fib28 = [0, 1];\n  let fib29 = [0, 1];\n  let fib30 = [0, 1];\n  let fib31 = [0, 1];\n  let fib32 = [0, 1];\n  let fib33 = [0, 1];\n  let fib34 = [0, 1];\n  let fib35 = [0, 1];\n  let fib36 = [0, 1];\n  let fib37 = [0, 1];\n  let fib38 = [0, 1];\n  let fib39 = [0, 1];\n  let fib40 = [0, 1];\n  let fib41 = [0, 1];\n  let fib42 = [0, 1];\n  let fib43 = [0, 1];\n  let fib44 = [0, 1];\n  let fib45 = [0, 1];\n  let fib46 = [0, 1];\n  let fib47 = [0, 1];\n  let fib48 = [0, 1];\n  let fib49 = [0, 1];\n  let fib50 = [0, 1];\n  let fib51 = [0, 1];\n  let fib52 = [0, 1];\n  let fib53 = [0, 1];\n  let fib54 = [0, 1];\n  let fib55 = [0, 1];\n  let fib56 = [0, 1];\n  let fib57 = [0, 1];\n  let fib58 = [0, 1];\n  let fib59 = [0, 1];\n  let fib60 = [0, 1];\n  let fib61 = [0, 1];\n  let fib62 = [0, 1];\n  let fib63 = [0, 1];\n  let fib64 = [0, 1];\n  let fib65 = [0, 1];\n  let fib66 = [0, 1];\n  let fib67 = [0, 1];\n  let fib68 = [0, 1];\n  let fib69 = [0, 1];\n  let fib70 = [0, 1];\n  let fib71 = [0, 1];\n  let fib72 = [0, 1];\n  let fib73 = [0, 1];\n  let fib74 = [0, 1];\n  let fib75 = [0, 1];\n  let fib76 = [0, 1];\n  let fib77 = [0, 1];\n  let fib78 = [0, 1];\n  let fib79 = [0, 1];\n  let fib80 = [0, 1];\n  let fib81 = [0, 1];\n  let fib82 = [0, 1];\n  let fib83 = [0, 1];\n  let fib84 = [0, 1];\n  let fib85 = [0, 1];\n  let fib86 = [0, 1];\n  let fib87 = [0, 1];\n  let fib88 = [0, 1];\n  let fib89 = [0, 1];\n  let fib90 = [0, 1];\n  let fib91 = [0, 1];\n  let fib92 = [0, 1];\n  let fib93 = [0, 1];\n  let fib94 = [0, 1];\n  let fib95 = [0, 1];\n  let fib96 = [0, 1];\n  let fib97 = [0, 1];\n  let fib98 = [0, 1];\n  let fib99 = [0, 1];\n  let fib100 = [0, 1];\n  let fib101 = [0, 1];\n  let fib102 = [0, 1];\n  let fib103 = [0, 1];\n  let fib104 = [0, 1];\n  let fib105 = [0, 1];\n  let fib106 = [0, 1];\n  let fib107 = [0, 1];\n  let fib108 = [0, 1];\n  let fib109 = [0, 1];\n  let fib110 = [0, 1];\n  let fib111 = [0, 1];\n  let fib112 = [0, 1];\n  let fib113 = [0, 1];\n  let fib114 = [0, 1];\n  let fib115 = [0, 1];\n  let fib116 = [0, 1];\n  let fib117 = [0, 1];\n  let fib118 = [0, 1];\n  let fib119 = [0, 1];\n  let fib120 = [0, 1];\n  let fib121 = [0, 1];\n  let fib122 = [0, 1];\n  let fib123 = [0, 1];\n  let fib124 = [0, 1];\n  let fib125 = [0, 1];\n  let fib126 = [0,", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of times the string appears in the given string.\n  Examples:\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  */", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const shiftDigits = shift % len\n  const shiftedDigits = x.slice(0, shiftDigits)\n  const reversedDigits = x.slice(shiftDigits).reverse()\n  return shiftedDigits.concat(reversedDigits)\n}\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> lowerCase('ABC')\n  \"abc\"\n  >>> lowerCase('aBC')\n  \"abc\"\n  >>> lowerCase('A')\n  \"a\"\n  */\nconst lowerCase = (str) => {\n  return str.toLowerCase()\n}\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> upperCase('abc')\n  \"ABC\"\n  >>> upperCase('aBC')\n  \"ABC\"\n  >>> upperCase('A')\n  \"A\"\n  */\nconst upperCase = (str) => {\n  return str.toUpperCase()\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse2 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse3 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse4 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse5 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse6 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse7 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse8 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse9 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse10 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse11 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse12 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A\"\n  */\nconst reverse13 = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Given a string, return a string with all the characters in reversed order.\n  >>> reverse('abc')\n  \"cba\"\n  >>> reverse('aBC')\n  \"CBA\"\n  >>> reverse('A')\n  \"A", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let apple = 0;\n  let oranges = 0;\n  let mango = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'apple') {\n      apple++;\n    } else if (s[i] === 'orange') {\n      oranges++;\n    } else if (s[i] ==='mango') {\n      mango++;\n    }\n  }\n  total = apple + oranges + mango;\n  return total;\n};\n\nfruitDistribution(\"5 apple and 6 oranges\", 19);\nfruitDistribution(\"0 apple and 1 oranges\", 3);\nfruitDistribution(\"2 apple and 3 oranges\", 100);\nfruitDistribution(\"100 apple and 1 oranges\", 120);\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const min = arr[0]\n  const minIndex = arr[0]\n  for (let i = 1; i < arrLength; i++) {\n    const current = arr[i]\n    if (current < min) {\n      min = current\n      minIndex = i\n    }\n  }\n  return [min, minIndex]\n}\n\nexport default pluck\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let result = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > result) {\n      result = lst[i]\n    }\n  }\n  return result\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde',", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const sorted = lst.slice()\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return (area.toFixed(2))\n}\n\n/*\n  Gives the area of a triangle. Return the area of the triangle rounding to 2 decimal point if the triangle is valid. Otherwise return -1.\n  Example:\n  triangleArea(1, 2, 3) == 6.00\n  triangleArea(1, 2, 4) == -1\n  */\nconst triangleArea = (a, b", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\n/*\n  Returns a function that returns true if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\n/*\n  Returns a function that returns true if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\n/*\n  Returns a function that returns true if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly4 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  let count = 0;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      count++;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return []\n  }\n\n  if (lst1.length === 0) {\n    return lst2\n  }\n\n  if (lst2.length === 0) {\n    return lst1\n  }\n\n  const total = lst1.length + lst2.length\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n\n  const lst1LenLessThan = lst1Len - lst2Len\n  const lst2LenLessThan = lst2Len - lst1Len\n\n  const lst1LessThan = lst1.slice(0, lst1LenLessThan)\n  const lst2LessThan = lst2.slice(0, lst2LenLessThan)\n\n  const lst1MoreThan = lst1.slice(lst1LenLessThan)\n  const lst2MoreThan = lst2.slice(lst2LenLessThan)\n\n  const lst1AndLst2 = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2MoreThan = lst1MoreThan.concat(lst2MoreThan)\n\n  const lst1AndLst2LessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanMoreThan = lst1MoreThan.concat(lst2LessThan)\n\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThanLessThan = lst1LessThan.concat(lst2LessThan)\n  const lst1AndLst2LessThanLessThanLessThanLessThanLessThanLessTh", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime2 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime3 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime4 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime5 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime6 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime7 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime8 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime9 = (a) => {\n  let i = 0;\n  while (i < a) {\n    let j = 0;\n    while (j < a) {\n      if (a % j === 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Writes a functions that returns trueer if the given number is the sum of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0;\n};\n\nconst ispandigital = (a) => {\n  let digits = [];\n  for (let i = 0; i < a.toString().length; i++) {\n    digits.push(a.toString().charAt(i));\n  }\n  return digits.every((digit) => {\n    return isdigit(digit);\n  });\n};\n\nconst ispalindrome = (a) => {\n  return a.toString() === a.toString().split('').reverse().join('');\n};\n\nconst ispalindromic = (a) => {\n  return ispalindrome(a);\n};\n\nconst ispalindromic_2 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_3 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_4 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_5 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_6 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_7 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_8 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_9 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_10 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_11 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_12 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_13 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_14 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_15 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_16 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_17 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_18 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_19 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_20 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_21 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_22 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_23 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_24 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_25 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_26 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_27 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_28 = (a) => {\n  let reversed = a.toString().split('').reverse().join('');\n  return a === reversed;\n};\n\nconst ispalindromic_29 = (a) => {\n  let reversed =", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  while (i < num.length) {\n    let digit = parseInt(num[i], 16);\n    if (digit > 0) {\n      result += digit;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime2 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime3 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime4 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime5 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime6 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime7 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime8 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime9 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime10 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime11 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime12 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime13 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime14 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime15 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime16 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime17 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime18 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime19 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime20 = (num) => {\n  let i = 2;\n  while (i <", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = 0;\n  let decimalLength = 0;\n  let decimalDigits = 0;\n  let decimalDigitsLength = 0;\n  let decimalDigitsLengthLength = 0;\n  let decimalDigitsLengthLength = 0;\n  let decimalDigitsLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthlength<br>\n  // @param {number} decimal - decimal number\n  // @returns {string} - binary string\n  // @example\n  // decimalToBinary(15)\n  // // returns \"db1111db\"\n  // @example\n  // decimalToBinary(32)\n  // // returns \"db100000db\"\n  // */\n  function decimalToBinary(decimal) {\n    let binary = '';\n    let binaryLength = 0;\n    let decimalLength = 0;\n    let decimalDigitsLength = 0;\n    let decimalDigitsLengthLength = 0;\n    let decimalDigitsLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLengthLengthLengthLengthLengthLength = 0;\n    let decimalDigitsLengthLength", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList2 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList3 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList4 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList5 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList6 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList7 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList8 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList9 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList10 = (numbers) => {\n  const sums = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(sumProduct([numbers[i]], numbers[i]))\n  }\n  return sums\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consists of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1),", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let len = s.length;\n  let prev = s[0];\n  for (let i = 1; i < len; i++) {\n    if (s[i] === prev) {\n      count++;\n    } else {\n      if (count > 2) {\n        return true;\n      }\n      count = 1;\n      prev = s[i];\n    }\n  }\n  if (count > 2) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne = gradesArrayLength - 71;\n  const gradesArrayLengthMinusSeventyTwo = gradesArrayLength - 72;\n  const gradesArrayLengthMinusSeventyThree = gradesArrayLength - 73;\n  const gradesArrayLengthMinusSeventyFour = gradesArrayLength - 74;\n  const gradesArrayLengthMinusSeventy", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (n) => {\n    if (n === 1) return false;\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  return prime.test(string) && isPrime(string.length);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i < str.length; i++) {\n      if (str.indexOf(i) === -1) return false;\n    }\n    return true;\n  };\n  return contains(string);\n};\n\n/*Write a function that takes a string and returns true if the string contains\n all the characters of the alphabet or false otherwise\n  Examples\n  containsAll('Hello') == true\n  containsAll('abcdcba') == true\n  containsAll('kittens') == true\n  containsAll('orange') == false\n  */\nconst containsAll = (string) => {\n  const contains = (str) => {\n    for (let i = 0; i", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        count++;\n      }\n      start = start / 10;\n    }\n    let end = i;\n    while (end < n) {\n      if (end % 10 === 1) {\n        count++;\n      }\n      end = end / 10;\n    }\n  }\n  return count;\n};\n\nconsole.log(startsOneEnds(10));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle2 = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle3 = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle4 = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle5 = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle6 = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle7 = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    let arr3 = []\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j] > arr2[j + 1]) {\n        arr3.push(arr2[j])\n        arr2.splice(j, 1)\n        j--\n      }\n    }\n    arr3.push(arr2[0])\n    result += arr3.join('')\n  }\n  return result\n}\n\nconst shuffle8 = (s) => {\n  const arr = s.split(' ')\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lstLength = lst.length;\n  const lstLengthX = lstLength;\n  const lstLengthY = lstLength;\n  const lstLengthX2 = lstLengthX;\n  const lstLengthY2 = lstLengthY;\n  const lstLengthX3 = lstLengthX2;\n  const lstLengthY3 = lstLengthY2;\n  const lstLengthX4 = lstLengthX3;\n  const lstLengthY4 = lstLengthY3;\n  const lstLengthX5 = lstLengthX4;\n  const lstLengthY5 = lstLengthY4;\n  const lstLengthX6 = lstLengthX5;\n  const lstLengthY6 = lstLengthY5;\n  const lstLengthX7 = lstLengthX6;\n  const lstLengthY7 = lstLengthY6;\n  const lstLengthX8 = lstLengthX7;\n  const lstLengthY8 = lstLengthY7;\n  const lstLengthX9 = lstLengthX8;\n  const lstLengthY9 = lstLengthY8;\n  const lstLengthX10 = lstLengthX9;\n  const lstLengthY10 = lstLengthY9;\n  const lstLengthX11 = lstLengthX10;\n  const lstLengthY11 = lstLengthY10;\n  const lstLengthX12 = lstLengthX11;\n  const lstLengthY12 = lstLengthY11;\n  const lstLengthX13 = lstLengthX12;\n  const lstLengthY13 = lstLengthY12;\n  const lstLengthX14 = lstLengthX13;\n  const lstLengthY14 = lstLengthY13;\n  const lstLengthX15 = lstLengthX14;\n  const lstLengthY15 = lstLengthY14;\n  const lstLengthX16 = lstLengthX15;\n  const lstLengthY16 = lstLengthY15;\n  const lstLengthX17 = lstLengthX16;\n  const lstLengthY17 = lstLengthY16;\n  const lstLengthX18 = lstLengthX17;\n  const lstLengthY18 = lstLengthY17;\n  const lstLengthX19 = lstLengthX18;\n  const lstLengthY19 = lstLengthY18;\n  const lstLengthX20 = lstLengthX19;\n  const lstLengthY20 = lstLengthY19;\n  const lstLengthX21 = lstLengthX20;\n  const lstLengthY21 = lstLengthY20;\n  const lstLengthX22 = lstLengthX21;\n  const lstLengthY22 = lstLengthY21;\n  const lstLengthX23 = lstLengthX22;\n  const lstLengthY23 = lstLengthY22;\n  const lstLengthX24 = lstLengthX23;\n  const lstLengthY24 = lstLengthY23;\n  const lstLengthX25 = lstLengthX24;\n  const lstLengthY25 = lstLengthY24;\n  const lstLengthX26 = lstLengthX25;\n  const lstLengthY26 = lstLengthY25;\n  const lstLengthX27 = lstLengthX26;\n  const lstLengthY27 = lstLengthY26;\n  const lstLengthX28 = lstLengthX27;\n  const lstLengthY28 = lstLengthY27;\n  const lstLengthX29 = lstLengthX28;\n  const lstLengthY29 = lstLengthY28;\n  const lstLengthX30 = lstLengthX29;\n  const lstLengthY30 = lstLengthY29;\n  const lstLengthX31 = lstLengthX30;\n  const lstLengthY31 = lstLengthY30;\n  const lstLengthX32 = lstLengthX31;\n  const lstLengthY32 = lstLengthY31;\n  const lstLengthX33 = lstLengthX32;\n  const lstLengthY33 = lstLengthY32;\n  const lstLengthX34 = lstLengthX33;\n  const lstLengthY34 = lstLengthY33;\n  const lstLengthX35 = lstLengthX34;\n  const lstLengthY35 = lstLengthY34;\n  const lstLengthX36 = lstLengthX35;\n  const lstLengthY36 = lstLengthY35;\n  const lstLengthX37 = lstLengthX36;\n  const lstLengthY37 = lstLengthY36;\n  const lstLengthX38 = lstLengthX37;\n  const lstLengthY38 = lstLengthY37;\n  const lstLengthX39 = lstLengthX38;\n  const lstLengthY39 = lstLengthY38;\n  const lstLengthX40 = lstLengthX39;\n  const lstLengthY40 = lstLengthY39;\n  const lstLengthX41 = lstLengthX40;\n  const lstLengthY41 = lstLengthY40;\n  const lstLengthX42 = lstLengthX41;\n  const lstLengthY42 = lstLengthY41;\n  ", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < s.length) {\n    let letter = s[i];\n    let letterIndex = alphabet.indexOf(letter);\n    let letterIndex2 = alphabet.indexOf(letter.toUpperCase());\n    let letterIndex3 = alphabet.indexOf(letter.toLowerCase());\n    let letterIndex4 = alphabet.indexOf(letter.toUpperCase().toLowerCase());\n    let letterIndex5 = alphabet.indexOf(letter.toLowerCase().toUpperCase());\n    let letterIndex6 = alphabet.indexOf(letter.toUpperCase().toLowerCase().toUpperCase());\n    let letterIndex7 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex8 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex9 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex10 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex11 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex12 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex13 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex14 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex15 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex16 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex17 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex18 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex19 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex20 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex21 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex22 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase());\n    let letterIndex23 = alphabet.indexOf(letter.toLowerCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(0, maxIndex + 1);\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const min = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    i++\n  }\n  return min\n}\n\n/*\n  You was given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    i++\n  }\n  return max\n}\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    i++\n  }\n  return max\n}\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    i++\n  }\n  return max\n}\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    i++\n  }\n  return max\n}\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    i++\n  }\n  return max\n}\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    i++\n  }\n  return max\n}\n\n/*\n  You were given a list of integers. Writes a function nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  let i = 1\n  while (i < len) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    i++\n  }\n  return max\n}\n\n/*\n  You were given a list of integers. Writes a", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const regex2 = /^(?=\\S).*?(?=\\S)/\n  const regex3 = /^(?=\\S).*?(?=\\S)/\n  const regex4 = /^(?=\\S).*?(?=\\S)/\n  const regex5 = /^(?=\\S).*?(?=\\S)/\n  const regex6 = /^(?=\\S).*?(?=\\S)/\n  const regex7 = /^(?=\\S).*?(?=\\S)/\n  const regex8 = /^(?=\\S).*?(?=\\S)/\n  const regex9 = /^(?=\\S).*?(?=\\S)/\n  const regex10 = /^(?=\\S).*?(?=\\S)/\n  const regex11 = /^(?=\\S).*?(?=\\S)/\n  const regex12 = /^(?=\\S).*?(?=\\S)/\n  const regex13 = /^(?=\\S).*?(?=\\S)/\n  const regex14 = /^(?=\\S).*?(?=\\S)/\n  const regex15 = /^(?=\\S).*?(?=\\S)/\n  const regex16 = /^(?=\\S).*?(?=\\S)/\n  const regex17 = /^(?=\\S).*?(?=\\S)/\n  const regex18 = /^(?=\\S).*?(?=\\S)/\n  const regex19 = /^(?=\\S).*?(?=\\S)/\n  const regex20 = /^(?=\\S).*?(?=\\S)/\n  const regex21 = /^(?=\\S).*?(?=\\S)/\n  const regex22 = /^(?=\\S).*?(?=\\S)/\n  const regex23 = /^(?=\\S).*?(?=\\S)/\n  const regex24 = /^(?=\\S).*?(?=\\S)/\n  const regex25 = /^(?=\\S).*?(?=\\S)/\n  const regex26 = /^(?=\\S).*?(?=\\S)/\n  const regex27 = /^(?=\\S).*?(?=\\S)/\n  const regex28 = /^(?=\\S).*?(?=\\S)/\n  const regex29 = /^(?=\\S).*?(?=\\S)/\n  const regex30 = /^(?=\\S).*?(?=\\S)/\n  const regex31 = /^(?=\\S).*?(?=\\S)/\n  const regex32 = /^(?=\\S).*?(?=\\S)/\n  const regex33 = /^(?=\\S).*?(?=\\S)/\n  const regex34 = /^(?=\\S).*?(?=\\S)/\n  const regex35 = /^(?=\\S).*?(?=\\S)/\n  const regex36 = /^(?=\\S).*?(?=\\S)/\n  const regex37 = /^(?=\\S).*?(?=\\S)/\n  const regex38 = /^(?=\\S).*?(?=\\S)/\n  const regex39 = /^(?=\\S).*?(?=\\S)/\n  const regex40 = /^(?=\\S).*?(?=\\S)/\n  const regex41 = /^(?=\\S).*?(?=\\S)/\n  const regex42 = /^(?=\\S).*?(?=\\S)/\n  const regex43 = /^(?=\\S).*?(?=\\S)/\n  const regex44 = /^(?=\\S).*?(?=\\S)/\n  const regex45 = /^(?=\\S).*?(?=\\S)/\n  const regex46 = /^(?=\\S).*?(?=\\S)/\n  const regex47 = /^(?=\\S).*?(?=\\S)/\n  const regex48 = /^(?=\\S).*?(?=\\S)/\n  const regex49 = /^(?=\\S).*?(?=\\S)/\n  const regex50 = /^(?=\\S).*?(?=\\S)/\n  const regex51 = /^(?=\\S).*?(?=\\S)/\n  const regex52 = /^(?=\\S).*?(?=\\S)/\n  const regex53 = /^(?=\\S).*?(?=\\S)/\n  const regex54 = /^(?=\\S).*?(?=\\S)/\n  const regex55 = /^(?=\\S).*?(?=\\S)/\n  const regex56 = /^(?=\\S).*?(?=\\S)/\n  const regex57 = /^(?=\\S).*?(?=\\S)/\n  const regex58 = /^(?=\\S).*?(?=\\S)/\n  const regex59 = /^(?=\\S).*?(?=\\S)/\n  const regex60 = /^(?=\\S).*?(?=\\S)/\n  const regex61 = /^(?=\\S).*?(?=\\S)/\n  const regex62 = /^(?=\\S).*?(?=\\S)/\n  const regex63 = /^(?=\\S).*?(?=\\S)/\n  const regex64 = /^(?=\\S).*?(?=\\S)/\n  const regex65 = /^(?=\\S).*?(?=\\S)/\n  const regex66 = /^(?=\\", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was floats. Returns false in any other case.\n  Examples\n  anyFloat(5.2, 2.7, 7.3) ➞ true\n  anyFloat(3.2, 2.7, 2.7) ➞ false\n  anyFloat(3.6, -2.2, 1.1) ➞ true\n  anyFloat(3.6, -2.2, 1.1) ➞ true\n  */\nconst anyFloat = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was mixed. Returns false in any other case.\n  Examples\n  anyMixed(5, 2, 7) ➞ true\n  anyMixed(3, 2, 2) ➞ false\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  */\nconst anyMixed = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was mixed. Returns false in any other case.\n  Examples\n  anyMixed(5.2, 2.7, 7.3) ➞ true\n  anyMixed(3.2, 2.7, 2.7) ➞ false\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  */\nconst anyMixedFloat = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was mixed. Returns false in any other case.\n  Examples\n  anyMixed(5, 2, 7) ➞ true\n  anyMixed(3, 2, 2) ➞ false\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  */\nconst anyMixedFloat = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was mixed. Returns false in any other case.\n  Examples\n  anyMixed(5.2, 2.7, 7.3) ➞ true\n  anyMixed(3.2, 2.7, 2.7) ➞ false\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  */\nconst anyMixedFloat = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was mixed. Returns false in any other case.\n  Examples\n  anyMixed(5.2, 2.7, 7.3) ➞ true\n  anyMixed(3.2, 2.7, 2.7) ➞ false\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  */\nconst anyMixedFloat = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was mixed. Returns false in any other case.\n  Examples\n  anyMixed(5.2, 2.7, 7.3) ➞ true\n  anyMixed(3.2, 2.7, 2.7) ➞ false\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  */\nconst anyMixed = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/*\n  Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was mixed. Returns false in any other case.\n  Examples\n  anyMixed(5.2, 2.7, 7.3) ➞ true\n  anyMixed(3.2, 2.7, 2.7) ➞ false\n  anyMixed(3.6, -2.2, 1.1) ➞ true\n  anyMixed(3.6, -2", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const messageLength = message.length;\n  const messageArray = message.split('');\n  const messageArrayLength = messageArray.length;\n  const messageArrayLengthMinusOne = messageArrayLength - 1;\n  const messageArrayLengthMinusTwo = messageArrayLength - 2;\n  const messageArrayLengthMinusThree = messageArrayLength - 3;\n  const messageArrayLengthMinusFour = messageArrayLength - 4;\n  const messageArrayLengthMinusFive = messageArrayLength - 5;\n  const messageArrayLengthMinusSix = messageArrayLength - 6;\n  const messageArrayLengthMinusSeven = messageArrayLength - 7;\n  const messageArrayLengthMinusEight = messageArrayLength - 8;\n  const messageArrayLengthMinusNine = messageArrayLength - 9;\n  const messageArrayLengthMinusTen = messageArrayLength - 10;\n  const messageArrayLengthMinusEleven = messageArrayLength - 11;\n  const messageArrayLengthMinusTwelve = messageArrayLength - 12;\n  const messageArrayLengthMinusThirteen = messageArrayLength - 13;\n  const messageArrayLengthMinusFourteen = messageArrayLength - 14;\n  const messageArrayLengthMinusFifteen = messageArrayLength - 15;\n  const messageArrayLengthMinusSixteen = messageArrayLength - 16;\n  const messageArrayLengthMinusSeventeen = messageArrayLength - 17;\n  const messageArrayLengthMinusEighteen = messageArrayLength - 18;\n  const messageArrayLengthMinusNineteen = messageArrayLength - 19;\n  const messageArrayLengthMinusTwenty = messageArrayLength - 20;\n  const messageArrayLengthMinusTwentyOne = messageArrayLength - 21;\n  const messageArrayLengthMinusTwentyTwo = messageArrayLength - 22;\n  const messageArrayLengthMinusTwentyThree = messageArrayLength - 23;\n  const messageArrayLengthMinusTwentyFour = messageArrayLength - 24;\n  const messageArrayLengthMinusTwentyFive = messageArrayLength - 25;\n  const messageArrayLengthMinusTwentySix = messageArrayLength - 26;\n  const messageArrayLengthMinusTwentySeven = messageArrayLength - 27;\n  const messageArrayLengthMinusTwentyEight = messageArrayLength - 28;\n  const messageArrayLengthMinusTwentyNine = messageArrayLength - 29;\n  const messageArrayLengthMinusThirty = messageArrayLength - 30;\n  const messageArrayLengthMinusThirtyOne = messageArrayLength - 31;\n  const messageArrayLengthMinusThirtyTwo = messageArrayLength - 32;\n  const messageArrayLengthMinusThirtyThree = messageArrayLength - 33;\n  const messageArrayLengthMinusThirtyFour = messageArrayLength - 34;\n  const messageArrayLengthMinusThirtyFive = messageArrayLength - 35;\n  const messageArrayLengthMinusThirtySix = messageArrayLength - 36;\n  const messageArrayLengthMinusThirtySeven = messageArrayLength - 37;\n  const messageArrayLengthMinusThirtyEight = messageArrayLength - 38;\n  const messageArrayLengthMinusThirtyNine = messageArrayLength - 39;\n  const messageArrayLengthMinusForty = messageArrayLength - 40;\n  const messageArrayLengthMinusFortyOne = messageArrayLength - 41;\n  const messageArrayLengthMinusFortyTwo = messageArrayLength - 42;\n  const messageArrayLengthMinusFortyThree = messageArrayLength - 43;\n  const messageArrayLengthMinusFortyFour = messageArrayLength - 44;\n  const messageArrayLengthMinusFortyFive = messageArrayLength - 45;\n  const messageArrayLengthMinusFortySix = messageArrayLength - 46;\n  const messageArrayLengthMinusFortySeven = messageArrayLength - 47;\n  const messageArrayLengthMinusFortyEight = messageArrayLength - 48;\n  const messageArrayLengthMinusFortyNine = messageArrayLength - 49;\n  const messageArrayLengthMinusFifty = messageArrayLength - 50;\n  const messageArrayLengthMinusFiftyOne = messageArrayLength - 51;\n  const messageArrayLengthMinusFiftyTwo = messageArrayLength - 52;\n  const messageArrayLengthMinusFiftyThree = messageArrayLength - 53;\n  const messageArrayLengthMinusFiftyFour = messageArrayLength - 54;\n  const messageArrayLengthMinusFiftyFive = messageArrayLength - 55;\n  const messageArrayLengthMinusFiftySix = messageArrayLength - 56;\n  const messageArrayLengthMinusFiftySeven = messageArrayLength - 57;\n  const messageArrayLengthMinusFiftyEight = messageArrayLength - 58;\n  const messageArrayLengthMinusFiftyNine = messageArrayLength - 59;\n  const messageArrayLengthMinusSixty = messageArrayLength - 60;\n  const messageArrayLengthMinusSixtyOne = messageArrayLength - 61;\n  const messageArrayLengthMinusSixtyTwo = messageArrayLength - 62;\n  const messageArrayLengthMinusSixtyThree = messageArrayLength - 63;\n  const messageArrayLengthMinusSixtyFour = messageArrayLength - 64;\n  const messageArrayLengthMinusSixtyFive = messageArrayLength - 65;\n  const messageArrayLengthMinusSixtySix = messageArrayLength - 66;\n  const messageArrayLengthMinusSixtySeven = messageArrayLength - 67;\n  const messageArrayLengthMinusSixtyEight = messageArrayLength - 68;\n  const messageArrayLengthMinusSixtyNine = messageArrayLength - 69;\n  const messageArrayLengthMinusSeventy = messageArrayLength - 70;\n  const messageArrayLengthMinusSeventyOne = messageArrayLength - 71;\n  const messageArrayLengthMinusSeventyTwo = messageArrayLength - 72;\n  const messageArrayLengthMinusSeventyThree = messageArrayLength - 73;\n  const messageArrayLengthMinusSeventyFour = messageArrayLength - 74;\n  const messageArrayLengthMinusSeventyFive = messageArrayLength - 75;\n  const messageArrayLengthMinusSeventySix = messageArrayLength - 76;\n  const messageArrayLengthMinusSeventySeven = messageArrayLength - 77;\n  const messageArrayLengthMinusSeventyEight = messageArrayLength - 78;\n  const messageArrayLengthMinusSeventyNine = messageArrayLength - 79;\n  const messageArrayLengthMinusSeventyTen = messageArrayLength - 80", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    while (curr > 0) {\n      result += curr % 10;\n      curr = curr / 10;\n    }\n  }\n  return result;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let allKeysAreStrings = lowerCaseKeys.every(key => typeof key === \"string\")\n  let allKeysAreStringsUpper = upperCaseKeys.every(key => typeof key === \"string\")\n  return allKeysAreStrings || allKeysAreStringsUpper\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseUpper = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let allKeysAreStrings = lowerCaseKeys.every(key => typeof key === \"string\")\n  let allKeysAreStringsUpper = upperCaseKeys.every(key => typeof key === \"string\")\n  return allKeysAreStrings || allKeysAreStringsUpper\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseLower = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let allKeysAreStrings = lowerCaseKeys.every(key => typeof key === \"string\")\n  let allKeysAreStringsUpper = upperCaseKeys.every(key => typeof key === \"string\")\n  return allKeysAreStrings || allKeysAreStringsUpper\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseMixed = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let allKeysAreStrings = lowerCaseKeys.every(key => typeof key === \"string\")\n  let allKeysAreStringsUpper = upperCaseKeys.every(key => typeof key === \"string\")\n  return allKeysAreStrings || allKeysAreStringsUpper\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseMixedUpper = (dict) => {\n  let keys = Object.keys(dict)\n  let lowerCaseKeys = keys.map(key => key.toLowerCase())\n  let upperCaseKeys = keys.map(key => key.toUpperCase())\n  let allKeysAreStrings = lowerCaseKeys.every(key => typeof key === \"string\")\n  let allKeysAreStringsUpper = upperCaseKeys.every(key => typeof key === \"string\")\n  return allKeysAreStrings || allKeysAreStringsUpper\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default countUpTo;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit * b_unit;\n  return result;\n};\n\nmodule.exports = multiply;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 1\n  */\nconst countVowel = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 0\n  countConsonant('abcdefg') returns 1\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 1\n  */\nconst countConsonant2 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 1\n  */\nconst countVowel2 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 0\n  countConsonant('abcdefg') returns 1\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant3 = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 1\n  */\nconst countConsonant4 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 1\n  */\nconst countVowel3 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 0\n  countConsonant('abcdefg') returns 1\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant5 = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of conson", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value);\n  const nums = [num, num + 1, num - 1];\n  const closest = nums.reduce((prev, next) => {\n    if (Math.abs(prev) < Math.abs(next)) {\n      return next;\n    } else {\n      return prev;\n    }\n  });\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0}
