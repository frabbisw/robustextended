{"task_id": "JavaScript/0", "prompt": "/* Check discipline if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given afford threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check discipline if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given afford threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  const i = 0;\n  const j = len - 1;\n  const diff = sorted[j] - sorted[i];\n  while (i < j) {\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    i++;\n    j--;\n    diff = sorted[j] - sorted[i];\n  }\n  return false;\n};\n\n/*\n  Check if two numbers are close enough to each other.\n  >>> isClose(1.0, 1.1)\n  true\n  >>> isClose(1.0, 1.5)\n  false\n  >>> isClose(1.0, 1.9)\n  false\n  >>> isClose(1.0, 2.0)\n  true\n  >>> isClose(1.0, 2.1)\n  false\n  >>> isClose(1.0, 2.5)\n  false\n  >>> isClose(1.0, 2.9)\n  false\n  >>> isClose(1.0, 3.0)\n  true\n  >>> isClose(1.0, 3.1)\n  false\n  >>> isClose(1.0, 3.5)\n  false\n  >>> isClose(1.0, 3.9)\n  false\n  >>> isClose(1.0, 4.0)\n  true\n  >>> isClose(1.0, 4.1)\n  false\n  >>> isClose(1.0, 4.5)\n  false\n  >>> isClose(1.0, 4.9)\n  false\n  >>> isClose(1.0, 5.0)\n  true\n  >>> isClose(1.0, 5.1)\n  false\n  >>> isClose(1.0, 5.5)\n  false\n  >>> isClose(1.0, 5.9)\n  false\n  >>> isClose(1.0, 6.0)\n  true\n  >>> isClose(1.0, 6.1)\n  false\n  >>> isClose(1.0, 6.5)\n  false\n  >>> isClose(1.0, 6.9)\n  false\n  >>> isClose(1.0, 7.0)\n  true\n  >>> isClose(1.0, 7.1)\n  false\n  >>> isClose(1.0, 7.5)\n  false\n  >>> isClose(1.0, 7.9)\n  false\n  >>> isClose(1.0, 8.0)\n  true\n  >>> isClose(1.0, 8.1)\n  false\n  >>> isClose(1.0, 8.5)\n  false\n  >>> isClose(1.0, 8.9)\n  false\n  >>> isClose(1.0, 9.0)\n  true\n  >>> isClose(1.0, 9.1)\n  false\n  >>> isClose(1.0, 9.5)\n  false\n  >>> isClose(1.0, 9.9)\n  false\n  >>> isClose(1.0, 10.0)\n  true\n  >>> isClose(1.0, 10.1)\n  false\n  >>> isClose(1.0, 10.5)\n  false\n  >>> isClose(1.0, 10.9)\n  false\n  >>> isClose(1.0, 11.0)\n  true\n  >>> isClose(1.0, 11.1)\n  false\n  >>> isClose(1.0, 11.5)\n  false\n  >>> isClose(1.0, 11.9)\n  false\n  >>> isClose(1.0, 12.0)\n  true\n  >>> isClose(1.0, 12.1)\n  false\n  >>> isClose(1.0, 12.5)\n  false\n  >>> isClose(1.0, 12.9)\n  false\n  >>> isClose(1.0, 13.0)\n  true\n  >>> isClose(1.0, 13.1)\n  false\n  >>> isClose(1.0, 13.5)\n  false\n  >>> isClose(1.0, 13.9)\n  false\n  >>> isClose(1.0, 14.0)\n  true\n  >>> isClose(1.0, 14.1)\n  false\n  >>> isClose(1.0, 14.5)\n  false\n  >>> isClose(1.0, 14.9)\n  false\n  >>> isClose(1.0, 15.0)\n  true\n  >>> isClose(1.0, 15.1)\n  false\n  >>> isClose(1.0, 15.5)\n  false\n  >>> isClose(1.0, 15.9)\n  false\n  >>> isClose(1.0, 16.0)\n  true\n  >>> isClose(1.0, 16.1)\n  false\n  >>> isClose(1.0, 16.5)\n  false\n  >>> isClose(1.0, 16.9)\n  false\n  >>> isClose(1.0, 17.0)\n  true\n  >>> isClose(1.0, 17.1)\n  false\n  >>> isClose(1.0, 17.5)\n  false\n  >>> isClose(1.0, 17.9)\n  false\n  >>> isClose(1.0, 18.0)\n  true\n  >>> isClose(1.0, 18.1)\n  false\n  >>> isClose(1.0, 18.5)\n  false\n  >>> isClose(1.0, 18.9)\n  false\n  >>> isClose(1.0, 19.0)\n  true\n  >>> isClose(1.0, 19.1)\n  false\n  >>> isClose(1.0, 19.5)\n  false\n  >>> isClose(1.0, 19.9)\n  false\n  >>> isClose(1.0, 20.0)\n  true\n  >>> is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input remark to this function is a string chain containing control multiple groups of nested nest parentheses parenthesis. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate groups are balanced (each open capable brace pair is properly by rights closed) and not nested within each other \n   Ignore dismiss any spaces outer space in the input stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain containing control multiple groups of nested nest parentheses parenthesis. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate groups are balanced (each open capable brace pair is properly by rights closed) and not nested within each other \n   Ignore dismiss any spaces outer space in the input stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = [];\n  const open_parens = 0;\n  const close_parens = 0;\n  const stack_length = 0;\n  const stack_index = 0;\n  const paren_string_length = paren_string.length;\n  const paren_string_index = 0;\n  const paren_string_char = paren_string.charAt(paren_string_index);\n  const paren_string_char_length = paren_string_char.length;\n  const paren_string_char_index = 0;\n  while (paren_string_index < paren_string_length) {\n    if (paren_string_char === '(') {\n      stack.push(paren_string_char);\n      open_parens++;\n    } else if (paren_string_char === ')') {\n      stack.pop();\n      close_parens++;\n    }\n    paren_string_index++;\n    paren_string_char = paren_string.charAt(paren_string_index);\n    paren_string_char_index++;\n    paren_string_char_length++;\n  }\n  stack_length = stack.length;\n  stack_index = stack_length - 1;\n  while (stack_index >= 0) {\n    if (stack[stack_index] === '(') {\n      open_parens--;\n    } else if (stack[stack_index] === ')') {\n      close_parens--;\n    }\n    stack_index--;\n  }\n  if (open_parens!== close_parens) {\n    throw new Error('Unbalanced parentheses in input string');\n  }\n  const result = [];\n  while (stack.length > 0) {\n    result.push(stack.pop());\n  }\n  return result;\n};\n\nmodule.exports = separateParenGroups;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = findLongestPalindrome(string);\n  return string.concat(suffix.slice(0, -1).reverse());\n}\n\n/* Find the longest postfix suffix of supplied string that is a palindrome.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  >>> findLongestPalindrome('cataa')\n  'cataa'\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findPalindromeSuffix(string);\n  return string.concat(suffix.slice(0, -1).reverse());\n}\n\n/* Find the longest postfix suffix of supplied string that is a palindrome.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> findPalindromeSuffix('cat')\n  'cat'\n  >>> findPalindromeSuffix('cata')\n  'cata'\n  >>> findPalindromeSuffix('cataa')\n  'cataa'\n  */\nconst findPalindromeSuffix = (string) => {\n  const suffix = findPalindromePrefix(string);\n  return string.concat(suffix.slice(0, -1).reverse());\n}\n\n/* Find the longest postfix suffix of supplied string that is a palindrome.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> findPalindromePrefix('cat')\n  'cat'\n  >>> findPalindromePrefix('cata')\n  'cata'\n  >>> findPalindromePrefix('cataa')\n  'cataa'\n  */\nconst findPalindromePrefix = (string) => {\n  const suffix = findPalindrome(string);\n  return string.concat(suffix.slice(0, -1).reverse());\n}\n\n/* Find the longest postfix suffix of supplied string that is a palindrome.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> findPalindrome('cat')\n  'cat'\n  >>> findPalindrome('cata')\n  'cata'\n  >>> findPalindrome('cataa')\n  'cataa'\n  */\nconst findPalindrome = (string) => {\n  const suffix = findPalindromeSuffix(string);\n  return string.concat(suffix.slice(0, -1).reverse());\n}\n\n/* Find the longest postfix suffix of supplied string that is a palindrome.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> findPalindromeSuffix('cat')\n  'cat'\n  >>> findPalindromeSuffix('cata')\n  'cata'\n  >>> findPalindromeSuffix('cataa')\n  'cataa'\n  */\nconst findPalindromeSuffix = (string) => {\n  const suffix = findPalindromePrefix(string);\n  return string.concat(suffix.slice(0, -1).reverse());\n}\n\n/* Find the longest postfix suffix of supplied string that is a palindrome.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> findPalindromePrefix('cat')\n  'cat'\n  >>> findPalindromePrefix('cata')\n  'cata'\n  >>> findPalindromePrefix('cataa')\n  'cataa'\n  */\nconst findPalindromePrefix = (string) => {\n  const suffix = findPalindrome(string);\n  return string.concat(suffix.slice(0, -1).reverse());\n}\n\n/* Test if supplied string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the longest postfix suffix of supplied string that is a palindrome.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> findPalindrome('cat')\n  'cat'\n  >>> findPalindrome('cata')\n  'cata'\n  >>> findPalindrome('cataa')\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given move over a positive integer n, you have to make draw a pile voltaic pile of n levels of stones gem. \n   The first inaugural level floor has n stones. \n   The number phone number of stones in the next level is: \n       - the next following odd leftover number numeral if n is odd. \n       - the next even tied number numeral if n is even. \n   Return the number numeral of stones in each level in a list, where element at index \n   i represents represent the number act of stones stone in the level (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, you have to make draw a pile voltaic pile of n levels of stones gem. \n   The first inaugural level floor has n stones. \n   The number phone number of stones in the next level is: \n       - the next following odd leftover number numeral if n is odd. \n       - the next even tied number numeral if n is even. \n   Return the number numeral of stones in each level in a list, where element at index \n   i represents represent the number act of stones stone in the level (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    if (num % 2 === 1) {\n      pile.push(num)\n    } else {\n      pile.push(num + 1)\n    }\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays2 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays3 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays4 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays5 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays6 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays7 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays8 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays9 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays10 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n stones.\n\n  Examples model:\n  >>> numberOfWays(3)\n  3\n  >>> numberOfWays(4)\n  4\n  >>> numberOfWays(5)\n  5\n  >>> numberOfWays(6)\n  6\n  */\nconst numberOfWays11 = (n) => {\n  const pile = makeAPile(n)\n  return pile.length\n}\n\n/*\n  Given a positive integer n, return the number of ways to make", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given move over a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given move over a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words bible separated distinguish", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function routine takes two positive incontrovertible numbers numeral x and y and returns the \n   biggest bad even integer number numeral that is in the range stove [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function routine takes two positive incontrovertible numbers numeral x and y and returns the \n   biggest bad even integer number numeral that is in the range stove [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2!== 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2!== 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2!== 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2!== 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2!== 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2!== 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max; i += 2) {\n    if (i % 2!== 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.floor(Math.sqrt(x * y));\n  for (let i = x; i <= max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given move over two positive integers integer n and m, and your task undertaking is to compute the \n   average of the integers integer from n through m (including admit n and m). \n   Round the answer solution to the nearest integer and convert change that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given move over two positive integers integer n and m, and your task undertaking is to compute the \n   average of the integers integer from n through m (including admit n and m). \n   Round the answer solution to the nearest integer and convert change that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const nBits = Math.floor(Math.log(n) / Math.log(2))\n  const mBits = Math.floor(Math.log(m) / Math.log(2))\n  const nMask = Math.pow(2, nBits) - 1\n  const mMask = Math.pow(2, mBits) - 1\n  const nMasked = n & nMask\n  const mMasked = m & mMask\n  const nMaskedBits = nBits - nMask\n  const mMaskedBits = mBits - mMask\n  const nMaskedBitsMask = Math.pow(2, nMaskedBits) - 1\n  const mMaskedBitsMask = Math.pow(2, mMaskedBits) - 1\n  const nMaskedBitsMasked = nMasked & nMaskedBitsMask\n  const mMaskedBitsMasked = mMasked & mMaskedBitsMask\n  const nMaskedBitsMaskedBits = nMaskedBitsMasked & nMaskedBitsMask\n  const mMaskedBitsMaskedBits = mMaskedBitsMasked & mMaskedBitsMask\n  const nMaskedBitsMaskedBitsMasked = nMaskedBitsMaskedBits & nMaskedBitsMask\n  const mMaskedBitsMaskedBitsMasked = mMaskedBitsMaskedBits & mMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMasked = nMaskedBitsMaskedBitsMasked & nMaskedBitsMask\n  const mMaskedBitsMaskedBitsMaskedMasked = mMaskedBitsMaskedBitsMasked & mMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMasked & nMaskedBitsMask\n  const mMaskedBitsMaskedBitsMaskedMaskedMasked = mMaskedBitsMaskedBitsMaskedMasked & mMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMask", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive incontrovertible integers x. return a sorted classify list of all \n   elements element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted screen in increasing increase order. \n  \n   For example exemplar:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive incontrovertible integers x. return a sorted classify list of all \n   elements element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted screen in increasing increase order. \n  \n   For example exemplar:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigits = [];\n  const sorted = x.sort((a, b) => a - b);\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      uniqueDigits.push(sorted[i]);\n    }\n  }\n  return uniqueDigits;\n};\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n/*\nGiven a list of positive integers x. return a list of all elements that has \nall even digits. \n\nFor example exemplar:\n  >>> evenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> evenDigits([152, 323, 1422, 10])\n  [10]\n  */\nconst evenDigits = (x) => {\n  const evenDigits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      evenDigits.push(x[i]);\n    }\n  }\n  return evenDigits;\n};\n\n// console.log(evenDigits([15, 33, 1422, 1]));\n// console.log(evenDigits([152, 323, 1422, 10]));\n\n/*\nGiven a list of positive integers x. return a list of all elements that has \nall odd digits. \n\nFor example exemplar:\n  >>> oddDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> oddDigits([152, 323, 1422, 10])\n  [1, 10]\n  */\nconst oddDigits = (x) => {\n  const oddDigits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigits.push(x[i]);\n    }\n  }\n  return oddDigits;\n};\n\n// console.log(oddDigits([15, 33, 1422, 1]));\n// console.log(oddDigits([152, 323, 1422, 10]));\n\n/*\nGiven a list of positive integers x. return a list of all elements that has \nall even and odd digits. \n\nFor example exemplar:\n  >>> allDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> allDigits([152, 323, 1422, 10])\n  [1, 10]\n  */\nconst allDigits = (x) => {\n  const allDigits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      allDigits.push(x[i]);\n    }\n  }\n  return allDigits;\n};\n\n// console.log(allDigits([15, 33, 1422, 1]));\n// console.log(allDigits([152, 323, 1422, 10]));\n\n/*\nGiven a list of positive integers x. return a list of all elements that has \nall odd and even digits. \n\nFor example exemplar:\n  >>> allOddDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> allOddDigits([152, 323, 1422, 10])\n  [1, 10]\n  */\nconst allOddDigits = (x) => {\n  const allOddDigits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      allOddDigits.push(x[i]);\n    }\n  }\n  return allOddDigits;\n};\n\n// console.log(allOddDigits([15, 33, 1422, 1]));\n// console.log(allOddDigits([152, 323, 1422, 10]));\n\n/*\nGiven a list of positive integers x. return a list of all elements that has \nall odd and even digits. \n\nFor example exemplar:\n  >>> allEvenDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> allEvenDigits([152, 323, 1422, 10])\n  [1, 10]\n  */\nconst allEvenDigits = (x) => {\n  const allEvenDigits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      allEvenDigits.push(x[i]);\n    }\n  }\n  return allEvenDigits;\n};\n\n// console.log(allEvenDigits([15, 33, 1422, 1]));\n// console.log(allEvenDigits([152, 323, 1422, 10]));\n\n/*\nGiven a list of positive integers x. return a list of all elements that has \nall odd and even digits. \n\nFor example exemplar:\n  >>> allEvenOddDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> allEvenOddDigits([152, 323, 1422, 10])\n  [1, 10]\n  */\nconst allEvenOddDigits = (x) => {\n  const allEvenOddDigits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      allEvenOddDigits.push(x[i]);\n    }\n  }\n  return allEvenOddDigits;\n};\n\n// console.log(allEvenOddDigits([15, 33, 1422, 1]));\n// console.log(allEvenOddDigits([152, 323, 1422, 10]));\n\n/*\nGiven a list of positive integers x. return a list", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given move over an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse overrule the resulting array, and then replace substitute each digit finger by its corresponding represent name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse overrule the resulting array, and then replace substitute each digit finger by its corresponding represent name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const sortedArrLengthMinusOne = sortedArrLength - 1\n  const reversedArrLengthMinusOne = reversedArrLength - 1\n  const sortedArrLengthMinusTwo = sortedArrLength - 2\n  const reversedArrLengthMinusTwo = reversedArrLength - 2\n  const sortedArrLengthMinusThree = sortedArrLength - 3\n  const reversedArrLengthMinusThree = reversedArrLength - 3\n  const sortedArrLengthMinusFour = sortedArrLength - 4\n  const reversedArrLengthMinusFour = reversedArrLength - 4\n  const sortedArrLengthMinusFive = sortedArrLength - 5\n  const reversedArrLengthMinusFive = reversedArrLength - 5\n  const sortedArrLengthMinusSix = sortedArrLength - 6\n  const reversedArrLengthMinusSix = reversedArrLength - 6\n  const sortedArrLengthMinusSeven = sortedArrLength - 7\n  const reversedArrLengthMinusSeven = reversedArrLength - 7\n  const sortedArrLengthMinusEight = sortedArrLength - 8\n  const reversedArrLengthMinusEight = reversedArrLength - 8\n  const sortedArrLengthMinusNine = sortedArrLength - 9\n  const reversedArrLengthMinusNine = reversedArrLength - 9\n  const sortedArrLengthMinusTen = sortedArrLength - 10\n  const reversedArrLengthMinusTen = reversedArrLength - 10\n  const sortedArrLengthMinusEleven = sortedArrLength - 11\n  const reversedArrLengthMinusEleven = reversedArrLength - 11\n  const sortedArrLengthMinusTwelve = sortedArrLength - 12\n  const reversedArrLengthMinusTwelve = reversedArrLength - 12\n  const sortedArrLengthMinusThirteen = sortedArrLength - 13\n  const reversedArrLengthMinusThirteen = reversedArrLength - 13\n  const sortedArrLengthMinusFourteen = sortedArrLength - 14\n  const reversedArrLengthMinusFourteen = reversedArrLength - 14\n  const sortedArrLengthMinusFifteen = sortedArrLength - 15\n  const reversedArrLengthMinusFifteen = reversedArrLength - 15\n  const sortedArrLengthMinusSixteen = sortedArrLength - 16\n  const reversedArrLengthMinusSixteen = reversedArrLength - 16\n  const sortedArrLengthMinusSeventeen = sortedArrLength - 17\n  const reversedArrLengthMinusSeventeen = reversedArrLength - 17\n  const sortedArrLengthMinusEighteen = sortedArrLength - 18\n  const reversedArrLengthMinusEighteen = reversedArrLength - 18\n  const sortedArrLengthMinusNineteen = sortedArrLength - 19\n  const reversedArrLengthMinusNineteen = reversedArrLength - 19\n  const sortedArrLengthMinusTwenty = sortedArrLength - 20\n  const reversedArrLengthMinusTwenty = reversedArrLength - 20\n  const sortedArrLengthMinusTwentyOne = sortedArrLength - 21\n  const reversedArrLengthMinusTwentyOne = reversedArrLength - 21\n  const sortedArrLengthMinusTwentyTwo = sortedArrLength - 22\n  const reversedArrLengthMinusTwentyTwo = reversedArrLength - 22\n  const sortedArrLengthMinusTwentyThree = sortedArrLength - 23\n  const reversedArrLengthMinusTwentyThree = reversedArrLength - 23\n  const sortedArrLengthMinusTwentyFour = sortedArrLength - 24\n  const reversedArrLengthMinusTwentyFour = reversedArrLength - 24\n  const sortedArrLengthMinusTwentyFive = sortedArrLength - 25\n  const reversedArrLengthMinusTwentyFive = reversedArrLength - 25\n  const sortedArrLengthMinusTwentySix = sortedArrLength - 26\n  const reversedArrLengthMinusTwentySix = reversedArrLength - 26\n  const sortedArrLengthMinusTwentySeven = sortedArrLength - 27\n  const reversedArrLengthMinusTwentySeven = reversedArrLength - 27\n  const sortedArrLengthMinusTwentyEight = sortedArrLength - 28\n  const reversedArrLengthMinusTwentyEight = reversedArrLength - 28\n  const sortedArrLengthMinusTwentyNine = sortedArrLength - 29\n  const reversedArrLengthMinusTwentyNine = reversedArrLength - 29\n  const sortedArrLengthMinusThirty = sortedArrLength - 30\n  const reversedArrLengthMinusThirty = reversedArrLength - 30\n  const sortedArrLengthMinusThirtyOne = sortedArrLength - 31\n  const reversedArrLengthMinusThirtyOne = reversedArrLength - 31\n  const sortedArrLengthMinusThirtyTwo = sortedArrLength - 32\n  const reversedArrLengthMinusThirtyTwo = reversedArrLength - 32\n  const sortedArrLengthMinusThirtyThree = sortedArrLength - 33\n  const reversedArrLengthMinusThirtyThree = reversedArrLength - 33\n  const sortedArrLengthMinusThirty", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement follow through the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index exponent i is the factorial of i if i is even \n   or the sum union of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement follow through the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index exponent i is the factorial of i if i is even \n   or the sum union of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 1)? 1 : n * factorial(n - 1);\n  };\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(factorial(i));\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given move over a positive integer n, return a tuple that has the number phone number of even and odd leftover \n   integer palindromes that fall precipitate within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return a tuple that has the number phone number of even and odd leftover \n   integer palindromes that fall precipitate within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write spell a function countNums which takes fill an array of integers integer and returns \n   the number phone number of elements chemical element which has a sum union of digits > 0. \n   If a number phone number is negative, then its first signed digit finger will be negative minus: \n   e.g. for example -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function countNums which takes fill an array of integers integer and returns \n   the number phone number of elements chemical element which has a sum union of digits > 0. \n   If a number phone number is negative, then its first signed digit finger will be negative minus: \n   e.g. for example -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sum = num + 0;\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers integer arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered ordain. Your task undertaking is to determine if \n   it is possible potential to get contract an array sorted classify in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed admit to perform do right correct shift operation any number issue of times prison term. \n  \n   One right shift shift key operation means shifting all elements of the array by one \n   position stead in the right proper direction guidance. The last final element chemical element of the array will be moved to \n   the starting start position in the array i.e. 0th index exponent. \n\n   If it is possible potential to obtain the sorted grouped array by performing do the above operation \n   then return true truthful else return false. \n   If the given pass array is empty then return true. \n\n   Note: The given impart list is guaranteed to have unique singular elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers integer arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered ordain. Your task undertaking is to determine if \n   it is possible potential to get contract an array sorted classify in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed admit to perform do right correct shift operation any number issue of times prison term. \n  \n   One right shift shift key operation means shifting all elements of the array by one \n   position stead in the right proper direction guidance. The last final element chemical element of the array will be moved to \n   the starting start position in the array i.e. 0th index exponent. \n\n   If it is possible potential to obtain the sorted grouped array by performing do the above operation \n   then return true truthful else return false. \n   If the given pass array is empty then return true. \n\n   Note: The given impart list is guaranteed to have unique singular elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLength = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrTemp = [];\n  let arrTempLength = arr.length;\n  while (i < arrLength) {\n    arrTemp[j] = arr[i];\n    i++;\n    j++;\n    if (j === arrTempLength) {\n      arrTemp.push(arr[i]);\n      i++;\n      j++;\n    }\n  }\n  arrTemp.sort((a, b) => a - b);\n  let arrTempLength2 = arrTemp.length;\n  let arrTempLength3 = arrTempLength - 1;\n  let arrTempLength4 = arrTempLength2 - 1;\n  while (arrTempLength3 >= 0) {\n    if (arrTemp[arrTempLength3] === arrTemp[arrTempLength4]) {\n      arrTemp[arrTempLength3] = arrTemp[arrTempLength3] + 1;\n      arrTempLength3--;\n      arrTempLength4--;\n    } else {\n      arrTempLength3--;\n      arrTempLength4--;\n    }\n  }\n  return arrTemp.every(x => x === arrTemp[arrTempLength - 1]);\n};\n\nconst moveOneBallTest = () => {\n  const arr = [3, 4, 5, 1, 2];\n  console.log(moveOneBall(arr));\n};\n\nmoveOneBallTest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input remark are two strings a and b consisting consist only of 1s and 0s zero. \n   Perform binary XOR on these inputs remark and return result solution also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input remark are two strings a and b consisting consist only of 1s and 0s zero. \n   Perform binary XOR on these inputs remark and return result solution also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor2 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor3 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor4 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor5 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor6 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor7 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor8 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor9 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor10 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor11 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor12 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b = '10101010'\n  Output:\n  '01010101'\n  */\nconst stringXor13 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  a = '01010101'\n  b =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem trouble, you will implement a function routine that takes claim two lists of numbers number, \n   and determines settle whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number numeral of exchanged change elements chemical element between lst1 and lst2.\n   If it is possible potential to exchange elements between the lst1 and lst2 to make have \n   all the elements chemical element of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem trouble, you will implement a function routine that takes claim two lists of numbers number, \n   and determines settle whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number numeral of exchanged change elements chemical element between lst1 and lst2.\n   If it is possible potential to exchange elements between the lst1 and lst2 to make have \n   all the elements chemical element of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  let lst1_even = [];\n  let lst2_even = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      lst1_even.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      lst2_even.push(lst2[i]);\n    }\n  }\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst test = () => {\n  let lst1 = [1, 2, 3, 4];\n  let lst2 = [1, 5, 3, 4];\n  console.log(exchange(lst1, lst2));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string chain representing a space outer space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition repeat and containing incorporate the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string chain representing a space outer space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition repeat and containing incorporate the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string chain representing a space outer space separated distinguish lowercase letters letter, return a dictionary \n  of the letter with the most repetition repeat and containing incorporate the corresponding count. \n  If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\nconst test = histogram('a b c');\nconsole.log(test);\n\nconst test2 = histogram('a b c a b');\nconsole.log(test2);\n\nconst test3 = histogram('b b b b a');\nconsole.log(test3);\n\nconst test4 = histogram('');\nconsole.log(test4);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task necessitate \n   We are given two strings string section s and c, you have to deleted erase all the characters in s that are equal adequate to any character fictional character in c\n   then check determine if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward ahead. \n   You should return a tuple containing hold the result solution string bowed stringed instrument and true / false fake for the check check mark.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task necessitate \n   We are given two strings string section s and c, you have to deleted erase all the characters in s that are equal adequate to any character fictional character in c\n   then check determine if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward ahead. \n   You should return a tuple containing hold the result solution string bowed stringed instrument and true / false fake for the check check mark.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  let i = 0\n  let j = sLen - 1\n  let flag = false\n  while (i < sLen && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      if (flag) {\n        s = s.slice(0, i) + s.slice(i + 1)\n      } else {\n        s = s.slice(0, i) + s.slice(i + 1) + s.slice(i)\n      }\n      flag =!flag\n    }\n  }\n  return [s, flag]\n}\n\nconst isPalindrome = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome2 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome3 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome4 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome5 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome6 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome7 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome8 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome9 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome10 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome11 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome12 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome13 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome14 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome15 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome16 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome17 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome18 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome19 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome20 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome21 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome22 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome23 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome24 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome25 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome26 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 &&!flag\n}\n\nconst isPalindrome27 = (s) => {\n  const [s1, flag] = reverseDelete(s, '')\n  return s === s1 && flag\n}\n\nconst isPalindrome28 = (s) => {\n  const [s1, flag] = reverseDelete(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings string section, where each string consists consist of only digits digit, return a list.\n   Each element i of the output output signal should be \" the number numeral of odd curious elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd leftover digits digit in the i'th string drawstring of the input stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings string section, where each string consists consist of only digits digit, return a list.\n   Each element i of the output output signal should be \" the number numeral of odd curious elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd leftover digits digit in the i'th string drawstring of the input stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const output = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const odd = [];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === '1') {\n        odd.push(j);\n      }\n    }\n    const oddLength = odd.length;\n    const evenLength = str.length - oddLength;\n    const oddCount = Math.floor(oddLength / 2);\n    const evenCount = Math.floor(evenLength / 2);\n    output.push(`the number of odd elements ${oddCount}n the str4ng ${oddLength} of the ${oddLength}nput.`);\n    output.push(`the number of odd elements ${evenCount}n the str1ng ${evenLength} of the ${evenLength}nput.`);\n  }\n  return output;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given move over an array of integers nums, find recover the minimum minimal sum of any non - empty sub submarine - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of integers nums, find recover the minimum minimal sum of any non - empty sub submarine - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = 0;\n  let minIndex = 0;\n  let minSumIndex = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let subSum = 0;\n  let subSumIndex = 0;\n  let subSumLength = 0;\n  let subSumLengthIndex = 0;\n  let subSumLengthLength = 0;\n  let subSumLengthLengthIndex = 0;\n  let subSumLengthLengthLength = 0;\n  let subSumLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLength = 0;\n  let subSumLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLength = 0;\n  let subSumLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  let subSumLengthLengthLengthLengthLengthLengthIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given move over a rectangular grid of wells well. Each row rowing represents a single individual well, \n   and each 1 in a row course represents exemplify a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract excerpt water water system from it, \n   and all buckets have the same capacity.\n   Your task is to use practice the buckets to empty the wells well. \n   Output end product the number numeral of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a rectangular grid of wells well. Each row rowing represents a single individual well, \n   and each 1 in a row course represents exemplify a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract excerpt water water system from it, \n   and all buckets have the same capacity.\n   Your task is to use practice the buckets to empty the wells well. \n   Output end product the number numeral of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n).fill(0);\n  const count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i]++;\n        count++;\n      }\n    }\n  }\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    if (buckets[i] >= capacity) {\n      max = Math.max(max, buckets[i]);\n    }\n  }\n  return count + max;\n};\n\nconst test = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n).fill(0);\n  const count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i]++;\n        count++;\n      }\n    }\n  }\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    if (buckets[i] >= capacity) {\n      max = Math.max(max, buckets[i]);\n    }\n  }\n  return count + max;\n};\n\nconst main = () => {\n  const grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  const capacity = 1;\n  console.log(maxFill(grid, capacity));\n  console.log(test(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort classify an array of non - negative integers integer according accord to \n   number of ones one in their binary representation theatrical performance in ascending rise order. \n   For similar like number of ones, sort based on decimal value. \n\n   It must be implemented enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort classify an array of non - negative integers integer according accord to \n   number of ones one in their binary representation theatrical performance in ascending rise order. \n   For similar like number of ones, sort based on decimal value. \n\n   It must be implemented enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByDecimal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByHexadecimal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByOctal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByHexadecimal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByOctal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByHexadecimal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByOctal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByHexadecimal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByOctal = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArrayByBinary = (arr) => {\n  const sortedArray = arr.slice(0);\n  sortedArray.sort((", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string chain s and a natural number phone number n, you have been tasked task to implement \n   a function routine that returns hark back a list of all words actor's line from string s that contain check exactly \n   n consonants, in order these words parole appear look in the string drawstring s.\n   If the string bowed stringed instrument s is empty then the function should return an empty list.\n   Note bill: you may assume wear the input string bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string chain s and a natural number phone number n, you have been tasked task to implement \n   a function routine that returns hark back a list of all words actor's line from string s that contain check exactly \n   n consonants, in order these words parole appear look in the string drawstring s.\n   If the string bowed stringed instrument s is empty then the function should return an empty list.\n   Note bill: you may assume wear the input string bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonantCount = consonants.reduce((acc, c, i) => {\n    return acc + (s.indexOf(c) > -1? 1 : 0);\n  }, 0);\n  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (consonantCount === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4));\nconsole.log(selectWords(\"Mary had a little lamb\", 3));\nconsole.log(selectWords(\"simple white space\", 2));\nconsole.log(selectWords(\"Hello world\", 4));\nconsole.log(selectWords(\"Uncle sam\", 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given move over a word. Your task is to find recover the closest near vowel that stands between \n   two consonants consonant from the right correct side english of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition circumstance. \n\n   You may assume that the given string bowed stringed instrument contains contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given move over a word. Your task is to find recover the closest near vowel that stands between \n   two consonants consonant from the right correct side english of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition circumstance. \n\n   You may assume that the given string bowed stringed instrument contains contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonantIndex = consonants.indexOf(word.charAt(word.length - 1));\n  const vowelIndex = vowels.indexOf(word.charAt(word.length - 2));\n  if (consonantIndex === -1 || vowelIndex === -1) {\n    return '';\n  }\n  const consonant = consonants[consonantIndex];\n  const vowel = vowels[vowelIndex];\n  const index = consonantIndex - vowelIndex;\n  const wordLength = word.length;\n  if (index < 0) {\n    return word.substr(0, wordLength - 2);\n  }\n  if (index > 0) {\n    return word.substr(0, wordLength - 1);\n  }\n  return word;\n};\n\nconsole.log(getClosestVowel('yogurt'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\nconsole.log(getClosestVowel('ab'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given move over a list of two strings, both strings string section consist dwell of open \n   parentheses digression' (' or close near parentheses digression')' only. \n   Your job is to check discipline if it is possible to concatenate the two strings in\n   some order, that the resulting result string drawstring will be good. \n   A string S is considered see to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given move over a list of two strings, both strings string section consist dwell of open \n   parentheses digression' (' or close near parentheses digression')' only. \n   Your job is to check discipline if it is possible to concatenate the two strings in\n   some order, that the resulting result string drawstring will be good. \n   A string S is considered see to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let i = 0;\n  let j = 0;\n  let len = lst.length;\n  while (i < len) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n    i++;\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens(['())', ')']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return come back the first one in case casing of multiple \n   strings of the same length distance. Return null in case character the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return come back the first one in case casing of multiple \n   strings of the same length distance. Return null in case character the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  const len = strings.length\n  let longest = strings[0]\n  for (let i = 1; i < len; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given move over an array arr of integers and a positive incontrovertible integer k, return a sorted screen list \n   of length k with the maximum k numbers number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array arr of integers and a positive incontrovertible integer k, return a sorted screen list \n   of length k with the maximum k numbers number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLength = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  let i = 0\n  let j = 0\n  let index = 0\n  while (i < arrLength && j < k) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      j++\n    }\n    i++\n  }\n  return arr.slice(maxIndex, maxIndex + k)\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers integer, return the sum of all of the odd curious elements element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers integer, return the sum of all of the odd curious elements element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter(x => x % 2 === 1);\n  const even = lst.filter(x => x % 2 === 0);\n  return odd.reduce((acc, curr) => acc + curr, 0) + even.reduce((acc, curr) => acc + curr, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given move over a non - empty array of integers arr and an integer k, return\n   the sum union of the elements element with at most two digits from the first beginning k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a non - empty array of integers arr and an integer k, return\n   the sum union of the elements element with at most two digits from the first beginning k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution2 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution3 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution4 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution5 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution6 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution7 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution8 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution9 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution10 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  const arrElements = arr.slice(0, k)\n  const arrElementsLength = arrElements.length\n  const arrElementsSum = arrElements.reduce((acc, elem) => acc + elem, 0)\n\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i]\n  }\n\n  return sum + arrElementsSum\n}\n\nconst addElementsSolution11 = (arr, k) => {\n  const arrLength = arr.length\n  const sum = 0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given move over a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence succession. \n\n   The Collatz conjecture guess is a conjecture speculation in mathematics that concerns a sequence succession defined \n   as follows: start with any positive cocksure integer n. Then each term terminus is obtained prevail from the \n   previous former term as follows be: if the previous former term terminus is even, the next term is one half of \n   the previous term terminus. If the previous former term terminus is odd, the next adjacent term terminus is 3 times the previous \n   term plus 1. The conjecture speculation is that no matter what value of n, the sequence succession will always reach achieve 1. \n\n   Note bill: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence succession. \n\n   The Collatz conjecture guess is a conjecture speculation in mathematics that concerns a sequence succession defined \n   as follows: start with any positive cocksure integer n. Then each term terminus is obtained prevail from the \n   previous former term as follows be: if the previous former term terminus is even, the next term is one half of \n   the previous term terminus. If the previous former term terminus is odd, the next adjacent term terminus is 3 times the previous \n   term plus 1. The conjecture speculation is that no matter what value of n, the sequence succession will always reach achieve 1. \n\n   Note bill: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [];\n  let collatz = [];\n  let i = 1;\n  while (i < n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getNextCollatz = (n) => {\n  let i = n;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  return i;\n};\n\nconst test = () => {\n  const odd = getOddCollatz(5);\n  console.log(odd);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write spell a function which validates validate a given afford date string and \n   returns restitution true truthful if the date is valid otherwise differently false. \n   The date is valid if all of the following take after rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number numeral of days sidereal day is not less than 1 or higher than 31 days for months calendar month 1,3,5,7,8,10,12. And the number numeral of days sidereal day is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days sidereal day is not less than 1 or higher high than 29 for the month calendar month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write spell a function which validates validate a given afford date string and \n   returns restitution true truthful if the date is valid otherwise differently false. \n   The date is valid if all of the following take after rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number numeral of days sidereal day is not less than 1 or higher than 31 days for months calendar month 1,3,5,7,8,10,12. And the number numeral of days sidereal day is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days sidereal day is not less than 1 or higher high than 29 for the month calendar month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[3]);\n  const dayOfWeek = parseInt(dateArray[0]);\n  const dayOfYear = parseInt(dateArray[4]);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (dayOfWeek < 1 || dayOfWeek > 7) {\n    return false;\n  }\n  if (dayOfYear < 1 || dayOfYear > 366) {\n    return false;\n  }\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n  return true;\n};\n\nconst date = '03-11-2000';\nconsole.log(validDate(date));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given move over a string of words bible, return a list of words son split on whitespace, if no whitespaces exists exist in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given move over a string of words bible, return a list of words son split on whitespace, if no whitespaces exists exist in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given move over a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate extra of the same \n   number numeral, return false. Assume simulate no negative numbers number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given move over a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate extra of the same \n   number numeral, return false. Assume simulate no negative numbers number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const duplicates = lst.filter((num, index) => lst.indexOf(num)!== index);\n  return sorted.length === lst.length &&!duplicates.length;\n};\n\n/* Given a list of numbers, return the number of numbers that are sorted.\n  Examples\n  countSorted([1, 2, 3, 4, 5]) ➞ 5\n  countSorted([1, 2, 3, 4, 5, 6]) ➞ 5\n  countSorted([1, 2, 3, 4, 5, 6, 7]) ➞ 6\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 7\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 8\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 9\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 10\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 11\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 12\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 13\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 14\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 15\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 16\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 17\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 18\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 19\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 20\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 21\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 22\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 23\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 24\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 25\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 26\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 27\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 28\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ 29\n  countSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given move over two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given move over two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 0\n  for (let i = 0; i <", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given move over a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell of the grid contains check a value. Every integer in the range compass [ 1, N * N ] \n   inclusive appears look exactly once on the cells cellular telephone of the grid.\n\n   You have to find the minimum path of length distance k in the grid. You can start startle \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells cell, \n   in other words quarrel, you can go to cells cell which share an edge with you current \n   cell. \n   Please note that a path way of length duration k means mean visiting exactly precisely k cells cell (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path way A (of length duration k) is considered less than a path way B boron (of length duration k) if \n   after making the ordered ordain lists of the values value on the cells cellular telephone that A deoxyadenosine monophosphate and B barn go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed undertake that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells cell that the minimum minimal path way go function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell of the grid contains check a value. Every integer in the range compass [ 1, N * N ] \n   inclusive appears look exactly once on the cells cellular telephone of the grid.\n\n   You have to find the minimum path of length distance k in the grid. You can start startle \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells cell, \n   in other words quarrel, you can go to cells cell which share an edge with you current \n   cell. \n   Please note that a path way of length duration k means mean visiting exactly precisely k cells cell (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path way A (of length duration k) is considered less than a path way B boron (of length duration k) if \n   after making the ordered ordain lists of the values value on the cells cellular telephone that A deoxyadenosine monophosphate and B barn go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed undertake that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells cell that the minimum minimal path way go function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [N, M] = grid.length;\n  const [n, m] = grid[0].length;\n  const [lst_A, lst_B] = [[0] * n, [0] * n];\n  const [lst_A_index, lst_B_index] = [0, 0];\n  const [lst_A_value, lst_B_value] = [0, 0];\n  const [lst_A_index_next, lst_B_index_next] = [0, 0];\n  const [lst_A_value_next, lst_B_value_next] = [0, 0];\n  const [lst_A_index_next_next, lst_B_index_next_next] = [0, 0];\n  const [lst_A_value_next_next, lst_B_value_next_next] = [0, 0];\n  const [lst_A_index_next_next_next, lst_B_index_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next, lst_B_value_next_next_next] = [0, 0];\n  const [lst_A_index_next_next_next_next, lst_B_index_next_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next_next, lst_B_value_next_next_next_next] = [0, 0];\n  const [lst_A_index_next_next_next_next_next, lst_B_index_next_next_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next_next_next, lst_B_value_next_next_next_next_next] = [0, 0];\n  const [lst_A_index_next_next_next_next_next_next, lst_B_index_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next_next_next_next, lst_B_value_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_index_next_next_next_next_next_next_next, lst_B_index_next_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next_next_next_next_next, lst_B_value_next_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_index_next_next_next_next_next_next_next_next, lst_B_index_next_next_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next_next_next_next_next_next, lst_B_value_next_next_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_index_next_next_next_next_next_next_next_next_next, lst_B_index_next_next_next_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next_next_next_next_next_next_next, lst_B_value_next_next_next_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_index_next_next_next_next_next_next_next_next_next_next, lst_B_index_next_next_next_next_next_next_next_next_next_next] = [0, 0];\n  const [lst_A_value_next_next_next_next_next_next_next_next_next_next, lst_B_value_next_next_next_next_next_next_next_next_next_next] = [0, 0];\n  for (let i = 0; i < N; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return tax return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Return tax return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor(a, b);\n  }\n  return a;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows sleep together Fibonacci sequence, it was studied study deeply profoundly by mathematicians in \n   the last final couple centuries hundred. However, what people citizenry don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows sleep together Fibonacci sequence, it was studied study deeply profoundly by mathematicians in \n   the last final couple centuries hundred. However, what people citizenry don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1]\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1])\n  }\n  return tri\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive incontrovertible integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive incontrovertible integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result += i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create produce a function that takes fill a string as input stimulation which contains only square hearty brackets bracket. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create produce a function that takes fill a string as input stimulation which contains only square hearty brackets bracket. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const isSquare = (string) = > {\n    const isSquareBracket = (string) = > {\n      const isSquareBracketBracket = (string) = > {\n        const isSquareBracketBracketBracket = (string) = > {\n          const isSquareBracketBracketBracketBracket = (string) = > {\n            const isSquareBracketBracketBracketBracketBracket = (string) = > {\n              const isSquareBracketBracketBracketBracketBracketBracket = (string) = > {\n                const isSquareBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                  const isSquareBracketBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                    const isSquareBracketBracketBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                      const isSquareBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                        const isSquareBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                          const isSquareBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                            const isSquareBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                              const isSquareBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracket = (string) = > {\n                                const isSquareBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBracketBr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given move over a list of numbers. \n   You need necessitate to return the sum kernel of squared numbers in the given hold list,\n   round each element chemical element in the list to the upper int(Ceiling) first foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given move over a list of numbers. \n   You need necessitate to return the sum kernel of squared numbers in the given hold list,\n   round each element chemical element in the list to the upper int(Ceiling) first foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create produce a function that returns come back true dependable if the last character quality \n   of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that returns come back true dependable if the last character quality \n   of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/\\b/);\n};\n\n/*\n  Create a function that returns true if the given string is a valid email address.\n  Note bill: \"email\" is a group of characters quality separated by space quad.\n  Examples:\n  isEmail(\"bill@gmail.com\") ➞ true\n  isEmail(\"bill@gmail.com \") ➞ false\n  isEmail(\"bill@gmail.com.com\") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  isEmail(\"bill@gmail.com.com \") ➞ false\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function routine which returns the largest big index exponent of an element which \n   is not greater capital than or equal adequate to the element component immediately preceding it. If \n   no such element component exists then return -1. The given array will not contain \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function routine which returns the largest big index exponent of an element which \n   is not greater capital than or equal adequate to the element component immediately preceding it. If \n   no such element component exists then return -1. The given array will not contain \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length\n  let maxIndex = -1\n  let maxValue = -1\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < arrLength) {\n    if (arr[i] >= arr[j]) {\n      if (arr[i] > maxValue) {\n        maxIndex = i\n        maxValue = arr[i]\n      }\n      i++\n    } else {\n      j++\n    }\n  }\n  if (maxIndex === -1) {\n    return -1\n  }\n  return maxIndex\n}\n\nmodule.exports = canArrange\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create produce a function that returns come back a tuple (a, b), where 'a' is \n   the largest large of negative integers integer, and 'b' is the smallest humble \n   of positive positivist integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that returns come back a tuple (a, b), where 'a' is \n   the largest large of negative integers integer, and 'b' is the smallest humble \n   of positive positivist integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n    return largest;\n  };\n  const smallest = () => {\n    let smallest = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n    return smallest;\n  };\n  return largest()? largest() : smallest();\n};\n\nconst largestSmallestIntegers = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(largestSmallestIntegers);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create produce a function that takes fill integers integer, floats, or strings string section representing map \n   real veridical numbers, and returns revert the larger variable in its given variable varying type character. \n   Return null nothing if the values are equal. \n   Note bill: If a real actual number is represented represent as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create produce a function that takes fill integers integer, floats, or strings string section representing map \n   real veridical numbers, and returns revert the larger variable in its given variable varying type character. \n   Return null nothing if the values are equal. \n   Note bill: If a real actual number is represented represent as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) return a;\n   if (a < b) return b;\n   if (a === b) return null;\n   return a;\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwo = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareThree = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareFour = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareFive = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareSix = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareSeven = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareEight = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareNine = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareEleven = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwelve = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareThirteen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareFourteen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareFifteen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareSixteen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareSeventeen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareEighteen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareNineteen = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwenty = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwentyOne = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwentyTwo = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwentyThree = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwentyFour = (a, b) => {\n  if (a > b) return a;\n  if (a < b) return b;\n  if (a === b) return null;\n  return a;\n}\n\nconst compareTwentyFive = (a, b) => {\n  if (a > b) return a;\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate measure whether the given number phone number n can be written publish as the sum of exactly precisely 4 positive plus even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate measure whether the given number phone number n can be written publish as the sum of exactly precisely 4 positive plus even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return tax return list of all suffixes from shortest to longest retentive of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return tax return list of all prefixes and suffixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given move over a string text, replace substitute all spaces distance in it with underscores, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string text, replace substitute all spaces distance in it with underscores, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all spaces with - and then replace all - with spaces, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces6 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces7 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces8 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces9 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces10 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - with spaces and then replace all spaces with -, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSp", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function routine which takes a string chain representing act a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns restitution' No' otherwise differently. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly precisely one dot acid'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function routine which takes a string chain representing act a file's name, and returns \n 'Yes' if the the file's name is valid, and returns restitution' No' otherwise differently. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly precisely one dot acid'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_2 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_3 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_4 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_5 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_6 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_7 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_8 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_9 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_10 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_11 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_12 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*$/;\n  const file_name_regex_13 = /^[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a-zA-Z]\\w*\\.[a", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function routine will take a list of integers integer. For all entries introduction in the list, the function shall square feather the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes index are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function routine will take a list of integers integer. For all entries introduction in the list, the function shall square feather the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes index are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given move over a string representing constitute a sentence,\n   the sentence contains control some words separated discriminate by a space distance, \n   and you have to return a string that contains incorporate the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words parole in the new fresh string drawstring should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a string representing constitute a sentence,\n   the sentence contains control some words separated discriminate by a space distance, \n   and you have to return a string that contains incorporate the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words parole in the new fresh string drawstring should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      if (isPrime(j + 1)) {\n        newWord.push(char)\n      }\n    }\n    newWords.push(newWord.join(' '))\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task job is to implement a function routine that will simplify the expression construction \n   x * n. The function returns revert true truthful if x * n evaluates measure to a whole number phone number and false \n   otherwise. Both x and n, are string representation theatrical performance of a fraction, and have the following surveil format, \n   < numerator>/<denominator > where both numerator and denominator are positive whole numbers. \n\n   You can assume wear that x, and n are valid fractions fraction, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false fake \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task job is to implement a function routine that will simplify the expression construction \n   x * n. The function returns revert true truthful if x * n evaluates measure to a whole number phone number and false \n   otherwise. Both x and n, are string representation theatrical performance of a fraction, and have the following surveil format, \n   < numerator>/<denominator > where both numerator and denominator are positive whole numbers. \n\n   You can assume wear that x, and n are valid fractions fraction, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false fake \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /\n   const isValid = /", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write spell a function which sorts classify the given afford list of integers \n   in ascending rise order orderliness according harmonize to the sum of their digits finger. \n   Note: if there are several items with similar exchangeable sum kernel of their digits digit, \n   order them based on their index exponent in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function which sorts classify the given afford list of integers \n   in ascending rise order orderliness according harmonize to the sum of their digits finger. \n   Note: if there are several items with similar exchangeable sum kernel of their digits digit, \n   order them based on their index exponent in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints17 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints18 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\nconst orderByPoints19 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(x => x > 10 && x % 2 === 1 && x % 10 === 1)\n  return arr.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given move over a positive integer n. You have to create produce an integer array a of length distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a positive integer n. You have to create produce an integer array a of length distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples2 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples3 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples4 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples5 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples6 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples7 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples8 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getMaxTriples9 = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets planet in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes film two planet satellite names name calling as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located settle between the orbit eye socket of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun sunlight. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets planet in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes film two planet satellite names name calling as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located settle between the orbit eye socket of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun sunlight. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet1 === planet) {\n      if (planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    } else if (planet2 === planet) {\n      if (planet1 === \"SUN\") {\n        result.push(planet);\n      }\n    } else {\n      if (planet1 === \"SUN\" || planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    }\n  }\n  return result;\n};\n\nconst bf2 = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet1 === planet) {\n      if (planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    } else if (planet2 === planet) {\n      if (planet1 === \"SUN\") {\n        result.push(planet);\n      }\n    } else {\n      if (planet1 === \"SUN\" || planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    }\n  }\n  return result;\n};\n\nconst bf3 = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet1 === planet) {\n      if (planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    } else if (planet2 === planet) {\n      if (planet1 === \"SUN\") {\n        result.push(planet);\n      }\n    } else {\n      if (planet1 === \"SUN\" || planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    }\n  }\n  return result;\n};\n\nconst bf4 = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet1 === planet) {\n      if (planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    } else if (planet2 === planet) {\n      if (planet1 === \"SUN\") {\n        result.push(planet);\n      }\n    } else {\n      if (planet1 === \"SUN\" || planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    }\n  }\n  return result;\n};\n\nconst bf5 = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet1 === planet) {\n      if (planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    } else if (planet2 === planet) {\n      if (planet1 === \"SUN\") {\n        result.push(planet);\n      }\n    } else {\n      if (planet1 === \"SUN\" || planet2 === \"SUN\") {\n        result.push(planet);\n      }\n    }\n  }\n  return result;\n};\n\nconst bf6 = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function routine that accepts a list of strings string section as a parameter argument, \n   deletes the strings string section that have odd leftover lengths duration from it, \n   and returns the resulted leave list with a sorted order, \n   The list is always a list of strings drawstring and never an array of numbers act, \n   and it may contain duplicates. \n   The order orderliness of the list should be ascending ascend by length of each word son, and you \n   should return the list sorted screen by that rule convention. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order holy order. \n   You may assume bear that all words will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that accepts a list of strings string section as a parameter argument, \n   deletes the strings string section that have odd leftover lengths duration from it, \n   and returns the resulted leave list with a sorted order, \n   The list is always a list of strings drawstring and never an array of numbers act, \n   and it may contain duplicates. \n   The order orderliness of the list should be ascending ascend by length of each word son, and you \n   should return the list sorted screen by that rule convention. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order holy order. \n   You may assume bear that all words will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0)\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sortedLen = sorted.length\n  const left = sum - sortedLen\n  const right = sum - sortedLen + 1\n  const leftLen = left.toString().length\n  const rightLen = right.toString().length\n  const leftStr = left.toString().padStart(leftLen, '0')\n  const rightStr = right.toString().padStart(rightLen, '0')\n  const sortedStr = sorted.join('')\n  return [leftStr, sortedStr, rightStr].join('')\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0)\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sortedLen = sorted.length\n  const left = sum - sortedLen\n  const right = sum - sortedLen + 1\n  const leftLen = left.toString().length\n  const rightLen = right.toString().length\n  const leftStr = left.toString().padStart(leftLen, '0')\n  const rightStr = right.toString().padStart(rightLen, '0')\n  const sortedStr = sorted.join('')\n  return [leftStr, sortedStr, rightStr].join('')\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0)\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sortedLen = sorted.length\n  const left = sum - sortedLen\n  const right = sum - sortedLen + 1\n  const leftLen = left.toString().length\n  const rightLen = right.toString().length\n  const leftStr = left.toString().padStart(leftLen, '0')\n  const rightStr = right.toString().padStart(rightLen, '0')\n  const sortedStr = sorted.join('')\n  return [leftStr, sortedStr, rightStr].join('')\n}\n\nconst list_sort_by_length_by_alphabet = (lst) => {\n  const len = lst.length\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0)\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sortedLen = sorted.length\n  const left = sum - sortedLen\n  const right = sum - sortedLen + 1\n  const leftLen = left.toString().length\n  const rightLen = right.toString().length\n  const leftStr = left.toString().padStart(leftLen, '0')\n  const rightStr = right.toString().padStart(rightLen, '0')\n  const sortedStr = sorted.join('')\n  return [leftStr, sortedStr, rightStr].join('')\n}\n\nconst list_sort_by_length_by_alphabet_by_length = (lst) => {\n  const len = lst.length\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0)\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sortedLen = sorted.length\n  const left = sum - sortedLen\n  const right = sum - sortedLen + 1\n  const leftLen = left.toString().length\n  const rightLen = right.toString().length\n  const leftStr = left.toString().padStart(leftLen, '0')\n  const rightStr = right.toString().padStart(rightLen, '0')\n  const sortedStr = sorted.join('')\n  return [leftStr, sortedStr, rightStr].join('')\n}\n\nconst list_sort_by_length_by_alphabet_by_length_by_length = (lst) => {\n  const len = lst.length\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0)\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sortedLen = sorted.length\n  const left = sum - sortedLen\n  const right = sum - sortedLen + 1\n  const leftLen = left.toString().length\n  const rightLen = right.toString().length\n  const leftStr = left.toString().padStart(leftLen, '0')\n  const rightStr = right.toString().padStart(rightLen, '0')\n  const sortedStr = sorted.join('')\n  return [leftStr, sortedStr, rightStr].join('')\n}\n\nconst list_sort_by_length_by_alphabet_by_length_by_length_by_length = (lst) => {\n  const len = lst.length\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0)\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sortedLen =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    result += ` ${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, n2, delimiter) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    result += ` ${i}${delimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    result += ` ${i}${delimiter2}`;\n  }\n  return result;\n};\n\n/* Return a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','', '*')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    result += ` ${i}${delimiter2}`;\n  }\n  for (let i = 0; i < n3; i++) {\n    result += ` ${i}${delimiter3}`;\n  }\n  return result;\n};\n\n/* Return a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*','')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','', '*','')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    result += ` ${i}${delimiter2}`;\n  }\n  for (let i = 0; i < n3; i++) {\n    result += ` ${i}${delimiter3}`;\n  }\n  for (let i = 0; i < n4; i++) {\n    result += ` ${i}${delimiter4}`;\n  }\n  return result;\n};\n\n/* Return a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*','','')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','', '*','','')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    result += ` ${i}${delimiter2}`;\n  }\n  for (let i = 0; i < n3; i++) {\n    result += ` ${i}${delimiter3}`;\n  }\n  for (let i = 0; i < n4; i++) {\n    result += ` ${i}${delimiter4}`;\n  }\n  for (let i = 0; i < n5; i++) {\n    result += ` ${i}${delimiter5}`;\n  }\n  return result;\n};\n\n/* Return a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*','','','')\n  '0-1-2'\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple elementary program which should return the value of x if n is \n   a prime choice number issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple elementary program which should return the value of x if n is \n   a prime choice number issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given move over a list of numbers, return the sum union of squares square of the numbers \n   in the list that are odd curious. Ignore numbers phone number that are negative damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given move over a list of numbers, return the sum union of squares square of the numbers \n   in the list that are odd curious. Ignore numbers phone number that are negative damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0\n   for (let i = 0; i < lst.length; i++) {\n     let num = lst[i]\n     if (num > 0) {\n       sum += num * num\n     }\n   }\n   return sum\n }\n */\n\nfunction doubleTheDifference(lst) {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num > 0) {\n      sum += num * num\n    }\n  }\n  return sum\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think intend we all remember that feeling impression when the result resultant role of some long - awaited \n   event consequence is finally last known sleep together. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting note down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results solution of a number numeral of matches catch. \n   You are given two arrays of scores and guesses of equal adequate length duration, where each index exponent shows a match couple. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score sexual conquest.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think intend we all remember that feeling impression when the result resultant role of some long - awaited \n   event consequence is finally last known sleep together. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting note down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results solution of a number numeral of matches catch. \n   You are given two arrays of scores and guesses of equal adequate length duration, where each index exponent shows a match couple. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score sexual conquest.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = []\n  let gameLength = game.length\n  let guessLength = guess.length\n  let gameScore = game.reduce((a, b) => a + b)\n  let guessScore = guess.reduce((a, b) => a + b)\n  let diff = Math.abs(gameScore - guessScore)\n  let i = 0\n  while (i < gameLength) {\n    if (game[i] === guess[i]) {\n      result.push(0)\n      i++\n    } else {\n      result.push(diff)\n      i++\n    }\n  }\n  return result\n}\n\nmodule.exports = compare\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given move over the name of a class (a string chain) and a list of extensions.\n   The extensions are to be used use to load additional classes class to the class course. The \n   strength force of the extension is as follows take after: Let lease CAP be the number of the uppercase \n   letters letter in the extension reference's name, and let lease SM be the number issue of lowercase letters letter \n   in the extension reference's name, the strength military capability is given by the fraction CAP - SM. \n   You should find the strongest extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength potency, you should \n   choose the one that comes arrive first foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given move over the name of a class (a string chain) and a list of extensions.\n   The extensions are to be used use to load additional classes class to the class course. The \n   strength force of the extension is as follows take after: Let lease CAP be the number of the uppercase \n   letters letter in the extension reference's name, and let lease SM be the number issue of lowercase letters letter \n   in the extension reference's name, the strength military capability is given by the fraction CAP - SM. \n   You should find the strongest extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength potency, you should \n   choose the one that comes arrive first foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const [cap, sm] = ext.split('.');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += sm;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given move over 2 words. You need necessitate to return true dependable if the second word or any of its rotations rotation is a substring in the first inaugural word bible \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given move over 2 words. You need necessitate to return true dependable if the second word or any of its rotations rotation is a substring in the first inaugural word bible \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\")\n   let b = b.split(\"\")\n   let i = 0\n   let j = 0\n   while (i < a.length && j < b.length) {\n     if (a[i] === b[j]) {\n       i++\n       j++\n     } else {\n       if (i < a.length) {\n         i++\n       }\n       if (j < b.length) {\n         j++\n       }\n     }\n   }\n   return (i === a.length && j === b.length)\n }\n */\n\nconst cycpatternCheck = (a, b) => {\n  let a = a.split(\"\")\n  let b = b.split(\"\")\n  let i = 0\n  let j = 0\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++\n      j++\n    } else {\n      if (i < a.length) {\n        i++\n      }\n      if (j < b.length) {\n        j++\n      }\n    }\n  }\n  return (i === a.length && j === b.length)\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"))\nconsole.log(cycpatternCheck(\"hello\",\"ell\"))\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"))\nconsole.log(cycpatternCheck(\"abab\",\"baa\"))\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"))\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number phone number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number phone number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd, even];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given move over a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 == 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    i++;\n    number = number % 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 == 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    i++;\n    number = number % 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 == 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    i++;\n    number = number % 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 == 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    i++;\n    number = number % 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 == 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    i++;\n    number = number % 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 == 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    i++;\n    number = number % 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n Given move over the lengths of the three sides side of a triangle triangulum. Return true genuine if the three \n   sides slope form shape a right - angled fish triangle, false otherwise. \n   A right correctly - angled lean triangle triangulum is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given move over the lengths of the three sides side of a triangle triangulum. Return true genuine if the three \n   sides slope form shape a right - angled fish triangle, false otherwise. \n   A right correctly - angled lean triangle triangulum is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return (a + b > c) && (b + c > a) && (c + a > b);\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c) / 2;\n};\n\n/*\n Given a triangle with sides a, b, c, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return a + b + c;\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c) / 2;\n};\n\n/*\n Given a triangle with sides a, b, c, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return a + b + c;\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c) / 2;\n};\n\n/*\n Given a triangle with sides a, b, c, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return a + b + c;\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c) / 2;\n};\n\n/*\n Given a triangle with sides a, b, c, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return a + b + c;\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c) / 2;\n};\n\n/*\n Given a triangle with sides a, b, c, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return a + b + c;\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c) / 2;\n};\n\n/*\n Given a triangle with sides a, b, c, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return a + b + c;\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c) / 2;\n};\n\n/*\n Given a triangle with sides a, b, c, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return a + b + c;\n};\n\n/*\n Given a triangle with sides a, b, c, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function routine that accepts a list of strings string section. \n   The list contains control different words. Return the word password with maximum maximal number act \n   of unique characters character. If multiple strings have maximum number of unique singular \n   characters fictional character, return the one which comes first in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that accepts a list of strings string section. \n   The list contains control different words. Return the word password with maximum maximal number act \n   of unique characters character. If multiple strings have maximum number of unique singular \n   characters fictional character, return the one which comes first in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const findMax = (words) = > {\n     const findMax = (words) = > {\n       const findMax = (words) = > {\n         const findMax = (words) = > {\n           const findMax = (words) = > {\n             const findMax = (words) = > {\n               const findMax = (words) = > {\n                 const findMax = (words) = > {\n                   const findMax = (words) = > {\n                     const findMax = (words) = > {\n                       const findMax = (words) = > {\n                         const findMax = (words) = > {\n                           const findMax = (words) = > {\n                             const findMax = (words) = > {\n                               const findMax = (words) = > {\n                                 const findMax = (words) = > {\n                                   const findMax = (words) = > {\n                                     const findMax = (words) = > {\n                                       const findMax = (words) = > {\n                                         const findMax = (words) = > {\n                                           const findMax = (words) = > {\n                                             const findMax = (words) = > {\n                                               const findMax = (words) = > {\n                                                 const findMax = (words) = > {\n                                                  const findMax = (words) = > {\n                                                    const findMax = (words) = > {\n                                                     const findMax = (words) = > {\n                                                      const findMax = (words) = > {\n                                                        const findMax = (words) = > {\n                                                         const findMax = (words) = > {\n                                                           const findMax = (words) = > {\n                                                            const findMax = (words) = > {\n                                                              const findMax = (words) = > {\n                                                               const findMax = (words) = > {\n                                                               }\n                                                            }\n                                                            }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                                           }\n                                  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry athirst rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete dispatch the day sidereal day's meals. \n   you should return an array of [ total number of eaten corrode carrots after your meals, \n                                   the number of carrots left leave after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry athirst rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete dispatch the day sidereal day's meals. \n   you should return an array of [ total number of eaten corrode carrots after your meals, \n                                   the number of carrots left leave after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining];\n  }\n  const eaten = number - need;\n  const left = remaining - eaten;\n  return [eaten, left];\n}\n\nconst number = 5;\nconst need = 6;\nconst remaining = 10;\n\nconst result = eat(number, need, remaining);\nconsole.log(`${result[0]} carrots have been eaten.`);\nconsole.log(`${result[1]} carrots left to eat.`);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given move over a string, find out how many distinct clear-cut characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given move over a string, find out how many distinct clear-cut characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char) === -1) {\n      acc.push(char)\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toLowerCase()) === -1) {\n      acc.push(char.toLowerCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toUpperCase()) === -1) {\n      acc.push(char.toUpperCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toLowerCase()) === -1) {\n      acc.push(char.toUpperCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toUpperCase()) === -1) {\n      acc.push(char.toLowerCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toLowerCase()) === -1) {\n      acc.push(char.toUpperCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toUpperCase()) === -1) {\n      acc.push(char.toLowerCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toLowerCase()) === -1) {\n      acc.push(char.toUpperCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toUpperCase()) === -1) {\n      acc.push(char.toLowerCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc.indexOf(char.toUpperCase()) === -1) {\n      acc.push(char.toUpperCase())\n    }\n    return acc\n  }, [])\n  return count.length\n}\n\n/*\n  Given a string, find out how many distinct characters quality (regardless of case) does it", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given move over two lists operator, and operand. The first beginning list has basic algebra operations process, and \n   the second list is a list of integers. Use practice the two given collapse lists list to build the algebric \n   expression formulation and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over two lists operator, and operand. The first beginning list has basic algebra operations process, and \n   the second list is a list of integers. Use practice the two given collapse lists list to build the algebric \n   expression formulation and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0)\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0)\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0)\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0)\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0)\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0)\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0)\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n  const result = operatorList.reduce((acc, op) => {\n    const operand = operandList.shift()\n    return acc + op * operand\n  }, 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given move over a string s.\n   if s[i] is a letter, reverse revoke its case sheath from lower to upper or vise versa, \n   otherwise differently keep keep open it as it is. \n   If the string chain contains no letters letter, reverse the string. \n   The function should return the resulted result string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given move over a string s.\n   if s[i] is a letter, reverse revoke its case sheath from lower to upper or vise versa, \n   otherwise differently keep keep open it as it is. \n   If the string chain contains no letters letter, reverse the string. \n   The function should return the resulted result string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let drawstring = \"\"\n  while (i < j) {\n    if (s[i] === s[j]) {\n      drawstring += s[i]\n      i++\n      j--\n    } else if (s[i].toLowerCase() === s[j].toUpperCase()) {\n      drawstring += s[i].toUpperCase()\n      i++\n      j--\n    } else {\n      drawstring += s[i]\n      i++\n      j--\n    }\n  }\n  if (i === j) {\n    drawstring += s[i]\n  }\n  return drawstring\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given move over a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given move over two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending rise order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending rise order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i;\n    const even = num % 2 === 0;\n    if (even) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input remark to this function is a string chain representing act musical notes eminence in a special limited ASCII american standard code for information interchange format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last concluding. \n\n   Here is a legend caption: \n  ' o' - whole unharmed note bill, lasts four beats beat \n  ' o|' - half one-half note bill, lasts two beats \n  ' .|' - quater note, lasts one beat meter\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain representing act musical notes eminence in a special limited ASCII american standard code for information interchange format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last concluding. \n\n   Here is a legend caption: \n 'o' - whole unharmed note bill, lasts four beats beat \n 'o|' - half one-half note bill, lasts two beats \n  '.|' - quater note, lasts one beat meter\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_length = music_string.length;\n  const music_string_chars = music_string.split('');\n  const music_string_chars_length = music_string_chars.length;\n  const music_string_chars_index = 0;\n  const music_string_chars_last_index = music_string_chars_length - 1;\n  const music_string_chars_last_char = music_string_chars[music_string_chars_last_index];\n  const music_string_chars_last_char_index = music_string_chars_last_index;\n  const music_string_chars_last_char_length = music_string_chars_last_char.length;\n  const music_string_chars_last_char_last_index = music_string_chars_last_char_index + music_string_chars_last_char_length - 1;\n  const music_string_chars_last_char_last_char = music_string_chars[music_string_chars_last_char_last_index];\n  const music_string_chars_last_char_last_char_index = music_string_chars_last_char_last_index;\n  const music_string_chars_last_char_last_char_length = music_string_chars_last_char_last_char.length;\n  const music_string_chars_last_char_last_char_last_index = music_string_chars_last_char_last_char_index + music_string_chars_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char = music_string_chars[music_string_chars_last_char_last_char_last_index];\n  const music_string_chars_last_char_last_char_last_char_index = music_string_chars_last_char_last_char_last_char_index + music_string_chars_last_char_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char_length = music_string_chars_last_char_last_char_last_char.length;\n  const music_string_chars_last_char_last_char_last_char_last_index = music_string_chars_last_char_last_char_last_char_last_index + music_string_chars_last_char_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char_last_char = music_string_chars[music_string_chars_last_char_last_char_last_char_last_index];\n  const music_string_chars_last_char_last_char_last_char_last_char_index = music_string_chars_last_char_last_char_last_char_last_char_index + music_string_chars_last_char_last_char_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char_last_char_length = music_string_chars_last_char_last_char_last_char_last_char.length;\n  const music_string_chars_last_char_last_char_last_char_last_char_last_index = music_string_chars_last_char_last_char_last_char_last_char_last_index + music_string_chars_last_char_last_char_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char_last_char_last_char_length = music_string_chars_last_char_last_char_last_char_last_char_last_char.length;\n  const music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index = music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index + music_string_chars_last_char_last_char_last_char_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index = music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index + music_string_chars_last_char_last_char_last_char_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index = music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index + music_string_chars_last_char_last_char_last_char_last_char_last_char_length - 1;\n  const music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index = music_string_chars_last_char_last_char_last_char_last_char_last_char_last_index + music_string_chars_last_char_last_char_last_char_last_char_last_char_length - 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find recover how many times a given substring can be found recover in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find recover how many times a given substring can be found recover in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input remark is a space - delimited specify string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input remark is a space - delimited specify string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input remark is a space - delimited specify string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers('nine two three')\n  'nine two three'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input remark is a space - delimited specify string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers2('nine two three')\n  'nine two three'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input remark is a space - delimited specify string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers3('nine two three')\n  'nine two three'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input remark is a space - delimited specify string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers4('nine two three')\n  'nine two three'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input remark is a space - delimited specify string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers5('nine two three')\n  'nine two three'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input remark is a space - delimited specify string bowled stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from largest to smallest big\n  >>> sortNumbers6('nine two three')\n  'nine two three'\n  */\nconst sortNumbers7", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given move over a positive floating float point item number, it can be decomposed into \n   and integer part share (largest bombastic integer smaller little than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given move over a positive floating float point item number, it can be decomposed into \n   and integer part share (largest bombastic integer smaller little than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const intPartShare = Math.floor(decPart * 10);\n  const decPartShare = decPart * 10 - intPartShare;\n  return intPartShare + decPartShare;\n};\n\n/* Given a number, it can be decomposed into and integer part share (largest bombastic integer smaller than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied add list of numbers (of length at least two) select blue-ribbon and return two that are the closest near to each \n   other and return them in order (smaller modest number numeral, larger large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplied add list of numbers (of length at least two) select blue-ribbon and return two that are the closest near to each \n   other and return them in order (smaller modest number numeral, larger large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const blueRibbon = sorted[sorted.length - 1];\n  const closest = sorted[0];\n  const closestDiff = Math.abs(blueRibbon - closest);\n  const closestIndex = sorted.indexOf(closest);\n  const closestIndexDiff = Math.abs(closestIndex - closestDiff);\n  return [closest, closestIndex];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const blueRibbon = sorted[sorted.length - 1];\n  const closest = sorted[0];\n  const closestDiff = Math.abs(blueRibbon - closest);\n  const closestIndex = sorted.indexOf(closest);\n  const closestIndexDiff = Math.abs(closestIndex - closestDiff);\n  return [closest, closestIndex, closestDiff, closestIndexDiff];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2])\n  (2.0, 2.0, 2.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const blueRibbon = sorted[sorted.length - 1];\n  const closest = sorted[0];\n  const closestDiff = Math.abs(blueRibbon - closest);\n  const closestIndex = sorted.indexOf(closest);\n  const closestIndexDiff = Math.abs(closestIndex - closestDiff);\n  return [closest, closestIndex, closestDiff, closestIndexDiff];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0, 2.0, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0, 2.0, 2.0, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const blueRibbon = sorted[sorted.length - 1];\n  const closest = sorted[0];\n  const closestDiff = Math.abs(blueRibbon - closest);\n  const closestIndex = sorted.indexOf(closest);\n  const closestIndexDiff = Math.abs(closestIndex - closestDiff);\n  return [closest, closestIndex, closestDiff, closestIndexDiff];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0, 2.0, 2.0, 2.0, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])\n  (2.0, 2.0, 2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const blueRibbon = sorted[sorted.length - 1];\n  const closest = sorted[0];\n  const closestDiff = Math.abs(blueRibbon - closest);\n  const", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given move over list of numbers (of at least two elements), apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given move over list of numbers (of at least two elements), apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const unit = 1.0 / Math.max(...numbers)\n  return numbers.map(number => number * unit)\n}\n\n/**\n  * Given a list of numbers, return a list of numbers, where each number is the number of the number in the list\n  * that is the closest to the number in the list.\n  *\n  * @param numbers\n  * @returns {Array}\n  */\nconst closestNumbers = (numbers) => {\n  const closestNumbers = []\n  const closestNumbersMap = {}\n  numbers.forEach(number => {\n    const closestNumber = closestNumbersMap[number]\n    if (closestNumber === undefined) {\n      closestNumbers.push(number)\n      closestNumbersMap[number] = number\n    } else {\n      const distance = Math.abs(number - closestNumber)\n      if (distance < Math.abs(number - closestNumbers[0])) {\n        closestNumbers[0] = number\n      }\n      if (distance < Math.abs(number - closestNumbers[1])) {\n        closestNumbers[1] = number\n      }\n    }\n  })\n  return closestNumbers\n}\n\n/**\n  * Given a list of numbers, return a list of numbers, where each number is the number of the number in the list\n  * that is the closest to the number in the list.\n  *\n  * @param numbers\n  * @returns {Array}\n  */\nconst closestNumbersReverse = (numbers) => {\n  const closestNumbers = []\n  const closestNumbersMap = {}\n  numbers.forEach(number => {\n    const closestNumber = closestNumbersMap[number]\n    if (closestNumber === undefined) {\n      closestNumbers.push(number)\n      closestNumbersMap[number] = number\n    } else {\n      const distance = Math.abs(number - closestNumber)\n      if (distance < Math.abs(number - closestNumbers[0])) {\n        closestNumbers[0] = number\n      }\n      if (distance < Math.abs(number - closestNumbers[1])) {\n        closestNumbers[1] = number\n      }\n    }\n  })\n  return closestNumbers.reverse()\n}\n\n/**\n  * Given a list of numbers, return a list of numbers, where each number is the number of the number in the list\n  * that is the closest to the number in the list.\n  *\n  * @param numbers\n  * @returns {Array}\n  */\nconst closestNumbersReverse2 = (numbers) => {\n  const closestNumbers = []\n  const closestNumbersMap = {}\n  numbers.forEach(number => {\n    const closestNumber = closestNumbersMap[number]\n    if (closestNumber === undefined) {\n      closestNumbers.push(number)\n      closestNumbersMap[number] = number\n    } else {\n      const distance = Math.abs(number - closestNumber)\n      if (distance < Math.abs(number - closestNumbers[0])) {\n        closestNumbers[0] = number\n      }\n      if (distance < Math.abs(number - closestNumbers[1])) {\n        closestNumbers[1] = number\n      }\n    }\n  })\n  return closestNumbers.reverse()\n}\n\n/**\n  * Given a list of numbers, return a list of numbers, where each number is the number of the number in the list\n  * that is the closest to the number in the list.\n  *\n  * @param numbers\n  * @returns {Array}\n  */\nconst closestNumbersReverse3 = (numbers) => {\n  const closestNumbers = []\n  const closestNumbersMap = {}\n  numbers.forEach(number => {\n    const closestNumber = closestNumbersMap[number]\n    if (closestNumber === undefined) {\n      closestNumbers.push(number)\n      closestNumbersMap[number] = number\n    } else {\n      const distance = Math.abs(number - closestNumber)\n      if (distance < Math.abs(number - closestNumbers[0])) {\n        closestNumbers[0] = number\n      }\n      if (distance < Math.abs(number - closestNumbers[1])) {\n        closestNumbers[1] = number\n      }\n    }\n  })\n  return closestNumbers.reverse()\n}\n\n/**\n  * Given a list of numbers, return a list of numbers, where each number is the number of the number in the list\n  * that is the closest to the number in the list.\n  *\n  * @param numbers\n  * @returns {Array}\n  */\nconst closestNumbersReverse4 = (numbers) => {\n  const closestNumbers = []\n  const closestNumbersMap = {}\n  numbers.forEach(number => {\n    const closestNumber = closestNumbersMap[number]\n    if (closestNumber === undefined) {\n      closestNumbers.push(number)\n      closestNumbersMap[number] = number\n    } else {\n      const distance = Math.abs(number - closestNumber)\n      if (distance < Math.abs(number - closestNumbers[0])) {\n        closestNumbers[0] = number\n      }\n      if (distance < Math.abs(number - closestNumbers[1])) {\n        closestNumbers[1] = number\n      }\n    }\n  })\n  return closestNumbers.reverse()\n}\n\n/**\n  * Given a list of numbers, return a list of numbers, where each number is the number of the number in the list\n  * that is the closest to the number in the list.\n  *\n  * @param numbers\n  * @returns {Array}\n  */\nconst closestNumbersReverse5 = (numbers) => {\n  const closestNumbers = []\n  const closestNumbersMap = {}\n  numbers.forEach(number => {\n    const closestNumber = closestNumbersMap[number]\n    if (closestNumber === undefined) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given move over list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter given move over list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given move over list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterStrings(['a', 3.14, 5])\n  * // ['a', 3.14, 5]\n  * filterStrings([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given move over list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterBooleans(['a', 3.14, 5])\n  * // [5]\n  * filterBooleans([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given move over list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterObjects(['a', 3.14, 5])\n  * // [{}, []]\n  * filterObjects([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given move over list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterArrays(['a', 3.14, 5])\n  * // [5]\n  * filterArrays([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given move over list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterFunctions(['a', 3.14, 5])\n  * // []\n  * filterFunctions([1, 2, 3, 'abc', {}, []])\n  * // []\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given move over list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterNumbers(['a', 3.14, 5])\n  * // [5]\n  * filterNumbers([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given move over list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterStrings(['a', 3.14, 5])\n  * // ['a', 3.14, 5]\n  * filterStrings([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given move over list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterBooleans(['a', 3.14, 5])\n  * // [5]\n  * filterBooleans([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given move over list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterObjects(['a', 3.14, 5])\n  * // [{}, []]\n  * filterObjects([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given move over list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterArrays(['a', 3.14, 5])\n  * // [5]\n  * filterArrays([1, 2, 3, 'abc', {}, []])\n  * // [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given move over list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterFunctions(['a', 3.14, 5])\n  * // []\n  * filterFunctions([1, 2, 3, 'abc', {}, []])\n  * // []\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given move over list of any python values only for numbers\n  * @param {Array} values\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n')\n  3\n  */\nconst strlen2 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n')\n  4\n  */\nconst strlen3 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n')\n  5\n  */\nconst strlen4 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n')\n  6\n  */\nconst strlen5 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n')\n  7\n  */\nconst strlen6 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n')\n  8\n  */\nconst strlen7 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n\\n')\n  9\n  */\nconst strlen8 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n\\n\\n')\n  10\n  */\nconst strlen9 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  11\n  */\nconst strlen10 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  12\n  */\nconst strlen11 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  13\n  */\nconst strlen12 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  14\n  */\nconst strlen13 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  15\n  */\nconst strlen14 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      length += 1;\n    }\n  }\n  return length;\n};\n\n/* Return tax return length of given move over string", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given move over number n, find recover the largest large number that divides separate n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given move over number n, find recover the largest large number that divides separate n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i < largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i < largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i < largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i < largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i < largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i < largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i < largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return tax return list of prime factors divisor of given afford integer in the order from smallest modest to largest bombastic. \n   Each of the factors gene should be listed number phone number of times corresponding to how many times it appeares appear in factorization. \n   Input input signal number should be equal to the product merchandise of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return tax return list of prime factors divisor of given afford integer in the order from smallest modest to largest bombastic. \n   Each of the factors gene should be listed number phone number of times corresponding to how many times it appeares appear in factorization. \n   Input input signal number should be equal to the product merchandise of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factors_length = 0;\n  const factors_index = 0;\n  const factors_max = 0;\n  const factors_min = 0;\n  const factors_sum = 0;\n  const factors_sum_length = 0;\n  const factors_sum_index = 0;\n  const factors_sum_max = 0;\n  const factors_sum_min = 0;\n  const factors_sum_sum = 0;\n  const factors_sum_sum_length = 0;\n  const factors_sum_sum_index = 0;\n  const factors_sum_sum_max = 0;\n  const factors_sum_sum_min = 0;\n  const factors_sum_sum_sum = 0;\n  const factors_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_index = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const factors_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers integer, remove all elements component that occur happen more than once. \n   Keep order ordering of elements chemical element left exit the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers integer, remove all elements component that occur happen more than once. \n   Keep order ordering of elements chemical element left exit the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given move over string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a given move over string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toLowerCase() : char.toUpperCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return string.split('').map(flip).join('');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  const flip = (char) => char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input remark list of strings only for ones that start depart with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input remark list of strings only for ones that start depart with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde'])\n  ['array']\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  */\nconst filterOut = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut2 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut3 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut4 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut5 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut6 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut7 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut8 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array', 'xyz'])\n  ['array', 'xyz']\n  */\nconst filterOut9 = (strings, stringsToFilterOut) => {\n  return strings.filter(s =>!stringsToFilterOut.includes(s));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], ['", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given move over a list of deposit and withdrawal operations on a bank depository financial institution account explanation that starts with \n   zero balance. Your task job is to detect if at any point decimal point the balance of account bill fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given move over a list of deposit and withdrawal operations on a bank depository financial institution account explanation that starts with \n   zero balance. Your task job is to detect if at any point decimal point the balance of account bill fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.reduce((acc, curr) => {\n    if (acc) {\n      return acc;\n    }\n    if (curr < 0) {\n      return true;\n    }\n    return false;\n  }, false);\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive incontrovertible numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*Return only positive incontrovertible numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true genuine if a given number phone number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true genuine if a given number phone number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return true if a given number is a perfect number, and false otherwise.\n  >>> isPerfect(1)\n  false\n  >>> isPerfect(2)\n  false\n  >>> isPerfect(3)\n  true\n  >>> isPerfect(4)\n  false\n  >>> isPerfect(5)\n  true\n  >>> isPerfect(6)\n  true\n  >>> isPerfect(7)\n  false\n  >>> isPerfect(8)\n  true\n  >>> isPerfect(9)\n  false\n  >>> isPerfect(10)\n  false\n  >>> isPerfect(11)\n  false\n  >>> isPerfect(12)\n  true\n  >>> isPerfect(13)\n  false\n  >>> isPerfect(14)\n  false\n  >>> isPerfect(15)\n  true\n  >>> isPerfect(16)\n  false\n  >>> isPerfect(17)\n  false\n  >>> isPerfect(18)\n  true\n  >>> isPerfect(19)\n  false\n  >>> isPerfect(20)\n  false\n  >>> isPerfect(21)\n  false\n  >>> isPerfect(22)\n  true\n  >>> isPerfect(23)\n  false\n  >>> isPerfect(24)\n  false\n  >>> isPerfect(25)\n  false\n  >>> isPerfect(26)\n  false\n  >>> isPerfect(27)\n  false\n  >>> isPerfect(28)\n  false\n  >>> isPerfect(29)\n  false\n  >>> isPerfect(30)\n  false\n  >>> isPerfect(31)\n  false\n  >>> isPerfect(32)\n  true\n  >>> isPerfect(33)\n  false\n  >>> isPerfect(34)\n  false\n  >>> isPerfect(35)\n  false\n  >>> isPerfect(36)\n  false\n  >>> isPerfect(37)\n  false\n  >>> isPerfect(38)\n  false\n  >>> isPerfect(39)\n  false\n  >>> isPerfect(40)\n  false\n  >>> isPerfect(41)\n  false\n  >>> isPerfect(42)\n  false\n  >>> isPerfect(43)\n  false\n  >>> isPerfect(44)\n  false\n  >>> isPerfect(45)\n  false\n  >>> isPerfect(46)\n  false\n  >>> isPerfect(47)\n  false\n  >>> isPerfect(48)\n  false\n  >>> isPerfect(49)\n  false\n  >>> isPerfect(50)\n  false\n  >>> isPerfect(51)\n  false\n  >>> isPerfect(52)\n  false\n  >>> isPerfect(53)\n  false\n  >>> isPerfect(54)\n  false\n  >>> isPerfect(55)\n  false\n  >>> isPerfect(56)\n  false\n  >>> isPerfect(57)\n  false\n  >>> isPerfect(58)\n  false\n  >>> isPerfect(59)\n  false\n  >>> isPerfect(60)\n  false\n  >>> isPerfect(61)\n  false\n  >>> isPerfect(62)\n  false\n  >>> isPerfect(63)\n  false\n  >>> isPerfect(64)\n  false\n  >>> isPerfect(65)\n  false\n  >>> isPerfect(66)\n  false\n  >>> isPerfect(67)\n  false\n  >>> isPerfect(68)\n  false\n  >>> isPerfect(69)\n  false\n  >>> isPerfect(70)\n  false\n  >>> isPerfect(71)\n  false\n  >>> isPerfect(72)\n  false\n  >>> isPerfect(73)\n  false\n  >>> isPerfect(74)\n  false\n  >>> isPerfect(75)\n  false\n  >>> isPerfect(76)\n  false\n  >>> isPerfect(77)\n  false\n  >>> isPerfect(78)\n  false\n  >>> isPerfect(79)\n  false\n  >>> isPerfect(80)\n  false\n  >>> isPerfect(81)\n  false\n  >>> isPerfect(82)\n  false\n  >>> isPerfect(83)\n  false\n  >>> isPerfect(84)\n  false\n  >>> isPerfect(85)\n  false\n  >>> isPerfect(86)\n  false\n  >>> isPerfect(87)\n  false\n  >>> isPerfect(88)\n  false\n  >>> isPerfect(89)\n  false\n  >>> isPerfect(90)\n  false\n  >>> isPerfect(91)\n  false\n  >>> isPerfect(92)\n  false\n  >>> isPerfect(93)\n  false\n  >>> isPerfect(94)\n  false\n  >>> isPerfect(95)\n  false\n  >>> isPerfect(96)\n  false\n  >>> isPerfect(97)\n  false\n  >>> isPerfect(98)\n  false\n  >>> isPerfect(99)\n  false\n  >>> isPerfect(100)\n  false\n  >>> isPerfect(101)\n  false\n  >>> isPerfect(102)\n  false\n  >>> isPerfect(103)\n  false\n  >>> isPerfect(104)\n  false\n  >>> isPerfect(105)\n  false\n  >>> isPerfect(106)\n  false\n  >>> isPerfect(107)\n  false\n  >>> isPerfect(108)\n  false\n  >>> isPerfect(109)\n  false\n  >>> isPerfect(110)\n  false\n  >>> isPerfect(111)\n  false\n  >>> isPerfect(112)\n  false\n  >>> isPerfect(113)\n  false\n  >>> isPerfect(114)\n  false\n  >>> isPerfect(115)\n  false\n  >>> isPerfect(116)\n  false\n  >>> isPerfect(117)\n  false\n  >>> isPerfect(118)\n  false\n  >>> isPerfect(119)\n  false\n  >>> isPerfect(120)\n  false\n  >>> isPerfect(121)\n  false\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find line up x such that poly(x) = 0. \n   findZero returns only only zero point compass point, even if there are many. \n   Moreover furthermore, findZero only takes drive list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find line up x such that poly(x) = 0. \n   findZero returns only only zero point compass point, even if there are many. \n   Moreover furthermore, findZero only takes drive list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const x = xs[0];\n  let y = xs[1];\n  let x2 = xs[2];\n  let x3 = xs[3];\n  let x4 = xs[4];\n  let x5 = xs[5];\n  let x6 = xs[6];\n  let x7 = xs[7];\n  let x8 = xs[8];\n  let x9 = xs[9];\n  let x10 = xs[10];\n  let x11 = xs[11];\n  let x12 = xs[12];\n  let x13 = xs[13];\n  let x14 = xs[14];\n  let x15 = xs[15];\n  let x16 = xs[16];\n  let x17 = xs[17];\n  let x18 = xs[18];\n  let x19 = xs[19];\n  let x20 = xs[20];\n  let x21 = xs[21];\n  let x22 = xs[22];\n  let x23 = xs[23];\n  let x24 = xs[24];\n  let x25 = xs[25];\n  let x26 = xs[26];\n  let x27 = xs[27];\n  let x28 = xs[28];\n  let x29 = xs[29];\n  let x30 = xs[30];\n  let x31 = xs[31];\n  let x32 = xs[32];\n  let x33 = xs[33];\n  let x34 = xs[34];\n  let x35 = xs[35];\n  let x36 = xs[36];\n  let x37 = xs[37];\n  let x38 = xs[38];\n  let x39 = xs[39];\n  let x40 = xs[40];\n  let x41 = xs[41];\n  let x42 = xs[42];\n  let x43 = xs[43];\n  let x44 = xs[44];\n  let x45 = xs[45];\n  let x46 = xs[46];\n  let x47 = xs[47];\n  let x48 = xs[48];\n  let x49 = xs[49];\n  let x50 = xs[50];\n  let x51 = xs[51];\n  let x52 = xs[52];\n  let x53 = xs[53];\n  let x54 = xs[54];\n  let x55 = xs[55];\n  let x56 = xs[56];\n  let x57 = xs[57];\n  let x58 = xs[58];\n  let x59 = xs[59];\n  let x60 = xs[60];\n  let x61 = xs[61];\n  let x62 = xs[62];\n  let x63 = xs[63];\n  let x64 = xs[64];\n  let x65 = xs[65];\n  let x66 = xs[66];\n  let x67 = xs[67];\n  let x68 = xs[68];\n  let x69 = xs[69];\n  let x70 = xs[70];\n  let x71 = xs[71];\n  let x72 = xs[72];\n  let x73 = xs[73];\n  let x74 = xs[74];\n  let x75 = xs[75];\n  let x76 = xs[76];\n  let x77 = xs[77];\n  let x78 = xs[78];\n  let x79 = xs[79];\n  let x80 = xs[80];\n  let x81 = xs[81];\n  let x82 = xs[82];\n  let x83 = xs[83];\n  let x84 = xs[84];\n  let x85 = xs[85];\n  let x86 = xs[86];\n  let x87 = xs[87];\n  let x88 = xs[88];\n  let x89 = xs[89];\n  let x90 = xs[90];\n  let x91 = xs[91];\n  let x92 = xs[92];\n  let x93 = xs[93];\n  let x94 = xs[94];\n  let x95 = xs[95];\n  let x96 = xs[96];\n  let x97 = xs[97];\n  let x98 = xs[98];\n  let x99 = xs[99];\n  let x100 = xs[100];\n  let x101 = xs[101];\n  let x102 = xs[102];\n  let x103 = xs[103];\n  let x104 = xs[104];\n  let x105 = xs[105];\n  let x106 = xs[106];\n  let x107 = xs[107];\n  let x108 = xs[108];\n  let x109 = xs[109];\n  let x110 = xs[110", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding correspond indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding correspond indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird3 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird4 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird5 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird6 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird7 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird8 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird9 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird10 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird11 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird12 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird13 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird14 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird15 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird16 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird17 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird18 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nconst sortThird19 = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[l[i]] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[l[i]] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy2 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy3 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy4 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy5 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy6 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy7 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy8 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }\n  }\n  return uniqueList;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy9 = (l, f) => {\n  const uniqueList = [];\n  const uniqueMap = {};\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap[f(l[i])] === undefined) {\n      uniqueList.push(l[i]);\n      uniqueMap[f(l[i])] = 1;\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Return maximum maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number phone number of times the digit finger 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number phone number of times the digit finger 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i === 0) {\n      odd.push(l[i]);\n    } else {\n      odd.push(l[i - 1]);\n    }\n    even.push(l[i]);\n  }\n  return [odd, even];\n};\n\nmodule.exports = sortEven;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns tax return encoded string chain by cycling cycle groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes drive as input string chain encoded with encode_cyclic function. Returns decoded decode string drawstring. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns tax return encoded string chain by cycling cycle groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes drive as input string chain encoded with encode_cyclic function. Returns decoded decode string drawstring. \n   * / \n const decodeCyclic = (s) = > {\n   var decoded = [], decoded2 = [], decoded3 = [], decoded4 = [], decoded5 = [], decoded6 = [], decoded7 = [], decoded8 = [], decoded9 = [], decoded10 = [], decoded11 = [], decoded12 = [], decoded13 = [], decoded14 = [], decoded15 = [], decoded16 = [], decoded17 = [], decoded18 = [], decoded19 = [], decoded20 = [], decoded21 = [], decoded22 = [], decoded23 = [], decoded24 = [], decoded25 = [], decoded26 = [], decoded27 = [], decoded28 = [], decoded29 = [], decoded30 = [], decoded31 = [], decoded32 = [], decoded33 = [], decoded34 = [], decoded35 = [], decoded36 = [], decoded37 = [], decoded38 = [], decoded39 = [], decoded40 = [], decoded41 = [], decoded42 = [], decoded43 = [], decoded44 = [], decoded45 = [], decoded46 = [], decoded47 = [], decoded48 = [], decoded49 = [], decoded50 = [], decoded51 = [], decoded52 = [], decoded53 = [], decoded54 = [], decoded55 = [], decoded56 = [], decoded57 = [], decoded58 = [], decoded59 = [], decoded60 = [], decoded61 = [], decoded62 = [], decoded63 = [], decoded64 = [], decoded65 = [], decoded66 = [], decoded67 = [], decoded68 = [], decoded69 = [], decoded70 = [], decoded71 = [], decoded72 = [], decoded73 = [], decoded74 = [], decoded75 = [], decoded76 = [], decoded77 = [], decoded78 = [], decoded79 = [], decoded80 = [], decoded81 = [], decoded82 = [], decoded83 = [], decoded84 = [], decoded85 = [], decoded86 = [], decoded87 = [], decoded88 = [], decoded89 = [], decoded90 = [], decoded91 = [], decoded92 = [], decoded93 = [], decoded94 = [], decoded95 = [], decoded96 = [], decoded97 = [], decoded98 = [], decoded99 = [], decoded100 = [], decoded101 = [], decoded102 = [], decoded103 = [], decoded104 = [], decoded105 = [], decoded106 = [], decoded107 = [], decoded108 = [], decoded109 = [], decoded110 = [], decoded111 = [], decoded112 = [], decoded113 = [], decoded114 = [], decoded115 = [], decoded116 = [], decoded117 = [], decoded118 = [], decoded119 = [], decoded120 = [], decoded121 = [], decoded122 = [], decoded123 = [], decoded124 = [], decoded125 = [], decoded126 = [], decoded127 = [], decoded128 = [], decoded129 = [], decoded130 = [], decoded131 = [], decoded132 = [], decoded133 = [], decoded134 = [], decoded135 = [], decoded136 = [], decoded137 = [], decoded138 = [], decoded139 = [], decoded140 = [], decoded141 = [], decoded142 = [], decoded143 = [], decoded144 = [], decoded145 = [], decoded146 = [], decoded147 = [], decoded148 = [], decoded149 = [], decoded150 = [], decoded151 = [], decoded152 = [], decoded153 = [], decoded154 = [], decoded155 = [], decoded156 = [], decoded157 = [], decoded158 = [], decoded159 = [], decoded160 = [], decoded161 = [], decoded162 = [], decoded163 = [], decoded164 = [], decoded165 = [], decoded166 = [], decoded167 = [], decoded168 = [], decoded169 = [], decoded170 = [], decoded171 = [], decoded172 = [], decoded173 = [], decoded174 = [], decoded175 = [], decoded176 = [], decoded177 = [], decoded178 = [], decoded179 = [], decoded180 = [], decoded181 = [], decoded182 = [], decoded183 = [], decoded184 = [], decoded185 = [], decoded186 = [], decoded187 = [], decoded188 = [], decoded189 = [], decoded190 = [], decoded191 = [], decoded192 = [], decoded193 = [], decoded194 = [], decoded195 = [], decoded196 = [], decoded197 = [], decoded198 = [], decoded199 = [], decoded200 = [], decoded201 = [], decoded202 = [], decoded203 = [], decoded204 = [], decoded205 = [], decoded206 = [], decoded207 = [], decoded208 = [], decoded209 = [], decoded210 = [], decoded211 = [], decoded212 = [], decoded213 = [], decoded214 = [], decoded215 = [], decoded216 = [], decoded217", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 2;\n  let fib = 1;\n  let i = 0;\n  while (prime < n) {\n    let nextPrime = prime + prime;\n    if (nextPrime > n) {\n      break;\n    }\n    if (isPrime(nextPrime)) {\n      fib = fib + nextPrime;\n    }\n    prime = nextPrime;\n  }\n  return fib;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given move over list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference remainder between each \n   element and a centerpoint (mean in this case character ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given move over list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference remainder between each \n   element and a centerpoint (mean in this case character ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation10 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation11 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation12 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation13 = (numbers) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine think a road that's a perfectly straight square infinitely boundlessly long line lineage. \n   n cars cable car are driving drive left to right mighty;   simultaneously, a different set of n cars \n   are driving force right correct to left impart.    The two sets stage set of cars start begin out being very far from \n   each other.   All cars cable car move act in the same speed.   Two cars are said to collide \n   when a car cable car that's moving go left leave to right hits reach a car cable car that's moving right to left. \n   However, the cars car are infinitely boundlessly sturdy and strong hard; as a result solution, they continue moving \n   in their trajectory as if they did not collide clash. \n\n   This function routine outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine think a road that's a perfectly straight square infinitely boundlessly long line lineage. \n   n cars cable car are driving drive left to right mighty;   simultaneously, a different set of n cars \n   are driving force right correct to left impart.    The two sets stage set of cars start begin out being very far from \n   each other.   All cars cable car move act in the same speed.   Two cars are said to collide \n   when a car cable car that's moving go left leave to right hits reach a car cable car that's moving right to left. \n   However, the cars car are infinitely boundlessly sturdy and strong hard; as a result solution, they continue moving \n   in their trajectory as if they did not collide clash. \n\n   This function routine outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n   var i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.slice().map((x) => x + 1);\n};\n\n/*Return list with elements component decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  return l.slice().map((x) => x - 1);\n};\n\n/*Return list with elements component multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 10, 6, 10, 4, 10, 1, 124]\n  */\nconst multList = (l) => {\n  return l.slice().map((x) => x * 2);\n};\n\n/*Return list with elements component divided by 2.\n  >>> divList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 1.5, 1.5, 1.5, 1.5]\n  */\nconst divList = (l) => {\n  return l.slice().map((x) => x / 2);\n};\n\n/*Return list with elements component added to 1.\n  >>> addList([1, 2, 3])\n  [2, 3, 4]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst addList = (l) => {\n  return l.slice().map((x) => x + 1);\n};\n\n/*Return list with elements component subtracted from 1.\n  >>> subList([1, 2, 3])\n  [0, 1, 2]\n  >>> subList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 2, 3, 3, 8, 1, 122]\n  */\nconst subList = (l) => {\n  return l.slice().map((x) => x - 1);\n};\n\n/*Return list with elements component divided by 0.\n  >>> div0List([1, 2, 3])\n  [Infinity, Infinity, Infinity]\n  >>> div0List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]\n  */\nconst div0List = (l) => {\n  return l.slice().map((x) => x / 0);\n};\n\n/*Return list with elements component divided by -1.\n  >>> divNeg1List([1, 2, 3])\n  [-Infinity, -Infinity, -Infinity]\n  >>> divNeg1List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [-Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity]\n  */\nconst divNeg1List = (l) => {\n  return l.slice().map((x) => x / -1);\n};\n\n/*Return list with elements component divided by -2.\n  >>> divNeg2List([1, 2, 3])\n  [-1, -1, -1]\n  >>> divNeg2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2]\n  */\nconst divNeg2List = (l) => {\n  return l.slice().map((x) => x / -2);\n};\n\n/*Return list with elements component divided by -3.\n  >>> divNeg3List([1, 2, 3])\n  [0, 0, 0]\n  >>> divNeg3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst divNeg3List = (l) => {\n  return l.slice().map((x) => x / -3);\n};\n\n/*Return list with elements component divided by -4.\n  >>> divNeg4List([1, 2, 3])\n  [0, 0, 0]\n  >>> divNeg4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst divNeg4List = (l) => {\n  return l.slice().map((x) => x / -4);\n};\n\n/*Return list with elements component divided by -5.\n  >>> divNeg5List([1, 2, 3])\n  [0, 0, 0]\n  >>> divNeg5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst divNeg5List = (l) => {\n  return l.slice().map((x) => x / -5);\n};\n\n/*Return list with elements component divided by -6.\n  >>> divNeg6List([1, 2, 3])\n  [0, 0, 0]\n  >>> divNeg6List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst divNeg6List = (l) => {\n  return l.slice().map((x) => x", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  pairsSumToZero2 takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero2([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  pairsSumToZero3 takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero3([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero3([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero3([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero3([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  pairsSumToZero4 takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero4([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero4([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero4([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero4([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  pairsSumToZero5 takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero5([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero5([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero5([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero5([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  pairsSumToZero6 takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero6([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero6([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero6([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero6([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero6([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  pairsSumToZero7 takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero7([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero7([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero7([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero7([2, 4, -5, 3, 5, 7])", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical numeral base of input number phone number x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical numeral base of input number phone number x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let stringed = '';\n  while (x > 0) {\n    stringed = (x % base) + stringed;\n    x = Math.floor(x / base);\n  }\n  return stringed;\n};\n\n/*\n  Given a string, return a string with all the vowels replaced by consonants.\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n  'hello'\n  >>> replaceVowels('hello')\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number phone number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number phone number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length;\n  if (len === 0) {\n    return undefined;\n  }\n  const half = len / 2;\n  const left = l.slice(0, half);\n  const right = l.slice(half);\n  const leftLen = left.length;\n  const rightLen = right.length;\n  if (leftLen === 0) {\n    return right[0];\n  }\n  if (rightLen === 0) {\n    return left[leftLen - 1];\n  }\n  const leftMedian = median(left);\n  const rightMedian = median(right);\n  if (leftMedian === rightMedian) {\n    return leftMedian;\n  }\n  return (leftMedian + rightMedian) / 2;\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('aba')\n  true\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return the sum of the digits of n.\n  >>> sum(1)\n  1\n  >>> sum(2)\n  2\n  >>> sum(3)\n  6\n  >>> sum(4)\n  10\n  >>> sum(5)\n  15\n  >>> sum(6)\n  21\n  >>> sum(7)\n  28\n  >>> sum(8)\n  36\n  >>> sum(9)\n  45\n  >>> sum(10)\n  55\n  >>> sum(11)\n  66\n  >>> sum(12)\n  81\n  >>> sum(13)\n  96\n  >>> sum(14)\n  111\n  >>> sum(15)\n  126\n  >>> sum(16)\n  153\n  >>> sum(17)\n  180\n  >>> sum(18)\n  207\n  >>> sum(19)\n  234\n  >>> sum(20)\n  261\n  >>> sum(21)\n  288\n  >>> sum(22)\n  315\n  >>> sum(23)\n  342\n  >>> sum(24)\n  369\n  >>> sum(25)\n  396\n  >>> sum(26)\n  423\n  >>> sum(27)\n  450\n  >>> sum(28)\n  477\n  >>> sum(29)\n  504\n  >>> sum(30)\n  531\n  >>> sum(31)\n  558\n  >>> sum(32)\n  585\n  >>> sum(33)\n  602\n  >>> sum(34)\n  629\n  >>> sum(35)\n  646\n  >>> sum(36)\n  663\n  >>> sum(37)\n  680\n  >>> sum(38)\n  697\n  >>> sum(39)\n  714\n  >>> sum(40)\n  731\n  >>> sum(41)\n  748\n  >>> sum(42)\n  765\n  >>> sum(43)\n  782\n  >>> sum(44)\n  799\n  >>> sum(45)\n  806\n  >>> sum(46)\n  813\n  >>> sum(47)\n  820\n  >>> sum(48)\n  827\n  >>> sum(49)\n  834\n  >>> sum(50)\n  841\n  >>> sum(51)\n  848\n  >>> sum(52)\n  855\n  >>> sum(53)\n  862\n  >>> sum(54)\n  869\n  >>> sum(55)\n  876\n  >>> sum(56)\n  883\n  >>> sum(57)\n  890\n  >>> sum(58)\n  897\n  >>> sum(59)\n  904\n  >>> sum(60)\n  911\n  >>> sum(61)\n  918\n  >>> sum(62)\n  925\n  >>> sum(63)\n  932\n  >>> sum(64)\n  939\n  >>> sum(65)\n  946\n  >>> sum(66)\n  953\n  >>> sum(67)\n  960\n  >>> sum(68)\n  957\n  >>> sum(69)\n  964\n  >>> sum(70)\n  971\n  >>> sum(71)\n  978\n  >>> sum(72)\n  985\n  >>> sum(73)\n  992\n  >>> sum(74)\n  999\n  >>> sum(75)\n  1006\n  >>> sum(76)\n  1013\n  >>> sum(77)\n  1020\n  >>> sum(78)\n  1027\n  >>> sum(79)\n  1034\n  >>> sum(80)\n  1041\n  >>> sum(81)\n  1048\n  >>> sum(82)\n  1055\n  >>> sum(83)\n  1062\n  >>> sum(84)\n  1069\n  >>> sum(85)\n  1076\n  >>> sum(86)\n  1083\n  >>> sum(87)\n  1090\n  >>> sum(88)\n  1097\n  >>> sum(89)\n  1104\n  >>> sum(90)\n  1111\n  >>> sum(91)\n  1118\n  >>> sum(92)\n  1125\n  >>> sum(93)\n  1132\n  >>> sum(94)\n  1139\n  >>> sum(95)\n  1146\n  >>> sum(96)\n  1153\n  >>> sum(97)\n  1160\n  >>> sum(98)\n  1167\n  >>> sum(99)\n  1174\n  >>> sum(100)\n  1181\n  >>> sum(101)\n  1188\n  >>> sum(102)\n  1195\n  >>> sum(103)\n  1202\n  >>> sum(104)\n  1209\n  >>> sum(105)\n  1216\n  >>> sum(106)\n  1223\n  >>> sum(107)\n  1230\n  >>> sum(108)\n  1237\n  >>> sum(109)\n  1244\n  >>> sum(110)\n  1251\n  >>> sum(111)\n  1258\n  >>> sum(112)\n  1265\n  >>> sum(113)\n  1272\n  >>> sum(114)\n  1279\n  >>> sum(115)\n  1286\n  >>> sum(116)\n  1293\n  >>> sum(117)\n  1300\n  >>> sum(118)\n  1307\n  >>> sum(119)\n  1314\n  >>> sum(120)\n  1321\n  >>> sum(121)\n  1328\n  >>> sum(122)\n  1335\n  >>> sum(123)\n  1342\n  >>> sum(124)\n  1349\n  >>> sum(125)\n  1356\n  >>> sum(126)\n  1363\n  >>> sum(127)\n  1370\n  >>> sum(128)\n  1377\n  >>> sum(129)\n  1384\n  >>> sum(130)\n  1391\n  >>> sum(131)\n  1398\n  >>> sum(132)\n  1405\n  >>> sum(133)\n  1412\n  >>> sum(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number phone number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a number phone number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  const index = 0;\n  const length = numbers.length;\n  const isDelimeter = (number) => number === delimeter;\n  const isLast = (number) => index === length - 1;\n  const isFirst = (number) => index === 0;\n  const isDelimeterOrLast = (number) => isDelimeter(number) || isLast(number);\n  const isDelimeterOrFirst = (number) => isDelimeter(number) || isFirst(number);\n  while (index < length) {\n    if (isDelimeterOrLast(numbers[index])) {\n      result.push(numbers[index]);\n      index++;\n    } else if (isDelimeterOrFirst(numbers[index + 1])) {\n      result.push(numbers[index]);\n      result.push(delimeter);\n      index++;\n    } else {\n      result.push(numbers[index]);\n      result.push(numbers[index + 1]);\n      index += 2;\n    }\n  }\n  return result;\n};\n\nexport default intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns tax return encoded string chain by shifting shift every character by 5 in the alphabet rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns tax return encoded string chain by shifting shift every character by 5 in the alphabet rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function routine that takes string chain and returns return key string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function routine that takes string chain and returns return key string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const result = text.replace(/[aeiouAEIOU]/g, '')\n  return result\n}\n\n/*\n  removePunctuation is a function routine that takes string chain and returns return key string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\'s', '\\'S', '\\'\\'s', '\\'\\'S', '\\'\\'\\'s', '\\'\\'\\'S', '\\'\\'\\'\\'s', '\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true genuine if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true genuine if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  const len = l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  * Subtract two numbers number x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/*\n  * Multiply two numbers number x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/*\n  * Divide two numbers number x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\n/*\n  * Modulo two numbers number x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n}\n\n/*\n  * Return the absolute value of a number\n  >>> abs(2)\n  2\n  >>> abs(-2)\n  2\n  */\nconst abs = x => {\n  return Math.abs(x);\n}\n\n/*\n  * Return the square root of a number\n  >>> sqrt(4)\n  2\n  >>> sqrt(9)\n  3\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n}\n\n/*\n  * Return the cube root of a number\n  >>> cubeRoot(4)\n  2\n  >>> cubeRoot(9)\n  3\n  */\nconst cubeRoot = x => {\n  return Math.pow(x, 1 / 3);\n}\n\n/*\n  * Return the natural logarithm of a number\n  >>> log(4)\n  2\n  >>> log(9)\n  3\n  */\nconst log = x => {\n  return Math.log(x);\n}\n\n/*\n  * Return the base 10 logarithm of a number\n  >>> log10(4)\n  2\n  >>> log10(9)\n  3\n  */\nconst log10 = x => {\n  return Math.log10(x);\n}\n\n/*\n  * Return the hyperbolic cosine of a number\n  >>> cos(4)\n  0.980785280403\n  >>> cos(9)\n  0.999847695156\n  */\nconst cos = x => {\n  return Math.cos(x);\n}\n\n/*\n  * Return the hyperbolic sine of a number\n  >>> sin(4)\n  0.9238795325\n  >>> sin(9)\n  0.99879545621\n  */\nconst sin = x => {\n  return Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic tangent of a number\n  >>> tan(4)\n  0.761594155955\n  >>> tan(9)\n  0.99518472667\n  */\nconst tan = x => {\n  return Math.tan(x);\n}\n\n/*\n  * Return the hyperbolic cotangent of a number\n  >>> cot(4)\n  0.761594155955\n  >>> cot(9)\n  0.99518472667\n  */\nconst cot = x => {\n  return 1 / Math.tan(x);\n}\n\n/*\n  * Return the hyperbolic secant of a number\n  >>> sec(4)\n  0.761594155955\n  >>> sec(9)\n  0.99518472667\n  */\nconst sec = x => {\n  return 1 / Math.cos(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.761594155955\n  >>> csc(9)\n  0.99518472667\n  */\nconst csc = x => {\n  return 1 / Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.761594155955\n  >>> csc(9)\n  0.99518472667\n  */\nconst csc = x => {\n  return 1 / Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.761594155955\n  >>> csc(9)\n  0.99518472667\n  */\nconst csc = x => {\n  return 1 / Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.761594155955\n  >>> csc(9)\n  0.99518472667\n  */\nconst csc = x => {\n  return 1 / Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.761594155955\n  >>> csc(9)\n  0.99518472667\n  */\nconst csc = x => {\n  return 1 / Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.761594155955\n  >>> csc(9)\n  0.99518472667\n  */\nconst csc = x => {\n  return 1 / Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.761594155955\n  >>> csc(9)\n  0.99518472667\n  */\nconst csc = x => {\n  return 1 / Math.sin(x);\n}\n\n/*\n  * Return the hyperbolic cosecant of a number\n  >>> csc(4)\n  0.7615941559", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check discipline if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check discipline if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0;\n    while (i < s0.length && i < s1.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('abcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    let i = 0;\n    while (i < s0.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('abcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord2 = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    let i = 0;\n    while (i < s0.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('abcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord3 = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    let i = 0;\n    while (i < s0.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('abcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord4 = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    let i = 0;\n    while (i < s0.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('abcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord5 = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    let i = 0;\n    while (i < s0.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('abcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord6 = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    let i = 0;\n    while (i < s0.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('abcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord7 = (s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string chain of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string chain of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsStack = brackets.split(\" \");\n  let bracketsStackLength = bracketsStack.length;\n  let bracketsStackIndex = bracketsStackLength - 1;\n  let bracketsStackIndexStart = bracketsStackIndex;\n  let bracketsStackIndexEnd = bracketsStackIndex;\n  let bracketsStackIndexStartClosing = bracketsStackIndex;\n  let bracketsStackIndexEndClosing = bracketsStackIndex;\n  let bracketsStackIndexStartOpening = bracketsStackIndex;\n  let bracketsStackIndexEndOpening = bracketsStackIndex;\n  let bracketsStackIndexOpening = bracketsStackIndex;\n  let bracketsStackIndexClosing = bracketsStackIndex;\n  let bracketsStackIndexOpeningClosing = bracketsStackIndex;\n  let bracketsStackIndexClosingOpening = bracketsStackIndex;\n  let bracketsStackIndexOpeningOpening = bracketsStackIndex;\n  while (bracketsStackIndex > 0) {\n    bracketsStackIndex--;\n    let bracket = bracketsStack[bracketsStackIndex];\n    if (bracket === \"<\") {\n      bracketsStackIndexStart = bracketsStackIndex;\n      bracketsStackIndexStartOpening = bracketsStackIndex;\n    } else if (bracket === \">\") {\n      bracketsStackIndexEnd = bracketsStackIndex;\n      bracketsStackIndexEndClosing = bracketsStackIndex;\n    } else if (bracket === \"<<\") {\n      bracketsStackIndexStart = bracketsStackIndex;\n      bracketsStackIndexStartOpening = bracketsStackIndex;\n      bracketsStackIndexOpening = bracketsStackIndex;\n    } else if (bracket === \">>\") {\n      bracketsStackIndexEnd = bracketsStackIndex;\n      bracketsStackIndexEndClosing = bracketsStackIndex;\n      bracketsStackIndexClosing = bracketsStackIndex;\n    } else if (bracket === \">\") {\n      bracketsStackIndexEnd = bracketsStackIndex;\n      bracketsStackIndexEndOpening = bracketsStackIndex;\n      bracketsStackIndexOpening = bracketsStackIndex;\n    } else if (bracket === \"<\") {\n      bracketsStackIndexStart = bracketsStackIndex;\n      bracketsStackIndexStartClosing = bracketsStackIndex;\n      bracketsStackIndexClosing = bracketsStackIndex;\n    } else if (bracket === \"<<<\") {\n      bracketsStackIndexStart = bracketsStackIndex;\n      bracketsStackIndexStartOpening = bracketsStackIndex;\n      bracketsStackIndexOpening = bracketsStackIndex;\n      bracketsStackIndexOpeningClosing = bracketsStackIndex;\n    } else if (bracket === \">>>\") {\n      bracketsStackIndexEnd = bracketsStackIndex;\n      bracketsStackIndexEndOpening = bracketsStackIndex;\n      bracketsStackIndexOpening = bracketsStackIndex;\n      bracketsStackIndexOpeningOpening = bracketsStackIndex;\n    }\n    if (bracketsStackIndexStartOpening > bracketsStackIndexStart) {\n      bracketsStackIndexStartOpening = bracketsStackIndexStart;\n    }\n    if (bracketsStackIndexEndOpening > bracketsStackIndexEnd) {\n      bracketsStackIndexEndOpening = bracketsStackIndexEnd;\n    }\n    if (bracketsStackIndexStartClosing > bracketsStackIndexStart) {\n      bracketsStackIndexStartClosing = bracketsStackIndexStart;\n    }\n    if (bracketsStackIndexEndClosing > bracketsStackIndexEnd) {\n      bracketsStackIndexEndClosing = bracketsStackIndexEnd;\n    }\n    if (bracketsStackIndexStartOpening < bracketsStackIndexStart) {\n      bracketsStackIndexStartOpening = bracketsStackIndexStart;\n    }\n    if (bracketsStackIndexEndOpening < bracketsStackIndexEnd) {\n      bracketsStackIndexEndOpening = bracketsStackIndexEnd;\n    }\n    if (bracketsStackIndexStartClosing < bracketsStackIndexStart) {\n      bracketsStackIndexStartClosing = bracketsStackIndexStart;\n    }\n    if (bracketsStackIndexEndClosing < bracketsStackIndexEnd) {\n      bracketsStackIndexEndClosing = bracketsStackIndexEnd;\n    }\n    if (bracketsStackIndexOpening < bracketsStackIndexOpening) {\n      bracketsStackIndexOpening = bracketsStackIndexOpening;\n    }\n    if (bracketsStackIndexOpeningOpening < bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningOpening = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexClosing < bracketsStackIndexClosing) {\n      bracketsStackIndexClosing = bracketsStackIndexClosing;\n    }\n    if (bracketsStackIndexClosingOpening < bracketsStackIndexClosingOpening) {\n      bracketsStackIndexClosingOpening = bracketsStackIndexClosingOpening;\n    }\n    if (bracketsStackIndexOpeningClosing < bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexClosingOpening < bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexClosingOpening = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexOpeningClosing > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexClosingOpening > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexClosingOpening = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexOpeningClosing > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexClosingOpening > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexOpeningClosing > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexOpeningClosing > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexOpeningClosing > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (bracketsStackIndexOpeningClosing > bracketsStackIndexOpeningOpening) {\n      bracketsStackIndexOpeningClosing = bracketsStackIndexOpeningOpening;\n    }\n    if (br", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true genuine is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true genuine is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted classify unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return sorted classify unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  return [...new Set([...l1_set,...l2_set].filter(x => l1_set.has(x) && l2_set.has(x)))]\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the smallest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the smallest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the smallest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the smallest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the smallest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the smallest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\n/*Return the smallest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input remark to this function is a string chain represented act multiple groups for nested parentheses digression separated divide by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting cuddle while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain represented act multiple groups for nested parentheses digression separated divide by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting cuddle while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let current_level = 0;\n  for (let i = 0; i < paren_string_array_length; i++) {\n    if (paren_string_array[i] === '(') {\n      current_level++;\n    } else if (paren_string_array[i] === ')') {\n      current_level--;\n    }\n    if (current_level === 0) {\n      paren_string_array_deepest_level.push(i);\n    }\n  }\n  return paren_string_array_deepest_level;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let current_level = 0;\n  for (let i = 0; i < paren_string_array_length; i++) {\n    if (paren_string_array[i] === '(') {\n      current_level++;\n    } else if (paren_string_array[i] === ')') {\n      current_level--;\n    }\n    if (current_level === 0) {\n      paren_string_array_deepest_level.push(i);\n    }\n  }\n  return paren_string_array_deepest_level;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let current_level = 0;\n  for (let i = 0; i < paren_string_array_length; i++) {\n    if (paren_string_array[i] === '(') {\n      current_level++;\n    } else if (paren_string_array[i] === ')') {\n      current_level--;\n    }\n    if (current_level === 0) {\n      paren_string_array_deepest_level.push(i);\n    }\n  }\n  return paren_string_array_deepest_level;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let current_level = 0;\n  for (let i = 0; i < paren_string_array_length; i++) {\n    if (paren_string_array[i] === '(') {\n      current_level++;\n    } else if (paren_string_array[i] === ')') {\n      current_level--;\n    }\n    if (current_level === 0) {\n      paren_string_array_deepest_level.push(i);\n    }\n  }\n  return paren_string_array_deepest_level;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let current_level = 0;\n  for (let i = 0; i < paren_string_array_length; i++) {\n    if (paren_string_array[i] === '(') {\n      current_level++;\n    } else if (paren_string_array[i] === ')') {\n      current_level--;\n    }\n    if (current_level === 0) {\n      paren_string_array_deepest_level.push(i);\n    }\n  }\n  return paren_string_array_deepest_level;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let current_level = 0;\n  for (let i = 0; i < paren_string_array_length; i++) {\n    if (paren_string_array[i] === '(') {\n      current_level++;\n    } else if (paren_string_array[i] === ')') {\n      current_level--;\n    }\n    if (current_level === 0) {\n      paren_string_array_deepest_level.push(i);\n    }\n  }\n  return paren_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function routine that sums numbers number from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is a function routine that sums numbers number from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string chain of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string chain of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  const stackLength = brackets.length;\n  for (let i = 0; i < stackLength; i++) {\n    const bracket = brackets[i];\n    if (bracket === \"(\" || bracket === \")\") {\n      stack.push(bracket);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== \"(\" && top!== \")\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the number of opening brackets.\n  For example, given \"()\", return 1.\n  Given \"()()\", return 2.\n  Given \"(()())\", return 3.\n  Given \"()(()())\", return 4.\n  Given \"()()()\", return 5.\n  Given \"()()()()\", return 6.\n  Given \"()()()()()\", return 7.\n  Given \"()()()()()()\", return 8.\n  Given \"()()()()()()()\", return 9.\n  Given \"()()()()()()()()\", return 10.\n  Given \"()()()()()()()()()\", return 11.\n  Given \"()()()()()()()()()()\", return 12.\n  Given \"()()()()()()()()()()()\", return 13.\n  Given \"()()()()()()()()()()()()\", return 14.\n  Given \"()()()()()()()()()()()()()\", return 15.\n  Given \"()()()()()()()()()()()()()()\", return 16.\n  Given \"()()()()()()()()()()()()()()()\", return 17.\n  Given \"()()()()()()()()()()()()()()()()\", return 18.\n  Given \"()()()()()()()()()()()()()()()()()\", return 19.\n  Given \"()()()()()()()()()()()()()()()()()()\", return 20.\n  Given \"()()()()()()()()()()()()()()()()()()()\", return 21.\n  Given \"()()()()()()()()()()()()()()()()()()()()\", return 22.\n  Given \"()()()()()()()()()()()()()()()()()()()()()\", return 23.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()\", return 24.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()\", return 25.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()\", return 26.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()\", return 27.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 28.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 29.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 30.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 31.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 32.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 33.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 34.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 35.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 36.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 37.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 38.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 39.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 40.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 41.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 42.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 43.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 44.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 45.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 46.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\", return 47.\n  Given \"()()()()()()()()()()()()()()()()()()()()()()", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent constitute coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return tax return derivative of this polynomial in the same form kind.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent constitute coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return tax return derivative of this polynomial in the same form kind.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = xs.slice(1);\n  return d.map((x) => x * x);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs) => {\n  let d = xs.slice(1);\n  return d.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib[n];\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function routine vowelsCount which takes a string chain representing act \n   a word as input remark and returns hark back the number act of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given impart word son. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function routine vowelsCount which takes a string chain representing act \n   a word as input remark and returns hark back the number act of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given impart word son. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*Write a function routine isVowel which takes a string chain representing act \n   a word as input remark and returns hark back true if the given word is a \n   vowel in the string. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function routine isVowel which takes a string chain representing act \n   a word as input remark and returns hark back true if the given word is a \n   vowel in the string. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel2 = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function routine isVowel which takes a string chain representing act \n   a word as input remark and returns hark back true if the given word is a \n   vowel in the string. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel3 = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'y') {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function routine isVowel which takes a string chain representing act \n   a word as input remark and returns hark back true if the given word is a \n   vowel in the string. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel4 = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'y' || s[i] === 'y') {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function routine isVowel which takes a string chain representing act \n   a word as input remark and returns hark back true if the given word is a \n   vowel in the string. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel5 = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'y' || s[i] === 'y' || s[i] === 'y') {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function routine isVowel which takes a string chain representing act \n   a word as input remark and returns hark back true if the given word is a \n   vowel in the string. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel6 = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'y' || s[i] === 'y' || s[i] === 'y' || s[i] === 'y') {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function routine isVowel which takes a string chain representing act \n   a word as input remark and returns hark back true if the given word is a \n   vowel in the string. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits finger of the integer x, shift the digits right veracious by shift\n   and return the result resultant role as a string. \n   If shift > number phone number of digits digit, return digits finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits finger of the integer x, shift the digits right veracious by shift\n   and return the result resultant role as a string. \n   If shift > number phone number of digits digit, return digits finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0, shift).join('');\n  if (shift < digits.length) {\n    result = digits.slice(shift).join('') + result;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = digits.slice(0,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task necessitate \n   Write a function routine that takes claim a string as input remark and returns hark back the sum union of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task necessitate \n   Write a function routine that takes claim a string as input remark and returns hark back the sum union of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task job, you will be given a string chain that represents act a number of apples apple and oranges orange \n   that are distributed spread in a basket of fruit this basket contains check \n   apples, oranges, and mango fruits. Given contribute the string drawstring that represents the total number numeral of \n   the oranges and apples and an integer that represent map the total full number numeral of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task job, you will be given a string chain that represents act a number of apples apple and oranges orange \n   that are distributed spread in a basket of fruit this basket contains check \n   apples, oranges, and mango fruits. Given contribute the string drawstring that represents the total number numeral of \n   the oranges and apples and an integer that represent map the total full number numeral of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let total = 0\n   let map = 0\n   let num = 0\n   let str = s.split(\" \")\n   for (let i = 0; i < n; i++) {\n     let num = parseInt(str[i])\n     total += num\n     map += num\n     num++\n   }\n   return total - map\n }\n */\n\nfunction fruitDistribution(s, n) {\n  let total = 0\n  let map = 0\n  let num = 0\n  let str = s.split(\" \")\n  for (let i = 0; i < n; i++) {\n    let num = parseInt(str[i])\n    total += num\n    map += num\n    num++\n  }\n  return total - map\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges orange \", 19))\nconsole.log(fruitDistribution(\"0 apples apple and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges \", 100))\nconsole.log(fruitDistribution(\"100 apples apple and 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given move over an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task job is to pluck one of the nodes lymph node and return it. \n   The plucked node lymph node should be the node with the smallest modest even value. \n   If multiple nodes with the same smallest even tied value are found witness return the node lymph node that has smallest index. \n\n   The plucked node lymph node should be returned hark back in a list, [ smalest_value, its index ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" Given move over an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task job is to pluck one of the nodes lymph node and return it. \n   The plucked node lymph node should be the node with the smallest modest even value. \n   If multiple nodes with the same smallest even tied value are found witness return the node lymph node that has smallest index. \n\n   The plucked node lymph node should be returned hark back in a list, [ smalest_value, its index ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const arrEven = arr.filter(node => node % 2 === 0)\n  if (arrEven.length === 0) {\n    return []\n  }\n  const arrIndex = arrEven.map(node => node.toString()).sort((a, b) => a.localeCompare(b))\n  const arrValue = arrEven.map(node => node.toString()).sort((a, b) => a.localeCompare(b))\n  const arrIndexEven = arrIndex.filter(node => node.length === arrValue.length)\n  if (arrIndexEven.length === 0) {\n    return []\n  }\n  return [arrValue[arrIndexEven[0]], arrIndex[arrIndexEven[0]]]\n}\n\nconsole.log(pluck([4, 2, 3]))\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given move over a non - empty list of positive integers integer. Return fall the greatest integer that is greater capital than \n   zero, and has a frequency greater bang-up than or equal adequate to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a non - empty list of positive integers integer. Return fall the greatest integer that is greater capital than \n   zero, and has a frequency greater bang-up than or equal adequate to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > max) {\n      max = cur;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > max && cur > 0) {\n      max = cur;\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given move over list of integers, return list in strange foreign order club. \n   Strange sorting sort, is when you start get down with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over list of integers, return list in strange foreign order club. \n   Strange sorting sort, is when you start get down with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const club = [];\n  const len = sorted.length;\n  for (let i = 0; i < len; i++) {\n    club.push(sorted[i]);\n  }\n  return club;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given move over the lengths of the three sides side of a triangle triangulum. Return the area of \n   the triangle triangulum rounded round off to 2 decimal points point if the three sides form shape a valid triangle. \n   Otherwise return -1 \n   Three sides make cause a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side slope.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over the lengths of the three sides side of a triangle triangulum. Return the area of \n   the triangle triangulum rounded round off to 2 decimal points point if the three sides form shape a valid triangle. \n   Otherwise return -1 \n   Three sides make cause a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side slope.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 - (a * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 ||", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write spell a function that returns come back true dependable if the object q will fly flee, and false assumed otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that returns come back true dependable if the object q will fly flee, and false assumed otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly2 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly3 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly4 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly5 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly6 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly7 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly8 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly9 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly10 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly11 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly12 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly13 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly14 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly15 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly16 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly17 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly18 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly19 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly20 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly21 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly22 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given move over an array arr of integers, find recover the minimum minimal number of elements component that \n   need want to be changed deepen to make the array palindromic. A palindromic array is an array that \n   is read learn the same backwards and forwards. In one change, you can change switch one element chemical element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array arr of integers, find recover the minimum minimal number of elements component that \n   need want to be changed deepen to make the array palindromic. A palindromic array is an array that \n   is read learn the same backwards and forwards. In one change, you can change switch one element chemical element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let change = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      change++;\n      min = Math.min(min, j - i);\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return change + min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write spell a function that accepts accept two lists tilt of strings and returns revert the list that has \n   total full number act of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that accepts accept two lists tilt of strings and returns revert the list that has \n   total full number act of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0 || len2 === 0) {\n    return []\n  }\n  if (len1 === len2) {\n    return lst1\n  }\n  const total = len1 + len2\n  const diff = total - len1\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i])\n  }\n  for (let i = 0; i < len2; i++) {\n    lst.push(lst2[i])\n  }\n  return lst\n}\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']))\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function routine that returns true genuine if the given afford number is the multiplication generation of 3 prime premier numbers numbers pool \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that returns true genuine if the given afford number is the multiplication generation of 3 prime premier numbers numbers pool \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a1 = 0;\n  let a2 = 0;\n  let a3 = 0;\n  let a4 = 0;\n  let a5 = 0;\n  let a6 = 0;\n  let a7 = 0;\n  let a8 = 0;\n  let a9 = 0;\n  let a10 = 0;\n  let a11 = 0;\n  let a12 = 0;\n  let a13 = 0;\n  let a14 = 0;\n  let a15 = 0;\n  let a16 = 0;\n  let a17 = 0;\n  let a18 = 0;\n  let a19 = 0;\n  let a20 = 0;\n  let a21 = 0;\n  let a22 = 0;\n  let a23 = 0;\n  let a24 = 0;\n  let a25 = 0;\n  let a26 = 0;\n  let a27 = 0;\n  let a28 = 0;\n  let a29 = 0;\n  let a30 = 0;\n  let a31 = 0;\n  let a32 = 0;\n  let a33 = 0;\n  let a34 = 0;\n  let a35 = 0;\n  let a36 = 0;\n  let a37 = 0;\n  let a38 = 0;\n  let a39 = 0;\n  let a40 = 0;\n  let a41 = 0;\n  let a42 = 0;\n  let a43 = 0;\n  let a44 = 0;\n  let a45 = 0;\n  let a46 = 0;\n  let a47 = 0;\n  let a48 = 0;\n  let a49 = 0;\n  let a50 = 0;\n  let a51 = 0;\n  let a52 = 0;\n  let a53 = 0;\n  let a54 = 0;\n  let a55 = 0;\n  let a56 = 0;\n  let a57 = 0;\n  let a58 = 0;\n  let a59 = 0;\n  let a60 = 0;\n  let a61 = 0;\n  let a62 = 0;\n  let a63 = 0;\n  let a64 = 0;\n  let a65 = 0;\n  let a66 = 0;\n  let a67 = 0;\n  let a68 = 0;\n  let a69 = 0;\n  let a70 = 0;\n  let a71 = 0;\n  let a72 = 0;\n  let a73 = 0;\n  let a74 = 0;\n  let a75 = 0;\n  let a76 = 0;\n  let a77 = 0;\n  let a78 = 0;\n  let a79 = 0;\n  let a80 = 0;\n  let a81 = 0;\n  let a82 = 0;\n  let a83 = 0;\n  let a84 = 0;\n  let a85 = 0;\n  let a86 = 0;\n  let a87 = 0;\n  let a88 = 0;\n  let a89 = 0;\n  let a90 = 0;\n  let a91 = 0;\n  let a92 = 0;\n  let a93 = 0;\n  let a94 = 0;\n  let a95 = 0;\n  let a96 = 0;\n  let a97 = 0;\n  let a98 = 0;\n  let a99 = 0;\n  let a100 = 0;\n  let a101 = 0;\n  let a102 = 0;\n  let a103 = 0;\n  let a104 = 0;\n  let a105 = 0;\n  let a106 = 0;\n  let a107 = 0;\n  let a108 = 0;\n  let a109 = 0;\n  let a110 = 0;\n  let a111 = 0;\n  let a112 = 0;\n  let a113 = 0;\n  let a114 = 0;\n  let a115 = 0;\n  let a116 = 0;\n  let a117 = 0;\n  let a118 = 0;\n  let a119 = 0;\n  let a120 = 0;\n  let a121 = 0;\n  let a122 = 0;\n  let a123 = 0;\n  let a124 = 0;\n  let a125 = 0;\n  let a126 = 0;\n  let a127 = 0;\n  let a128 = 0;\n  let a129 = 0;\n  let a130 = 0;\n  let a131 = 0;\n  let a132 = 0;\n  let a133 = 0;\n  let a134 = 0;\n  let a135 = 0;\n  let a136 = 0;\n  let a137 = 0;\n  let a138 = 0;\n  let a139 = 0;\n  let a140 = 0;\n  let a141 = 0;\n  let a142 = 0;\n  let a143 = 0;\n  let a144 = 0;\n  let a145 = 0;\n  let a146 = 0;\n  let a147 = 0;\n  let a148 = 0;\n  let a149 = 0;\n  let a150 = 0;\n  let a151 = 0;\n  let a152 = 0;\n  let a153 = 0;\n  let a154 = 0;\n  let a155 = 0;\n  let a156 = 0;\n  let a157 = 0;\n  let a158 = 0;\n  let a159 = 0;\n  let a160 = 0;\n  let a161 = 0;\n  let a162 = 0;\n  let a163 = 0;\n  let a164 = 0;\n  let a165 = 0;\n  let a166 = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task job is to write a function routine that returns retort true if a number phone number x is a simple childlike \n   power of n and false delusive in other cases. \n   x is a simple elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task job is to write a function routine that returns retort true if a number phone number x is a simple childlike \n   power of n and false delusive in other cases. \n   x is a simple elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x, n * n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write spell a function that takes fill an integer a and returns retort true \n   if this ingeger is a cube block of some integer number numeral. \n   Note eminence: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill an integer a and returns retort true \n   if this ingeger is a cube block of some integer number numeral. \n   Note eminence: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 1;\n  while (i <= a) {\n    if (a % i === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked tax to write a function routine that receives get \n   a hexadecimal number as a string chain and counts consider the number act of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product merchandise of two smaller belittled natural numbers). \n   Hexadecimal digits digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number numeral of the following postdate digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may assume wear the input stimulation is always constantly correct right or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked tax to write a function routine that receives get \n   a hexadecimal number as a string chain and counts consider the number act of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product merchandise of two smaller belittled natural numbers). \n   Hexadecimal digits digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number numeral of the following postdate digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may assume wear the input stimulation is always constantly correct right or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numeral = 0;\n  let prime = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given move over a number in decimal form class and your task undertaking is to convert it to \n   binary format. The function routine should return a string drawstring, with each character quality representing a binary \n   number phone number. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters quality' db' at the beginning and at the end conclusion of the string drawstring. \n   The extra excess characters are there to help avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given move over a number in decimal form class and your task undertaking is to convert it to \n   binary format. The function routine should return a string drawstring, with each character quality representing a binary \n   number phone number. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters quality' db' at the beginning and at the end conclusion of the string drawstring. \n   The extra excess characters are there to help avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let binary_digit = 0;\n  let binary_digit_count = 0;\n  let binary_digit_length = 0;\n  let binary_digit_index = 0;\n  let decimal_digit = 0;\n  let decimal_digit_count = 0;\n  let decimal_digit_length = 0;\n  let decimal_digit_index = 0;\n  let decimal_digit_length_remainder = 0;\n  let decimal_digit_remainder = 0;\n  let decimal_digit_remainder_length = 0;\n  let decimal_digit_remainder_index = 0;\n  let decimal_digit_remainder_length_remainder = 0;\n  let decimal_digit_remainder_remainder = 0;\n  let decimal_digit_remainder_remainder_length = 0;\n  let decimal_digit_remainder_remainder_index = 0;\n  let decimal_digit_remainder_remainder_length_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length = 0;\n  let decimal_digit_remainder_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder_index_remainder = 0;\n  let decimal_digit_remainder_remainder_index_remainder_length_remainder_index_remainder", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given move over list of integers, return a tuple consisting consist of a sum kernel and a product of all the integers integer in a list.\n   Empty sum kernel should be equal adequate to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given move over list of integers, return a tuple consisting consist of a sum kernel and a product of all the integers integer in a list.\n   Empty sum kernel should be equal adequate to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given move over a string s.\n   Your task job is to check crack if the string is happy felicitous or not. \n   A string drawstring is happy felicitous if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given move over a string s.\n   Your task job is to check crack if the string is happy felicitous or not. \n   A string drawstring is happy felicitous if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let count = 0\n  let i = 0\n  while (i < len) {\n    count = 0\n    while (i < len - 1 && s[i] === s[i + 1]) {\n      count++\n      i++\n    }\n    if (count === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last final week of the semester and the teacher has to give move over the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem trouble is, she has lost fall back the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write compose \n   a function affair that can output a list of letter grades using use the following table: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C deoxycytidine monophosphate \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the last final week of the semester and the teacher has to give move over the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem trouble is, she has lost fall back the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write compose \n   a function affair that can output a list of letter grades using use the following table: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C deoxycytidine monophosphate \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGradeDegree = grade.toFixed(1);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegree);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parseInt(letterGradeDegreeNumber);\n    const letterGradeDegreeLetter = letterGradeDegree.charAt(0);\n    const letterGradeDegreeNumber = parse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function routine that takes a string and returns come back true dependable if the string\n   length is a prime choice number numeral or false delusive otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that takes a string and returns come back true dependable if the string\n   length is a prime choice number numeral or false delusive otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength = (string) => {\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given move over a positive integer n, return the count of the numbers number of n-digit\n   positive convinced integers that start depart or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return the count of the numbers number of n-digit\n   positive convinced integers that start depart or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) = > {\n  const startsOneEnds = (n) =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive incontrovertible integer N, return the total sum union of its digits digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive incontrovertible integer N, return the total sum union of its digits digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => {\n    return N % 2? digit : 0;\n  });\n  const sum = digits.reduce((a, b) => a + b);\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers integer lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers integer lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write spell a function that takes fill a string bowed stringed instrument and returns an ordered coherent version translation of it. \n   Ordered arrange version of string chain, is a string where all words (separated by space quad) \n   are replaced supplant by a new word where all the characters fictional character arranged stage in\n   ascending order club based base on ascii value. \n   Note bill: You should keep the order of words and blank spaces in the sentence prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill a string bowed stringed instrument and returns an ordered coherent version translation of it. \n   Ordered arrange version of string chain, is a string where all words (separated by space quad) \n   are replaced supplant by a new word where all the characters fictional character arranged stage in\n   ascending order club based base on ascii value. \n   Note bill: You should keep the order of words and blank spaces in the sentence prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = ''\n      const index = char.charCodeAt(0)\n      const newIndex = (index + 1) % 26\n      newChar = String.fromCharCode(newIndex)\n      newWord += newChar\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given move over a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices matrix, \n   each row course may contain control a different number phone number of columns. \n   Given lst, and integer x, find integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort kind coordinates initially by rows in ascending ascend order orderliness. \n   Also, sort kind coordinates of the row by columns in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices matrix, \n   each row course may contain control a different number phone number of columns. \n   Given lst, and integer x, find integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort kind coordinates initially by rows in ascending ascend order orderliness. \n   Also, sort kind coordinates of the row by columns in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sort = (a, b) => a[0] - b[0]\n  const sortByRow = (a, b) => a[1] - b[1]\n  const sortByCol = (a, b) => a[0] - b[0]\n  const sortByRowCol = (a, b) => a[1] - b[1]\n  const sortByRowColDesc = (a, b) => a[1] - b[1]\n  const sortByRowColAsc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAsc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAsc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAsc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAsc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAsc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const sortByRowColDescAscDescAscDescAscDescAscDescAscDesc = (a, b) => a[1] - b[1]\n  const", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given move over an array of non - negative integers integer, return a copy transcript of the given array after sorting classify, \n   you will sort screen the given render array in ascending order ordering if the sum (first index value, last concluding index exponent value) is odd leftover, \n   or sort it in descending order club if the sum kernel (first inaugural index value, last index value) is even. \n\n   Note: \n   * don't change switch the given render array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of non - negative integers integer, return a copy transcript of the given array after sorting classify, \n   you will sort screen the given render array in ascending order ordering if the sum (first index value, last concluding index exponent value) is odd leftover, \n   or sort it in descending order club if the sum kernel (first inaugural index value, last index value) is even. \n\n   Note: \n   * don't change switch the given render array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray2 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray3 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray4 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray5 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray6 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray7 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray8 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array) => {\n    const sum = array.reduce((acc, value) => acc + value, 0);\n    if (sum % 2 === 1) {\n      return array.sort(sort);\n    } else {\n      return array.sort(sort).reverse();\n    }\n  };\n  return sortBySum(array);\n};\n\nconst sortArray9 = (array) => {\n  const sort = (a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  const sortBySum = (array)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function routine encrypt that takes a string chain as an argument argumentation and \n   returns a string chain encrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied multiply to two places position.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function routine encrypt that takes a string chain as an argument argumentation and \n   returns a string chain encrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied multiply to two places position.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let chain = s.split('');\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < chain.length) {\n    encrypted += alphabet[(chain[i] + (chain[i + 1] * 2)) % 26];\n    i += 2;\n  }\n  while (j < encrypted.length) {\n    encrypted[j] = alphabet[(encrypted[j] + (encrypted[j + 1] * 2)) % 26];\n    j += 2;\n  }\n  return encrypted;\n};\n\n/*\n  Create a function routine decrypt that takes a string chain as an argument argumentation and \n   returns a string chain decrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift up by two multiplied multiply to two places position.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let chain = s.split('');\n  let decrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < chain.length) {\n    decrypted += alphabet[(chain[i] - (chain[i + 1] * 2)) % 26];\n    i += 2;\n  }\n  while (j < decrypted.length) {\n    decrypted[j] = alphabet[(decrypted[j] - (decrypted[j + 1] * 2)) % 26];\n    j += 2;\n  }\n  return decrypted;\n};\n\n/*\n  Create a function routine encrypt that takes a string chain as an argument argumentation and \n   returns a string chain encrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied multiply to two places position.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let chain = s.split('');\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < chain.length) {\n    encrypted += alphabet[(chain[i] + (chain[i + 1] * 2)) % 26];\n    i += 2;\n  }\n  while (j < encrypted.length) {\n    encrypted[j] = alphabet[(encrypted[j] + (encrypted[j + 1] * 2)) % 26];\n    j += 2;\n  }\n  return encrypted;\n};\n\n/*\n  Create a function routine decrypt that takes a string chain as an argument argumentation and \n   returns a string chain decrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift up by two multiplied multiply to two places position.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let chain = s.split('');\n  let decrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers.reduce((acc, n) => Math.max(acc, n), 0);\n  const result = [];\n  let i = 0;\n  while (i < max) {\n    result.push(numbers[i]);\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given move over a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd second smallest element chemical element of the list.\n   Return null if there is no such element component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd second smallest element chemical element of the list.\n   Return null if there is no such element component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  let {length} = lst\n  if (length === 0) return null\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let {length} = lst\n  let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given move over a string of words bible, and your task undertaking is to count the number phone number \n   of boredoms boredom. A boredom is a sentence conviction that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given move over a string of words bible, and your task undertaking is to count the number phone number \n   of boredoms boredom. A boredom is a sentence conviction that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create produce a function that takes fill 3 numbers numeral. \n   Returns true genuine if one of the numbers phone number is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns false in any other cases event.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that takes fill 3 numbers numeral. \n   Returns true genuine if one of the numbers phone number is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns false in any other cases event.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y === z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\nconst anyInt32 = (x, y, z) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write spell a function that takes fill a message, and encodes in such a \n   way direction that it swaps case character of all letters letter, replaces substitute all vowels in \n   the message with the letter that appears look 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill a message, and encodes in such a \n   way direction that it swaps case character of all letters letter, replaces substitute all vowels in \n   the message with the letter that appears look 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonantsLength = consonants.length;\n  const vowelsLength = vowels.length;\n  const consonantsIndex = consonants.indexOf(message[0]);\n  const vowelsIndex = vowels.indexOf(message[1]);\n  const consonantsIndex = consonants.indexOf(message[2]);\n  const vowelsIndex = vowels.indexOf(message[3]);\n  const consonantsIndex = consonants.indexOf(message[4]);\n  const vowelsIndex = vowels.indexOf(message[5]);\n  const consonantsIndex = consonants.indexOf(message[6]);\n  const vowelsIndex = vowels.indexOf(message[7]);\n  const consonantsIndex = consonants.indexOf(message[8]);\n  const vowelsIndex = vowels.indexOf(message[9]);\n  const consonantsIndex = consonants.indexOf(message[10]);\n  const vowelsIndex = vowels.indexOf(message[11]);\n  const consonantsIndex = consonants.indexOf(message[12]);\n  const vowelsIndex = vowels.indexOf(message[13]);\n  const consonantsIndex = consonants.indexOf(message[14]);\n  const vowelsIndex = vowels.indexOf(message[15]);\n  const consonantsIndex = consonants.indexOf(message[16]);\n  const vowelsIndex = vowels.indexOf(message[17]);\n  const consonantsIndex = consonants.indexOf(message[18]);\n  const vowelsIndex = vowels.indexOf(message[19]);\n  const consonantsIndex = consonants.indexOf(message[20]);\n  const vowelsIndex = vowels.indexOf(message[21]);\n  const consonantsIndex = consonants.indexOf(message[22]);\n  const vowelsIndex = vowels.indexOf(message[23]);\n  const consonantsIndex = consonants.indexOf(message[24]);\n  const vowelsIndex = vowels.indexOf(message[25]);\n  const consonantsIndex = consonants.indexOf(message[26]);\n  const vowelsIndex = vowels.indexOf(message[27]);\n  const consonantsIndex = consonants.indexOf(message[28]);\n  const vowelsIndex = vowels.indexOf(message[29]);\n  const consonantsIndex = consonants.indexOf(message[30]);\n  const vowelsIndex = vowels.indexOf(message[31]);\n  const consonantsIndex = consonants.indexOf(message[32]);\n  const vowelsIndex = vowels.indexOf(message[33]);\n  const consonantsIndex = consonants.indexOf(message[34]);\n  const vowelsIndex = vowels.indexOf(message[35]);\n  const consonantsIndex = consonants.indexOf(message[36]);\n  const vowelsIndex = vowels.indexOf(message[37]);\n  const consonantsIndex = consonants.indexOf(message[38]);\n  const vowelsIndex = vowels.indexOf(message[39]);\n  const consonantsIndex = consonants.indexOf(message[40]);\n  const vowelsIndex = vowels.indexOf(message[41]);\n  const consonantsIndex = consonants.indexOf(message[42]);\n  const vowelsIndex = vowels.indexOf(message[43]);\n  const consonantsIndex = consonants.indexOf(message[44]);\n  const vowelsIndex = vowels.indexOf(message[45]);\n  const consonantsIndex = consonants.indexOf(message[46]);\n  const vowelsIndex = vowels.indexOf(message[47]);\n  const consonantsIndex = consonants.indexOf(message[48]);\n  const vowelsIndex = vowels.indexOf(message[49]);\n  const consonantsIndex = consonants.indexOf(message[50]);\n  const vowelsIndex = vowels.indexOf(message[51]);\n  const consonantsIndex = consonants.indexOf(message[52]);\n  const vowelsIndex = vowels.indexOf(message[53]);\n  const consonantsIndex = consonants.indexOf(message[54]);\n  const vowelsIndex = vowels.indexOf(message[55]);\n  const consonantsIndex = consonants.indexOf(message[56]);\n  const vowelsIndex = vowels.indexOf(message[57]);\n  const consonantsIndex = consonants.indexOf(message[58]);\n  const vowelsIndex = vowels.indexOf(message[59]);\n  const consonantsIndex = consonants.indexOf(message[60]);\n  const vowelsIndex = vowels.indexOf(message[61]);\n  const consonantsIndex = consonants.indexOf(message[62]);\n  const vowelsIndex = vowels.indexOf(message[63]);\n  const consonantsIndex = consonants.indexOf(message[64]);\n  const vowelsIndex = vowels.indexOf(message[65]);\n  const consonantsIndex = consonants.indexOf(message[66]);\n  const vowelsIndex = vowels.indexOf(message[67]);\n  const consonantsIndex = consonants.indexOf(message[68]);\n  const vowelsIndex = vowels.indexOf(message[69]);\n  const consonantsIndex = consonants.indexOf(message[70]);\n  const vowelsIndex = vowels.indexOf(message[71]);\n  const consonantsIndex = consonants.indexOf(message[72]);\n  const vowelsIndex = vowels.indexOf(message[73]);\n  const consonantsIndex = consonants.indexOf(message[74]);\n  const vow", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given move over a list of integers. \n   You need necessitate to find line up the largest prime choice value and return the sum kernel of its digits finger.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given move over a list of integers. \n   You need necessitate to find line up the largest prime choice value and return the sum kernel of its digits finger.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const max = (a, b) => {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  };\n  const sum = (a, b) => {\n    return a + b;\n  };\n  const find = (lst, i) => {\n    if (i === lst.length) {\n      return sum(lst[i - 1], lst[i]);\n    }\n    return find(lst, i + 1);\n  };\n  const findPrime = (lst, i) => {\n    if (i === lst.length) {\n      return prime(lst[i - 1]);\n    }\n    return findPrime(lst, i + 1);\n  };\n  const findMax = (lst, i) => {\n    if (i === lst.length) {\n      return max(lst[i - 1], lst[i]);\n    }\n    return findMax(lst, i + 1);\n  };\n  const findMaxPrime = (lst, i) => {\n    if (i === lst.length) {\n      return max(lst[i - 1], lst[i]);\n    }\n    return findMaxPrime(lst, i + 1);\n  };\n  const findMaxPrimeSum = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrime(lst, i);\n    }\n    return findMaxPrimeSum(lst, i + 1);\n  };\n  const findMaxPrimeSumPrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSum(lst, i);\n    }\n    return findMaxPrimeSumPrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrimePrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrimePrimePrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrimePrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrimePrimePrimePrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (lst, i) => {\n    if (i === lst.length) {\n      return findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime(lst, i);\n    }\n    return findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime(lst, i + 1);\n  };\n  const findMaxPrimeSumPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (lst, i) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given move over a dictionary, return true if all keys samara are strings chain in lower \n   case character or all keys key are strings string in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a dictionary, return true if all keys samara are strings chain in lower \n   case character or all keys key are strings string in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict2 = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict3 = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict4 = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict5 = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict6 = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict7 = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      isChain = false\n      break\n    }\n    if (key.toUpperCase()!== key) {\n      isString = false\n      break\n    }\n  }\n  return isChain && isString\n}\n\nconst checkDict8 = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  if (len === 0) return false\n  let isChain = true\n  let isString = true\n  for (let i = 0; i < len; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function routine that takes an non - negative damaging integer and returns retort an array of the first n\n   integers integer that are prime premier numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function routine that takes an non - negative damaging integer and returns retort an array of the first n\n   integers integer that are prime premier numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    ret.push(primes[0])\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] > n) {\n        break\n      }\n      if (primes[j] > i) {\n        break\n      }\n      if (primes[j] % primes[i] === 0) {\n        break\n      }\n      ret.push(primes[j])\n    }\n  }\n  return ret\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function routine that takes two integers integer and returns return key \n   the product of their unit whole digits digit. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function routine that takes two integers integer and returns return key \n   the product of their unit whole digits digit. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = a.toString().split('').map(digit => parseInt(digit));\n  let b_int = b.toString().split('').map(digit => parseInt(digit));\n  let a_len = a_int.length;\n  let b_len = b_int.length;\n  let product = [];\n  for (let i = 0; i < a_len; i++) {\n    let carry = 0;\n    for (let j = 0; j < b_len; j++) {\n      let product_digit = a_int[i] * b_int[j] + carry;\n      carry = product_digit / 10;\n      product_digit = product_digit % 10;\n      product.push(product_digit);\n    }\n    if (carry > 0) {\n      product.push(carry);\n    }\n  }\n  return product.join('');\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given move over a string s, count reckon the number issue of uppercase vowels vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string s, count reckon the number issue of uppercase vowels vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create produce a function that takes fill a value (string bowed stringed instrument) representing a number phone number \n   and returns hark back the closest airless integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that takes fill a value (string bowed stringed instrument) representing a number phone number \n   and returns hark back the closest airless integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValue2 = parseInt(value, 10);\n  const intValue3 = parseInt(value, 10);\n  const intValue4 = parseInt(value, 10);\n  const intValue5 = parseInt(value, 10);\n  const intValue6 = parseInt(value, 10);\n  const intValue7 = parseInt(value, 10);\n  const intValue8 = parseInt(value, 10);\n  const intValue9 = parseInt(value, 10);\n  const intValue10 = parseInt(value, 10);\n  const intValue11 = parseInt(value, 10);\n  const intValue12 = parseInt(value, 10);\n  const intValue13 = parseInt(value, 10);\n  const intValue14 = parseInt(value, 10);\n  const intValue15 = parseInt(value, 10);\n  const intValue16 = parseInt(value, 10);\n  const intValue17 = parseInt(value, 10);\n  const intValue18 = parseInt(value, 10);\n  const intValue19 = parseInt(value, 10);\n  const intValue20 = parseInt(value, 10);\n  const intValue21 = parseInt(value, 10);\n  const intValue22 = parseInt(value, 10);\n  const intValue23 = parseInt(value, 10);\n  const intValue24 = parseInt(value, 10);\n  const intValue25 = parseInt(value, 10);\n  const intValue26 = parseInt(value, 10);\n  const intValue27 = parseInt(value, 10);\n  const intValue28 = parseInt(value, 10);\n  const intValue29 = parseInt(value, 10);\n  const intValue30 = parseInt(value, 10);\n  const intValue31 = parseInt(value, 10);\n  const intValue32 = parseInt(value, 10);\n  const intValue33 = parseInt(value, 10);\n  const intValue34 = parseInt(value, 10);\n  const intValue35 = parseInt(value, 10);\n  const intValue36 = parseInt(value, 10);\n  const intValue37 = parseInt(value, 10);\n  const intValue38 = parseInt(value, 10);\n  const intValue39 = parseInt(value, 10);\n  const intValue40 = parseInt(value, 10);\n  const intValue41 = parseInt(value, 10);\n  const intValue42 = parseInt(value, 10);\n  const intValue43 = parseInt(value, 10);\n  const intValue44 = parseInt(value, 10);\n  const intValue45 = parseInt(value, 10);\n  const intValue46 = parseInt(value, 10);\n  const intValue47 = parseInt(value, 10);\n  const intValue48 = parseInt(value, 10);\n  const intValue49 = parseInt(value, 10);\n  const intValue50 = parseInt(value, 10);\n  const intValue51 = parseInt(value, 10);\n  const intValue52 = parseInt(value, 10);\n  const intValue53 = parseInt(value, 10);\n  const intValue54 = parseInt(value, 10);\n  const intValue55 = parseInt(value, 10);\n  const intValue56 = parseInt(value, 10);\n  const intValue57 = parseInt(value, 10);\n  const intValue58 = parseInt(value, 10);\n  const intValue59 = parseInt(value, 10);\n  const intValue60 = parseInt(value, 10);\n  const intValue61 = parseInt(value, 10);\n  const intValue62 = parseInt(value, 10);\n  const intValue63 = parseInt(value, 10);\n  const intValue64 = parseInt(value, 10);\n  const intValue65 = parseInt(value, 10);\n  const intValue66 = parseInt(value, 10);\n  const intValue67 = parseInt(value, 10);\n  const intValue68 = parseInt(value, 10);\n  const intValue69 = parseInt(value, 10);\n  const intValue70 = parseInt(value, 10);\n  const intValue71 = parseInt(value, 10);\n  const intValue72 = parseInt(value, 10);\n  const intValue73 = parseInt(value, 10);\n  const intValue74 = parseInt(value, 10);\n  const intValue75 = parseInt(value, 10);\n  const intValue76 = parseInt(value, 10);\n  const intValue77 = parseInt(value, 10);\n  const intValue78 = parseInt(value, 10);\n  const intValue79 = parseInt(value, 10);\n  const intValue80 = parseInt(value, 10);\n  const intValue81 = parseInt(value, 10);\n  const intValue82 = parseInt(value, 10);\n  const intValue83 = parseInt(value, 10);\n  const intValue84 = parseInt(value, 10);\n  const intValue85 = parseInt(value, 10);\n  const intValue86 = parseInt(value, 10);\n  const intValue87 = parseInt(value, 10);\n  const intValue88 = parseInt(value, 10);\n  const intValue89 = parseInt(value, 10);\n  const intValue90 = parseInt(value, 10);\n  const intValue91 = parseInt(value, 10);\n  const intValue92 = parseInt(value, 10);\n  const intValue93 = parseInt(value, 10);\n  const intValue94 = parseInt(value, 10);\n  const intValue95 = parseInt(value, 10);\n  const intValue96 = parseInt(value, 10);\n  const intValue97 = parseInt(value, 10);\n  const intValue", "passed": 0, "run_status": 2}
