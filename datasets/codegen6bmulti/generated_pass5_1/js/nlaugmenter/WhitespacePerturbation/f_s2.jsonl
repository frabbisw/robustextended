{"task_id": "JavaScript/0", "prompt": "/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if (diff < threshold) return acc + 1\n    else return acc\n  }, 0)\n  return diff > 1\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, n, i) => {\n    const diff = Math.abs(n - numbers[i + 1])\n    if ("}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('')\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack_len = paren_list.length\n  let paren_stack_len_minus_1 = paren_stack_len - 1\n  let paren_stack_len_minus_2 = paren_stack_len - 2\n  let paren_stack_len_minus_3 = paren_stack_len - 3\n  let paren_stack_len_minus_4 = paren_stack_len - 4\n  let paren_stack_len_minus_5 = paren_stack_len - 5\n  let paren_stack_len_minus_6 = paren_stack_len - 6\n  let paren_stack_len_minus_7 = paren_stack_len - 7\n  let paren_stack_len_minus_8 = paren_stack_len - 8\n  let paren_stack_len_minus_9 = paren_stack_len - 9\n  let paren_stack_len_minus_10 = paren_stack_len - 10\n  let paren_stack_len_minus_11 = paren_stack_len - 11\n  let paren_stack_len_minus_12 = paren_stack_len - 12\n  let paren_stack_len_minus_13 = paren_stack_len - 13\n  let paren_stack_len_minus_14 = paren_stack_len - 14\n  let paren_stack_len_minus_15 = paren_stack_len - 15\n  let paren_stack_len_minus_16 = paren_stack_len - 16\n  let paren_stack_len_minus_17 = paren_stack_len - 17\n  let paren_stack_len_minus_18 = paren_stack_len - 18\n  let paren_stack_len_minus_19 = paren_stack_len - 19\n  let paren_stack_len_minus_20 = paren_stack_len - 20\n  let paren_stack_len_minus_21 = paren_stack_len - 21\n  let paren_stack_len_minus_22 = paren_stack_len - 22\n  let paren_stack_len_minus_23 = paren_stack_len - 23\n  let paren_stack_len_minus_24 = paren_stack_len - 24\n  let paren_stack_len_minus_25 = paren_stack_len - 25\n  let paren_stack_len_minus_26 = paren_stack_len - 26\n  let paren_stack_len_minus_27 = paren_stack_len - 27\n  let paren_stack_len_minus_28 = paren_stack_len - 28\n  let paren_stack_len_minus_29 = paren_stack_len - 29\n  let paren_stack_len_minus_30 = paren_stack_len - 30\n  let paren_stack_len_minus_31 = paren_stack_len - 31\n  let paren_stack_len_minus_32 = paren_stack_len - 32\n  let paren_stack_len_minus_33 = paren_stack_len - 33\n  let paren_stack_len_minus_34 = paren_stack_len - 34\n  let paren_stack_len_minus_35 = paren_stack_len - 35\n  let paren_stack_len_minus_36 = paren_stack_len - 36\n  let paren_stack_len_minus_37 = paren_stack_len - 37\n  let paren_stack_len_minus_38 = paren_stack_len - 38\n  let paren_stack_len_minus_39 = paren_stack_len - 39\n  let paren_stack_len_minus_40 = paren_stack_len - 40\n  let paren_stack_len_minus_41 = paren_stack_len - 41\n  let paren_stack_len_minus_42 = paren_stack_len - 42\n  let paren_stack_len_minus_43 = paren_stack_len - 43\n  let paren_stack_len_minus_44 = paren_stack_len - 44\n  let paren_stack_len_minus_45 = paren_stack_len - 45\n  let paren_stack_len_minus_46 = paren_stack_len - 46\n  let paren_stack_len_minus_47 = paren_stack_len - 47\n  let paren_stack_len_minus_48 = paren_stack_len - 48\n  let paren_stack_len_minus_49 = paren_stack_len - 49\n  let paren_stack_len_minus_50 = paren_stack_len - 50\n  let paren_stack_len_minus_51 = paren_stack_len - 51\n  let paren_stack_len_minus_52 = paren_stack_len - 52\n  let paren_stack_len_minus_53 = paren_stack_len - 53\n  let paren_stack_len_minus_54 = paren_stack_len - 54\n  let paren_stack_len_minus_55 = paren_stack_len - 55\n  let paren_stack_len_minus_56 = paren_stack_len - 56\n  let paren_stack_len_minus_57 = paren_stack_len - 57\n  let paren_stack_len_minus_58 = paren_stack_len - 58\n  let paren_stack_len_minus_59 = paren_stack_len - 59\n  let paren_stack_len_minus_60 = paren_stack_len - 60\n  let paren_stack_len_minus_61 = paren_stack_len - 61\n  let p"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part of thenumber.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals2 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals3 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals4 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals5 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals6 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals7 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals8 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimals9 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the number of decimals of thenumber.\n  >>> truncateNumber(3.5)\n  "}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true . Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviation.reduce((acc, number) => acc + number, 0) / numbers.length);\n};\n\n/*\n  Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviation.reduce((acc, number) => acc + number, 0) / numbers.length);\n};\n\n/*\n  Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviation.reduce((acc, number) => acc + number, 0) / numbers.length);\n};\n\n/*\n  Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviation.reduce((acc, number) => acc + number, 0) / numbers.length);\n};\n\n/*\n  Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviation.reduce((acc, number) => acc + number, 0) / numbers.length);\n};\n\n/*\n  Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviation.reduce((acc, number) => acc + number, 0) / numbers.length);\n};\n\n/*\n  Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviation."}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  */\nconst intersperse2 = (numbers, delimeter, delimiter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(delimiter);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  */\nconst intersperse3 = (numbers, delimeter, delimiter, delimiter2) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(delimiter);\n    result.push(delimiter2);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  */\nconst intersperse4 = (numbers, delimeter, delimiter, delimiter2, delimiter3) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(delimiter);\n    result.push(delimiter2);\n    result.push(delimiter3);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  */\nconst intersperse5 = (numbers, delimeter, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(delimiter);\n    result.push(delimiter2);\n    result.push(delimiter3);\n    result.push(delimiter4);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  */\nconst intersperse6 = (numbers, delimeter, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(delimiter);\n    result.push(delimiter2);\n    result.push(delimiter3);\n    result.push(delimiter4);\n    result.push(delimiter5);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  */\nconst intersperse7 = (numbers, delimeter, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(delimiter);\n    result.push(delimiter2);\n    result.push(delimiter3);\n    result.push(delimiter4);\n    result.push(delimiter5);\n    result.push(delimiter6);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  */\nconst intersperse8 = (numbers, delimeter, delimiter, delimiter2, delimiter3, delimiter"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let current_level = 0;\n  let current_index = 0;\n  let current_paren = 0;\n  let max_level = 0;\n  let max_index = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_index_length = 0;\n  let current_paren_string_index_index = 0;\n  let current_paren_string_index_index_length = 0;\n  let current_paren_string_index_index_index = 0;\n  let current_paren_string_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i"}
{"task_id": "JavaScript/8", "prompt": "/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers."}
{"task_id": "JavaScript/9", "prompt": "/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence .\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxCount = 1;\n  const maxCountIndex = 0;\n  const maxCountIndex2 = 0;\n  const maxCountIndex3 = 0;\n  const maxCountIndex4 = 0;\n  const maxCountIndex5 = 0;\n  const maxCountIndex6 = 0;\n  const maxCountIndex7 = 0;\n  const maxCountIndex8 = 0;\n  const maxCountIndex9 = 0;\n  const maxCountIndex10 = 0;\n  const maxCountIndex11 = 0;\n  const maxCountIndex12 = 0;\n  const maxCountIndex13 = 0;\n  const maxCountIndex14 = 0;\n  const maxCountIndex15 = 0;\n  const maxCountIndex16 = 0;\n  const maxCountIndex17 = 0;\n  const maxCountIndex18 = 0;\n  const maxCountIndex19 = 0;\n  const maxCountIndex20 = 0;\n  const maxCountIndex21 = 0;\n  const maxCountIndex22 = 0;\n  const maxCountIndex23 = 0;\n  const maxCountIndex24 = 0;\n  const maxCountIndex25 = 0;\n  const maxCountIndex26 = 0;\n  const maxCountIndex27 = 0;\n  const maxCountIndex28 = 0;\n  const maxCountIndex29 = 0;\n  const maxCountIndex30 = 0;\n  const maxCountIndex31 = 0;\n  const maxCountIndex32 = 0;\n  const maxCountIndex33 = 0;\n  const maxCountIndex34 = 0;\n  const maxCountIndex35 = 0;\n  const maxCountIndex36 = 0;\n  const maxCountIndex37 = 0;\n  const maxCountIndex38 = 0;\n  const maxCountIndex39 = 0;\n  const maxCountIndex40 = 0;\n  const maxCountIndex41 = 0;\n  const maxCountIndex42 = 0;\n  const maxCountIndex43 = 0;\n  const maxCountIndex44 = 0;\n  const maxCountIndex45 = 0;\n  const maxCountIndex46 = 0;\n  const maxCountIndex47 = 0;\n  const maxCountIndex48 = 0;\n  const maxCountIndex49 = 0;\n  const maxCountIndex50 = 0;\n  const maxCountIndex51 = 0;\n  const maxCountIndex52 = 0;\n  const maxCountIndex53 = 0;\n  const maxCountIndex54 = 0;\n  const maxCountIndex55 = 0;\n  const maxCountIndex56 = 0;\n  const maxCountIndex57 = 0;\n  const maxCountIndex58 = 0;\n  const maxCountIndex59 = 0;\n  const maxCountIndex60 = 0;\n  const maxCountIndex61 = 0;\n  const maxCountIndex62 = 0;\n  const maxCountIndex63 = 0;\n  const maxCountIndex64 = 0;\n  const maxCountIndex65 = 0;\n  const maxCountIndex66 = 0;\n  const maxCountIndex67 = 0;\n  const maxCountIndex68 = 0;\n  const maxCountIndex69 = 0;\n  const maxCountIndex70 = 0;\n  const maxCountIndex71 = 0;\n  const maxCountIndex72 = 0;\n  const maxCountIndex73 = 0;\n  const maxCountIndex74 = 0;\n  const maxCountIndex75 = 0;\n  const maxCountIndex76 = 0;\n  const maxCountIndex77 = 0;\n  const maxCountIndex78 = 0;\n  const maxCountIndex79 = 0;\n  const maxCountIndex80 = 0;\n  const maxCountIndex81 = 0;\n  const maxCountIndex82 = 0;\n  const maxCountIndex83 = 0;\n  const maxCountIndex84 = 0;\n  const maxCountIndex85 = 0;\n  const maxCountIndex86 = 0;\n  const maxCountIndex87 = 0;\n  const maxCountIndex88 = 0;\n  const maxCountIndex89 = 0;\n  const maxCountIndex90 = 0;\n  const maxCountIndex91 = 0;\n  const maxCountIndex92 = 0;\n  const maxCountIndex93 = 0;\n  const maxCountIndex94 = 0;\n  const maxCountIndex95 = 0;\n  const maxCountIndex96 = 0;\n  const maxCountIndex97 = 0;\n  const maxCountIndex98 = 0;\n  const maxCountIndex99 = 0;\n  const maxCountIndex100 = 0;\n  const maxCountIndex101 = 0;\n  const maxCountIndex102 = 0;\n  const maxCountIndex103 = 0;\n  const maxCountIndex104 = 0;\n  const maxCountIndex105 = 0;\n  const maxCountIndex106 = 0;\n  const maxCountIndex107 = 0;\n  const maxCountIndex108 = 0;\n  const maxCountIndex109 = 0;\n  const maxCountIndex110 = 0;\n  const maxCountIndex111 = 0;\n  const maxCountIndex112 = 0;\n  const maxCountIndex113 = 0;\n  const maxCountIndex114 = 0;\n  const maxCountIndex115 = 0;\n  const maxCountIndex116 = 0;\n  const maxCountIndex117 = 0;\n  const maxCountIndex118 = 0;\n  const maxCountIndex119 = 0;\n  const maxCountIndex120 = 0;\n  const maxCountIndex121 = 0;\n  const maxCountIndex122 = 0;\n  const maxCountIndex123 = 0;\n  const maxCountIndex124 = 0;\n  const maxCountIndex125 = 0;\n  const maxCountIndex126 = 0;\n  const maxCountIndex127 = 0;\n  const maxCountIndex128 = 0;\n  const maxCountIndex129 = 0;\n  const maxCountIndex130 = 0;\n  const maxCountIndex131 = 0;\n  const maxCountIndex132 = 0;\n  const maxCountIndex133 = 0;\n  const maxCountIndex134 = 0;\n  const maxCountIndex135 = 0;\n  const maxCountIndex136 = 0;\n  const maxCountIndex137 = 0;\n  const maxCountIndex138 = 0;\n  const maxCountIndex139 = 0;\n  const maxCountIndex140 = 0;\n  const maxCountIndex141 = 0;\n  const maxCountIndex142 = 0;\n  const maxCountIndex143 = 0"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix += string[i];\n      suffix = string.substring(i + 1, j);\n      postfix = string.substring(j - 1, i);\n      break;\n    }\n    i++;\n    j--;\n  }\n  return prefix + reverse(suffix) + postfix;\n}\n\n/* Reverse a string */\nconst reverse = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let reversed = '';\n  while (i < j) {\n    reversed += string[j];\n    j--;\n    i++;\n  }\n  return reversed;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  "}
{"task_id": "JavaScript/12", "prompt": "/* Outof list of string s , return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Outof list of string s, return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((s, i) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a % b === 0) {\n    return b;\n  }\n  return greatestCommonDivisor(a, b % a);\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let current = string\n  while (current.length > 0) {\n    const prefix = current.slice(0, current.length - 1)\n    prefixes.push(prefix)\n    current = current.slice(0, current.length - 1)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes fr om shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    const suffix = current.slice(1)\n    suffixes.push(suffix)\n    current = current.slice(0, current.length - 1)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='') => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}${delimiter}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*')\n  '0'\n  >>> stringSequence(5, '-', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*') => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}${delimiter}${repeat}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+')\n  '0'\n  >>> stringSequence(5, '-', '*', '+')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+') => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=') => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${equals}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=', '!')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=', '!')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=', exclamation = '!') => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${equals}${exclamation}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=', '!', '@')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=', '!', '@')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=', exclamation = '!', at = '@') => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${equals}${exclamation}${at}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=', '!', '@', '#')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=', '!', '@', '#')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=', exclamation = '!', at = '@', pound = '#') => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${equals}${exclamation}${at}${pound}`;\n    if (i < n) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*',"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = {};\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet[char] === undefined) {\n      charSet[char] = 1;\n    } else {\n      charSet[char]++;\n    }\n  }\n  for (let char in charSet) {\n    charCount++;\n  }\n  return charCount;\n};\n\n/* Given a string, return the number of times the string appears in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  1\n  */\nconst countOccurrences = (string, subString) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === subString[0]) {\n      count++;\n      for (let j = 1; j < subString.length; j++) {\n        if (string[i + j]!== subString[j]) {\n          break;\n        }\n      }\n      if (j === subString.length) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of times the string appears in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  1\n  */\nconst countOccurrencesInReverse = (string, subString) => {\n  let count = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === subString[0]) {\n      count++;\n      for (let j = 1; j < subString.length; j++) {\n        if (string[i + j]!== subString[j]) {\n          break;\n        }\n      }\n      if (j === subString.length) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of times the string appears in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  1\n  */\nconst countOccurrencesInReverseInPlace = (string, subString) => {\n  let count = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === subString[0]) {\n      count++;\n      for (let j = 1; j < subString.length; j++) {\n        if (string[i + j]!== subString[j]) {\n          break;\n        }\n      }\n      if (j === subString.length) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of times the string appears in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  1\n  */\nconst countOccurrencesInReverseInPlaceInPlace = (string, subString) => {\n  let count = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === subString[0]) {\n      count++;\n      for (let j = 1; j < subString.length; j++) {\n        if (string[i + j]!== subString[j]) {\n          break;\n        }\n      }\n      if (j === subString.length) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of times the string appears in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  1\n  */\nconst countOccurrencesInReverseInPlaceInPlace = (string, subString) => {\n  let count = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === subString[0]) {\n      count++;\n      for (let j = 1; j < subString.length; j++) {\n        if (string[i + j]!== subString[j]) {\n          break;\n        }\n      }\n      if (j === subString.length) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of times the string appears in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  1\n  */\nconst countOccurrencesInReverseInPlaceInPlace = (string, subString) => {\n  let count = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === subString[0]) {\n      count++;\n      for (let j = 1; j < subString.length; j++) {\n        if (string[i + j]!== subString[j]) {"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last .\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let i = 0;\n  while (i < music_string_length) {\n    const current_note = music_string[i];\n    if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else if (current_note === '|') {\n      music_list.push(2);\n      i += 1;\n    } else if (current_note === '.') {\n      music_list.push(1);\n      i += 1;\n    } else if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else {\n      music_list.push(1);\n      i += 1;\n    }\n  }\n  return music_list;\n};\n\n/*\n  Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let i = 0;\n  while (i < music_string_length) {\n    const current_note = music_string[i];\n    if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else if (current_note === '|') {\n      music_list.push(2);\n      i += 1;\n    } else if (current_note === '.') {\n      music_list.push(1);\n      i += 1;\n    } else if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else {\n      music_list.push(1);\n      i += 1;\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic3 = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let i = 0;\n  while (i < music_string_length) {\n    const current_note = music_string[i];\n    if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else if (current_note === '|') {\n      music_list.push(2);\n      i += 1;\n    } else if (current_note === '.') {\n      music_list.push(1);\n      i += 1;\n    } else if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else {\n      music_list.push(1);\n      i += 1;\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic4 = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let i = 0;\n  while (i < music_string_length) {\n    const current_note = music_string[i];\n    if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else if (current_note === '|') {\n      music_list.push(2);\n      i += 1;\n    } else if (current_note === '.') {\n      music_list.push(1);\n      i += 1;\n    } else if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else {\n      music_list.push(1);\n      i += 1;\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic5 = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let i = 0;\n  while (i < music_string_length) {\n    const current_note = music_string[i];\n    if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else if (current_note === '|') {\n      music_list.push(2);\n      i += 1;\n    } else if (current_note === '.') {\n      music_list.push(1);\n      i += 1;\n    } else if (current_note === 'o') {\n      music_list.push(4);\n      i += 1;\n    } else {\n      music_list.push(1);\n      i += 1;\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic6 = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let i = 0;\n  while (i < music_string_length) {\n    const current_note = music_string[i];\n    if (current_note === 'o') {\n      music_list.push(4"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  3\n  */\nconst howManyTimes2 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  3\n  */\nconst howManyTimes3 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length && j < substring.length) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i] < substring[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  3\n  */\nconst howManyTimes4 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length && j < substring.length) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i] < substring[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  3\n  */\nconst howManyTimes5 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length && j < substring.length) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i] < substring[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  3\n  */\nconst howManyTimes6 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length && j < substring.length) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i] < substring[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  3\n  */\nconst howManyTimes7 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length && j < substring.length) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i] < substring[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  3\n  */\nconst howManyTimes8 = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length && j < substring.length) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i] <"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee' , 'fou r', 'five', 'six', 'seve n','eight' and 'nine' . \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    if (number < 10) {\n      sortedNumbers.push(number)\n    } else {\n      sortedNumbers.push(numbersArray[i])\n    }\n  }\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'\n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers9 = (numbers) => {\n  const numbersArray = numbers.split('"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ) .\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const len = numbers.length\n  const half = len / 2\n  const halfPlusOne = half + 1\n  const halfMinusOne = half - 1\n  const halfPlusHalf = half + half\n  const halfMinusHalf = half - half\n  const halfPlusHalfMinusOne = halfPlusHalf - 1\n  const halfMinusHalfPlusOne = halfMinusHalf + 1\n  const halfPlusHalfMinusOne = halfPlusHalf - 1\n  const halfMinusHalfPlusOne = halfMinusHalf + 1\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlusHalfMinusHalf = halfPlusHalf - halfMinusHalf\n  const halfMinusHalfPlusHalf = halfMinusHalf + halfPlusHalf\n  const halfPlus"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter(v => v!== null);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter(v => v!== undefined);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for NaN\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNaN = (values) => {\n  return values.filter(v => v!== NaN);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for Infinity\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterInfinity = (values) => {\n  return values.filter(v => v!== Infinity);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for -Infinity\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNegativeInfinity = (values) => {\n  return values.filter(v => v!== -Infinity);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(v => v!== '');\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(v =>!Array.isArray(v));\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(v =>!Object.isObject(v));\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyFunctions = (values) => {\n  return values.filter(v =>!(typeof v === 'function'));\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNull = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyUndefined = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty NaN\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNaN = (values) => {\n  return values.filter(v => v === NaN);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty Infinity\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyInfinity = (values) => {\n  return values.filter(v => v === Infinity);\n};\n\n/**\n  * Filter given list ofa ny pytho n values only for empty -Infinity\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNegativeInfinity = (values) => {\n  return values.filter(v"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if string is empty */\nconst isEmpty = (string) => {\n  return strlen(string) === 0\n}\n\n/* Return true if string is not empty */\nconst isNotEmpty = (string) => {\n  return strlen(string) > 0\n}\n\n/* Return true if string is equal to given string */\nconst isEqual = (string, other) => {\n  return string === other\n}\n\n/* Return true if string is not equal to given string */\nconst isNotEqual = (string, other) => {\n  return string!== other\n}\n\n/* Return true if string is less than given string */\nconst isLessThan = (string, other) => {\n  return string < other\n}\n\n/* Return true if string is less than or equal to given string */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other\n}\n\n/* Return true if string is greater than given string */\nconst isGreaterThan = (string, other) => {\n  return string > other\n}\n\n/* Return true if string is greater than or equal to given string */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other\n}\n\n/* Return true if string is in given array */\nconst isIn = (string, array) => {\n  return array.indexOf(string) > -1\n}\n\n/* Return true if string is not in given array */\nconst isNotIn = (string, array) => {\n  return array.indexOf(string) === -1\n}\n\n/* Return true if string is in given set */\nconst isInSet = (string, set) => {\n  return set.has(string)\n}\n\n/* Return true if string is not in given set */\nconst isNotInSet = (string, set) => {\n  return!set.has(string)\n}\n\n/* Return true if string is in given range */\nconst isInRange = (string, range) => {\n  return string >= range[0] && string <= range[1]\n}\n\n/* Return true if string is not in given range */\nconst isNotInRange = (string, range) => {\n  return!isInRange(string, range)\n}\n\n/* Return true if string is in given list */\nconst isInList = (string, list) => {\n  return list.indexOf(string) > -1\n}\n\n/* Return true if string is not in given list */\nconst isNotInList = (string, list) => {\n  return list.indexOf(string) === -1\n}\n\n/* Return true if string is in given range */\nconst isInRangeList = (string, range, list) => {\n  return list.indexOf(string) > -1 && string >= range[0] && string <= range[1]\n}\n\n/* Return true if string is not in given range */\nconst isNotInRangeList = (string, range, list) => {\n  return list.indexOf(string) === -1 || string < range[0] || string > range[1]\n}\n\n/* Return true if string is in given set */\nconst isInSetList = (string, set, list) => {\n  return list.indexOf(string) > -1 && set.has(string)\n}\n\n/* Return true if string is not in given set */\nconst isNotInSetList = (string, set, list) => {\n  return list.indexOf(string) === -1 ||!set.has(string)\n}\n\n/* Return true if string is in given range */\nconst isInRangeSet = (string, range, set) => {\n  return set.has(string) && string >= range[0] && string <= range[1]\n}\n\n/* Return true if string is not in given range */\nconst isNotInRangeSet = (string, range, set) => {\n  return!isInRangeSet(string, range, set)\n}\n\n/* Return true if string is in given list */\nconst isInListSet = (string, list, set) => {\n  return set.has(string) && list.indexOf(string) > -1\n}\n\n/* Return true if string is not in given list */\nconst isNotInListSet = (string, list, set) => {\n  return list.indexOf(string) === -1 ||!set.has(string)\n}\n\n/* Return true if string is in given range */\nconst isInRangeSetList = (string, range, set, list) => {\n  return list.indexOf(string) > -1 && set.has(string) && string >= range[0] && string <= range[1]\n}\n\n/* Return true if string is not in given range */\nconst isNotInRangeSetList = (string, range, set, list) => {\n  return list.indexOf(string) === -1 ||!set.has(string) || string < range[0] || string > range[1]\n}\n\n/* Return true if string is in given set */\nconst isInSetSet = (string, set, set2) => {\n  return set.has(string) && set2.has(string)\n}\n\n/* Return true if string is not in given set */\nconst isNotInSetSet = (string, set, set2) => {\n  return!isInSetSet(string, set, set2)\n}\n\n/* Return true if string is in given range */\nconst isInRangeSetSet = (string, range, set, set2) => {\n  return set.has(string) && set2.has(string) && string >= range[0] && string <= range[1]\n}\n\n/* Return true if string is not in given range */\nconst isNotInRangeSetSet = (string, range, set, set2) => {\n  return!isInRangeSetSet(string, range, set, set2)\n}\n\n/* Return true if string is in given list */\nconst isInListSetSet = (string, list, set, set2) => {\n  return set.has(string) && set2.has(string) && list.indexOf(string) > -1\n}\n\n/* Return true if string is not in given list */\nconst isNotInListSetSet = (string, list, set, set2) => {\n"}
{"task_id": "JavaScript/24", "prompt": "/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor2 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor3 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor4 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor5 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor6 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor7 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor8 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor9 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor10 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor11 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor12 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor13 = (n) => {\n  let smallest = n;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Fora given number n, find the smallest number that divides n evenly, larger thann\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor14 = (n) => {\n  let smallest = n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_map = {}\n  const factors_list = []\n  const factors_list_map = {}\n  const factors_list_map_2 = {}\n  const factors_list_map_3 = {}\n  const factors_list_map_4 = {}\n  const factors_list_map_5 = {}\n  const factors_list_map_6 = {}\n  const factors_list_map_7 = {}\n  const factors_list_map_8 = {}\n  const factors_list_map_9 = {}\n  const factors_list_map_10 = {}\n  const factors_list_map_11 = {}\n  const factors_list_map_12 = {}\n  const factors_list_map_13 = {}\n  const factors_list_map_14 = {}\n  const factors_list_map_15 = {}\n  const factors_list_map_16 = {}\n  const factors_list_map_17 = {}\n  const factors_list_map_18 = {}\n  const factors_list_map_19 = {}\n  const factors_list_map_20 = {}\n  const factors_list_map_21 = {}\n  const factors_list_map_22 = {}\n  const factors_list_map_23 = {}\n  const factors_list_map_24 = {}\n  const factors_list_map_25 = {}\n  const factors_list_map_26 = {}\n  const factors_list_map_27 = {}\n  const factors_list_map_28 = {}\n  const factors_list_map_29 = {}\n  const factors_list_map_30 = {}\n  const factors_list_map_31 = {}\n  const factors_list_map_32 = {}\n  const factors_list_map_33 = {}\n  const factors_list_map_34 = {}\n  const factors_list_map_35 = {}\n  const factors_list_map_36 = {}\n  const factors_list_map_37 = {}\n  const factors_list_map_38 = {}\n  const factors_list_map_39 = {}\n  const factors_list_map_40 = {}\n  const factors_list_map_41 = {}\n  const factors_list_map_42 = {}\n  const factors_list_map_43 = {}\n  const factors_list_map_44 = {}\n  const factors_list_map_45 = {}\n  const factors_list_map_46 = {}\n  const factors_list_map_47 = {}\n  const factors_list_map_48 = {}\n  const factors_list_map_49 = {}\n  const factors_list_map_50 = {}\n  const factors_list_map_51 = {}\n  const factors_list_map_52 = {}\n  const factors_list_map_53 = {}\n  const factors_list_map_54 = {}\n  const factors_list_map_55 = {}\n  const factors_list_map_56 = {}\n  const factors_list_map_57 = {}\n  const factors_list_map_58 = {}\n  const factors_list_map_59 = {}\n  const factors_list_map_60 = {}\n  const factors_list_map_61 = {}\n  const factors_list_map_62 = {}\n  const factors_list_map_63 = {}\n  const factors_list_map_64 = {}\n  const factors_list_map_65 = {}\n  const factors_list_map_66 = {}\n  const factors_list_map_67 = {}\n  const factors_list_map_68 = {}\n  const factors_list_map_69 = {}\n  const factors_list_map_70 = {}\n  const factors_list_map_71 = {}\n  const factors_list_map_72 = {}\n  const factors_list_map_73 = {}\n  const factors_list_map_74 = {}\n  const factors_list_map_75 = {}\n  const factors_list_map_76 = {}\n  const factors_list_map_77 = {}\n  const factors_list_map_78 = {}\n  const factors_list_map_79 = {}\n  const factors_list_map_80 = {}\n  const factors_list_map_81 = {}\n  const factors_list_map_82 = {}\n  const factors_list_map_83 = {}\n  const factors_list_map_84 = {}\n  const factors_list_map_85 = {}\n  const factors_list_map_86 = {}\n  const factors_list_map_87 = {}\n  const factors_list_map_88 = {}\n  const factors_list_map_89 = {}\n  const factors_list_map_90 = {}\n  const factors_list_map_91 = {}\n  const factors_list_map_92 = {}\n  const factors_list_map_93 = {}\n  const factors_list_map_94 = {}\n  const factors_list_map_95 = {}\n  const factors_list_map_96 = {}\n  const factors_list_map_97 = {}\n  const factors_list_map_98 = {}\n  const factors_list_map_99 = {}\n  const factors_list_map_100 = {}\n  const factors_list_map_101 = {}\n  const factors_list_map_102 = {}\n  const factors_list_map_103 = {}\n  const factors_list_map_104 = {}\n  const factors_list_map_105 = {}\n  const factors_list_map_106 = {}\n  const factors_list_map_107 = {}\n  const factors_list_map_108 = {}\n  const factors_list_map_109 = {}\n  const factors_list_map_110 = {}\n  const factors_list_map_111 = {}\n  const factors_list_map_112 = {}\n  const factors_list_map_113 = {}\n  const factors_list_map_114 = {}\n  const factors_list_map_115 ="}
{"task_id": "JavaScript/26", "prompt": "/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstLowerCase = (string) => {\n  return string.toUpperCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toLowerCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to uppercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstUpperCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to lowercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstLowerLowerCase = (string) => {\n  return string.toUpperCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toLowerCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to uppercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstUpperLowerCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to lowercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstLowerUpperCase = (string) => {\n  return string.toUpperCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toLowerCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to uppercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstUpperUpperCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to lowercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstLowerLowerUpperCase = (string) => {\n  return string.toUpperCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toLowerCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to uppercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstUpperLowerLowerCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to lowercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstLowerUpperLowerCase = (string) => {\n  return string.toUpperCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toLowerCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to uppercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstUpperLowerLowerCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to lowercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstLowerUpperLowerCase = (string) => {\n  return string.toUpperCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toLowerCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to uppercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstUpperLowerLowerCase = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  Fora given string, f l ip the first letter to lowercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipFirstLowerUpperLowerCase = (string) => {\n  return string.to"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length;"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 30) return true\n  const limit = Math.sqrt(n)\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + ....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution .\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let i = 0;\n  let j = xs.length - 1;\n  let k = 0;\n  let s = 0;\n  let t = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    x = xs[k];\n    y = xs[k + 1];\n    z = xs[k + 2];\n    if (x == 0) {\n      s = k + 1;\n      break;\n    }\n    if (y == 0) {\n      s = k + 2;\n      break;\n    }\n    if (z == 0) {\n      s = k + 3;\n      break;\n    }\n    if (x > 0) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  return s;\n}\n\n/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let i = 0;\n  let j = xs.length - 1;\n  let k = 0;\n  let s = 0;\n  let t = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    x = xs[k];\n    y = xs[k + 1];\n    z = xs[k + 2];\n    if (x == 0) {\n      s = k + 1;\n      break;\n    }\n    if (y == 0) {\n      s = k + 2;\n      break;\n    }\n    if (z == 0) {\n      s = k + 3;\n      break;\n    }\n    if (x > 0) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  return s;\n}\n\n/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let i = 0;\n  let j = xs.length - 1;\n  let k = 0;\n  let s = 0;\n  let t = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    x = xs[k];\n    y = xs[k + 1];\n    z = xs[k + 2];\n    if (x == 0) {\n      s = k + 1;\n      break;\n    }\n    if (y == 0) {\n      s = k + 2;\n      break;\n    }\n"}
{"task_id": "JavaScript/33", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 3) {\n    const index = l.indexOf(l[i]);\n    sorted.push(l[index]);\n  }\n  return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList2 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList3 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList4 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList5 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList6 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList7 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList8 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList9 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList10 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList11 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13 .\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i === 11 || i === 13) {\n        console.log(i);\n      } else {\n        console.log(i +'' + i);\n      }\n    }\n    i++;\n  }\n};\n\nfizzBuzz(78);\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length ==3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups2 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups3 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups4 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups5 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups6 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups7 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups8 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups9 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups10 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups11 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups12 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups13 =(s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length ==3)\n      groups.push(group[0] + group[1] + group[2]);\n  }\n  return groups.length;\n}\n\n/*\n  returns the number of groups in the string.\n  */\nconst getGroups14 =(s) => {\n  const groups = [];\n  for ("}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, AA = 1, BB = 1, CC = 1, DD = 1, EE = 1, FF = 1, GG = 1, HH = 1, II = 1, JJ = 1, KK = 1, LL = 1, MM = 1, NN = 1, OO = 1, PP = 1, QQ = 1, RR = 1, SS = 1, TT = 1, UU = 1, VV = 1, WW = 1, XX = 1, YY = 1, ZZ = 1, aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, www = 1, xx = 1, yy = 1, zz = 1;\n    let aa = 1, bb"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.length === 3 && l.every((x) => x > 0 && x < sum);\n};\n\n/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.length === 3 && l.every((x) => x > 0 && x < sum);\n};\n\n/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.length === 3 && l.every((x) => x > 0 && x < sum);\n};\n\n/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.length === 3 && l.every((x) => x > 0 && x < sum);\n};\n\n/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.length === 3 && l.every((x) => x > 0 && x < sum);\n};\n\n/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.length === 3 && l.every((x) => x > 0 && x < sum);\n};\n\n/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.length === 3 && l.every((x) => x > 0 && x < sum);\n};\n\n/*\n  triplesSumToZero take s"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously , a  diffe rent set of n cars\n  are  dri ving right to left .    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i, i + 1))\n  }\n  cars.forEach(car => car.move())\n  return cars.reduce((acc, car, i) => {\n    if (cars[i].left < cars[i].right) {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n}\n\nconst car = (left, right) => {\n  this.left = left\n  this.right = right\n  this.speed = 1\n  this.collision = false\n}\n\ncar.prototype.move = () => {\n  if (this.collision) {\n    return\n  }\n  this.speed += 1\n  this.left += this.speed\n  this.right -= this.speed\n  if (this.left > this.right) {\n    this.collision = true\n  }\n}\n\nmodule.exports = RaceC\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let incrList = [];\n  while (i < l.length) {\n    incrList[j] = l[i];\n    i++;\n    j++;\n  }\n  return incrList;\n};\n\n/*\n  >>> incrList([1, 2, 3"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSum"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\nconst changeBase = (x, base) => {\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length"}
{"task_id": "JavaScript/46", "prompt": "/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n - 2);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let half = sorted.length / 2;\n  let a = sorted[half - 1];\n  let b = sorted[half];\n  if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given strin g  is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given str"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : modp(b, p)\n}\n\n/*Return the number of digits in n.\n  >>> digits(0)\n  0\n  >>> digits(1)\n  1\n  >>> digits(2)\n  1\n  >>> digits(3)\n  2\n  >>> digits(4)\n  2\n  >>> digits(5)\n  2\n  >>> digits(6)\n  2\n  >>> digits(7)\n  3\n  >>> digits(8)\n  3\n  >>> digits(9)\n  3\n  >>> digits(10)\n  3\n  >>> digits(11)\n  4\n  >>> digits(12)\n  4\n  >>> digits(13)\n  4\n  >>> digits(14)\n  4\n  >>> digits(15)\n  4\n  >>> digits(16)\n  5\n  >>> digits(17)\n  5\n  >>> digits(18)\n  5\n  >>> digits(19)\n  5\n  >>> digits(20)\n  5\n  >>> digits(21)\n  5\n  >>> digits(22)\n  5\n  >>> digits(23)\n  6\n  >>> digits(24)\n  6\n  >>> digits(25)\n  6\n  >>> digits(26)\n  6\n  >>> digits(27)\n  6\n  >>> digits(28)\n  6\n  >>> digits(29)\n  6\n  >>> digits(30)\n  6\n  >>> digits(31)\n  7\n  >>> digits(32)\n  7\n  >>> digits(33)\n  7\n  >>> digits(34)\n  7\n  >>> digits(35)\n  7\n  >>> digits(36)\n  7\n  >>> digits(37)\n  7\n  >>> digits(38)\n  7\n  >>> digits(39)\n  7\n  >>> digits(40)\n  7\n  >>> digits(41)\n  7\n  >>> digits(42)\n  7\n  >>> digits(43)\n  7\n  >>> digits(44)\n  7\n  >>> digits(45)\n  7\n  >>> digits(46)\n  7\n  >>> digits(47)\n  7\n  >>> digits(48)\n  8\n  >>> digits(49)\n  8\n  >>> digits(50)\n  8\n  >>> digits(51)\n  8\n  >>> digits(52)\n  8\n  >>> digits(53)\n  8\n  >>> digits(54)\n  8\n  >>> digits(55)\n  8\n  >>> digits(56)\n  8\n  >>> digits(57)\n  8\n  >>> digits(58)\n  8\n  >>> digits(59)\n  8\n  >>> digits(60)\n  8\n  >>> digits(61)\n  8\n  >>> digits(62)\n  8\n  >>> digits(63)\n  8\n  >>> digits(64)\n  9\n  >>> digits(65)\n  9\n  >>> digits(66)\n  9\n  >>> digits(67)\n  9\n  >>> digits(68)\n  9\n  >>> digits(69)\n  9\n  >>> digits(70)\n  9\n  >>> digits(71)\n  9\n  >>> digits(72)\n  9\n  >>> digits(73)\n  9\n  >>> digits(74)\n  9\n  >>> digits(75)\n  9\n  >>> digits(76)\n  9\n  >>> digits(77)\n  9\n  >>> digits(78)\n  9\n  >>> digits(79)\n  9\n  >>> digits(80)\n  9\n  >>> digits(81)\n  9\n  >>> digits(82)\n  9\n  >>> digits(83)\n  9\n  >>> digits(84)\n  9\n  >>> digits(85)\n  9\n  >>> digits(86)\n  9\n  >>> digits(87)\n  9\n  >>> digits(88)\n  9\n  >>> digits(89)\n  9\n  >>> digits(90)\n  9\n  >>> digits(91)\n  9\n  >>> digits(92)\n  9\n  >>> digits(93)\n  9\n  >>> digits(94)\n  9\n  >>> digits(95)\n  9\n  >>> digits(96)\n  9\n  >>> digits(97)\n  9\n  >>> digits(98)\n  9\n  >>> digits(99)\n  9\n  >>> digits(100)\n  10\n  >>> digits(101)\n  10\n  >>> digits(102)\n  10\n  >>> digits(103)\n  10\n  >>> digits(104)\n  10\n  >>> digits(105)\n  10\n  >>> digits(106)\n  10\n  >>> digits(107)\n  10\n  >>> digits(108)\n  10\n  >>> digits(109)\n  10\n  >>> digits(110)\n  10\n  >>> digits(111)\n  10\n  >>> digits(112)\n  10\n  >>> digits(113)\n  10\n  >>> digits(114)\n  10\n  >>> digits(115)\n  10\n  >>> digits(116)\n  10\n  >>> digits(117)\n  10\n  >>> digits(118)\n  10\n  >>> digits(119)\n  10\n  >>> digits(120)\n  10\n  >>> digits(121)\n  10\n  >>> digits(122)\n  10\n  >>> digits(123)\n  10\n  >>> digits(124)\n  10\n  >>> digits(125)\n  10\n  >>> digits(126)\n  10\n  >>> digits(127)\n  10\n  >>> digits(128)\n  11\n  >>> digits(129)\n  11\n  >>> digits(130)\n  11\n  >>> digits(131)\n  11\n  >>> digits(132)\n  11\n  >>> digits(133)\n  11\n  >>> digits(134)\n  11\n  >>> digits(135)\n  11\n  >>> digits(136)\n  11\n  >>> digits(137)\n  11\n  >>> digits(138)\n  11"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  return s.split(\"\").map(encodeShift).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) => {\n  return decodeS(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) => {\n  return encodeS(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeS = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeS = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeS = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeS = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeS = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeS = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decode = (s) =>{\n  return decodeShift(s);\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encode = (s) =>{\n  return encodeShift(s);\n}\n\n/*\n  takes asinput string encoded"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const newText = text.replace(/[aeiouAEIOU]/g, '')\n  return newText\n}\n\n/*\n  removePunctuation is a fun ction tha t takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['!', '?', '.', ',', ':', ';', '-', '_', '\\'', '\\\"', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s',"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholdsAndAbove = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x < t2);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholdsAndBelow = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholdsAndAboveAndBelow = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholdsAndAboveAndBelowAndAbove = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t2);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholdsAndAboveAndBelowAndAbove = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t2);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholdsAndAboveAndBelowAndAboveAndBelow = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t2 && x < t2);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 10)\n  true\n  */\nconst betweenThresholdsAndAboveAndBelowAndAboveAndBelow = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t2 && x < t2);\n};\n\n/*Return true if all num b ers in t he list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold(["}
{"task_id": "JavaScript/53", "prompt": "/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * subtract(2, 3)\n  * -1\n  * @example\n  * subtract(5, 7)\n  * 4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * multiply(2, 3)\n  * 6\n  * @example\n  * multiply(5, 7)\n  * 35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * divide(2, 3)\n  * 0.6666666666666666\n  * @example\n  * divide(5, 7)\n  * 2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * modulo(2, 3)\n  * 1\n  * @example\n  * modulo(5, 7)\n  * 6\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the absolute value of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * abs(2)\n  * 2\n  * @example\n  * abs(-2)\n  * 2\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*\n  * Return the square of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * square(2)\n  * 4\n  * @example\n  * square(-2)\n  * 4\n  */\nconst square = x => {\n  return x * x;\n};\n\n/*\n  * Return the cube of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * cube(2)\n  * 8\n  * @example\n  * cube(-2)\n  * 16\n  */\nconst cube = x => {\n  return x * x * x;\n};\n\n/*\n  * Return the factorial of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * factorial(2)\n  * 2\n  * @example\n  * factorial(3)\n  * 6\n  */\nconst factorial = x => {\n  return x <= 1? 1 : x * factorial(x - 1);\n};\n\n/*\n  * Return the sum of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * sum(2, 3)\n  * 5\n  * @example\n  * sum(5, 7)\n  * 12\n  */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Return the difference of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * difference(2, 3)\n  * 1\n  * @example\n  * difference(5, 7)\n  * 4\n  */\nconst difference = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Return the product of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * product(2, 3)\n  * 6\n  * @example\n  * product(5, 7)\n  * 35\n  */\nconst product = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Return the quotient of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * quotient(2, 3)\n  * 0.6666666666666666\n  * @example\n  * quotient(5, 7)\n  * 2.5\n  */\nconst quotient = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Return the remainder of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * remainder(2, 3)\n  * 1\n  * @example\n  * remainder(5, 7)\n  * 6\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the sum of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * sum(2, 3)\n  * 5\n  * @example\n  * sum(5, 7)\n  * 12\n  */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Return the difference of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * difference(2, 3)\n  * 1\n  * @example\n  * difference(5, 7)\n  * 4\n  */\nconst difference = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Return the product of two numbers\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * product(2, 3)\n  * 6\n  * @example\n  * product(5, 7)\n  * 35\n  */\nconst product = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Return the quotient of two numbers\n  * @param x\n  *"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) {\n    return false\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCase = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) {\n    return false\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCase = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) {\n    return false\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCaseAndCase = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) {\n    return false\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  sameChars,\n  sameCharsWithCase,\n  sameCharsWithCaseAndCase,\n  sameCharsWithCaseAndCaseAndCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 4\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 4\n  if (n === 5) return 5\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 4\n  if (n === 5) return 5\n  if (n === 6) return 6\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 4\n  if (n === 5) return 5\n  if (n === 6) return 6\n  if (n === 7) return 7\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 4\n  if (n === 5) return 5\n  if (n === 6) return 6\n  if (n === 7) return 7\n  if (n === 8) return 8\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 4\n  if (n === 5) return 5\n  if (n === 6) return 6\n  if (n === 7) return 7\n  if (n === 8) return 8\n  if (n === 9) return 9\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9)\n}\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 4\n  if (n === 5) return 5\n  if (n === 6) return 6\n  if (n === 7) return 7\n  if (n === 8) return 8\n  if (n === 9) return 9\n  if (n === 10) return 10\n  return fib10(n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsLengthMinusOne = bracketsLength - 1\n  const bracketsLengthMinusTwo = bracketsLength - 2\n  const bracketsLengthMinusThree = bracketsLength - 3\n  const bracketsLengthMinusFour = bracketsLength - 4\n  const bracketsLengthMinusFive = bracketsLength - 5\n  const bracketsLengthMinusSix = bracketsLength - 6\n  const bracketsLengthMinusSeven = bracketsLength - 7\n  const bracketsLengthMinusEight = bracketsLength - 8\n  const bracketsLengthMinusNine = bracketsLength - 9\n  const bracketsLengthMinusTen = bracketsLength - 10\n\n  const bracketsLengthMinusOneIsOpeningBracket = brackets[bracketsLengthMinusOne] === \"<\"\n  const bracketsLengthMinusTwoIsOpeningBracket = brackets[bracketsLengthMinusTwo] === \"<\"\n  const bracketsLengthMinusThreeIsOpeningBracket = brackets[bracketsLengthMinusThree] === \"<\"\n  const bracketsLengthMinusFourIsOpeningBracket = brackets[bracketsLengthMinusFour] === \"<\"\n  const bracketsLengthMinusFiveIsOpeningBracket = brackets[bracketsLengthMinusFive] === \"<\"\n  const bracketsLengthMinusSixIsOpeningBracket = brackets[bracketsLengthMinusSix] === \"<\"\n  const bracketsLengthMinusSevenIsOpeningBracket = brackets[bracketsLengthMinusSeven] === \"<\"\n  const bracketsLengthMinusEightIsOpeningBracket = brackets[bracketsLengthMinusEight] === \"<\"\n  const bracketsLengthMinusNineIsOpeningBracket = brackets[bracketsLengthMinusNine] === \"<\"\n  const bracketsLengthMinusTenIsOpeningBracket = brackets[bracketsLengthMinusTen] === \"<\"\n\n  const bracketsLengthMinusOneIsClosingBracket = brackets[bracketsLengthMinusOne] === \">\"\n  const bracketsLengthMinusTwoIsClosingBracket = brackets[bracketsLengthMinusTwo] === \">\"\n  const bracketsLengthMinusThreeIsClosingBracket = brackets[bracketsLengthMinusThree] === \">\"\n  const bracketsLengthMinusFourIsClosingBracket = brackets[bracketsLengthMinusFour] === \">\"\n  const bracketsLengthMinusFiveIsClosingBracket = brackets[bracketsLengthMinusFive] === \">\"\n  const bracketsLengthMinusSixIsClosingBracket = brackets[bracketsLengthMinusSix] === \">\"\n  const bracketsLengthMinusSevenIsClosingBracket = brackets[bracketsLengthMinusSeven] === \">\"\n  const bracketsLengthMinusEightIsClosingBracket = brackets[bracketsLengthMinusEight] === \">\"\n  const bracketsLengthMinusNineIsClosingBracket = brackets[bracketsLengthMinusNine] === \">\"\n  const bracketsLengthMinusTenIsClosingBracket = brackets[bracketsLengthMinusTen] === \">\"\n\n  const bracketsLengthMinusOneIsOpeningBracketAndClosingBracket = bracketsLengthMinusOneIsOpeningBracket && bracketsLengthMinusOneIsClosingBracket\n  const bracketsLengthMinusTwoIsOpeningBracketAndClosingBracket = bracketsLengthMinusTwoIsOpeningBracket && bracketsLengthMinusTwoIsClosingBracket\n  const bracketsLengthMinusThreeIsOpeningBracketAndClosingBracket = bracketsLengthMinusThreeIsOpeningBracket && bracketsLengthMinusThreeIsClosingBracket\n  const bracketsLengthMinusFourIsOpeningBracketAndClosingBracket = bracketsLengthMinusFourIsOpeningBracket && bracketsLengthMinusFourIsClosingBracket\n  const bracketsLengthMinusFiveIsOpeningBracketAndClosingBracket = bracketsLengthMinusFiveIsOpeningBracket && bracketsLengthMinusFiveIsClosingBracket\n  const bracketsLengthMinusSixIsOpeningBracketAndClosingBracket = bracketsLengthMinusSixIsOpeningBracket && bracketsLengthMinusSixIsClosingBracket\n  const bracketsLengthMinusSevenIsOpeningBracketAndClosingBracket = bracketsLengthMinusSevenIsOpeningBracket && bracketsLengthMinusSevenIsClosingBracket\n  const bracketsLengthMinusEightIsOpeningBracketAndClosingBracket = bracketsLengthMinusEightIsOpeningBracket && bracketsLengthMinusEightIsClosingBracket\n  const bracketsLengthMinusNineIsOpeningBracketAndClosingBracket = bracketsLengthMinusNineIsOpeningBracket && bracketsLengthMinusNineIsClosingBracket\n  const bracketsLengthMinusTenIsOpeningBracketAndClosingBracket = bracketsLengthMinusTenIsOpeningBracket && bracketsLengthMinusTenIsClosingBracket\n\n  return bracketsLengthMinusOneIsOpeningBracketAndClosingBracket && bracketsLengthMinusTwoIsOpeningBracketAndClosingBracket && bracketsLengthMinusThreeIsOpeningBracketAndClosingBracket && bracketsLengthMinusFourIsOpeningBracketAndClosingBracket && bracketsLengthMinusFiveIsOpeningBracketAndClosingBracket && bracketsLengthMinusSixIsOpeningBracketAndClosingBracket && bracketsLengthMinusSevenIsOpeningBracketAndClosingBracket && bracketsLengthMinusEightIsOpeningBracketAndClosingBracket && bracketsLengthMinusNineIsOpeningBracketAndClosingBracket && bracketsLengthMinusTenIsOpeningBracketAndClosingBracket\n}\n\nexport default correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] >= x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if list el e is a permutation of the elements of the list.\n  >>> permutation([1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst permutation = (l) =>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const l1Length = l1.length;\n  const l2Length = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Length && j < l2Length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largest"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== '(') {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  >>> brackets = \"(((()())))\"\n  >>> isValidParentheses(brackets)\n  true\n  >>> brackets = \"((()()))\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"\n  >>> isValidParentheses(brackets)\n  false\n  >>> brackets = \"()()()()()()()()()()()()()()()()()()()()()()()()()()"}
{"task_id": "JavaScript/62", "prompt": "/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = len - i\n  }\n  return d\n}\n\n/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {"}
{"task_id": "JavaScript/63", "prompt": "/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ' , 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ', 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    const len = x.length\n    const result = x.slice()\n    const shiftDigits = shift\n    const shiftDigitsLen = len - shiftDigits\n    const shiftDigitsRight = shiftDigitsLen - shift\n    const shiftDigitsLeft = shiftDigits - shiftDigitsRight\n    for (let i = 0; i < shiftDigitsLeft; i++) {\n        result[i] = result[i + shiftDigitsRight]\n    }\n    for (let i = shiftDigitsLeft; i < shiftDigits; i++) {\n        result[i] = result[i - shiftDigitsLeft]\n    }\n    return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n    const len = x.length\n    const result = x.slice()\n    const shiftDigits = shift\n    const shiftDigitsLen = len - shiftDigits\n    const shiftDigitsRight = shiftDigitsLen - shift\n    const shiftDigitsLeft = shiftDigits - shiftDigitsRight\n    for (let i = 0; i < shiftDigitsLeft; i++) {\n        result[i] = result[i + shiftDigitsRight]\n    }\n    for (let i = shiftDigitsLeft; i < shiftDigits; i++) {\n        result[i] = result[i - shiftDigitsLeft]\n    }\n    return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n    const len = x.length\n    const result = x.slice()\n    const shiftDigits = shift\n    const shiftDigitsLen = len - shiftDigits\n    const shiftDigitsRight = shiftDigitsLen - shift\n    const shiftDigitsLeft = shiftDigits - shiftDigitsRight\n    for (let i = 0; i < shiftDigitsLeft; i++) {\n        result[i] = result[i + shiftDigitsRight]\n    }\n    for (let i = shiftDigitsLeft; i < shiftDigits; i++) {\n        result[i] = result[i - shiftDigitsLeft]\n    }\n    return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n    const len = x.length\n    const result = x.slice()\n    const shiftDigits = shift\n    const shiftDigitsLen = len - shiftDigits\n    const shiftDigitsRight = shiftDigitsLen - shift\n    const shiftDigitsLeft = shiftDigits - shiftDigitsRight\n    for (let i = 0; i < shiftDigitsLeft; i++) {\n        result[i] = result[i + shiftDigitsRight]\n    }\n    for (let i = shiftDigitsLeft; i < shiftDigits; i++) {\n        result[i] = result[i - shiftDigitsLeft]\n    }\n    return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n    const len = x.length\n    const result = x.slice()\n    const shiftDigits = shift\n    const shiftDigitsLen = len - shiftDigits\n    const shiftDigitsRight = shiftDigitsLen - shift\n    const shiftDigitsLeft = shiftDigits - shiftDigitsRight\n    for (let i = 0; i < shiftDigitsLeft; i++) {\n        result[i] = result[i + shiftDigitsRight]\n    }\n    for (let i = shiftDigitsLeft; i < shiftDigits; i++) {\n        result[i] = result[i - shiftDigitsLeft]\n    }\n    return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n    const len = x.length\n    const result = x.slice()\n    const shiftDigits = shift\n    const shiftDigitsLen = len - shiftDigits\n    const shiftDigitsRight = shiftDigitsLen - shift\n    const shiftDigitsLeft = shiftDigits - shiftDigitsRight\n    for (let i = 0; i < shiftDigitsLeft; i++) {\n        result[i] = result[i + shiftDigitsRight]\n    }\n    for (let i = shiftDigitsLeft; i < shiftDigits; i++) {\n        result[i] = result[i - shiftDigitsLeft]\n    }\n    return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n    const len = x.length\n    const result = x.slice()\n    const shiftDigits = shift\n    const shiftDigitsLen = len - shiftDigits\n    const shiftDigitsRight = shiftDigitsLen - shift\n    const shiftDigitsLeft = shiftDigits - shiftDigitsRight\n    for (let i = 0; i < shiftDigitsLeft; i++) {\n        result[i] = result[i + shiftDigitsRight]\n    }\n    for (let i = shiftDigitsLeft; i < shiftDigits; i++) {\n        result[i] = result[i - shiftDigitsLeft]\n    }\n    return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x,"}
{"task_id": "JavaScript/66", "prompt": "/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\" ,3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\",3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n  let arr = s.split(\" \")\n  let total = 0\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n      total += num\n    }\n  }\n  return total - count - n\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples and1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples and 3 or anges\", 10))\nconsole.log(fruitDistribution(\"100 apples and 1 ora nges\", 120))\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  const min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arrLength; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  return maxFreqIndex === -1? -1 : lst[maxFreqIndex]\n}\n\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFre"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integer s , return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      sorted.push(min)\n      min = lst[i]\n    } else if (lst[i] > max) {\n      sorted.push(max)\n      max = lst[i]\n    } else {\n      sorted.push(lst[i])\n    }\n  }\n  sorted.push(min)\n  sorted.push(max)\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea2 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea3 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea4 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea5 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea6 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea7 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea8 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea9 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea10 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea11 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea12 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea13 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  }\n  if (a + c > b) {\n    return ((a + c) * (b / 2))\n  }\n  if (b + c > a) {\n    return ((b + c) * (a / 2))\n  }\n  return -1\n}\n\nconst triangleArea14 = (a, b, c) => {\n  if (a + b >"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly2 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly3 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly4 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly5 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly6 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly7 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly8 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly9 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly10 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly11 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly12 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly13 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly14 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly15 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly16 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly17 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly18 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly19 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly20 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly21 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly22 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly23 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly24 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly25 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly26 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly27 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly28 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly29 = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nconst willItFly30 = ("}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers , find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  let count = 0;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars , return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  const len = Math.min(len1, len2)\n  const res = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) res.push(lst1[i])\n  }\n  return res\n}\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise .\n Knowi ng that (a) is less then  100 .\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const prime = primeNumbers(a);\n  for (let i = 0; i < prime.length; i++) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primeNumbers = (a) => {\n  const primes = [];\n  for (let i = 2; i < a; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default isMultiplyPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x / n, n);\n};\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower2(x / n, n);\n};\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower3(x / n, n);\n};\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower4(x / n, n);\n};\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower5(x / n, n);\n};\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower6(x / n, n);\n};\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower7(x / n, n);\n};\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower8(x / n, n);\n};\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower9(x / n, n);\n};\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower10(x / n, n);\n};\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower11(x / n, n);\n};\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower12(x / n, n);\n};\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower13(x / n, n);\n};\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower14(x / n, n);\n};\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower15(x / n, n);\n};\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower16(x / n, n);\n};\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0)"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a ==="}
{"task_id": "JavaScript/78", "prompt": "/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    let digit = num[i];\n    if (digit.toLowerCase() === 'a') {\n      digit = 'A';\n    } else if (digit.toLowerCase() === 'b') {\n      digit = 'B';\n    } else if (digit.toLowerCase() === 'c') {\n      digit = 'C';\n    } else if (digit.toLowerCase() === 'd') {\n      digit = 'D';\n    } else if (digit.toLowerCase() === 'e') {\n      digit = 'E';\n    } else if (digit.toLowerCase() === 'f') {\n      digit = 'F';\n    }\n    result += parseInt(digit, 16);\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime2 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime3 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime4 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime5 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime6 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime7 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime8 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime9 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime10 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime11 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n"}
{"task_id": "JavaScript/79", "prompt": "/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  binary += 'db';\n  return binary;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += 1;\n    } else {\n      decimal += 0;\n    }\n  }\n  decimal += 'db';\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  for (let"}
{"task_id": "JavaScript/80", "prompt": "/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let n = 0;\n  let len = s.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    n = n * 10 + s[i] - '0';\n  }\n  sum = n;\n  while (sum > 0) {\n    if (sum % 3 === 0) {\n      sum = sum / 3;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.isArray(grades)? grades : [grades];\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return number > 1 && prime.test(number);\n  };\n  const isPrimeLength = (length) => {\n    return isPrime(length);\n  };\n  return isPrimeLength(string.length);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains all the characters in the string\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  */\nconst containsAll = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  contains at least one of the characters in the string\n  Examples\n  containsAny('Hello', 'ell') == true\n  containsAny('Hello', 'elloo') == true\n  containsAny('Hello', 'elloo') == false\n  */\nconst containsAny = (string, subString) => {\n  const contains = (string, subString) => {\n    return string.indexOf(subString)!== -1;\n  };\n  return contains(string, subString);\n};"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon endsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\ncon startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count += 1\n      }\n      num"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const arr = s.split('')\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] ==='') {\n      newArr.push(arr[i])\n    } else {\n      let newWord = ''\n      for (let j = 0; j < arr.length; j++) {\n        if (arr[j]!=='') {\n          newWord += arr[j]\n        }\n      }\n      newArr.push(newWord)\n    }\n  }\n  return newArr.join('')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es ,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2) ...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2)...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [rows, cols] = lst.length\n  const [row, col] = x\n  const [row1, col1] = row\n  const [row2, col2] = col\n  const [row3, col3] = rows - 1\n  const [row4, col4] = cols - 1\n  const [row5, col5] = row1\n  const [row6, col6] = col1\n  const [row7, col7] = row2\n  const [row8, col8] = col2\n  const [row9, col9] = row3\n  const [row10, col10] = col3\n  const [row11, col11] = row4\n  const [row12, col12] = col4\n  const [row13, col13] = row5\n  const [row14, col14] = col5\n  const [row15, col15] = row6\n  const [row16, col16] = col6\n  const [row17, col17] = row7\n  const [row18, col18] = col7\n  const [row19, col19] = row8\n  const [row20, col20] = col8\n  const [row21, col21] = row9\n  const [row22, col22] = col9\n  const [row23, col23] = row10\n  const [row24, col24] = col10\n  const [row25, col25] = row11\n  const [row26, col26] = col11\n  const [row27, col27] = row12\n  const [row28, col28] = col12\n  const [row29, col29] = row13\n  const [row30, col30] = col13\n  const [row31, col31] = row14\n  const [row32, col32] = col14\n  const [row33, col33] = row15\n  const [row34, col34] = col15\n  const [row35, col35] = row16\n  const [row36, col36] = col16\n  const [row37, col37] = row17\n  const [row38, col38] = col17\n  const [row39, col39] = row18\n  const [row40, col40] = col18\n  const [row41, col41] = row19\n  const [row42, col42] = col19\n  const [row43, col43] = row20\n  const [row44, col44] = col20\n  const [row45, col45] = row21\n  const [row46, col46] = col21\n  const [row47, col47] = row22\n  const [row48, col48] = col22\n  const [row49, col49] = row23\n  const [row50, col50] = col23\n  const [row51, col51] = row24\n  const [row52, col52] = col24\n  const [row53, col53] = row25\n  const [row54, col54] = col25\n  const [row55, col55] = row26\n  const [row56, col56] = col26\n  const [row57, col57] = row27\n  const [row58, col58] = col27\n  const [row59, col59] = row28\n  const [row60, col60] = col28\n  const [row61, col61] = row29\n  const [row62, col62] = col29\n  const [row63, col63] = row30\n  const [row64, col64] = col30\n  const [row65, col65] = row31\n  const [row66, col66] = col31\n  const [row67, col67] = row32\n  const [row68, col68] = col32\n  const [row69, col69] = row33\n  const [row70, col70] = col33\n  const [row71, col71] = row34\n  const [row72, col72] = col34\n  const [row73, col73] = row35\n  const [row74, col74] = col35\n  const [row75, col75] = row36\n  const [row76, col76] = col36\n  const [row77, col77] = row37\n  const [row78, col78] = col37\n  const [row79, col79] = row38\n  const [row80, col80] = col38\n  const [row81, col81] = row39\n  const [row82, col82] = col39\n  const [row83, col83] = row40\n  const [row84, col84] = col40\n  const [row85, col85] = row41\n  const [row86, col86] = col41\n  const [row87, col87] = row42\n  const [row88, col88] = col42\n  const [row89, col89] = row43\n  const [row90, col90] = col43\n  const [row91, col91] = row44\n  const [row92, col92] = col44\n  const [row93, col93] = row45\n  const [row94, col94]"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 0) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet_len = alphabet.length\n  let result = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n  const minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =(lst) => {\n  if(lst.length === 0) return null;\n  const min = lst[0];\n"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by' .', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true;\n  }\n  if (x === y - z) {\n    return true;\n  }\n  if (x === z - y) {\n    return true;\n  }\n  if (x === z + y) {\n    return true;\n  }\n  return false;\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters , repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encoded = [];\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      encoded.push(letter);\n    } else {\n      const index = message.indexOf(letter.toUpperCase(), i + 1);\n      if (index!== -1) {\n        encoded.push(message[index]);\n      } else {\n        encoded.push(letter.toUpperCase());\n      }\n    }\n  }\n  return encoded.join('');\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num > max) {\n      max = num;\n    }\n    sum += num;\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, r"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    let count = 0\n    while (count < primes.length && primes[count] <= i) {\n      count += 1\n    }\n    result.push(primes[count - 1])\n  }\n  return result\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(x => x.charCodeAt(0));\n  let b_unit = b.toString().split('').map(x => x.charCodeAt(0));\n  let product = a_unit.reduce((acc, x, i) => acc * b_unit[i], 1);\n  return product;\n};\n\n/*\n  Complete the function that takes a string and returns the number of \n  characters in the string.\n  Assume that the string is a valid number.\n  Examples:\n  length(\"123\") should return 3.\n  length(\"1234\") should return 4.\n  length(\"1234a\") should return 5.\n  length(\"a1b2c3\") should return 7.\n  length(\"abcd\") should return 2.\n  length(\"\") should return 0.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2.\n  length(\"abcd\") should return 2."}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit .If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value);\n  const absNum = Math.abs(num);\n  const closest = absNum;\n  const absNumInt = Math.floor(absNum);\n  const absNumFrac = absNum - absNumInt;\n  if (absNumInt === 0) {\n    return absNum;\n  }\n  if (absNumFrac === 0) {\n    return absNumInt;\n  }\n  if (absNumInt < absNumFrac) {\n    return absNumInt;\n  }\n  return absNumFrac;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile = (n)"}
{"task_id": "JavaScript/101", "prompt": "/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count2 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count3 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count4 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count5 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count6 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count7 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count8 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count9 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count10 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count11 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count12 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count(\"Hi, my name is John\") == 1\n  */\nconst count13 = (s) => {\n  const words = wordsString(s);\n  return words.length;\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n  \n  For example:\n  count(\"Hi, my name is John\") == 2\n  count(\"Hi, my name is John\") == 1\n  count"}
{"task_id": "JavaScript/102", "prompt": "/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum2(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum3(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum4(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum5(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum6(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum7(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum8(y, x);\n  }\n  let x1 = x;\n  let y1 = y;\n  let x2 = x;\n  let y2 = y;\n  while (x1 > 0) {\n    x2 = x1 - 1;\n    y2 = y1;\n    while (y2 > 0) {\n      y2 = y2 - 1;\n      if (x2 % 2 === 0) {\n        return x2;\n      }\n    }\n    x1 = x2;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n"}
{"task_id": "JavaScript/103", "prompt": "/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = n.toString(2).length;\n  const mBits = m.toString(2).length;\n  const nBitsDiff = nBits - mBits;\n  const nBitsSum = nBits + mBits;\n  const nBitsDiffSum = nBitsDiff + mBits;\n  const nBitsDiffSumRounded = Math.floor(nBitsDiffSum / 2);\n  const nBitsSumRounded = Math.floor(nBitsSum / 2);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.toString(2);\n  const nBitsSumRounded = nBitsSumRounded.toString(2);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  const nBitsSumRounded = nBitsSumRounded.substr(0, nBitsSumRounded.length - 1);\n  const nBitsDiffSumRounded = nBitsDiffSumRounded.substr(0, nBitsDiffSumRounded.length - 1);\n  "}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigits = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2 === 0) {\n      uniqueDigits.push(x);\n    }\n  }\n  return uniqueDigits;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\" , \"Six\", \"Seven\", \"Eight\" , \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  let result = [];\n  let length = arr.length;\n  let i = 0;\n  while (i < length) {\n    let j = length - 1;\n    while (j >= 0) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  for (let i"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 * ... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(factorial(i));\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nmodule.exports = f;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive ,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2 , and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(countNums([-12, 3, -3, -4, -5, -6, -7, -8, -9, -10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log("}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N int egers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N int egers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => i === j);\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const len2 = lst2.length;\n  if (len!== len2) {\n    return 'NO';\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len && j < len2) {\n    if (lst1[i] % 2!== 0) {\n      return 'NO';\n    }\n    if (lst2[j] % 2!== 0) {\n      return 'NO';\n    }\n    lst1[i] = lst2[j];\n    i++;\n    j++;\n  }\n  while (i < len) {\n    if (lst1[i] % 2!== 0) {\n      return 'NO';\n    }\n    lst1[i] = lst2[j];\n    i++;\n  }\n  while (j < len2) {\n    if (lst2[j] % 2!== 0) {\n      return 'NO';\n    }\n    lst2[j] = lst1[i];\n    j++;\n  }\n  return 'YES';\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const test = test.split(' ');\n  for (let i = 0; i < test.length; i++) {\n    histogram[test[i]] = (histogram[test[i]] || 0) + 1;\n  }\n  return histogram;\n};\n\nconst test = histogram('a b c');\nconsole.log(test);\n\nconst test2 = histogram('a b b a');\nconsole.log(test2);\n\nconst test3 = histogram('b b b b a');\nconsole.log(test3);\n\nconst test4 = histogram('');\nconsole.log(test4);\n\nconst test5 = histogram('a b c a b');\nconsole.log(test5);\n\nconst test6 = histogram('a b c a b a b');\nconsole.log(test6);\n\nconst test7 = histogram('a b c a b a b');\nconsole.log(test7);\n\nconst test8 = histogram('a b c a b a b a b');\nconsole.log(test8);\n\nconst test9 = histogram('a b c a b a b a b a b');\nconsole.log(test9);\n\nconst test10 = histogram('a b c a b a b a b a b a b');\nconsole.log(test10);\n\nconst test11 = histogram('a b c a b a b a b a b a b a b');\nconsole.log(test11);\n\nconst test12 = histogram('a b c a b a b a b a b a b a b a b');\nconsole.log(test12);\n\nconst test13 = histogram('a b c a b a b a b a b a b a b a b a b');\nconsole.log(test13);\n\nconst test14 = histogram('a b c a b a b a b a b a b a b a b a b a b');\nconsole.log(test14);\n\nconst test15 = histogram('a b c a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test15);\n\nconst test16 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test16);\n\nconst test17 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test17);\n\nconst test18 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test18);\n\nconst test19 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test19);\n\nconst test20 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test20);\n\nconst test21 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test21);\n\nconst test22 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test22);\n\nconst test23 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test23);\n\nconst test24 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test24);\n\nconst test25 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test25);\n\nconst test26 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test26);\n\nconst test27 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test27);\n\nconst test28 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test28);\n\nconst test29 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test29);\n\nconst test30 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test30);\n\nconst test31 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b');\nconsole.log(test31);\n\nconst test32 = histogram('a b c a b a b a b a b a b a b a b a b a b a b a b"}
{"task_id": "JavaScript/112", "prompt": "/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c) {\n      result.push(s.slice(0, i) + s.slice(i + 1));\n    } else {\n      result.push(s[i]);\n    }\n  }\n  return [result.join(''), s.length === result.length];\n};\n\nconst test = reverseDelete('abcdef', 'b');\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of string s , whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count} of the ${i}th string of the input.`);\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums.reduce((acc, curr) => {\n    if (acc === undefined || acc < curr) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1;\n        count++;\n        if (count === capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst test = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1;\n        count++;\n        if (count === capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ];\n  const capacity = 1;\n  console.log(maxFill(grid, capacity));\n  console.log(test(grid, capacity));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    const aInt = parseInt(a, 10);\n    const bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    } else if (aInt > bInt) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst test = () => {\n  const arr = [1, 5, 2, 3, 4];\n  console.log(sortArray(arr));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants ,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const chars = []\n  const charsInWord = []\n  const charsInWordCount = []\n  const wordCount = 0\n  const wordLength = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0\n  const wordCount = 0\n  const word = \"\"\n  const wordLength = 0"}
{"task_id": "JavaScript/118", "prompt": "/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = '';\n  let vowelIndex = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  let vowelStart = 0;\n  let vowelEnd = 0;\n  let vowelLength = 0;\n  "}
{"task_id": "JavaScript/119", "prompt": "/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens11 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    "}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted.slice(0, k);\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements27 ="}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2];\n    }\n    return [n, 3 * n + 1];\n  };\n  const oddCollatz = (n) => {\n    if (n === 1) {\n      "}
{"task_id": "JavaScript/124", "prompt": "/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse .\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = words.map(word => word.toLowerCase());\n  const lowerCaseLettersLength = lowerCaseLetters.length;\n  const lowerCaseLettersIndex = lowerCaseLetters.map(word => {\n    const index = lowerCaseLetters.indexOf(word);\n    return index;\n  });\n  const lowerCaseLettersIndexLength = lowerCaseLettersIndex.length;\n  const lowerCaseLettersIndexOdd = lowerCaseLettersIndex.filter(index => index % 2 === 1);\n  const lowerCaseLettersIndexEven = lowerCaseLettersIndex.filter(index => index % 2 === 0);\n  const lowerCaseLettersIndexOddLength = lowerCaseLettersIndexOdd.length;\n  const lowerCaseLettersIndexEvenLength = lowerCaseLettersIndexEven.length;\n  const lowerCaseLettersIndexOddIndex = lowerCaseLettersIndexOdd.map(index => index / 2);\n  const lowerCaseLettersIndexEvenIndex = lowerCaseLettersIndexEven.map(index => index / 2);\n  const lowerCaseLettersIndexOddIndexLength = lowerCaseLettersIndexOddIndex.length;\n  const lowerCaseLettersIndexEvenIndexLength = lowerCaseLettersIndexEvenIndex.length;\n  const lowerCaseLettersIndexOddIndexIndex = lowerCaseLettersIndexOddIndex.map(index => index * 2);\n  const lowerCaseLettersIndexEvenIndexIndex = lowerCaseLettersIndexEvenIndex.map(index => index * 2);\n  const lowerCaseLettersIndexOddIndexIndexLength = lowerCaseLettersIndexOddIndexIndex.length;\n  const lowerCaseLettersIndexEvenIndexIndexLength = lowerCaseLettersIndexEvenIndexIndex.length;\n  const lowerCaseLettersIndexOddIndexIndexIndex = lowerCaseLettersIndexOddIndexIndex.map(index => index * 3);\n  const lowerCaseLettersIndexEvenIndexIndexIndex = lowerCaseLettersIndexEvenIndexIndex.map(index => index * 3);\n  const lowerCaseLettersIndexOddIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndex.length;\n  const lowerCaseLettersIndexEvenIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndex.length;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndex = lowerCaseLettersIndexOddIndexIndexIndex.map(index => index * 4);\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndex = lowerCaseLettersIndexEvenIndexIndexIndex.map(index => index * 4);\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndex.length;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndex.length;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndex = lowerCaseLettersIndexOddIndexIndexIndexIndex.map(index => index * 5);\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndex = lowerCaseLettersIndexEvenIndexIndexIndexIndex.map(index => index * 5);\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndex.length;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndex.length;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndex = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndex.map(index => index * 6);\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndex.length;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndex.length;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndex.length;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexEvenIndexIndexIndexIndexIndexIndexIndexLength;\n  const lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength = lowerCaseLettersIndexOddIndexIndexIndexIndexIndexIndexIndexLength"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse .Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\nGiven a list of numbe r s, retur n whether or not they are sorted\nin descending order. Iflist has more  than1duplica teof the  same\nnumber, return f alse.Assume no negati v e numbers and only integers.\nExamples\nisDescending([5]) ➞ false\nisDescending([1, 2, 3, 4, 5]) ➞ false\nisDescending([1, 3, 2, 4, 5]) ➞ true\nisDescending([1, 2, 3, 4, 5, 6]) ➞ true\nisDescending([1, 2, 3, 4, 5, 6, 7]) ➞ true\nisDescending([1, 3, 2, 4, 5, 6, 7]) ➞ false\nisDescending([1, 2, 2, 3, 3, 4]) ➞ false\nisDescending([1, 2, 2, 2, 3, 4]) ➞ true\n*/\nconst isDescending = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\nGiven a list of numbe r s, retur n whether or not they are sorted\nin ascending order. Iflist has more  than1duplica teof the  same\nnumber, return f alse.Assume no negati v e numbers and only integers.\nExamples\nisAscending([5]) ➞ true\nisAscending([1, 2, 3, 4, 5]) ➞ true\nisAscending([1, 3, 2, 4, 5]) ➞ false\nisAscending([1, 2, 3, 4, 5, 6]) ➞ true\nisAscending([1, 2, 3, 4, 5, 6, 7]) ➞ true\nisAscending([1, 3, 2, 4, 5, 6, 7]) ➞ false\nisAscending([1, 2, 2, 3, 3, 4]) ➞ true\nisAscending([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isAscending = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\nGiven a list of numbe r s, retur n whether or not they are sorted\nin descending order. Iflist has more  than1duplica teof the  same\nnumber, return f alse.Assume no negati v e numbers and only integers.\nExamples\nisDescending([5]) ➞ false\nisDescending([1, 2, 3, 4, 5]) ➞ false\nisDescending([1, 3, 2, 4, 5]) ➞ true\nisDescending([1, 2, 3, 4, 5, 6]) ➞ true\nisDescending([1, 2, 3, 4, 5, 6, 7]) ➞ true\nisDescending([1, 3, 2, 4, 5, 6, 7]) ➞ false\nisDescending([1, 2, 2, 3, 3, 4]) ➞ false\nisDescending([1, 2, 2, 2, 3, 4]) ➞ true\n*/\nconst isDescending = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\nGiven a list of numbe r s, retur n whether or not they are sorted\nin ascending order. Iflist has more  than1duplica teof the  same\nnumber, return f alse.Assume no negati v e numbers and only integers.\nExamples\nisAscending([5]) ➞ true\nisAscending([1, 2, 3, 4, 5]) ➞ true\nisAscending([1, 3, 2, 4, 5]) ➞ false\nisAscending([1, 2, 3, 4, 5, 6]) ➞ true\nisAscending([1, 2, 3, 4, 5, 6, 7]) ➞ true\nisAscending([1, 3, 2, 4, 5, 6, 7]) ➞ false\nisAscending([1, 2, 2, 3, 3, 4]) ➞ true\nisAscending([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isAscending = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i]"}
{"task_id": "JavaScript/127", "prompt": "/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length === 1) {\n    return \"YES\";\n  }\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i]\n    } else if (arr[i] < 0) {\n      sum -= arr[i]\n    }\n  }\n  return sum\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = grid[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i] = grid[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      dp[i] = Math.min(dp[i], dp[i - 1] + grid[i][j]);\n    }\n  }\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    res.push(dp[i]);\n  }\n  return res.slice(0, k);\n};\n\nconst test = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test2 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test3 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test4 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test5 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test6 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test7 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test8 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n];\n\nconst test"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1,\n      result = [],\n      i = 1;\n  while (i <= n) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = a + b;\n    i++;\n  }\n  return result;\n};\n\ntri(3);\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst oddDigits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sumDigits = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst productDigits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sumEvenDigits = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst productEvenDigits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sumOddDigits = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst productOddDigits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sumOddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst productOddEvenDigits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sumProductDigits = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  "}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let stack = []\n  let nested = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i])\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '[') {\n        nested = true\n      }\n      stack.pop()\n    }\n  }\n  return nested\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[][[]]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole.log(isNested('[[][[][]]'))\nconsole"}
{"task_id": "JavaScript/133", "prompt": "/*Youare given a list o f  numbers .\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  let sum"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar);\n};\n\nconst isAlphabet = (char) => {\n  return char.match(/[a-zA-Z]/);\n};\n\nconst isNumber = (char) => {\n  return char.match(/[0-9]/);\n};\n\nconst isAlphanumeric = (char) => {\n  return isAlphabet(char) || isNumber(char);\n};\n\nconst isAlphanumericOrSpace = (char) => {\n  return isAlphanumeric(char) || char ==='';\n};\n\nconst isAlphanumericOrHyphen = (char) => {\n  return isAlphanumeric(char) || char === '-';\n};\n\nconst isAlphanumericOrPeriod = (char) => {\n  return isAlphanumeric(char) || char === '.';\n};\n\nconst isAlphanumericOrSpaceOrHyphen = (char) => {\n  return isAlphanumericOrSpace(char) || char === '-';\n};\n\nconst isAlphanumericOrPeriodOrSpace = (char) => {\n  return isAlphanumericOrSpace(char) || char === '.';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpace = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuote = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlash = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostrophe = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslash = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollar = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercent = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostrophe = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslash = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollar = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollarOrPercent = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollarOrPercentOrApostrophe = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslash = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollar = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphenOrSpaceOrQuoteOrSlashOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollarOrPercentOrApostropheOrBackslashOrDollar = (char) => {\n  return isAlphanumericOrSpaceOrHyphen(char) || char === '.' || char === '\"';\n};\n\nconst isAlphanumericOrPeriodOrHyphen"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values .\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[max] && arr[i] > max) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and ' b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    const largest = (a, b) => a > b? a : b;\n    const smallest = (a, b) => a < b? a : b;\n    const lst = largestSmallest(lst);\n    return lst;\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be . or ,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare2 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare3 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare4 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare5 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare6 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare7 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare8 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare9 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare10 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare11 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare12 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare13 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare14 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare15 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b);\n  return null;\n};\n\nconst compare16 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === 'number' && typeof b === 'number') return a - b;"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8)"}
{"task_id": "JavaScript/139", "prompt": "/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial2(n - 1) * specialFactorial2(n - 2) * specialFactorial2(n - 3) * specialFactorial2(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial3(n - 1) * specialFactorial3(n - 2) * specialFactorial3(n - 3) * specialFactorial3(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial4(n - 1) * specialFactorial4(n - 2) * specialFactorial4(n - 3) * specialFactorial4(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial5(n - 1) * specialFactorial5(n - 2) * specialFactorial5(n - 3) * specialFactorial5(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial6(n - 1) * specialFactorial6(n - 2) * specialFactorial6(n - 3) * specialFactorial6(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial7(n - 1) * specialFactorial7(n - 2) * specialFactorial7(n - 3) * specialFactorial7(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial8(n - 1) * specialFactorial8(n - 2) * specialFactorial8(n - 3) * specialFactorial8(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial9(n - 1) * specialFactorial9(n - 2) * specialFactorial9(n - 3) * specialFactorial9(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial10(n - 1) * specialFactorial10(n - 2) * specialFactorial10(n - 3) * specialFactorial10(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial11(n - 1) * specialFactorial11(n - 2) * specialFactorial11(n - 3) * specialFactorial11(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial12(n - 1) * specialFactorial12(n - 2) * specialFactorial12(n - 3) * specialFactorial12(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial13(n - 1) * specialFactorial13(n - 2) * specialFactorial13(n - 3) * specialFactorial13(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial14(n - 1) * specialFactorial14(n - 2) * specialFactorial14(n - 3) * specialFactorial14(n - 4);\n};\n\n/*\n  The function will receive an integer as input and"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getSpaces = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\nconst getSpacesCount = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount2 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount3 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount4 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount5 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount6 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount7 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount8 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount9 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount10 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount11 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount12 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount13 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount14 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount15 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount16 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount17 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount18 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount19 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount20 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount21 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount22 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount23 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount24 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount25 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount26 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount27 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount28 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount29 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount30 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount31 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount32 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount33 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount34 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount35 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount36 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount37 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount38 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount39 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount40 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount41 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount42 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount43 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount44 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount45 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount46 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount47 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount48 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount49 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount50 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount51 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount52 = (text) => {\n  return text.split(' ').length\n}\n\nconst getSpacesCount"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file 's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_exe = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(exe|dll)$/;\n    const regex_txt = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n    const regex_dll = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(dll)$/;\n    const regex_dot = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_empty = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_no_dot = /^[a-zA-Z][a-zA-Z0-9]*$/;\n    const regex_no_empty = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_no_dot_exe = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(exe|dll)$/;\n    const regex_no_empty_exe = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(exe|dll)$/;\n    const regex_no_dot_txt = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n    const regex_no_empty_txt = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n    const regex_no_dot_dll = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(dll)$/;\n    const regex_no_empty_dll = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(dll)$/;\n    const regex_no_dot_dot = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_no_empty_dot = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_no_dot_dot_exe = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(exe|dll)$/;\n    const regex_no_empty_dot_exe = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(exe|dll)$/;\n    const regex_no_dot_dot_txt = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n    const regex_no_empty_dot_txt = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n    const regex_no_dot_dot_dll = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(dll)$/;\n    const regex_no_empty_dot_dll = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(dll)$/;\n    const regex_no_dot_dot_dot = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_no_empty_dot_dot = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n    const regex_no_dot_dot_dot_exe = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(exe|dll)$/;\n    const regex_no_empty_dot"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] *"}
{"task_id": "JavaScript/143", "prompt": "/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(' ');\n    let newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let newWord = '';\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n            if (char.match(/[a-zA-Z]/)) {\n                newWord += char;\n            }\n        }\n        newWords.push(newWord);\n    }\n    return newWords;\n};\n\nexport { wordsInSentence };\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const x_num = x.split(\"/\")[0];\n    const x_den = x.split(\"/\")[1];\n    const n_num = n.split(\"/\")[0];\n    const n_den = n.split(\"/\")[1];\n    const x_num_int = parseInt(x_num);\n    const x_den_int = parseInt(x_den);\n    const n_num_int = parseInt(n_num);\n    const n_den_int = parseInt(n_den);\n    if (x_den_int === 0) {\n      return false;\n    }\n    if (x_den_int === n_den_int) {\n      return x_num_int === n_num_int;\n    }\n    return false;\n  };\n  console.log(simplify(\"1/5\", \"5/1\"));\n  console.log(simplify(\"1/6\", \"2/1\"));\n  console.log(simplify(\"7/ 10\", \"10/2 \"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sortedByIndex = sorted.map((n, i) => {\n    return {\n      index: i,\n      sum: sum(n)\n    };\n  });\n  const sortedBySum = sortedByIndex.sort((a, b) => a.sum - b.sum);\n  return sortedBySum.map((n, i) => {\n    return sorted[i];\n  });\n};\n\nconst sum = (n) => {\n  return n + n;\n};\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12];\n  console.log(orderByPoints(nums));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((num) => {\n    return num % 10 === 0 || num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9;\n  });\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let result = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth , M ars, J upiter, Saturn,\n  Uranus , Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth, M ars, J upiter, Saturn,\n  Uranus, Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ]\n  const distance = (planet1, planet2) => {\n    const planet1_distance = Math.pow(\n      Math.pow(planet1.toUpperCase().charCodeAt(0) - 65, 2) +\n        Math.pow(planet1.toUpperCase().charCodeAt(1) - 65, 2) +\n        Math.pow(planet1.toUpperCase().charCodeAt(2) - 65, 2),\n      0.5\n    )\n    const planet2_distance = Math.pow(\n      Math.pow(planet2.toUpperCase().charCodeAt(0) - 65, 2) +\n        Math.pow(planet2.toUpperCase().charCodeAt(1) - 65, 2) +\n        Math.pow(planet2.toUpperCase().charCodeAt(2) - 65, 2),\n      0.5\n    )\n    return planet1_distance + planet2_distance\n  }\n  const sorted_planets = planets.sort((a, b) => distance(a, b))\n  const sorted_planets_length = sorted_planets.length\n  const sorted_planets_index = [...new Array(sorted_planets_length)].map(() => 0)\n  const sorted_planets_index_length = sorted_planets_index.length\n  const sorted_planets_index_index = [...new Array(sorted_planets_index_length)].map(() => 0)\n  const sorted_planets_index_index_length = sorted_planets_index_index.length\n  const sorted_planets_index_index_index = [\n   ...new Array(sorted_planets_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_length = sorted_planets_index_index_index.length\n  const sorted_planets_index_index_index_index = [\n   ...new Array(sorted_planets_index_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_index_length = sorted_planets_index_index_index_index.length\n  const sorted_planets_index_index_index_index_index = [\n   ...new Array(sorted_planets_index_index_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_index_index_index_length = sorted_planets_index_index_index_index_index.length\n  const sorted_planets_index_index_index_index_index_index_index = [\n   ...new Array(sorted_planets_index_index_index_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_index_index_index_index_index_length = sorted_planets_index_index_index_index_index_index.length\n  const sorted_planets_index_index_index_index_index_index_index_index_index = [\n   ...new Array(sorted_planets_index_index_index_index_index_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_length = sorted_planets_index_index_index_index_index_index_index.length\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_index = [\n   ...new Array(sorted_planets_index_index_index_index_index_index_index_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_index_index_length = sorted_planets_index_index_index_index_index_index_index_index.length\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_index_index = [\n   ...new Array(sorted_planets_index_index_index_index_index_index_index_index_index_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_index_index_index_length = sorted_planets_index_index_index_index_index_index_index_index.length\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_index_index_index = [\n   ...new Array(sorted_planets_index_index_index_index_index_index_index_index_index_index_index_index_length)].map(() => 0)\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = sorted_planets_index_index_index_index_index_index_index_index.length\n  const sorted_planets_index_index_index_index_index_index_index_index_index_index_"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n    sum -= lst[i].length\n  }\n  return sorted\n}\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3 ,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference =(lst) => {\n  if(lst.length === 0) return 0\n  let sum = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length , where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length, where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nconst compare2 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare3 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare4 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare5 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare6 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare7 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare8 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare9 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare10 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare11 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\nconst compare12 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess["}
{"task_id": "JavaScript/153", "prompt": "/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const strength_of_cap = strength[cap] || 0;\n    strength[cap] = strength_of_cap + (cap - ext.charAt(0).toLowerCase());\n  });\n  const strength_of_class = strength[class_name.charAt(0).toUpperCase()] || 0;\n  const strongest_extension = extensions.find(ext => strength[ext.charAt(0).toUpperCase()] === strength_of_class);\n  return class_name + '.' + strongest_extension;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  const a_first = a.charAt(0);\n  const b_first = b.charAt(0);\n  const a_second = a.charAt(1);\n  const b_second = b.charAt(1);\n  const a_third = a.charAt(2);\n  const b_third = b.charAt(2);\n  const a_fourth = a.charAt(3);\n  const b_fourth = b.charAt(3);\n  const a_fifth = a.charAt(4);\n  const b_fifth = b.charAt(4);\n  const a_sixth = a.charAt(5);\n  const b_sixth = b.charAt(5);\n  const a_seventh = a.charAt(6);\n  const b_seventh = b.charAt(6);\n  const a_eighth = a.charAt(7);\n  const b_eighth = b.charAt(7);\n  const a_ninth = a.charAt(8);\n  const b_ninth = b.charAt(8);\n  const a_tenth = a.charAt(9);\n  const b_tenth = b.charAt(9);\n  const a_eleventh = a.charAt(10);\n  const b_eleventh = b.charAt(10);\n  const a_twelfth = a.charAt(11);\n  const b_twelfth = b.charAt(11);\n  const a_thirteenth = a.charAt(12);\n  const b_thirteenth = b.charAt(12);\n  const a_fourteenth = a.charAt(13);\n  const b_fourteenth = b.charAt(13);\n  const a_fifteenth = a.charAt(14);\n  const b_fifteenth = b.charAt(14);\n  const a_sixteenth = a.charAt(15);\n  const b_sixteenth = b.charAt(15);\n  const a_seventeenth = a.charAt(16);\n  const b_seventeenth = b.charAt(16);\n  const a_eighteenth = a.charAt(17);\n  const b_eighteenth = b.charAt(17);\n  const a_nineteenth = a.charAt(18);\n  const b_nineteenth = b.charAt(18);\n  const a_twentieth = a.charAt(19);\n  const b_twentieth = b.charAt(19);\n  const a_twentyfirst = a.charAt(20);\n  const b_twentyfirst = b.charAt(20);\n  const a_twentysecond = a.charAt(21);\n  const b_twentysecond = b.charAt(21);\n  const a_twentythird = a.charAt(22);\n  const b_twentythird = b.charAt(22);\n  const a_twentyfourth = a.charAt(23);\n  const b_twentyfourth = b.charAt(23);\n  const a_twentyfifth = a.charAt(24);\n  const b_twentyfifth = b.charAt(24);\n  const a_twentysixth = a.charAt(25);\n  const b_twentysixth = b.charAt(25);\n  const a_twentyseventh = a.charAt(26);\n  const b_twentyseventh = b.charAt(26);\n  const a_twentyeighth = a.charAt(27);\n  const b_twentyeighth = b.charAt(27);\n  const a_twentyninth = a.charAt(28);\n  const b_twentyninth = b.charAt(28);\n  const a_thirtieth = a.charAt(29);\n  const b_thirtieth = b.charAt(29);\n  const a_thirtyfirst = a.charAt(30);\n  const b_thirtyfirst = b.charAt(30);\n  const a_thirtysecond = a.charAt(31);\n  const b_thirtysecond = b.charAt(31);\n  const a_thirtythird = a.charAt(32);\n  const b_thirtythird = b.charAt(32);\n  const a_thirtyfourth = a.charAt(33);\n  const b_thirtyfourth = b.charAt(33);\n  const a_thirtyfifth = a.charAt(34);\n  const b_thirtyfifth = b.charAt(34);\n  const a_thirtysixth = a.charAt(35);\n  const b_thirtysixth = b.charAt(35);\n  const a_thirtyseventh = a.charAt(36);\n  const b_thirtyseventh = b.charAt(36);\n  const a_thirtyeighth = a.charAt(37);\n  const b_thirtyeighth = b.charAt(37);\n  const a_thirtyninth = a.charAt(38);\n  const b_thirtyninth = b.charAt(38);\n  const a_thirtieth = a.charAt(39);\n  const b_thirtieth = b.charAt(39);\n  const a_thirtyfirst = a.charAt(40);\n  const b_thirtyfirst = b.charAt(40);\n  const a_thirtysecond = a.charAt(41);\n  const b_thirtysecond = b.charAt(41);\n  const a_thirtythird = a.charAt(42);\n  const b_thirtythird = b.charAt(42);\n  const a_thirtyfourth = a"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd, even];\n};\n\nconst evenOddCount2 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount3 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount4 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount5 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount6 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount7 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount8 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount9 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount10 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount11 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount12 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount13 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount14 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount15 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, count, even];\n};\n\nconst evenOddCount16 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 === 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    number = number % 10;\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 === 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    number = number % 10;\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 === 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    number = number % 10;\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 === 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    number = number % 10;\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 === 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    number = number % 10;\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    while (number % 10 === 0) {\n      number = number / 10;\n      result = roman[i] + result;\n    }\n    number = number % 10;\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V',"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ac = Math.abs(a - c);\n  return (ab + bc + ac) === Math.sqrt(a * a + b * b + c * c);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const unique = words.filter((word, index) => words.indexOf(word) === index)\n  const max = words.find((word) => unique.indexOf(word) === 0)\n  return max\n}\n\nconst findMax = (words) => {\n  const unique = words.filter((word, index) => words.indexOf(word) === index)\n  const max = words.find((word) => unique.indexOf(word) === 0)\n  return max\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]))\nconsole.log(findMax([\"name\", \"enam\", \" game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbi t , and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst main = () => {\n  const [number, remaining] = eat(5, 6, 10);\n  console.log(number, remaining);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n}\n\nconst doAlgebra11 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length - 1\n  let result = 0\n  for (let i = 0; i < len; i++) {\n    result += operator[i][0] * operand[i]\n  }\n  for (let i = 1; i < len2; i++) {\n    result += operand[i] * operator[i][1]\n  }\n  return result\n"}
{"task_id": "JavaScript/161", "prompt": "/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string .\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text' ,  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateEvenIntegers = generateIntegers(2, 8);\n\nconsole.log(generateEvenIntegers);\n<|endoftext|>"}
