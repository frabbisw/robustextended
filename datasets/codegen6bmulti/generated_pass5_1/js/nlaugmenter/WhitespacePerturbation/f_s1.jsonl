{"task_id": "JavaScript/0", "prompt": "/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold * diff) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  for (let i = 1; i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s+/);\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.split('(');\n    paren_group_array.forEach(function(element) {\n      if (element.length > 1) {\n        paren_group_array.push(element.slice(1, -1));\n      }\n    });\n    paren_groups_array.push(paren_group_array);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  '((()()))'\n  */\nconst removeParenthesis = (paren_string) => {\n  const paren_groups = separateParenGroups(paren_string);\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.slice(1, -1);\n    paren_group_array.forEach(function(element) {\n      if (element.length > 1) {\n        paren_group_array.push(element.slice(1, -1));\n      }\n    });\n    paren_groups_array.push(paren_group_array);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  '((()()))'\n  */\nconst removeParenthesis2 = (paren_string) => {\n  const paren_groups = separateParenGroups(paren_string);\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.slice(1, -1);\n    paren_group_array.forEach(function(element) {\n      if (element.length > 1) {\n        paren_group_array.push(element.slice(1, -1));\n      }\n    });\n    paren_groups_array.push(paren_group_array);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  '((()()))'\n  */\nconst removeParenthesis3 = (paren_string) => {\n  const paren_groups = separateParenGroups(paren_string);\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.slice(1, -1);\n    paren_group_array.forEach(function(element) {\n      if (element.length > 1) {\n        paren_group_array.push(element.slice(1, -1));\n      }\n    });\n    paren_groups_array.push(paren_group_array);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  '((()()))'\n  */\nconst removeParenthesis4 = (paren_string) => {\n  const paren_groups = separateParenGroups(paren_string);\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.slice(1, -1);\n    paren_group_array.forEach(function(element) {\n      if (element.length > 1) {\n        paren_group_array.push(element.slice(1, -1));\n      }\n    });\n    paren_groups_array.push(paren_group_array);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  '((()()))'\n  */\nconst removeParenthesis5 = (paren_string) => {\n  const paren_groups = separateParenGroups(paren_string);\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.slice(1, -1);\n    paren_group_array.forEach(function(element) {\n      if (element.length > 1) {\n        paren_group_array.push(element.slice(1, -1));\n      }\n    });\n    paren_groups_array.push(paren_group_array);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  '((()()))'\n  */\nconst removeParenthesis6 = (paren_string) => {\n  const paren_groups = separateParenGroups(paren_string);\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.slice(1, -1);\n    paren_group_array.forEach(function(element) {\n      if (element.length", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.slice(0, str.length - str.length % 2);\n  const suffix = str.slice(str.length - str.length % 2);\n  const palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.slice(0, str.length - str.length % 2);\n  const suffix = str.slice(str.length - str.length % 2);\n  const palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.slice(0, str.length - str.length % 2);\n  const suffix = str.slice(str.length - str.length % 2);\n  const palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.slice(0, str.length - str.length % 2);\n  const suffix = str.slice(str.length - str.length % 2);\n  const palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.slice(0, str.length - str.length % 2);\n  const suffix = str.slice(str.length - str.length % 2);\n  const palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.slice(0, str.length - str.length % 2);\n  const suffix = str.slice(str.length - str.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s .\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    let pile = [];\n    for (let i = 1; i <= n; i++) {\n        let level = i;\n        while (level > 0) {\n            pile.push(level);\n            level = Math.floor(level / 2);\n        }\n    }\n    return pile;\n};\n\nconsole.log(makeAPile(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = Math.max(x, y);\n  let min = Math.min(x, y);\n  let result = 0;\n  for (let i = min; i <= max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m\n  const n_m_1 = n_m + 1\n  const n_m_2 = n_m + 2\n  const m_n = m - n\n  const m_n_1 = m_n + 1\n  const m_n_2 = m_n + 2\n  const n_m_1_m_n = n_m_1 - m_n\n  const n_m_2_m_n = n_m_2 - m_n\n  const n_m_1_m_n_1 = n_m_1_m_n + 1\n  const n_m_2_m_n_1 = n_m_2_m_n + 1\n  const n_m_1_m_n_2 = n_m_1_m_n_1 + 1\n  const n_m_2_m_n_2 = n_m_2_m_n_1 + 1\n  const n_m_1_m_n_1_m_n = n_m_1_m_n_2 - m_n_1\n  const n_m_2_m_n_1_m_n = n_m_2_m_n_2 - m_n_1\n  const n_m_1_m_n_2_m_n = n_m_1_m_n_1_m_n + 1\n  const n_m_2_m_n_2_m_n = n_m_2_m_n_1_m_n + 1\n  const n_m_1_m_n_1_m_n_1 = n_m_1_m_n_2_m_n - m_n_1\n  const n_m_2_m_n_1_m_n_1 = n_m_2_m_n_2_m_n - m_n_1\n  const n_m_1_m_n_2_m_n_2 = n_m_1_m_n_1_m_n_1 + 1\n  const n_m_2_m_n_2_m_n_2 = n_m_2_m_n_1_m_n_1 + 1\n  const n_m_1_m_n_1_m_n_2 = n_m_1_m_n_2_m_n_2 - m_n_1\n  const n_m_2_m_n_2_m_n_2 = n_m_2_m_n_1_m_n_2 - m_n_1\n  const n_m_1_m_n_1_m_n_1_m_n = n_m_1_m_n_2_m_n_2 - m_n_1_m_n\n  const n_m_2_m_n_1_m_n_1_m_n = n_m_2_m_n_2_m_n_2 - m_n_1_m_n\n  const n_m_1_m_n_2_m_n_1_m_n = n_m_1_m_n_1_m_n_2 - m_n_1_m_n\n  const n_m_2_m_n_2_m_n_1_m_n = n_m_2_m_n_1_m_n_2 - m_n_1_m_n\n  const n_m_1_m_n_1_m_n_2_m_n = n_m_1_m_n_2_m_n_1_m_n + 1\n  const n_m_2_m_n_1_m_n_2_m_n = n_m_2_m_n_2_m_n_1_m_n + 1\n  const n_m_1_m_n_2_m_n_1_m_n_1 = n_m_1_m_n_2_m_n_2_m_n - m_n_1_m_n_1\n  const n_m_2_m_n_2_m_n_1_m_n_1 = n_m_2_m_n_2_m_n_2_m_n - m_n_1_m_n_1\n  const n_m_1_m_n_2_m_n_1_m_n_2 = n_m_1_m_n_2_m_n_1_m_n_1 + 1\n  const n_m_2_m_n_2_m_n_1_m_n_2 = n_m_2_m_n_2_m_n_1_m_n_1 + 1\n  const n_m_1_m_n_1_m_n_2_m_n_2 = n_m_1_m_n_1_m_n_2_m_n_2 - m_n_1_m_n_1\n  const n_m_2_m_n_2_m_n_1_m_n_2 = n_m_2_m_n_2_m_n_1_m_n_2 - m_n_1_m_n_1\n  const n_m_1_m_n_1_m_n_2_m_n_2 = n_m_1_m_n_1_m_n_2_m_n_2 - m_n_1_m_n_1\n  const n_m_2_m_n_2_m_n_1_m_n_2 = n_m_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const unique = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedLength = reversed.length\n  const reversedArray = reversed.map(x => x.toString())\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split('').reverse()\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.join('')\n  const reversedArrayLength = reversedArray.length\n  const reversedArray = reversedArray.split(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let x = i;\n    while (x > 0) {\n      if (x % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      x = x / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0 .\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e .g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have anarra y 'arr '  of Nintegersarr[1], arr[2], ...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We have anarra y 'arr' of Nintegersarr[1], arr[2],...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n    }\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this pro blem , youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this pro blem, youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  let lst1_even = lst1.filter(x => x % 2 === 0);\n  let lst2_even = lst2.filter(x => x % 2 === 0);\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); //=> 'YES'\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); //=> 'NO'\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  const regex = /[a-z]/g\n  const regex2 = /[a-z]/g\n  const regex3 = /[a-z]/g\n  const regex4 = /[a-z]/g\n  const regex5 = /[a-z]/g\n  const regex6 = /[a-z]/g\n  const regex7 = /[a-z]/g\n  const regex8 = /[a-z]/g\n  const regex9 = /[a-z]/g\n  const regex10 = /[a-z]/g\n  const regex11 = /[a-z]/g\n  const regex12 = /[a-z]/g\n  const regex13 = /[a-z]/g\n  const regex14 = /[a-z]/g\n  const regex15 = /[a-z]/g\n  const regex16 = /[a-z]/g\n  const regex17 = /[a-z]/g\n  const regex18 = /[a-z]/g\n  const regex19 = /[a-z]/g\n  const regex20 = /[a-z]/g\n  const regex21 = /[a-z]/g\n  const regex22 = /[a-z]/g\n  const regex23 = /[a-z]/g\n  const regex24 = /[a-z]/g\n  const regex25 = /[a-z]/g\n  const regex26 = /[a-z]/g\n  const regex27 = /[a-z]/g\n  const regex28 = /[a-z]/g\n  const regex29 = /[a-z]/g\n  const regex30 = /[a-z]/g\n  const regex31 = /[a-z]/g\n  const regex32 = /[a-z]/g\n  const regex33 = /[a-z]/g\n  const regex34 = /[a-z]/g\n  const regex35 = /[a-z]/g\n  const regex36 = /[a-z]/g\n  const regex37 = /[a-z]/g\n  const regex38 = /[a-z]/g\n  const regex39 = /[a-z]/g\n  const regex40 = /[a-z]/g\n  const regex41 = /[a-z]/g\n  const regex42 = /[a-z]/g\n  const regex43 = /[a-z]/g\n  const regex44 = /[a-z]/g\n  const regex45 = /[a-z]/g\n  const regex46 = /[a-z]/g\n  const regex47 = /[a-z]/g\n  const regex48 = /[a-z]/g\n  const regex49 = /[a-z]/g\n  const regex50 = /[a-z]/g\n  const regex51 = /[a-z]/g\n  const regex52 = /[a-z]/g\n  const regex53 = /[a-z]/g\n  const regex54 = /[a-z]/g\n  const regex55 = /[a-z]/g\n  const regex56 = /[a-z]/g\n  const regex57 = /[a-z]/g\n  const regex58 = /[a-z]/g\n  const regex59 = /[a-z]/g\n  const regex60 = /[a-z]/g\n  const regex61 = /[a-z]/g\n  const regex62 = /[a-z]/g\n  const regex63 = /[a-z]/g\n  const regex64 = /[a-z]/g\n  const regex65 = /[a-z]/g\n  const regex66 = /[a-z]/g\n  const regex67 = /[a-z]/g\n  const regex68 = /[a-z]/g\n  const regex69 = /[a-z]/g\n  const regex70 = /[a-z]/g\n  const regex71 = /[a-z]/g\n  const regex72 = /[a-z]/g\n  const regex73 = /[a-z]/g\n  const regex74 = /[a-z]/g\n  const regex75 = /[a-z]/g\n  const regex76 = /[a-z]/g\n  const regex77 = /[a-z]/g\n  const regex78 = /[a-z]/g\n  const regex79 = /[a-z]/g\n  const regex80 = /[a-z]/g\n  const regex81 = /[a-z]/g\n  const regex82 = /[a-z]/g\n  const regex83 = /[a-z]/g\n  const regex84 = /[a-z]/g\n  const regex85 = /[a-z]/g\n  const regex86 = /[a-z]/g\n  const regex87 = /[a-z]/g\n  const regex88 = /[a-z]/g\n  const regex89 = /[a-z]/g\n  const regex90 = /[a-z]/g\n  const regex91 = /[a-z]/g\n  const regex92 = /[a-z]/g\n  const regex93 = /[a-z]/g\n  const regex94 = /[a-z]/g\n  const regex95 = /[a-z]/g\n  const regex96 = /[a-", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let result = []\n  while (i < len) {\n    if (s[i] === c[j]) {\n      result.push(s[i])\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return (result.join(''), j === -1)\n}\n\nconst isPalindrome = (s) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  while (i < len) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nconst test = (s, c) => {\n  const result = reverseDelete(s, c)\n  console.log(`${s} -> ${result}`)\n  console.log(`${s} is palindrome? ${isPalindrome(s)}`)\n}\n\ntest('abcdef', 'ae')\ntest('abcdedcba', 'ab')\ntest('abcdef', 'b')\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t .\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = lst.map((s) => {\n    const odd = s.split('').filter((c) => c.charCodeAt(0) % 2 === 1);\n    return odd.length;\n  });\n  return count.map((n) => `the number of odd elements ${n} of the ${lst.length} input.`);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = Math.min(sum, 0);\n  const minSubArraySum = [];\n  let minSumIndex = -1;\n  let minSumIndex2 = -1;\n  for (let i = 0; i < nums.length; i++) {\n    const sum2 = sum - nums[i];\n    if (sum2 < minSum) {\n      minSumIndex = i;\n      minSum = sum2;\n      minSumIndex2 = i;\n    } else if (sum2 === minSum) {\n      minSumIndex2 = i;\n    }\n  }\n  return minSumIndex === -1? minSumIndex2 : minSumIndex;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity .  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity.  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n        if (count === capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  let capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const arrLength = arr.length\n  const sortedArray = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181 = 0\n  let temp182 = 0\n  let temp183 = 0\n  let temp184 = 0\n  let temp185 = 0\n  let temp186 = 0\n  let temp187 = 0\n  let temp188 = 0\n  let temp189 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords2 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords3 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords4 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords5 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords6 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords7 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords8 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords9 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords10 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i < s.length) {\n      if (s[i] ==='') {\n        j++\n      }\n      i++\n    }\n    if (i < s.length) {\n      words.push(s.slice(i - n, i))\n    }\n    i++\n  }\n  return words\n}\n\nconst selectWords11 = (s, n) => {\n  const words = []\n  let i = 0\n  while (i < s.length) {\n    let j = 0\n    while (j < n && i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    const distance = Math.abs(vowel.charCodeAt(0) - word[i + 1].charCodeAt(0))\n    if (distance < closestVowelDistance) {\n      closestVowel = vowel\n      closestVowelDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    const distance = Math.abs(vowel.charCodeAt(0) - word[i + 1].charCodeAt(0))\n    if (distance < closestVowelDistance) {\n      closestVowel = vowel\n      closestVowelDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    const distance = Math.abs(vowel.charCodeAt(0) - word[i + 1].charCodeAt(0))\n    if (distance < closestVowelDistance) {\n      closestVowel = vowel\n      closestVowelDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    const distance = Math.abs(vowel.charCodeAt(0) - word[i + 1].charCodeAt(0))\n    if (distance < closestVowelDistance) {\n      closestVowel = vowel\n      closestVowelDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    const distance = Math.abs(vowel.charCodeAt(0) - word[i + 1].charCodeAt(0))\n    if (distance < closestVowelDistance) {\n      closestVowel = vowel\n      closestVowelDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    const distance = Math.abs(vowel.charCodeAt(0) - word[i + 1].charCodeAt(0))\n    if (distance < closestVowelDistance) {\n      closestVowel = vowel\n      closestVowelDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel7 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    const distance = Math.abs(vowel.charCodeAt(0) - word[i + 1].charCodeAt(0))\n    if (distance < closestVowelDistance) {\n      closestVowel = vowel\n      closestVowelDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel8 = (word) => {\n  const vowels = ['a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only .\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only.\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['(())', ')()']));\nconsole.log(matchParens(['(())', '()()']));\nconsole.log(matchParens(['()()', '()()']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((str", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  let i = 0;\n  while (i < k) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  return [max, maxIndex];\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1]\n  let i = 1\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2\n    } else {\n      collatz[i] = (collatz[i] * 3) + 1\n    }\n    i++\n  }\n  return collatz\n}\n\nconsole.log(getOddCollatz(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInYear = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const isLeapYear = (year % 4 === 0 && year % 100!== 0) || year % 400 === 0;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth[month - 1]) {\n    return false;\n  }\n  if (month === 2 && isLeapYear && day > daysInMonth[1]) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > daysInMonth[3]) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (isLeapYear && day > daysInMonth[1]) {\n      return false;\n    }\n  }\n  if (day > daysInYear[month - 1]) {\n    return false;\n  }\n  if (month === 2 && isLeapYear && day > daysInYear[1]) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInYear = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const isLeapYear = (year % 4 === 0 && year % 100!== 0) || year % 400 === 0;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth[month - 1]) {\n    return false;\n  }\n  if (month === 2 && isLeapYear && day > daysInMonth[1]) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > daysInMonth[3]) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (isLeapYear && day > daysInMonth[1]) {\n      return false;\n    }\n  }\n  if (day > daysInYear[month - 1]) {\n    return false;\n  }\n  if (month === 2 && isLeapYear && day > daysInYear[1]) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInYear = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const isLeapYear = (year % 4 === 0 && year % 100!== 0) || year % 400 === 0;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth[month - 1]) {\n    return false;\n  }\n  if (month === 2 && isLeapYear && day > daysInMonth[1]) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > daysInMonth[3]) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (isLeapYear && day > daysInMonth[1]) {\n      return false;\n    }\n  }\n  if (day > daysInYear[month - 1]) {\n    return false;\n  }\n  if (month === 2 && isLeapYear && day > daysInYear[1]) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInYear = [31, 29", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1, ... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lower = words.map(word => word.toLowerCase());\n  const odd = lower.filter(word => word.length % 2!== 0);\n  return odd;\n};\n\n/*\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lower = words.map(word => word.toLowerCase());\n  const odd = lower.filter(word => word.length % 2!== 0);\n  return odd;\n};\n\n/*\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lower = words.map(word => word.toLowerCase());\n  const odd = lower.filter(word => word.length % 2!== 0);\n  return odd;\n};\n\n/*\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lower = words.map(word => word.toLowerCase());\n  const odd = lower.filter(word => word.length % 2!== 0);\n  return odd;\n};\n\n/*\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lower = words.map(word => word.toLowerCase());\n  const odd = lower.filter(word => word.length % 2!== 0);\n  return odd;\n};\n\n/*\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lower = words.map(word => word.toLowerCase());\n  const odd = lower.filter(word => word.length % 2!== 0);\n  return odd;\n};\n\n/*\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length && j < lst.length) {\n    if (lst[i] > lst[j]) {\n      sorted = false;\n      break;\n    }\n    if (lst[i] < lst[j]) {\n      j++;\n    }\n    i++;\n  }\n  return sorted;\n};\n\n/*\n  Given a list of numbers, return the sum of all the numbers.\n  Examples\n  sum([1, 2, 3, 4, 5]) ➞ 15\n  sum([1, 2, 3, 4, 5, 6]) ➞ 21\n  sum([1, 2, 3, 4, 5, 6, 7]) ➞ 42\n  sum([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 56\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 81\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 100\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 121\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 132\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 153\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 168\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 189\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 210\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 231\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 252\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 273\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 294\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 315\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 336\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 357\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 378\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 399\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 420\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 441\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 462\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 483\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ 504\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid1 = Math.floor((start1 + end1) / 2);\n  const mid2 = Math.floor((start2 + end2) / 2);\n  const start = Math.min(start1, start2);\n  const end = Math.max(end1, end2);\n  const length = end - start;\n  if (length === 1) {\n    return \"YES\";\n  }\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  if (arr.length === 0) return null\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  if (arr.length === 0) return null\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  if (arr.length === 0) return null\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  if (arr.length === 0) return null\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  if (arr.length === 0) return null\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  if (arr.length === 0) return null\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k ,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n).fill(0)\n  const dp2 = new Array(n).fill(0)\n  const dp3 = new Array(n).fill(0)\n  const dp4 = new Array(n).fill(0)\n  const dp5 = new Array(n).fill(0)\n  const dp6 = new Array(n).fill(0)\n  const dp7 = new Array(n).fill(0)\n  const dp8 = new Array(n).fill(0)\n  const dp9 = new Array(n).fill(0)\n  const dp10 = new Array(n).fill(0)\n  const dp11 = new Array(n).fill(0)\n  const dp12 = new Array(n).fill(0)\n  const dp13 = new Array(n).fill(0)\n  const dp14 = new Array(n).fill(0)\n  const dp15 = new Array(n).fill(0)\n  const dp16 = new Array(n).fill(0)\n  const dp17 = new Array(n).fill(0)\n  const dp18 = new Array(n).fill(0)\n  const dp19 = new Array(n).fill(0)\n  const dp20 = new Array(n).fill(0)\n  const dp21 = new Array(n).fill(0)\n  const dp22 = new Array(n).fill(0)\n  const dp23 = new Array(n).fill(0)\n  const dp24 = new Array(n).fill(0)\n  const dp25 = new Array(n).fill(0)\n  const dp26 = new Array(n).fill(0)\n  const dp27 = new Array(n).fill(0)\n  const dp28 = new Array(n).fill(0)\n  const dp29 = new Array(n).fill(0)\n  const dp30 = new Array(n).fill(0)\n  const dp31 = new Array(n).fill(0)\n  const dp32 = new Array(n).fill(0)\n  const dp33 = new Array(n).fill(0)\n  const dp34 = new Array(n).fill(0)\n  const dp35 = new Array(n).fill(0)\n  const dp36 = new Array(n).fill(0)\n  const dp37 = new Array(n).fill(0)\n  const dp38 = new Array(n).fill(0)\n  const dp39 = new Array(n).fill(0)\n  const dp40 = new Array(n).fill(0)\n  const dp41 = new Array(n).fill(0)\n  const dp42 = new Array(n).fill(0)\n  const dp43 = new Array(n).fill(0)\n  const dp44 = new Array(n).fill(0)\n  const dp45 = new Array(n).fill(0)\n  const dp46 = new Array(n).fill(0)\n  const dp47 = new Array(n).fill(0)\n  const dp48 = new Array(n).fill(0)\n  const dp49 = new Array(n).fill(0)\n  const dp50 = new Array(n).fill(0)\n  const dp51 = new Array(n).fill(0)\n  const dp52 = new Array(n).fill(0)\n  const dp53 = new Array(n).fill(0)\n  const dp54 = new Array(n).fill(0)\n  const dp55 = new Array(n).fill(0)\n  const dp56 = new Array(n).fill(0)\n  const dp57 = new Array(n).fill(0)\n  const dp58 = new Array(n).fill(0)\n  const dp59 = new Array(n).fill(0)\n  const dp60 = new Array(n).fill(0)\n  const dp61 = new Array(n).fill(0)\n  const dp62 = new Array(n).fill(0)\n  const dp63 = new Array(n).fill(0)\n  const dp64 = new Array(n).fill(0)\n  const dp65 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) return greatestCommonDivisor(b, a);\n  if (a === b) return a;\n  return greatestCommonDivisor(Math.floor(a / b), b);\n};\n\n/* Return the least common multiple of two integers\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the sum of two integers\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  50\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the difference of two integers\n  >>> difference(3, 5)\n  2\n  >>> difference(25, 15)\n  20\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/* Return the product of two integers\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  225\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Return the quotient of two integers\n  >>> quotient(3, 5)\n  1\n  >>> quotient(25, 15)\n  5\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/* Return the remainder of two integers\n  >>> remainder(3, 5)\n  2\n  >>> remainder(25, 15)\n  20\n  */\nconst remainder = (a, b) => {\n  return a % b;\n};\n\n/* Return the absolute value of an integer\n  >>> absoluteValue(3)\n  3\n  >>> absoluteValue(25)\n  25\n  */\nconst absoluteValue = (a) => {\n  return Math.abs(a);\n};\n\n/* Return the square root of an integer\n  >>> squareRoot(9)\n  3\n  >>> squareRoot(25)\n  5\n  */\nconst squareRoot = (a) => {\n  return Math.sqrt(a);\n};\n\n/* Return the cube root of an integer\n  >>> cubeRoot(9)\n  3\n  >>> cubeRoot(25)\n  5\n  */\nconst cubeRoot = (a) => {\n  return Math.pow(a, 1 / 3);\n};\n\n/* Return the factorial of an integer\n  >>> factorial(3)\n  6\n  >>> factorial(25)\n  153312500\n  */\nconst factorial = (a) => {\n  if (a === 0) return 1;\n  if (a === 1) return 1;\n  return a * factorial(a - 1);\n};\n\n/* Return the fibonacci number of an integer\n  >>> fibonacci(3)\n  1\n  >>> fibonacci(25)\n  34\n  */\nconst fibonacci = (a) => {\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  return fibonacci(a - 1) + fibonacci(a - 2);\n};\n\n/* Return the harmonic number of an integer\n  >>> harmonic(3)\n  1\n  >>> harmonic(25)\n  12\n  */\nconst harmonic = (a) => {\n  return 1 / Math.log(a);\n};\n\n/* Return the hyperbolic cosine of an integer\n  >>> hyperbolicCosine(3)\n  1\n  >>> hyperbolicCosine(25)\n  1.5\n  */\nconst hyperbolicCosine = (a) => {\n  return Math.cos(Math.acos(a));\n};\n\n/* Return the hyperbolic sine of an integer\n  >>> hyperbolicSine(3)\n  0\n  >>> hyperbolicSine(25)\n  1.5\n  */\nconst hyperbolicSine = (a) => {\n  return Math.sin(Math.asin(a));\n};\n\n/* Return the hyperbolic tangent of an integer\n  >>> hyperbolicTangent(3)\n  0\n  >>> hyperbolicTangent(25)\n  1.5\n  */\nconst hyperbolicTangent = (a) => {\n  return Math.tan(Math.atan(a));\n};\n\n/* Return the hyperbolic cotangent of an integer\n  >>> hyperbolicCotangent(3)\n  1\n  >>> hyperbolicCotangent(25)\n  0.5\n  */\nconst hyperbolicCotangent = (a) => {\n  return 1 / Math.tan(Math.atan(a));\n};\n\n/* Return the hyperbolic secant of an integer\n  >>> hyperbolicSecant(3)\n  1\n  >>> hyperbolicSecant(25)\n  0.5\n  */\nconst hyperbolicSecant = (a) => {\n  return 1 / Math.tan(Math.atan(a) / 2);\n};\n\n/* Return the hyperbolic cosecant of an integer\n  >>> hyperbolicCosecant(3)\n  0\n  >>> hyperbolicCosecant(25)\n  0.5\n  */\nconst hyperbolicCosecant = (a) => {\n  return 1 / Math.tan(Math.atan(a) / 4);\n};\n\n/* Return the hyperbolic cosecant of an integer\n  >>> hyperbolicCosecant(3)\n  0\n  >>> hyperbolicCosecant(25)\n  0.5\n  */\nconst hyperbolicCosecant = (a) => {\n  return 1 / Math.tan(Math.atan(a) / 8);\n};\n\n/* Return the hyperbolic cosecant of an integer\n  >>> hyperbolicCosecant(3)\n  0\n  >>> hyperbolicCosecant(25)\n  0.5\n  */\nconst hyperbolicCosecant = (a) => {\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(1)\n    if (i % 2 === 0) {\n      result.push(result[i - 1] + result[i - 2])\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i + 1])\n    }\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return digits(n) % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return!isOdd(n);\n};\n\nconst sum = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\nconst product = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome2 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome3 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome4 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome5 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome6 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome7 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome8 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome9 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome10 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome11 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome12 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome13 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome14 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome15 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome16 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome17 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome18 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome19 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n;\n};\n\nconst isPalindrome20 = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = n % 10 + result;\n    n = n / 10;\n  }\n  return result === n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  let stack = [];\n  let index = 0;\n  let len = string.length;\n  while (index < len) {\n    let char = string[index];\n    if (char === '[' || char === ']') {\n      stack.push(char);\n    } else if (stack.length === 0) {\n      return false;\n    } else if (stack[stack.length - 1] === '[' && char === ']') {\n      stack.pop();\n    } else if (stack[stack.length - 1] === '[' && char === '[') {\n      stack.pop();\n      stack.push(char);\n    } else if (stack[stack.length - 1] === ']' && char === ']') {\n      stack.pop();\n    } else if (stack[stack.length - 1] === ']' && char === '[') {\n      stack.pop();\n      stack.push(char);\n    } else {\n      return false;\n    }\n    index++;\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[ [ [[]'));\nconsole.log(isNested(' [[]][['));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares23 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares24 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return the index of the element that has the\n  largest value. If there is more than one largest element, return the index\n  of the largest element. If there is no largest element, return -1.\n\n  Examples:\n  largestIndex([1,2,3,4,5]) = 4\n  largestIndex([1,2,3,4,5,6]) = 5\n  largestIndex([1,2,3,4,5,6,7]) = 6\n  largestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst largestIndex = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return the index of the element that has the\n  smallest value. If there is more than one smallest element, return the index\n  of the smallest element. If there is no smallest element, return -1.\n\n  Examples:\n  smallestIndex([1,2,3,4,5]) = 1\n  smallestIndex([1,2,3,4,5,6]) = 2\n  smallestIndex([1,2,3,4,5,6,7]) = 3\n  smallestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst smallestIndex = (arr) => {\n  let min = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return the index of the element that has the\n  largest value. If there is more than one largest element, return the index\n  of the largest element. If there is no largest element, return -1.\n\n  Examples:\n  largestIndex([1,2,3,4,5]) = 4\n  largestIndex([1,2,3,4,5,6]) = 5\n  largestIndex([1,2,3,4,5,6,7]) = 6\n  largestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst largestIndex = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return the index of the element that has the\n  smallest value. If there is more than one smallest element, return the index\n  of the smallest element. If there is no smallest element, return -1.\n\n  Examples:\n  smallestIndex([1,2,3,4,5]) = 1\n  smallestIndex([1,2,3,4,5,6]) = 2\n  smallestIndex([1,2,3,4,5,6,7]) = 3\n  smallestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst smallestIndex = (arr) => {\n  let min = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return the index of the element that has the\n  largest value. If there is more than one largest element, return the index\n  of the largest element. If there is no largest element, return -1.\n\n  Examples:\n  largestIndex([1,2,3,4,5]) = 4\n  largestIndex([1,2,3,4,5,6]) = 5\n  largestIndex([1,2,3,4,5,6,7]) = 6\n  largestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst largestIndex = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return the index of the element that has the\n  smallest value. If there is more than one smallest element, return the index\n  of the smallest element. If there is no smallest element, return -1.\n\n  Examples:\n  smallestIndex([1,2,3,4,5]) = 1\n  smallestIndex([1,2,3,4,5,6]) = 2\n  smallestIndex([1,2,3,4,5,6,7]) = 3\n  smallestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst smallestIndex = (arr) => {\n  let min = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t .\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t.\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = lst\n  if (a === null || b === null) {\n    return [null, null]\n  }\n  if (a < 0) {\n    return [a, largestSmallestIntegers([b])[1]]\n  }\n  if (b < 0) {\n    return largestSmallestIntegers([a])\n  }\n  if (a === b) {\n    return [a, a]\n  }\n  if (a > b) {\n    return largestSmallestIntegers([a, b])\n  }\n  return largestSmallestIntegers([b, a])\n}\n\nconst largestSmallestIntegersTest = t.test('largestSmallestIntegers', t => {\n  const [a, b] = largestSmallestIntegers([2, 4, 1, 3, 5, 7])\n  t.equal(a, null, 'a is null')\n  t.equal(b, 1, 'b is 1')\n  t.end()\n})\n\nlargestSmallestIntegersTest.write({\n  title: 'largestSmallestIntegers',\n  body: largestSmallestIntegers\n})\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be . or ,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be. or,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n  if (a === b) return null\n  if (a < b) return a\n  return b\n}\n\nconst compareOne = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst compareO = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reOne = (a, b) => {\n  if (a === b) return a\n  if (a < b) return a\n  return b\n}\n\nconst reTwo = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reThree = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reFour = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reFive = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reSix = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reSeven = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reEight = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reNine = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reEleven = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwelve = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reThirteen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reFourteen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reFifteen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reSixteen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reSeventeen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reEighteen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reNineteen = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwenty = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentyOne = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentyTwo = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentyThree = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentyFour = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentyFive = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentySix = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentySeven = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentyEight = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reTwentyNine = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reThirty = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reThirtyOne = (a, b) => {\n  if (a === b) return a\n  if (a < b) return b\n  return a\n}\n\nconst reThirtyTwo = (a, b) => {\n  if (a === b) return a\n  if (a < b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*\n  Evaluate wh ethe r theg iven n umber n c an be written as the sum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! * ...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! *...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\nconst numberOfFactorialsLessThanOrEqualTo = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * numberOfFactorialsLessThanOrEqualTo(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the number n.\n  */\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = /\\s/g\n  const words = text.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(spaces, '_')\n    if (newWord.length > 2) {\n      const lastIndex = newWord.lastIndexOf('_')\n      const lastWord = newWord.substring(lastIndex + 1)\n      const firstWord = newWord.substring(0, lastIndex)\n      newWords.push(firstWord + '-' + lastWord)\n    } else {\n      newWords.push(newWord)\n    }\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Given a string, return a string with all the spaces replaced with underscores\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n*/\nconst fixUnderscores = (text) => {\n  const spaces = /\\s/g\n  const words = text.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(spaces, '_')\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Given a string, return a string with all the spaces replaced with underscores\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n*/\nconst fixUnderscores = (text) => {\n  const spaces = /\\s/g\n  const words = text.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(spaces, '_')\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Given a string, return a string with all the spaces replaced with underscores\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n*/\nconst fixUnderscores = (text) => {\n  const spaces = /\\s/g\n  const words = text.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(spaces, '_')\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Given a string, return a string with all the spaces replaced with underscores\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n*/\nconst fixUnderscores = (text) => {\n  const spaces = /\\s/g\n  const words = text.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(spaces, '_')\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Given a string, return a string with all the spaces replaced with underscores\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n*/\nconst fixUnderscores = (text) => {\n  const spaces = /\\s/g\n  const words = text.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(spaces, '_')\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Given a string, return a string with all the spaces replaced with underscores\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n*/\nconst fixUnderscores = (text) => {\n  const spaces = /\\s/g\n  const words = text.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = word.replace(spaces, '_')\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Given a string, return a string with all the spaces replaced with underscores\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n*/\nconst fixUnderscores = (text) => {\n  const spaces =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a fu ncti on whi c h take s a strin g representing a file 's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on whi c h take s a strin g representing a file's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    if (file_name.length > 1 && file_name.indexOf(\".\") > -1) {\n        if (file_name.indexOf(\".\") === 0) {\n            return \"No\";\n        }\n        if (file_name.indexOf(\".\") === file_name.length - 1) {\n            return \"No\";\n        }\n        if (file_name.indexOf(\".\") > 0) {\n            if (file_name.substring(0, file_name.indexOf(\".\")) === \"\") {\n                return \"No\";\n            }\n            if (file_name.substring(file_name.indexOf(\".\") + 1, file_name.length) === \"\") {\n                return \"No\";\n            }\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \".\") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(file_name.length - 1, file_name.length) === \" \") {\n            return \"No\";\n        }\n        if (file_name.substring(0, 1)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 3 === 0) {\n      sum += num * num\n    }\n    if (num % 4 === 0) {\n      sum += num * num * num\n    }\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([-1,-5,2,-1,-5]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(' ');\n    let newWords = [];\n    let newWordsLength = 0;\n    let newWordsLengthSum = 0;\n    words.forEach(word => {\n        let isPrime = isPrime(word.length);\n        if (isPrime) {\n            newWords.push(word);\n            newWordsLength += word.length;\n            newWordsLengthSum += word.length;\n        }\n    });\n    let newSentence = newWords.join(' ');\n    let newSentenceLength = newSentence.length;\n    let newSentenceLengthSum = newSentenceLength;\n    let isEqual = newSentenceLengthSum === newSentenceLengthSum;\n    return {\n        newWords,\n        newSentence,\n        newSentenceLength,\n        newSentenceLengthSum,\n        isEqual\n    };\n};\n\nconst isPrime = (number) => {\n    let i = 2;\n    while (i < number) {\n        if (number % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst main = () => {\n    let testCase = [\n        \"This is a test\",\n        \"lets go for swimming\"\n    ];\n    testCase.forEach(sentence => {\n        let {newWords, newSentence, newSentenceLength, newSentenceLengthSum, isEqual} = wordsInSentence(sentence);\n        console.log(`${sentence} -> ${newWords}`);\n        console.log(`${newSentence} -> ${newSentenceLength}`);\n        console.log(`${newSentenceLengthSum} -> ${newSentenceLengthSum}`);\n        console.log(`${isEqual}`);\n    });\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n  let xs = x.split(\"/\");\n  let ns = n.split(\"/\");\n  let x = parseInt(xs[0]);\n  let n = parseInt(ns[0]);\n  if (x < 0 || n < 0) return false;\n  if (x === 0) return false;\n  if (n === 0) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/1 0\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits .\n  Note: if thereare sever al items w i th similar sum of their digi ts ,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.sort", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.sort((a, b) => a - b);\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      result.push(planet2);\n    }\n    if (planet2 === planets[i]) {\n      result.push(planet1);\n    }\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      result.push(planet2);\n    }\n    if (planet2 === planets[i]) {\n      result.push(planet1);\n    }\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      result.push(planet2);\n    }\n    if (planet2 === planets[i]) {\n      result.push(planet1);\n    }\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      result.push(planet2);\n    }\n    if (planet2 === planets[i]) {\n      result.push(planet1);\n    }\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      result.push(planet2);\n    }\n    if (planet2 === planets[i]) {\n      result.push(planet1);\n    }\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      result.push(planet2);\n    }\n    if (planet2 === planets[i]) {\n      result.push(planet1);\n    }\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      result.push(planet2);\n    }\n    if (planet2 === planets[i]) {\n      result.push(planet1);\n    }\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const result = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum % lst[i].length!== 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => a.length - b.length)\n  return result\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => a.length - b.length)\n  return result\n}\n\nconst list_sort_by_length_reverse = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length)\n  return result\n}\n\nconst list_sort_by_length_reverse_desc = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length, (a, b) => b.length - a.length)\n  return result\n}\n\nconst list_sort_by_length_reverse_desc_desc = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length, (a, b) => a.length - b.length)\n  return result\n}\n\nconst list_sort_by_length_reverse_desc_desc_desc = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length, (a, b) => a.length - b.length, (a, b) => b.length - a.length)\n  return result\n}\n\nconst list_sort_by_length_reverse_desc_desc_desc_desc = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length, (a, b) => a.length - b.length, (a, b) => b.length - a.length, (a, b) => a.length - b.length)\n  return result\n}\n\nconst list_sort_by_length_reverse_desc_desc_desc_desc_desc = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length, (a, b) => a.length - b.length, (a, b) => b.length - a.length, (a, b) => a.length - b.length, (a, b) => a.length - b.length)\n  return result\n}\n\nconst list_sort_by_length_reverse_desc_desc_desc_desc_desc = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length, (a, b) => a.length - b.length, (a, b) => b.length - a.length, (a, b) => a.length - b.length, (a, b) => a.length - b.length, (a, b) => a.length - b.length)\n  return result\n}\n\nconst list_sort_by_length_reverse_desc_desc_desc_desc_desc = (lst) => {\n  const len = lst.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(lst[i])\n  }\n  result.sort((a, b) => b.length - a.length, (a, b) => a.length - b.length, (a, b) => b.length - a.length, (a, b) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0, '.')\n  '0'\n  >>> stringSequence(5, '.')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0, '.', '-')\n  '0'\n  >>> stringSequence(5, '.', '-')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, separator, separator2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}${i + 1}${separator2}`;\n  }\n  return result;\n};\n\n/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0, '.', '-', '.')\n  '0'\n  >>> stringSequence(5, '.', '-', '.')\n  '0.1-2.2-3.3-4.4-5.5'\n  */\nconst stringSequence = (n, separator, separator2, separator3) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}${i + 1}${separator2}${i + 2}${separator3}`;\n  }\n  return result;\n};\n\n/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0, '.', '-', '.', '.')\n  '0'\n  >>> stringSequence(5, '.', '-', '.', '.')\n  '0.1-2.2-3.3-4.4-5.5'\n  */\nconst stringSequence = (n, separator, separator2, separator3, separator4) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}`;\n  }\n  return result;\n};\n\n/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0, '.', '-', '.', '.', '.')\n  '0'\n  >>> stringSequence(5, '.', '-', '.', '.', '.')\n  '0.1-2.2-3.3-4.4-5.5'\n  */\nconst stringSequence = (n, separator, separator2, separator3, separator4, separator5) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}${i + 4}${separator5}`;\n  }\n  return result;\n};\n\n/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0, '.', '-', '.', '.', '.', '.')\n  '0'\n  >>> stringSequence(5, '.', '-', '.', '.', '.', '.')\n  '0.1-2.2-3.3-4.4-5.5'\n  */\nconst stringSequence = (n, separator, separator2, separator3, separator4, separator5, separator6) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}${i + 4}${separator5}${i + 5}${separator6}`;\n  }\n  return result;\n};\n\n/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0, '.', '-', '.', '.', '.', '.', '.')\n  '0'\n  >>> stringSequence(5, '.', '-', '.', '.', '.', '.', '.')\n  '0.1-2.2-3.3-4.4-5.5'\n  */\nconst stringSequence = (n, separator, separator2, separator3, separator4, separator5, separator6, separator7) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}${i + 4}${separator5}${i + 5}${separator6}${i + 6}${separator7}`;\n  }\n  return result;\n};\n\n/* Return as", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd . Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd. Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match . \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match. \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let [scores, guesses] = game;\n  let [score, guess] = guess;\n  let [score1, guess1] = scores;\n  let [score2, guess2] = guesses;\n  let [score3, guess3] = scores;\n  let [score4, guess4] = guesses;\n  let [score5, guess5] = scores;\n  let [score6, guess6] = guesses;\n  let [score7, guess7] = scores;\n  let [score8, guess8] = guesses;\n  let [score9, guess9] = scores;\n  let [score10, guess10] = guesses;\n  let [score11, guess11] = scores;\n  let [score12, guess12] = guesses;\n  let [score13, guess13] = scores;\n  let [score14, guess14] = guesses;\n  let [score15, guess15] = scores;\n  let [score16, guess16] = guesses;\n  let [score17, guess17] = scores;\n  let [score18, guess18] = guesses;\n  let [score19, guess19] = scores;\n  let [score20, guess20] = guesses;\n  let [score21, guess21] = scores;\n  let [score22, guess22] = guesses;\n  let [score23, guess23] = scores;\n  let [score24, guess24] = guesses;\n  let [score25, guess25] = scores;\n  let [score26, guess26] = guesses;\n  let [score27, guess27] = scores;\n  let [score28, guess28] = guesses;\n  let [score29, guess29] = scores;\n  let [score30, guess30] = guesses;\n  let [score31, guess31] = scores;\n  let [score32, guess32] = guesses;\n  let [score33, guess33] = scores;\n  let [score34, guess34] = guesses;\n  let [score35, guess35] = scores;\n  let [score36, guess36] = guesses;\n  let [score37, guess37] = scores;\n  let [score38, guess38] = guesses;\n  let [score39, guess39] = scores;\n  let [score40, guess40] = guesses;\n  let [score41, guess41] = scores;\n  let [score42, guess42] = guesses;\n  let [score43, guess43] = scores;\n  let [score44, guess44] = guesses;\n  let [score45, guess45] = scores;\n  let [score46, guess46] = guesses;\n  let [score47, guess47] = scores;\n  let [score48, guess48] = guesses;\n  let [score49, guess49] = scores;\n  let [score50, guess50] = guesses;\n  let [score51, guess51] = scores;\n  let [score52, guess52] = guesses;\n  let [score53, guess53] = scores;\n  let [score54, guess54] = guesses;\n  let [score55, guess55] = scores;\n  let [score56, guess56] = guesses;\n  let [score57, guess57] = scores;\n  let [score58, guess58] = guesses;\n  let [score59, guess59] = scores;\n  let [score60, guess60] = guesses;\n  let [score61, guess61] = scores;\n  let [score62, guess62] = guesses;\n  let [score63, guess63] = scores;\n  let [score64, guess64] = guesses;\n  let [score65, guess65] = scores;\n  let [score66, guess66] = guesses;\n  let [score67, guess67] = scores;\n  let [score68, guess68] = guesses;\n  let [score69, guess69] = scores;\n  let [score70, guess70] = guesses;\n  let [score71, guess71] = scores;\n  let [score72, guess72] = guesses;\n  let [score73, guess73] = scores;\n  let [score74, guess74] = guesses;\n  let [score75, guess75] = scores;\n  let [score76, guess76] = guesses;\n  let [score77, guess77] = scores;\n  let [score78, guess78] = guesses;\n  let [score79, guess79] = scores;\n  let [score80, guess80] = guesses;\n  let [score81, guess81] = scores;\n  let [score82, guess82] = guesses;\n  let [score83, guess83] = scores;\n  let [score84, guess84] = guesses;\n  let [score85, guess85] = scores;\n  let [score86, guess86] = guesses;\n  let [score87, guess87] = scores;\n  let [score88, guess88] = guesses;\n  let [score89, guess89] = scores;\n  let [score90, guess90] = guesses;\n  let [score91, guess91] = scores;\n  let [score92, guess92] = guesses;\n  let [score93, guess93] = scores;\n  let [score94, guess94] = guesses;\n  let [score95, guess95] = scores", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be  giv en the name o f a class  (a string) and a lis t of extensions . \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be  giv en the name o f a class  (a string) and a lis t of extensions. \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const classes = extensions.map(extension => extension.split('.'));\n  const class_name_parts = class_name.split('.');\n  const strength = classes.map(class => {\n    const class_parts = class.split('.');\n    const strength = class_parts.map(part => {\n      const part_strength = part.toUpperCase().charCodeAt(0) - part.toLowerCase().charCodeAt(0);\n      return part_strength;\n    }).reduce((a, b) => a - b);\n    return strength;\n  }).reduce((a, b) => a - b);\n  const strongest_extension = classes.filter(class => strength[class] === -1)[0];\n  return `${class_name_parts[0]}${strongest_extension}.${class_name_parts[1]}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are giv en 2  words .  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are giv en 2  words.  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n    let a = a.split(\" \");\n    let b = b.split(\" \");\n    let a1 = a.length;\n    let b1 = b.length;\n    let c = a1 > b1;\n    if (c) {\n        return false;\n    }\n    for (let i = 0; i < a1; i++) {\n        let a2 = a[i].length;\n        let b2 = b[i].length;\n        if (a2 > b2) {\n            return false;\n        }\n        for (let j = 0; j < a2; j++) {\n            if (a[i][j]!== b[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst c ycpatternCheck2 =(a, b) => {\n    let a = a.split(\" \");\n    let b = b.split(\" \");\n    let a1 = a.length;\n    let b1 = b.length;\n    let c = a1 > b1;\n    if (c) {\n        return false;\n    }\n    for (let i = 0; i < a1; i++) {\n        let a2 = a[i].length;\n        let b2 = b[i].length;\n        if (a2 > b2) {\n            return false;\n        }\n        for (let j = 0; j < a2; j++) {\n            if (a[i][j]!== b[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst c ycpatternCheck3 =(a, b) => {\n    let a = a.split(\" \");\n    let b = b.split(\" \");\n    let a1 = a.length;\n    let b1 = b.length;\n    let c = a1 > b1;\n    if (c) {\n        return false;\n    }\n    for (let i = 0; i < a1; i++) {\n        let a2 = a[i].length;\n        let b2 = b[i].length;\n        if (a2 > b2) {\n            return false;\n        }\n        for (let j = 0; j < a2; j++) {\n            if (a[i][j]!== b[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst c ycpatternCheck4 =(a, b) => {\n    let a = a.split(\" \");\n    let b = b.split(\" \");\n    let a1 = a.length;\n    let b1 = b.length;\n    let c = a1 > b1;\n    if (c) {\n        return false;\n    }\n    for (let i = 0; i < a1; i++) {\n        let a2 = a[i].length;\n        let b2 = b[i].length;\n        if (a2 > b2) {\n            return false;\n        }\n        for (let j = 0; j < a2; j++) {\n            if (a[i][j]!== b[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst c ycpatternCheck5 =(a, b) => {\n    let a = a.split(\" \");\n    let b = b.split(\" \");\n    let a1 = a.length;\n    let b1 = b.length;\n    let c = a1 > b1;\n    if (c) {\n        return false;\n    }\n    for (let i = 0; i < a1; i++) {\n        let a2 = a[i].length;\n        let b2 = b[i].length;\n        if (a2 > b2) {\n            return false;\n        }\n        for (let j = 0; j < a2; j++) {\n            if (a[i][j]!== b[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst c ycpatternCheck6 =(a, b) => {\n    let a = a.split(\" \");\n    let b = b.split(\" \");\n    let a1 = a.length;\n    let b1 = b.length;\n    let c = a1 > b1;\n    if (c) {\n        return false;\n    }\n    for (let i = 0; i < a1; i++) {\n        let a2 = a[i].length;\n        let b2 = b[i].length;\n        if (a2 > b2) {\n            return false;\n        }\n        for (let j = 0; j < a2; j++) {\n            if (a[i][j]!== b[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst c ycpatternCheck7 =(a, b) => {\n    let a = a.split(\" \");\n    let b = b.split(\" \");\n    let a1 = a.length;\n    let b1 = b.length;\n    let c = a1 > b1;\n    if (c) {\n        return false;\n    }\n    for (let i = 0; i < a1; i++) {\n        let a2 = a[i].length;\n        let b2 = b[i].length;\n        if (a2 > b2) {\n            return false;\n        }\n        for (let j = 0; j < a2; j++) {\n            if (a[i][j]!== b[i][j]) {\n                return false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n      num = num / 2;\n    } else {\n      odd++;\n      num = num * 3 + 1;\n    }\n  }\n  return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g ,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '',\n    n = number,\n    i = 1;\n  while (n > 0) {\n    if (n >= i * 10) {\n      roman += i.toString();\n      n -= i * 10;\n    } else {\n      roman += 'x';\n      n -= i;\n    }\n    i++;\n  }\n  return roman.toLowerCase();\n};\n\n/*\n  Given a string, return the string in lowercase, with all the vowels\n  replaced by the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  */\nconst stringToMiniRoman = (str) => {\n  let roman = '',\n    i = 0;\n  while (i < str.length) {\n    if (str[i] === 'a' || str[i] === 'e' || str[i] === 'i' || str[i] === 'o' || str[i] === 'u') {\n      roman += str[i];\n    } else {\n      roman += intToMiniRoman(parseInt(str[i]));\n    }\n    i++;\n  }\n  return roman;\n};\n\n/*\n  Given a string, return the string in lowercase, with all the vowels\n  replaced by the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  */\nconst stringToMiniRoman = (str) => {\n  let roman = '',\n    i = 0;\n  while (i < str.length) {\n    if (str[i] === 'a' || str[i] === 'e' || str[i] === 'i' || str[i] === 'o' || str[i] === 'u') {\n      roman += str[i];\n    } else {\n      roman += intToMiniRoman(parseInt(str[i]));\n    }\n    i++;\n  }\n  return roman;\n};\n\n/*\n  Given a string, return the string in lowercase, with all the vowels\n  replaced by the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  */\nconst stringToMiniRoman = (str) => {\n  let roman = '',\n    i = 0;\n  while (i < str.length) {\n    if (str[i] === 'a' || str[i] === 'e' || str[i] === 'i' || str[i] === 'o' || str[i] === 'u') {\n      roman += str[i];\n    } else {\n      roman += intToMiniRoman(parseInt(str[i]));\n    }\n    i++;\n  }\n  return roman;\n};\n\n/*\n  Given a string, return the string in lowercase, with all the vowels\n  replaced by the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  */\nconst stringToMiniRoman = (str) => {\n  let roman = '',\n    i = 0;\n  while (i < str.length) {\n    if (str[i] === 'a' || str[i] === 'e' || str[i] === 'i' || str[i] === 'o' || str[i] === 'u') {\n      roman += str[i];\n    } else {\n      roman += intToMiniRoman(parseInt(str[i]));\n    }\n    i++;\n  }\n  return roman;\n};\n\n/*\n  Given a string, return the string in lowercase, with all the vowels\n  replaced by the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  */\nconst stringToMiniRoman = (str) => {\n  let roman = '',\n    i = 0;\n  while (i < str.length) {\n    if (str[i] === 'a' || str[i] === 'e' || str[i] === 'i' || str[i] === 'o' || str[i] === 'u') {\n      roman += str[i];\n    } else {\n      roman += intToMiniRoman(parseInt(str[i]));\n    }\n    i++;\n  }\n  return roman;\n};\n\n/*\n  Given a string, return the string in lowercase, with all the vowels\n  replaced by the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  >>> stringToMiniRoman('hello') == 'hello'\n  */\nconst stringToMiniRoman = (str) => {\n  let roman = '',\n    i = 0;\n  while (i < str.length) {\n    if (str[i] === 'a' || str[i] === 'e' || str[i] === 'i' || str[i] === 'o' || str[i] === 'u') {\n      roman += str[i];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle , false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle, false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle, false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle10 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle11 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle12 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle13 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle14 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle15 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle16 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle17 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle18 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle19 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle20 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle21 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle22 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};\n\nconst rightAngleTriangle23 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || a + c <= b) {\n    return false;\n  }\n  return true;\n};", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\" ,\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\",\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =  (words) => {\n  const map = new Map()\n  words.forEach(w => {\n    map.set(w, map.get(w) || 0)\n  })\n  return words.reduce((a, b) => {\n    if (map.get(a) > map.get(b)) return a\n    return b\n  })\n}\n\nconst findMax =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [0, remaining];\n  }\n  const [eaten, remaining] = eat(number - need, need, remaining);\n  return [number + eaten, remaining];\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a st ring , find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string[i].toLowerCase().charCodeAt(0) === string[i].toUpperCase().charCodeAt(0)? 0 : 1;\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times the string appears in the st ring\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra2 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra3 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra4 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra5 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra6 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra7 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra8 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra9 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra10 = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const operand = operand[i];\n    if (operand.length === 1) {\n      result.push(operand[0]);\n    } else {\n      const opResult = op(operand[0], operand[1]);\n      result.push(opResult);\n    }\n  }\n  return result;\n};\n\nconst doAlgebra11 = (operator, operand", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-zA-Z]/)) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a st ring  'text ' , retu rn its md 5 hash equivalent str ing.\n  If 'text '  is an empty string , returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  'text ', retu rn its md 5 hash equivalent str ing.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a md5 hash 'hash', return its st ring equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToString = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('hex')\n}\n\n/*\n  Given a md5 hash 'hash', return its hex string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToHex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToHex = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('hex')\n}\n\n/*\n  Given a md5 hash 'hash', return its base64 string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToBase64('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToBase64 = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('base64')\n}\n\n/*\n  Given a md5 hash 'hash', return its base64 string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToBase64('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToBase64Url = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('base64')\n}\n\n/*\n  Given a md5 hash 'hash', return its base64 string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToBase64Url('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToBase64UrlSafe = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('base64')\n}\n\n/*\n  Given a md5 hash 'hash', return its hex string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToHexUrlSafe('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToHexUrlSafe = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('hex')\n}\n\n/*\n  Given a md5 hash 'hash', return its hex string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToHexUrlSafe('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToHexUrlSafeBase64 = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('hex')\n}\n\n/*\n  Given a md5 hash 'hash', return its hex string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToHexUrlSafeBase64('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToHexUrlSafeBase64Url = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('hex')\n}\n\n/*\n  Given a md5 hash 'hash', return its hex string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToHexUrlSafeBase64Url('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToHexUrlSafeBase64UrlSafe = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(hash).digest('hex')\n}\n\n/*\n  Given a md5 hash 'hash', return its hex string equivalent.\n  If 'hash' is an empty string, return null.\n\n  >>> md5ToHexUrlSafeBase64UrlSafe('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToHexUrlSafeBase64UrlSafeBase64 = (hash) => {\n  if (hash === '') {\n    return null\n  }\n  return crypto.create", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let i = 0;\n  while (i < music_string_length) {\n    const current_note = music_string[i];\n    if (current_note === 'o') {\n      music_list.push(4);\n      i++;\n    } else if (current_note === 'o|') {\n      music_list.push(2);\n      i++;\n    } else if (current_note === '.') {\n      music_list.push(1);\n      i++;\n    } else if (current_note === '|') {\n      music_list.push(0);\n      i++;\n    } else {\n      music_list.push(parseInt(current_note));\n      i++;\n    }\n  }\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find howm anytimesa  given  substrin g can be found in the  original strin g . Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find howm anytimesa  given  substrin g can be found in the  original strin g. Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  * Find the longest substring in the original string that matches the given substring.\n  *\n  * @param {string} string\n  * @param {string} substring\n  * @return {string}\n  *\n  * @example\n  *\n  *  >>> longestSubstring('abc', 'b')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'ab')\n  *  'ab'\n  *  >>> longestSubstring('abc', 'ac')\n  *  'ac'\n  *  >>> longestSubstring('abc', 'acd')\n  *  'acd'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longestSubstring('abc', 'bcd')\n  *  'bc'\n  *  >>> longest", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input isa  spa ce-del i mitedstring of  numberals from 'zero ' to 'nine'.\n V alid choices are 'z ero', 'one', 'two', ' three', 'fou r ', 'five', 'six ', 'seven' ,  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(\" \")\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(\" \")\n}\n\n/*\n  Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(\" \")\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(\" \")\n}\n\n/*\n  Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse2 = (numbers) => {\n  const numbersArray = numbers.split(\" \")\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(\" \")\n}\n\n/*\n  Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse3 = (numbers) => {\n  const numbersArray = numbers.split(\" \")\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(\" \")\n}\n\n/*\n  Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse4 = (numbers) => {\n  const numbersArray = numbers.split(\" \")\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(\" \")\n}\n\n/*\n  Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse5 = (numbers) => {\n  const numbersArray = numbers.split(\" \")\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(\" \")\n}\n\n/*\n  Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse6 = (numbers) => {\n  const numbersArray = numbers.split(\" \")\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(\" \")\n}\n\n/*\n  Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from largest to smallest\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let numberPart = number.toString().split('.')[0];\n  let decimalPart = number.toString().split('.')[1];\n  let numberPartLength = numberPart.length;\n  let decimalPartLength = decimalPart.length;\n  let numberPartLengthMinusOne = numberPartLength - 1;\n  let decimalPartLengthMinusOne = decimalPartLength - 1;\n  let numberPartLengthMinusOneMinusOne = numberPartLengthMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOne = decimalPartLengthMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = decimalPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  let numberPartLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numberPartLengthMinusOneMinusOneMinusOneMinusOne", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = sort(numbers);\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  const minIndex = findIndex(numbers, min);\n  const maxIndex = findIndex(numbers, max);\n  const minDiff = Math.abs(min - numbers[minIndex]);\n  const maxDiff = Math.abs(max - numbers[maxIndex]);\n  const minDiffIndex = minIndex;\n  const maxDiffIndex = maxIndex;\n  if (minDiff < maxDiff) {\n    return [min, minDiffIndex];\n  }\n  return [max, maxDiffIndex];\n};\n\nexport default findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStrings = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrBooleans = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrObjects = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'object');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrArrays = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || Array.isArray(v));\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrFunctions = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'function');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrNumbers = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'number');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrNumbersOrStrings = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'number' || typeof v ==='string');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrNumbersOrObjects = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'number' || typeof v ==='string' || typeof v === 'object');\n};\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersOrStringsOrNumbersOrArrays = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'number' || Array.isArray(v));\n};\n\n/**\n  * Filter giv en l ist of any py thon val", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return true if string s is empty\n  >>> strlen('')\n  True\n  >>> strlen('abc')\n  False\n  */\nconst isEmpty = (string) => {\n  return strlen(string) === 0;\n};\n\n/* Return true if string s is not empty\n  >>> strlen('')\n  False\n  >>> strlen('abc')\n  True\n  */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string);\n};\n\n/* Return true if string s is equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') == 'abc'\n  True\n  >>> strlen('abc') == 'def'\n  False\n  */\nconst isEqual = (string, t) => {\n  return string === t;\n};\n\n/* Return true if string s is not equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') == 'abc'\n  False\n  >>> strlen('abc') == 'def'\n  True\n  */\nconst isNotEqual = (string, t) => {\n  return!isEqual(string, t);\n};\n\n/* Return true if string s is less than string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') < 'abc'\n  False\n  >>> strlen('abc') < 'def'\n  True\n  */\nconst isLessThan = (string, t) => {\n  return string < t;\n};\n\n/* Return true if string s is less than or equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  >>> strlen('abc') <= 'def'\n  False\n  */\nconst isLessThanOrEqual = (string, t) => {\n  return string <= t;\n};\n\n/* Return true if string s is greater than string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') > 'abc'\n  False\n  >>> strlen('abc') > 'def'\n  True\n  */\nconst isGreaterThan = (string, t) => {\n  return string > t;\n};\n\n/* Return true if string s is greater than or equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  >>> strlen('abc') >= 'def'\n  False\n  */\nconst isGreaterThanOrEqual = (string, t) => {\n  return string >= t;\n};\n\n/* Return true if string s is less than or equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  >>> strlen('abc') <= 'def'\n  True\n  */\nconst isLessThanOrEqual = (string, t) => {\n  return string <= t;\n};\n\n/* Return true if string s is greater than string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') > 'abc'\n  False\n  >>> strlen('abc') > 'def'\n  False\n  */\nconst isGreaterThan = (string, t) => {\n  return string > t;\n};\n\n/* Return true if string s is greater than string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') > 'abc'\n  False\n  >>> strlen('abc') > 'def'\n  True\n  */\nconst isNotGreaterThan = (string, t) => {\n  return!isGreaterThan(string, t);\n};\n\n/* Return true if string s is greater than or equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  >>> strlen('abc') >= 'def'\n  False\n  */\nconst isNotGreaterThanOrEqual = (string, t) => {\n  return!isGreaterThanOrEqual(string, t);\n};\n\n/* Return true if string s is less than string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') < 'abc'\n  False\n  >>> strlen('abc') < 'def'\n  True\n  */\nconst isLessThan = (string, t) => {\n  return string < t;\n};\n\n/* Return true if string s is less than or equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  >>> strlen('abc') <= 'def'\n  False\n  */\nconst isLessThanOrEqual = (string, t) => {\n  return string <= t;\n};\n\n/* Return true if string s is not less than string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') < 'abc'\n  False\n  >>> strlen('abc') < 'def'\n  True\n  */\nconst isNotLessThan = (string, t) => {\n  return!isLessThan(string, t);\n};\n\n/* Return true if string s is not less than or equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  >>> strlen('abc') <= 'def'\n  True\n  */\nconst isNotLessThanOrEqual = (string, t) => {\n  return!isLessThanOrEqual(string, t);\n};\n\n/* Return true if string s is not greater than string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') > 'abc'\n  False\n  >>> strlen('abc') > 'def'\n  False\n  */\nconst isNotGreaterThan = (string, t) => {\n  return!isGreaterThan(string, t);\n};\n\n/* Return true if string s is not greater than or equal to string t\n  >>> strlen('abc')\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  >>> strlen('abc') >= 'def'\n  False\n  */\nconst isNotGreaterThanOr", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a give n nu mber n ,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a give n nu mber n,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let result = 1;\n  let count = 1;\n  while (n > 1) {\n    if (n % count === 0) {\n      result = Math.max(result, count);\n      n = n / count;\n    } else {\n      count++;\n    }\n  }\n  return result;\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/25", "prompt": "/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    let j = 1;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    let j = 1;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    let j = 1;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    let j = 1;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    let j = 1;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    let j = 1;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    let j = 1;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set(numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate2 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate3 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate4 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate5 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate6 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate7 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate8 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate9 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate10 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate11 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate12 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate13 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate14 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate15 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate16 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate17 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate18 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 9) return true\n  const sqrt = Math.sqrt(n)\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(1000000)\n  false\n  >>> isPrime(100000001)\n  false\n  >>> isPrime(1000000001)\n  false\n  >>> isPrime(1000000002)\n  false\n  >>> isPrime(1000000003)\n  false\n  >>> isPrime(1000000004)\n  false\n  >>> isPrime(1000000005)\n  false\n  >>> isPrime(1000000006)\n  false\n  >>> isPrime(1000000007)\n  false\n  >>> isPrime(1000000008)\n  false\n  >>> isPrime(1000000009)\n  false\n  >>> isPrime(1000000010)\n  false\n  >>> isPrime(1000000011)\n  false\n  >>> isPrime(1000000012)\n  false\n  >>> isPrime(1000000013)\n  false\n  >>> isPrime(1000000014)\n  false\n  >>> isPrime(1000000015)\n  false\n  >>> isPrime(1000000016)\n  false\n  >>> isPrime(1000000017)\n  false\n  >>> isPrime(1000000018)\n  false\n  >>> isPrime(1000000019)\n  false\n  >>> isPrime(1000000020)\n  false\n  >>> isPrime(1000000021)\n  false\n  >>> isPrime(1000000022)\n  false\n  >>> isPrime(1000000023)\n  false\n  >>> isPrime(1000000024)\n  false\n  >>> isPrime(1000000025)\n  false\n  >>> isPrime(1000000026)\n  false\n  >>> isPrime(1000000027)\n  false\n  >>> isPrime(1000000028)\n  false\n  >>> isPrime(1000000029)\n  false\n  >>> isPrime(1000000030)\n  false\n  >>> isPrime(1000000031)\n  false\n  >>> isPrime(1000000032)\n  false\n  >>> isPrime(1000000033)\n  false\n  >>> isPrime(1000000034)\n  false\n  >>> isPrime(1000000035)\n  false\n  >>> isPrime(1000000036)\n  false\n  >>> isPrime(1000000037)\n  false\n  >>> isPrime(1000000038)\n  false\n  >>> isPrime(1000000039)\n  false\n  >>> isPrime(1000000040)\n  false\n  >>> isPrime(1000000041)\n  false\n  >>> isPrime(1000000042)\n  false\n  >>> isPrime(1000000043)\n  false\n  >>> isPrime(1000000044)\n  false\n  >>> isPrime(1000000045)\n  false\n  >>> isPrime(1000000046)\n  false\n  >>> isPrime(1000000047)\n  false\n  >>> isPrime(1000000048)\n  false\n  >>> isPrime(1000000049)\n  false\n  >>> isPrime(1000000050)\n  false\n  >>> isPrime(1000000051)\n  false\n  >>> isPrime(1000000052)\n  false\n  >>> isPrime(1000000053)\n  false\n  >>> isPrime(1000000054)\n  false\n  >>> isPrime(1000000055)\n  false\n  >>> isPrime(1000000056)\n  false\n  >>> isPrime(1000000057)\n  false\n  >>> isPrime(1000000058)\n  false\n  >>> isPrime(1000000059)\n  false\n  >>> isPrime(1000000060)\n  false\n  >>> isPrime(1000000061)\n  false\n  >>> isPrime(1000000062)\n  false\n  >>> isPrime(1000000063)\n  false\n  >>> isPrime(1000000064)\n  false\n  >>> isPrime(1000000065)\n  false\n  >>> isPrime(1000000066)\n  false\n  >>> isPrime(1000000067)\n  false\n  >>> isPrime(1000000068)\n  false\n  >>> isPrime(1000000069)\n  false\n  >>> isPrime(1000000070)\n  false\n  >>> isPrime(1000000071)\n  false\n  >>> isPrime(1000000072)\n  false\n  >>> isPrime(1000000073)\n  false\n  >>> isPrime(1000000074)\n  false\n  >>> isPrime(1000000075)\n  false\n  >>> isPrime(1000000076)\n  false\n  >>> isPrime(1000000077)\n  false\n  >>> isPrime(1000000078)\n  false\n  >>> isPrime(1000000079)\n  false\n  >>> isPrime(1000000080)\n  false\n  >>> isPrime(1000000081)\n  false\n  >>> isPrime(1000000082)\n  false\n  >>> isPrime(1000000083)\n  false\n  >>> isPrime(1000000084)\n  false\n  >>> isPrime(1000000085)\n  false\n  >>> isPrime(1000000086)\n  false\n  >>> isPrime(1000000087)\n  false\n  >>> isPrime(1000000088)\n  false\n  >>> isPrime(1000000089)\n  false\n  >>> isPrime(1000000090)\n  false\n  >>> isPrime(1000000091)\n  false\n  >>> isPrime(1000000092)\n  false\n  >>> isPrime(1000000093)\n  false\n  >>> isPrime(1000000094)\n  false\n  >>> isPrime(1000000095)\n  false\n  >>> isPrime(1000000096)\n  false\n  >>>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 + .... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let max = xs[0];\n  let min = xs[0];\n  for (let i = 1; i < n; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  let x = (max - min) / 2;\n  let y = poly(x);\n  let z = poly(x - 1);\n  let xs0 = xs.slice(0);\n  let xs1 = xs.slice(1);\n  let xs2 = xs.slice(2);\n  let xs3 = xs.slice(3);\n  let xs4 = xs.slice(4);\n  let xs5 = xs.slice(5);\n  let xs6 = xs.slice(6);\n  let xs7 = xs.slice(7);\n  let xs8 = xs.slice(8);\n  let xs9 = xs.slice(9);\n  let xs10 = xs.slice(10);\n  let xs11 = xs.slice(11);\n  let xs12 = xs.slice(12);\n  let xs13 = xs.slice(13);\n  let xs14 = xs.slice(14);\n  let xs15 = xs.slice(15);\n  let xs16 = xs.slice(16);\n  let xs17 = xs.slice(17);\n  let xs18 = xs.slice(18);\n  let xs19 = xs.slice(19);\n  let xs20 = xs.slice(20);\n  let xs21 = xs.slice(21);\n  let xs22 = xs.slice(22);\n  let xs23 = xs.slice(23);\n  let xs24 = xs.slice(24);\n  let xs25 = xs.slice(25);\n  let xs26 = xs.slice(26);\n  let xs27 = xs.slice(27);\n  let xs28 = xs.slice(28);\n  let xs29 = xs.slice(29);\n  let xs30 = xs.slice(30);\n  let xs31 = xs.slice(31);\n  let xs32 = xs.slice(32);\n  let xs33 = xs.slice(33);\n  let xs34 = xs.slice(34);\n  let xs35 = xs.slice(35);\n  let xs36 = xs.slice(36);\n  let xs37 = xs.slice(37);\n  let xs38 = xs.slice(38);\n  let xs39 = xs.slice(39);\n  let xs40 = xs.slice(40);\n  let xs41 = xs.slice(41);\n  let xs42 = xs.slice(42);\n  let xs43 = xs.slice(43);\n  let xs44 = xs.slice(44);\n  let xs45 = xs.slice(45);\n  let xs46 = xs.slice(46);\n  let xs47 = xs.slice(47);\n  let xs48 = xs.slice(48);\n  let xs49 = xs.slice(49);\n  let xs50 = xs.slice(50);\n  let xs51 = xs.slice(51);\n  let xs52 = xs.slice(52);\n  let xs53 = xs.slice(53);\n  let xs54 = xs.slice(54);\n  let xs55 = xs.slice(55);\n  let xs56 = xs.slice(56);\n  let xs57 = xs.slice(57);\n  let xs58 = xs.slice(58);\n  let xs59 = xs.slice(59);\n  let xs60 = xs.slice(60);\n  let xs61 = xs.slice(61);\n  let xs62 = xs.slice(62);\n  let xs63 = xs.slice(63);\n  let xs64 = xs.slice(64);\n  let xs65 = xs.slice(65);\n  let xs66 = xs.slice(66);\n  let xs67 = xs.slice(67);\n  let xs68 = xs.slice(68);\n  let xs69 = xs.slice(69);\n  let xs70 = xs.slice(70);\n  let xs71 = xs.slice(71);\n  let xs72 = xs.slice(72);\n  let xs73 = xs.slice(73);\n  let xs74 = xs.slice(74);\n  let xs75 = xs.slice(75);\n  let xs76 = xs.slice(76);\n  let xs77 = xs", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sorted2 = []\n  const sorted3 = []\n  const sorted4 = []\n  const sorted5 = []\n  const sorted6 = []\n  const sorted7 = []\n  const sorted8 = []\n  const sorted9 = []\n  const sorted10 = []\n  const sorted11 = []\n  const sorted12 = []\n  const sorted13 = []\n  const sorted14 = []\n  const sorted15 = []\n  const sorted16 = []\n  const sorted17 = []\n  const sorted18 = []\n  const sorted19 = []\n  const sorted20 = []\n  const sorted21 = []\n  const sorted22 = []\n  const sorted23 = []\n  const sorted24 = []\n  const sorted25 = []\n  const sorted26 = []\n  const sorted27 = []\n  const sorted28 = []\n  const sorted29 = []\n  const sorted30 = []\n  const sorted31 = []\n  const sorted32 = []\n  const sorted33 = []\n  const sorted34 = []\n  const sorted35 = []\n  const sorted36 = []\n  const sorted37 = []\n  const sorted38 = []\n  const sorted39 = []\n  const sorted40 = []\n  const sorted41 = []\n  const sorted42 = []\n  const sorted43 = []\n  const sorted44 = []\n  const sorted45 = []\n  const sorted46 = []\n  const sorted47 = []\n  const sorted48 = []\n  const sorted49 = []\n  const sorted50 = []\n  const sorted51 = []\n  const sorted52 = []\n  const sorted53 = []\n  const sorted54 = []\n  const sorted55 = []\n  const sorted56 = []\n  const sorted57 = []\n  const sorted58 = []\n  const sorted59 = []\n  const sorted60 = []\n  const sorted61 = []\n  const sorted62 = []\n  const sorted63 = []\n  const sorted64 = []\n  const sorted65 = []\n  const sorted66 = []\n  const sorted67 = []\n  const sorted68 = []\n  const sorted69 = []\n  const sorted70 = []\n  const sorted71 = []\n  const sorted72 = []\n  const sorted73 = []\n  const sorted74 = []\n  const sorted75 = []\n  const sorted76 = []\n  const sorted77 = []\n  const sorted78 = []\n  const sorted79 = []\n  const sorted80 = []\n  const sorted81 = []\n  const sorted82 = []\n  const sorted83 = []\n  const sorted84 = []\n  const sorted85 = []\n  const sorted86 = []\n  const sorted87 = []\n  const sorted88 = []\n  const sorted89 = []\n  const sorted90 = []\n  const sorted91 = []\n  const sorted92 = []\n  const sorted93 = []\n  const sorted94 = []\n  const sorted95 = []\n  const sorted96 = []\n  const sorted97 = []\n  const sorted98 = []\n  const sorted99 = []\n  const sorted100 = []\n  const sorted101 = []\n  const sorted102 = []\n  const sorted103 = []\n  const sorted104 = []\n  const sorted105 = []\n  const sorted106 = []\n  const sorted107 = []\n  const sorted108 = []\n  const sorted109 = []\n  const sorted110 = []\n  const sorted111 = []\n  const sorted112 = []\n  const sorted113 = []\n  const sorted114 = []\n  const sorted115 = []\n  const sorted116 = []\n  const sorted117 = []\n  const sorted118 = []\n  const sorted119 = []\n  const sorted120 = []\n  const sorted121 = []\n  const sorted122 = []\n  const sorted123 = []\n  const sorted124 = []\n  const sorted125 = []\n  const sorted126 = []\n  const sorted127 = []\n  const sorted128 = []\n  const sorted129 = []\n  const sorted130 = []\n  const sorted131 = []\n  const sorted132 = []\n  const sorted133 = []\n  const sorted134 = []\n  const sorted135 = []\n  const sorted136 = []\n  const sorted137 = []\n  const sorted138 = []\n  const sorted139 = []\n  const sorted140 = []\n  const sorted141 = []\n  const sorted142 = []\n  const sorted143 = []\n  const sorted144 = []\n  const sorted145 = []\n  const sorted146 = []\n  const sorted147 = []\n  const sorted148 = []\n  const sorted149 = []\n  const sorted150 = []\n  const sorted151 = []\n  const sorted152 = []\n  const sorted153 = []\n  const sorted154 = []\n  const sorted155 = []\n  const sorted156 = []\n  const sorted157 = []\n  const sorted158 = []\n  const sorted159 = []\n  const sorted160 = []\n  const sorted161 = []\n  const sorted162 = []\n  const sorted163 = []\n  const sorted164 = []\n  const sorted165 = []\n  const sorted166 = []\n  const sorted167 = []\n  const sorted168 = []\n  const sorted169 = []\n  const sorted170 = []\n  const sorted171 = []\n  const sorted172 = []\n  const sorted173 = []\n  const sorted174 = []\n  const sorted175 = []\n  const sorted176 = []\n  const sorted177 = []\n  const sorted178 = []\n  const sorted179 = []\n  const sorted180 = []\n  const sorted181 = []\n  const sorted182 = []\n  const sorted183 = []\n  const sorted184 = []\n  const sorted185 = []\n  const sorted186 = []\n  const sorted187 = []\n  const sorted188 = []\n  const sorted189 = []\n  const sorted190 = []\n  const sorted191 = []\n  const sorted192 = []\n  const sorted193 = []\n  const sorted194 = []\n  const sorted195 = []\n  const sorted196 = []\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter(x => seen.add(x));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn2 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn2([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn3 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn3([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn4 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn4([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn5 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn5([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn6 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn6([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn7 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn7([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn8 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn8([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn9 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn9([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn10 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn10([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn11 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn11([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn12 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn12([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn13 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn13([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn14 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueByFn14([5, 3, 5, 2, 3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      console.log(i);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(78);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = sortEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic2 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic3 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic4 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic5 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic6 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic7 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic8 = (s) => {\n  var groups =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let a = 1, b = 2, c = 3, d = 5, e = 7, f = 11, g = 13, h = 17, i = 19, j = 23, k = 29, l = 31, m = 37, n = 41, o = 43, p = 47, q = 53, r = 59, s = 61, t = 67, u = 71, v = 73, w = 79, x = 83, y = 89, z = 97, A = 101, B = 103, C = 107, D = 109, E = 113, F = 127, G = 131, H = 137, I = 139, J = 149, K = 151, L = 157, M = 163, N = 167, O = 173, P = 179, Q = 181, R = 191, S = 193, T = 197, U = 199, V = 211, W = 223, X = 227, Y = 229, Z = 233, aa = 239, bb = 241, cc = 247, dd = 251, ee = 257, ff = 263, gg = 269, hh = 271, ii = 277, jj = 281, kk = 283, ll = 293, mm = 307, nn = 311, oo = 313, pp = 317, qq = 331, rr = 337, ss = 347, tt = 349, uu = 353, vv = 359, ww = 367, xx = 373, yy = 379, zz = 383, aaa = 389, bbb = 397, ccc = 401, ddd = 409, eee = 419, fff = 421, ggg = 431, hhh = 433, iii = 439, jjj = 447, kkk = 457, lll = 461, mmm = 463, nnn = 467, ooo = 479, ppp = 487, qqq = 491, rrr = 499, sss = 503, ttt = 509, uuu = 521, vvv = 523, www = 541, xxx = 547, yyy = 557, zzz = 563, aaaa = 587, bbbb = 593, cccc = 599, dddd = 601, eeee = 607, ffff = 613, gggg = 617, hhhh = 619, iiii = 631, jjjj = 633, kkkk = 653, llll = 659, mmmm = 661, nnnn = 673, oooo = 677, pppp = 683, qqqq = 691, rrrr = 701, ssss = 709, tttt = 719, uuuu = 727, vvvv = 733, wwww = 739, xxxx = 743, yyyy = 751, zzzz = 757, aaaaa = 761, bbbbb = 763, ccccc = 767, ddddd = 769, eeeee = 773, fffff = 787, ggggg = 797, hhhhh = 799, iiiii = 809, jjjjj = 811, kkkkk = 821, lllll = 823, mmmmmm = 827, nnnnn = 829, ooooo = 839, ppppp = 853, qqqqq = 857, rrrrr = 859, sssss = 863, ttttt = 877, uuuuu = 881, vvvvv = 883, wwwww = 887, xxxxx = 907, yyyyy = 911, zzzzz = 919, aaaaaa = 929, bbbbbb = 931, cccccc = 937, dddddd = 941, eeeeee = 947, ffffff = 953, gggggg = 967, hhhhhh = 971, iiiiii = 977, jjjjjj = 981, kkkkkk = 983, llllll = 991, mmmmmm = 997, nnnnnn = 1009, oooooo = 1013, pppppp = 1019, qqqqqq = 1021, rrrrrr = 1031, ssssss = 1033, tttttt = 1039, uuuuuu = 1049, vvvvvv = 1051, wwwwww = 1063, xxxxxxx = 1087, yyyyyyy = 1097, zzzzzzz = 1103, aaaaaaaa = 1109, bbbbbbbb = 1117, cccccccc = 1123, ddddddd = 1129, eeeeeeee = 1131, ffffffff = 1133, gggggggg = 1147, hhhhhhhh = 1151, iiiiiiii = 1159, jjjjjjjj = 1163, kkkkkkkk = 1171, llllllll = 1181, mmmmmmmmm = 1181, nnnnnnnn = 1187, oooooooo = 1193, pppppppp = 1201, qqqqqqqq = 1213, rrrrrrrr = 1217, ssssssss = 1223, tttttttt = 1231, uuuuuuuu = 1237, vvvvvvvv = 1249, wwwwwwww = 1259, xxxxxxxx = 1277, yyyyyyyy = 1279, zzzzzzzz = 1283, aaaaaaaaa = 1289, bbbbbbbbb = 1297, ccccccccc = 1301, ddddddddd = 1303, eeeeeeeee = 1307, fffffffff = 1319, ggggggggg = 1321, hhhhhhhhh = 1327, iiiiiiiii = 1361, jjjjjjjjj = 1367, kkkkkkkkk = 1371, lllllllll = 1381, mmmmmmmmm = 1399, nnnnnnnnn = 1409, ooooooo = 1423, ppppppppp = 1427, qqqqqqqqq = 1433, rrrrrrrrr = 1439, sssssssss = 1447, ttttttttt = 1453, uuuuuuuuu = 1459, vvvvvvvvv = 1471, wwwwwwwww = 1481", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers.map(number => Math.abs(number - mean)));\n  return mean(deviation);\n};\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n  triplesSumToZeroToListToArray\n  it returns the list of the elements of the list that sum to zero.\n  */\nconst triplesSumToZeroToListToArray = (l) => {\n    let sum = 0;\n    let list = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            list.push(l[i]);\n        }\n    }\n    return list;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n};\n\n/*\n  triplesSumToZeroToArray\n  it returns the array of the elements of the array that sum to zero.\n  */\nconst triplesSumToZeroToArray = (l) => {\n    let sum = 0;\n    let array = [];\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            array.push(l[i]);\n        }\n    }\n    return array;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other .  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other.  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace2 = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace3 = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace4 = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace5 = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace6 = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace7 = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.width > otherCar.x && car.y < otherCar.y + otherCar.height && car.y + car.height > otherCar.y) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace8 = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new car(i))\n  }\n  let collisions = 0\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x + otherCar.width && car.x + car.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero3 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero4 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero5 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero6 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero7 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero8 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero9 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (x < 0) {\n      return acc\n    }\n    if (acc === 0) {\n      return false\n    }\n    if (acc === sum) {\n      return true\n    }\n    return false\n  }, true)\n}\n\nconst pairsSumToZero10 = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0)\n  return l.reduce((acc, x, i, l) => {\n    if (x === 0) {\n      return acc\n    }\n    if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase2 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase3 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase4 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase5 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase6 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase7 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase8 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase9 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase10 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase11 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase12 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase13 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase14 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase15 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase16 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');\n  const res2 = [];\n  for (let i = 0; i < res.length; i++) {\n    res2.push(res[i]);\n  }\n  return res2.join('');\n};\n\nconst changeBase17 = (x, base) => {\n  const num = x.toString(base);\n  const res = num.split('');", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given lengt h of  a sid e  and h igh retur n area for a triangle .\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given lengt h of  a sid e  and h igh retur n area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>> triangleArea(3, 4, 5, [3, 4, 5])\n  10\n  */\nconst triangleArea = (a, b, c, p) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a) - triangleArea(a, p) - triangleArea(b, p) - triangleArea(c, p);\n};\n\n/*\n  Given a triangle with sides a, b, c and a point p, return the area of the triangle.\n  >>>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\n/*\n  >>> median([3, 1, 2, 4, 5", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if n is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let nmodu = n % p\n  let nmodu_p = nmodu % p\n  let nmodu_p_p = nmodu_p % p\n  let nmodu_p_p_p = nmodu_p_p % p\n  let nmodu_p_p_p_p = nmodu_p_p_p % p\n  let nmodu_p_p_p_p_p = nmodu_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p = nmodu_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p = nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p % p\n  let nmodu_p_p_p_p_p_p_p_p_p_p_p_p_p_p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else {\n      result.push(numbers[i]);\n      result.push(delimeter);\n      i++;\n      j = 0;\n    }\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded version of the input string.\n  */\nconst encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode_encode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode_encode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode_encode_encode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded version of the input string.\n  */\nconst decode_encode_encode_encode_encode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa1 = 0\n  let bb1 = 0\n  let cc1 = 0\n  let dd1 = 0\n  let ee1 = 0\n  let ff1 = 0\n  let gg1 = 0\n  let hh1 = 0\n  let ii1 = 0\n  let jj1 = 0\n  let kk1 = 0\n  let ll1 = 0\n  let mm1 = 0\n  let nn1 = 0\n  let oo1 = 0\n  let pp1 = 0\n  let qq1 = 0\n  let rr1 = 0\n  let ss1 = 0\n  let tt1 = 0\n  let uu1 = 0\n  let vv1 = 0\n  let ww1 = 0\n  let xx1 = 0\n  let yy1 = 0\n  let zz1 = 0\n  let aa2 = 0\n  let bb2 = 0\n  let cc2 = 0\n  let dd2 = 0\n  let ee2 = 0\n  let ff2 = 0\n  let gg2 = 0\n  let hh2 = 0\n  let ii2 = 0\n  let jj2 = 0\n  let kk2 = 0\n  let ll2 = 0\n  let mm2 = 0\n  let nn2 = 0\n  let oo2 = 0\n  let pp2 = 0\n  let qq2 = 0\n  let rr2 = 0\n  let ss2 = 0\n  let tt2 = 0\n  let uu2 = 0\n  let vv2 = 0\n  let ww2 = 0\n  let xx2 = 0\n  let yy2 = 0\n  let zz2 = 0\n  while (i < textLength) {\n    if (text[i] === vowels[0]) {\n      if (i + vowelsLength === textLength) {\n        return text\n      }\n      if (text[i + vowelsLength] === vowels[1]) {\n        if (i + vowelsLength + vowelsLength === textLength) {\n          return text\n        }\n        if (text[i + vowelsLength + vowelsLength] === vowels[2]) {\n          if (i + vowelsLength + vowelsLength + vowelsLength === textLength) {\n            return text\n          }\n          if (text[i + vowelsLength + vowelsLength + vowelsLength] === vowels[3]) {\n            if (i + vowelsLength + vowelsLength + vowelsLength + vowelsLength === textLength) {\n              return text\n            }\n            if (text[i + vowelsLength + vowelsLength + vowelsLength + vowelsLength] === vowels[4]) {\n              if (i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength === textLength) {\n                return text\n              }\n              if (text[i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength] === vowels[5]) {\n                if (i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength === textLength) {\n                  return text\n                }\n                if (text[i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength] === vowels[6]) {\n                  if (i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength === textLength) {\n                    return text\n                  }\n                  if (text[i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength] === vowels[7]) {\n                    if (i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength === textLength) {\n                      return text\n                    }\n                    if (text[i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength] === vowels[8]) {\n                      if (i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength === textLength) {\n                        return text\n                      }\n                      if (text[i + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength + vowelsLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return true;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return true;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < t) {\n      return true;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x, y) => {\n  return x + y;\n};\n\nconst add61 = (x, y) => {\n  return x + y;\n};\n\nconst add62 = (x, y) => {\n  return x + y;\n};\n\nconst add63 = (x, y) => {\n  return x + y;\n};\n\nconst add64 = (x, y) => {\n  return x + y;\n};\n\nconst add65 = (x, y) => {\n  return x + y;\n};\n\nconst add66 = (x, y) => {\n  return x + y;\n};\n\nconst add67 = (x, y) => {\n  return x + y;\n};\n\nconst add68 = (x, y) => {\n  return x + y;\n};\n\nconst add69", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s = s0.toLowerCase();\n    const t = s1.toLowerCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    const s = s0.toUpperCase();\n    const t = s1.toUpperCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n    const s = s0.toUpperCase();\n    const t = s1.toUpperCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n    const s = s0.toLowerCase();\n    const t = s1.toLowerCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n    const s = s0.toUpperCase();\n    const t = s1.toUpperCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n    const s = s0.toUpperCase();\n    const t = s1.toUpperCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n    const s = s0.toLowerCase();\n    const t = s1.toLowerCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n    const s = s0.toUpperCase();\n    const t = s1.toUpperCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n    const s = s0.toUpperCase();\n    const t = s1.toUpperCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n    const s = s0.toLowerCase();\n    const t = s1.toLowerCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n    const s = s0.toUpperCase();\n    const t = s1.toUpperCase();\n    if (s.length!== t.length) {\n        return false;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th  Fib onacci number .\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*Return n-th  Fib onacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib(10));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    let bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(\"<\");\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const common_list = [];\n  for (let i = 0; i < l1_len; i++) {\n    const item = l1[i];\n    if (l2.indexOf(item)!== -1) {\n      common_list.push(item);\n    }\n  }\n  return common_list;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 2\n  if (n % 2 === 0) return largestPrimeFactor(n / 2)\n  if (n % 3 === 0) return largestPrimeFactor(n / 3)\n  if (n % 5 === 0) return largestPrimeFactor(n / 5)\n  if (n % 7 === 0) return largestPrimeFactor(n / 7)\n  if (n % 11 === 0) return largestPrimeFactor(n / 11)\n  if (n % 13 === 0) return largestPrimeFactor(n / 13)\n  if (n % 17 === 0) return largestPrimeFactor(n / 17)\n  if (n % 19 === 0) return largestPrimeFactor(n / 19)\n  if (n % 23 === 0) return largestPrimeFactor(n / 23)\n  if (n % 29 === 0) return largestPrimeFactor(n / 29)\n  if (n % 31 === 0) return largestPrimeFactor(n / 31)\n  if (n % 37 === 0) return largestPrimeFactor(n / 37)\n  if (n % 41 === 0) return largestPrimeFactor(n / 41)\n  if (n % 43 === 0) return largestPrimeFactor(n / 43)\n  if (n % 47 === 0) return largestPrimeFactor(n / 47)\n  if (n % 53 === 0) return largestPrimeFactor(n / 53)\n  if (n % 59 === 0) return largestPrimeFactor(n / 59)\n  if (n % 61 === 0) return largestPrimeFactor(n / 61)\n  if (n % 67 === 0) return largestPrimeFactor(n / 67)\n  if (n % 71 === 0) return largestPrimeFactor(n / 71)\n  if (n % 73 === 0) return largestPrimeFactor(n / 73)\n  if (n % 79 === 0) return largestPrimeFactor(n / 79)\n  if (n % 83 === 0) return largestPrimeFactor(n / 83)\n  if (n % 89 === 0) return largestPrimeFactor(n / 89)\n  if (n % 97 === 0) return largestPrimeFactor(n / 97)\n  if (n % 101 === 0) return largestPrimeFactor(n / 101)\n  if (n % 103 === 0) return largestPrimeFactor(n / 103)\n  if (n % 107 === 0) return largestPrimeFactor(n / 107)\n  if (n % 109 === 0) return largestPrimeFactor(n / 109)\n  if (n % 113 === 0) return largestPrimeFactor(n / 113)\n  if (n % 127 === 0) return largestPrimeFactor(n / 127)\n  if (n % 131 === 0) return largestPrimeFactor(n / 131)\n  if (n % 137 === 0) return largestPrimeFactor(n / 137)\n  if (n % 139 === 0) return largestPrimeFactor(n / 139)\n  if (n % 149 === 0) return largestPrimeFactor(n / 149)\n  if (n % 151 === 0) return largestPrimeFactor(n / 151)\n  if (n % 157 === 0) return largestPrimeFactor(n / 157)\n  if (n % 163 === 0) return largestPrimeFactor(n / 163)\n  if (n % 167 === 0) return largestPrimeFactor(n / 167)\n  if (n % 179 === 0) return largestPrimeFactor(n / 179)\n  if (n % 181 === 0) return largestPrimeFactor(n / 181)\n  if (n % 191 === 0) return largestPrimeFactor(n / 191)\n  if (n % 193 === 0) return largestPrimeFactor(n / 193)\n  if (n % 197 === 0) return largestPrimeFactor(n / 197)\n  if (n % 199 === 0) return largestPrimeFactor(n / 199)\n  if (n % 211 === 0) return largestPrimeFactor(n / 211)\n  if (n % 223 === 0) return largestPrimeFactor(n / 223)\n  if (n % 227 === 0) return largestPrimeFactor(n / 227)\n  if (n % 229 === 0) return largestPrimeFactor(n / 229)\n  if (n % 233 === 0) return largestPrimeFactor(n / 233)\n  if (n % 239 === 0) return largestPrimeFactor(n / 239)\n  if (n % 241 === 0) return largestPrimeFactor(n / 241)\n  if (n % 251 === 0) return largestPrimeFactor(n / 251)\n  if (n % 257 === 0) return largestPrimeFactor(n / 257)\n  if (n % 263 === 0) return largestPrimeFactor(n / 263)\n  if (n % 269 === 0) return largestPrimeFactor(n / 269)\n  if (n % 271 === 0) return largestPrimeFactor(n / 271)\n  if (n % 277 === 0) return largestPrimeFactor(n / 277)\n  if (n % 281 === 0) return largestPrimeFactor(n / 281)\n  if (n % 283 === 0) return largestPrimeFactor(n / 283)\n  if (n % 293 === 0) return largestPrimeFactor(n / 293)\n  if (n % 307 === 0) return largestPrimeFactor(n / 307)\n  if (n % 311 === 0) return largestPrimeFactor(n / 311)\n  if (n % 313 === 0) return largestPrimeFactor(n / 313)\n  if (n % 317 === 0) return largestPrimeFactor(n / 317)\n  if (n % 319 === 0) return largestPrimeFactor(n / 319)\n  if (n % 331 === 0) return largestPrimeFactor(n / 331)\n  if (n % 337 === 0) return largestPrimeFactor(n / 337)\n  if (n % 347 === 0) return largestPrimeFactor(n / 347)\n  if (n % 349 === 0) return largestPrimeFactor(n / 349)\n  if (n % 353 === 0) return largestPrimeFactor(n / 353)\n  if (n % 359 === 0) return largestPrimeFactor(n / 359)\n  if (n % 367 === 0) return largestPrimeFactor(n / 367)\n  if (n % 373 === 0) return largestPrimeFactor(n / 373)\n  if (n % 379 === 0) return largestPrimeFactor(n / 379)\n  if (n %", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es .\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const paren_array_length = paren_array.length;\n  const paren_array_deepest = paren_array.map((x) => {\n    return parseNestedParens(x);\n  });\n  const paren_array_deepest_length = paren_array_deepest.length;\n  return paren_array_deepest_length - 1;\n};\n\n/*\n  Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const paren_array_length = paren_array.length;\n  const paren_array_deepest = paren_array.map((x) => {\n    return parseNestedParens2(x);\n  });\n  const paren_array_deepest_length = paren_array_deepest.length;\n  return paren_array_deepest_length - 1;\n};\n\n/*\n  Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const paren_array_length = paren_array.length;\n  const paren_array_deepest = paren_array.map((x) => {\n    return parseNestedParens3(x);\n  });\n  const paren_array_deepest_length = paren_array_deepest.length;\n  return paren_array_deepest_length - 1;\n};\n\n/*\n  Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const paren_array_length = paren_array.length;\n  const paren_array_deepest = paren_array.map((x) => {\n    return parseNestedParens4(x);\n  });\n  const paren_array_deepest_length = paren_array_deepest.length;\n  return paren_array_deepest_length - 1;\n};\n\n/*\n  Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const paren_array_length = paren_array.length;\n  const paren_array_deepest = paren_array.map((x) => {\n    return parseNestedParens5(x);\n  });\n  const paren_array_deepest_length = paren_array_deepest.length;\n  return paren_array_deepest_length - 1;\n};\n\n/*\n  Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const paren_array_length = paren_array.length;\n  const paren_array_deepest = paren_array.map((x) => {\n    return parseNestedParens6(x);\n  });\n  const paren_array_deepest_length = paren_array_deepest.length;\n  return paren_array_deepest_length - 1;\n};\n\n/*\n  Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" || brackets[i] === \")\") {\n      stack.push(brackets[i]);\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      if (stack[stack.length - 1] === brackets[i]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the string with all the spaces removed.\n  \n  >>> removeSpaces(\"  hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world \")\n  'hello world'\n  >>> removeSpaces(\" hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world\")\n  'hello world'\n  >>> removeSpaces(\"hello world", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 + ....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g .\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits , return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits, return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s;\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n - shift;\n  if (r < 0) {\n    r = n + r;\n  }\n  s = s.substr(r, n - r);\n  return s.split('').reverse().join('');\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let r = n -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"World\") => 2\n      contains(\"Hello World\", \"Hello\") => 1\n      contains(\"Hello World\", \"World\") => 1\n  */\nconst contains = (s, substr) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(substr)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains a given substring.\n  Examples:\n      contains(\"Hello World\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\" ,120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\",120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n  let arr = s.split(\" \")\n  let count = 0\n  for(let i = 0; i < arr.length; i++){\n    count += parseInt(arr[i])\n  }\n  return count - n\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3))\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\nconsole.log(fruitDistribution(\"1 00 apples and 1 oranges\",120))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return [min, minIndex];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list .\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list.\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search2 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search3 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search4 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search5 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search6 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search7 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search8 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search9 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search10 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search11 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search12 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  return maxFreq;\n};\n\nconst search13 = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > 0 && curr > max) {\n      max = curr;\n      maxFreq = i + 1;\n    }\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'f')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'g')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'h')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'i')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'j')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'k')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'l')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'m')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'n')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'o')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'p')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'q')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'r')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'s')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 't')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'u')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'v')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'w')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'x')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'y')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'z')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '0')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '1')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '2')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '3')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '4')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '5')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '6')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '7')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '8')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '9')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'f')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'g')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'h')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value ,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const sorted = lst.slice()\n  let min = sorted[0]\n  let max = sorted[0]\n  let i = 1\n  while (i < len) {\n    if (sorted[i] < min) {\n      min = sorted[i]\n    }\n    if (sorted[i] > max) {\n      max = sorted[i]\n    }\n    i++\n  }\n  let j = 0\n  while (j < len) {\n    if (sorted[j] === min) {\n      sorted[j] = max\n      sorted[j + 1] = min\n      j++\n    } else if (sorted[j] === max) {\n      sorted[j] = min\n      sorted[j + 1] = max\n      j++\n    } else {\n      j++\n    }\n  }\n  return sorted\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea2 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea3 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea4 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea5 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea6 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea7 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea8 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea9 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea10 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea11 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea12 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea13 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea14 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea15 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea16 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b) / 2;\n};\n\nconst triangleArea17 = (a, b, c) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  let sum = 0\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i]\n  }\n  if (sum > w) return false\n  let max = 0\n  for (let i = 0; i < q.length; i++) {\n    if (q[i] > max) max = q[i]\n  }\n  let sum2 = 0\n  for (let i = 0; i < q.length; i++) {\n    sum2 += q[i]\n  }\n  if (sum2 > w) return false\n  return true\n}\n\n/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  if (q.length === 0) return false\n  let sum = 0\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i]\n  }\n  if (sum > w) return false\n  let max = 0\n  for (let i = 0; i < q.length; i++) {\n    if (q[i] > max) max = q[i]\n  }\n  let sum2 = 0\n  for (let i = 0; i < q.length; i++) {\n    sum2 += q[i]\n  }\n  if (sum2 > w) return false\n  return true\n}\n\n/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  if (q.length === 0) return false\n  let sum = 0\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i]\n  }\n  if (sum > w) return false\n  let max = 0\n  for (let i = 0; i < q.length; i++) {\n    if (q[i] > max) max = q[i]\n  }\n  let sum2 = 0\n  for (let i = 0; i < q.length; i++) {\n    sum2 += q[i]\n  }\n  if (sum2 > w) return false\n  return true\n}\n\n/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly4 = (q, w) => {\n  if (q.length === 0) return false\n  let sum = 0\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i]\n  }\n  if (sum > w) return false\n  let max = 0\n  for (let i =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length\n  let min = len\n  let i = 0\n  let j = len - 1\n  let min_change = 0\n  let change = 0\n  let flag = 0\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      change = Math.abs(arr[i] - arr[j])\n      if (change < min) {\n        min = change\n        min_change = i\n        flag = 1\n      }\n    }\n    i++\n    j--\n  }\n  if (flag) {\n    return min_change\n  } else {\n    return 0\n  }\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0 || len2 === 0) return []\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0 || len2 === 0) return []\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0 || len2 === 0) return []\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0 || len2 === 0) return []\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 1;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a === 3) {\n    return true;\n  }\n  if (a === 5) {\n    return true;\n  }\n  if (a === 7) {\n    return true;\n  }\n  if (a === 11) {\n    return true;\n  }\n  if (a === 13) {\n    return true;\n  }\n  if (a === 17) {\n    return true;\n  }\n  if (a === 19) {\n    return true;\n  }\n  if (a === 23) {\n    return true;\n  }\n  if (a === 29) {\n    return true;\n  }\n  if (a === 31) {\n    return true;\n  }\n  if (a === 37) {\n    return true;\n  }\n  if (a === 41) {\n    return true;\n  }\n  if (a === 43) {\n    return true;\n  }\n  if (a === 47) {\n    return true;\n  }\n  if (a === 53) {\n    return true;\n  }\n  if (a === 59) {\n    return true;\n  }\n  if (a === 61) {\n    return true;\n  }\n  if (a === 67) {\n    return true;\n  }\n  if (a === 71) {\n    return true;\n  }\n  if (a === 73) {\n    return true;\n  }\n  if (a === 79) {\n    return true;\n  }\n  if (a === 83) {\n    return true;\n  }\n  if (a === 89) {\n    return true;\n  }\n  if (a === 97) {\n    return true;\n  }\n  if (a === 101) {\n    return true;\n  }\n  if (a === 103) {\n    return true;\n  }\n  if (a === 107) {\n    return true;\n  }\n  if (a === 109) {\n    return true;\n  }\n  if (a === 113) {\n    return true;\n  }\n  if (a === 127) {\n    return true;\n  }\n  if (a === 131) {\n    return true;\n  }\n  if (a === 137) {\n    return true;\n  }\n  if (a === 139) {\n    return true;\n  }\n  if (a === 149) {\n    return true;\n  }\n  if (a === 151) {\n    return true;\n  }\n  if (a === 157) {\n    return true;\n  }\n  if (a === 163) {\n    return true;\n  }\n  if (a === 167) {\n    return true;\n  }\n  if (a === 169) {\n    return true;\n  }\n  if (a === 173) {\n    return true;\n  }\n  if (a === 179) {\n    return true;\n  }\n  if (a === 181) {\n    return true;\n  }\n  if (a === 191) {\n    return true;\n  }\n  if (a === 193) {\n    return true;\n  }\n  if (a === 197) {\n    return true;\n  }\n  if (a === 199) {\n    return true;\n  }\n  if (a === 211) {\n    return true;\n  }\n  if (a === 223) {\n    return true;\n  }\n  if (a === 227) {\n    return true;\n  }\n  if (a === 229) {\n    return true;\n  }\n  if (a === 233) {\n    return true;\n  }\n  if (a === 239) {\n    return true;\n  }\n  if (a === 241) {\n    return true;\n  }\n  if (a === 251) {\n    return true;\n  }\n  if (a === 257) {\n    return true;\n  }\n  if (a === 263) {\n    return true;\n  }\n  if (a === 269) {\n    return true;\n  }\n  if (a === 271) {\n    return true;\n  }\n  if (a === 277) {\n    return true;\n  }\n  if (a === 281) {\n    return true;\n  }\n  if (a === 283) {\n    return true;\n  }\n  if (a === 293) {\n    return true;\n  }\n  if (a === 307) {\n    return true;\n  }\n  if (a === 311) {\n    return true;\n  }\n  if (a === 313) {\n    return true;\n  }\n  if (a === 317) {\n    return true;\n  }\n  if (a === 331) {\n    return true;\n  }\n  if (a === 337) {\n    return true;\n  }\n  if (a === 347) {\n    return true;\n  }\n  if (a === 349) {\n    return true;\n  }\n  if (a === 353) {\n    return true;\n  }\n  if (a === 359) {\n    return true;\n  }\n  if (a === 367) {\n    return true;\n  }\n  if (a === 373) {\n    return true;\n  }\n  if (a === 379) {\n    return true;\n  }\n  if (a === 383)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases .\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases.\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x % n === 0 && x / n === Math.floor(x / n);\n}\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 0;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===. ..\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase .\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===...\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A') {\n      result += 1;\n    } else if (num[i] === 'B') {\n      result += 2;\n    } else if (num[i] === 'C') {\n      result += 3;\n    } else if (num[i] === 'D') {\n      result += 4;\n    } else if (num[i] === 'E') {\n      result += 5;\n    } else if (num[i] === 'F') {\n      result += 6;\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime2 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime3 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime4 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime5 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime6 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime7 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime8 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime9 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime10 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime11 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime12 = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number .Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db '  at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number.Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db' at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary_char = '0';\n  let binary_char_count = 0;\n  let binary_length = 0;\n  let binary_length_count = 0;\n  let decimal_length = 0;\n  let decimal_length_count = 0;\n  let decimal_count = 0;\n  let decimal_count_count = 0;\n  let decimal_count_length = 0;\n  let decimal_count_length_count = 0;\n  let decimal_count_length_length = 0;\n  let decimal_count_length_length_count = 0;\n  let decimal_count_length_length_length = 0;\n  let decimal_count_length_length_length_count = 0;\n  let decimal_count_length_length_length_length = 0;\n  let decimal_count_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0;\n  let decimal_count_length_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct2 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct3 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct4 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct5 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct6 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct7 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct8 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct9 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct10 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct11 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct12 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct13 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct14 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct15 = (numbers) => {\n  let sum = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let i = 0\n  let j = 0\n  let count = 0\n  let result = true\n  while (i < len) {\n    count = 0\n    while (j < len && s[i] == s[j]) {\n      j++\n      count++\n    }\n    if (count < 3) {\n      result = false\n      break\n    }\n    i++\n  }\n  return result\n}\n\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy('happy'))\nconsole.log(isHappy", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\n/*\n  This function takes a list of grades and returns a list of letter grades\n  */\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\n/*\n  This function takes a list of grades and returns a list of letter grades\n  */\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\n/*\n  This function takes a list of grades and returns a list of letter grades\n  */\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\n/*\n  This function takes a list of grades and returns a list of letter grades\n  */\nconst letterGrade = (grades) => {\n  const letterGrade =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0;\n  let prime = true;\n  while (prime) {\n    if (i === string.length) {\n      prime = false;\n    } else {\n      if (string.charAt(i) === string.charAt(i + 1)) {\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == true\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (j === s.length) {\n      return true;\n    } else {\n      if (string.charAt(i) === s.charAt(j)) {\n        i++;\n        j++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == true\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (j === s.length) {\n      return true;\n    } else {\n      if (string.charAt(i) === s.charAt(j)) {\n        i++;\n        j++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == true\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (j === s.length) {\n      return true;\n    } else {\n      if (string.charAt(i) === s.charAt(j)) {\n        i++;\n        j++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == true\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (j === s.length) {\n      return true;\n    } else {\n      if (string.charAt(i) === s.charAt(j)) {\n        i++;\n        j++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == true\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (j === s.length) {\n      return true;\n    } else {\n      if (string.charAt(i) === s.charAt(j)) {\n        i++;\n        j++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == true\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (j === s.length) {\n      return true;\n    } else {\n      if (string.charAt(i) === s.charAt(j)) {\n        i++;\n        j++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return false;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == true\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t endsOneStarts  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t startsOneEndsOneStarts  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n        let start2 = i;\n        while(start2 > 0 && start2 % 10 == 1){\n            start2 = start2 / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t endsOneStartsOneEnds  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n        let end2 = i;\n        while(end2 < n && end2 % 10 == 1){\n            end2 = end2 / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t startsOneEndsOneStartsOneEnds  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n        let start2 = i;\n        while(start2 > 0 && start2 % 10 == 1){\n            start2 = start2 / 10;\n            count++;\n        }\n        let end2 = i;\n        while(end2 < n && end2 % 10 == 1){\n            end2 = end2 / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t startsOneEndsOneStartsOneEnds  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n        let start2 = i;\n        while(start2 > 0 && start2 % 10 == 1){\n            start2 = start2 / 10;\n            count++;\n        }\n        let end2 = i;\n        while(end2 < n && end2 % 10 == 1){\n            end2 = end2 / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t startsOneEndsOneStartsOneEnds  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n        let start2 = i;\n        while(start2 > 0 && start2 % 10 == 1){\n            start2 = start2 / 10;\n            count++;\n        }\n        let end2 = i;\n        while(end2 < n && end2 % 10 == 1){\n            end2 = end2 / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t startsOneEndsOneStartsOneEnds  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count++;\n        }\n        let end = i;\n        while(end < n && end % 10 == 1){\n            end = end / 10;\n            count++;\n        }\n        let start2 = i;\n        while(start2 > 0 && start2 % 10 == 1){\n            start2 = start2 / 10;\n            count++;\n        }\n        let end2 = i;\n        while(end2 < n && end2 % 10 == 1){\n            end2 = end2 / 10;\n            count++;\n        }\n    }\n    return count;\n}\n\ncon s t startsOneEndsOneStartsOneEnds  = (n) =>{ \n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        let start = i;\n        while(start > 0 && start % 10 == 1){\n            start = start / 10;\n            count", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = (N) => {\n    let sum = 0;\n    while (N > 0) {\n      sum += N % 2;\n      N = N / 2;\n    }\n    return sum;\n  };\n  return sum(N);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t .\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t.\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const arr = []\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i].charCodeAt(0))\n  }\n  arr.sort((a, b) => a - b)\n  let res = ''\n  for (let i = 0; i < words.length; i++) {\n    res += words[i].charAt(0)\n  }\n  return res\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however , unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2) ...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order .\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however, unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2)...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order.\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow2 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow3 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow4 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow5 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow6 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow7 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow8 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow9 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow10 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow11 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getRow12 = (lst, x) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let sum = 0\n  let temp = 0\n  let temp2 = 0\n  while (i < len) {\n    sum = 0\n    while (j < len) {\n      sum += array[j]\n      j += 1\n    }\n    if (sum % 2 === 1) {\n      sorted.push(array[i])\n      i += 1\n    } else {\n      sorted.push(array[len - 1 - i])\n      i += 1\n    }\n  }\n  return sorted\n}\n\nexport default sortArray\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_len = alphabet.length;\n  let s_len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let encrypted = '';\n  while (i < s_len) {\n    encrypted += alphabet[(s[i] + s[i + 1]) % alphabet_len];\n    i += 2;\n  }\n  return encrypted;\n};\n\n/*\n  Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_len = alphabet.length;\n  let s_len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let decrypted = '';\n  while (i < s_len) {\n    decrypted += alphabet[(s[i] + s[i + 1]) % alphabet_len];\n    i += 2;\n  }\n  return decrypted;\n};\n\n/*\n  Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt_decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_len = alphabet.length;\n  let s_len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let decrypted = '';\n  while (i < s_len) {\n    decrypted += alphabet[(s[i] + s[i + 1]) % alphabet_len];\n    i += 2;\n  }\n  return decrypted;\n};\n\n/*\n  Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt_decrypt_rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_len = alphabet.length;\n  let s_len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let decrypted = '';\n  while (i < s_len) {\n    decrypted += alphabet[(s[i] + s[i + 1]) % alphabet_len];\n    i += 2;\n  }\n  return decrypted;\n};\n\n/*\n  Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt_decrypt_rotate_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_len = alphabet.length;\n  let s_len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let decrypted = '';\n  while (i < s_len) {\n    decrypted += alphabet[(s[i] + s[i + 1]) % alphabet_len];\n    i += 2;\n  }\n  return decrypted;\n};\n\n/*\n  Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt_decrypt_rotate_reverse_reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopq", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [...new Array(maxLength).fill(0).map((_, index) => maxIndex), maxLength];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1 , 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    A = 0,\n    B = 0,\n    C = 0,\n    D = 0,\n    E = 0,\n    F = 0,\n    G = 0,\n    H = 0,\n    I = 0,\n    J = 0,\n    K = 0,\n    L = 0,\n    M = 0,\n    N = 0,\n    O = 0,\n    P = 0,\n    Q = 0,\n    R = 0,\n    S = 0,\n    T = 0,\n    U = 0,\n    V = 0,\n    W = 0,\n    X = 0,\n    Y = 0,\n    Z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    aa = 0,\n    bb = 0,\n    cc = 0,\n    dd = 0,\n    ee = 0,\n    ff = 0,\n    gg = 0,\n    hh = 0,\n    ii = 0,\n    jj = 0,\n    kk = 0,\n    ll = 0,\n    mm = 0,\n    nn = 0,\n    oo = 0,\n    pp = 0,\n    qq = 0,\n    rr = 0,\n    ss = 0,\n    tt = 0,\n    uu = 0,\n    vv = 0,\n    ww = 0,\n    xx = 0,\n    yy = 0,\n    zz = 0;\n  let isBored = (S) => {\n    let i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      A = 0,\n      B = 0,\n      C = 0,\n      D = 0,\n      E = 0,\n      F = 0,\n      G = 0,\n      H = 0,\n      I = 0,\n      J = 0,\n      K = 0,\n      L = 0,\n      M = 0,\n      N = 0,\n      O = 0,\n      P = 0,\n      Q = 0,\n      R = 0,\n      S = 0,\n      T = 0,\n      U = 0,\n      V = 0,\n      W = 0,\n      X = 0,\n      Y = 0,\n      Z = 0,\n      aa = 0,\n      bb = 0,\n      cc = 0,\n      dd = 0,\n      ee = 0,\n      ff = 0,\n      gg = 0,\n      hh = 0,\n      ii = 0,\n      jj = 0,\n      kk = 0,\n      ll = 0,\n      mm = 0,\n      nn = 0,\n      oo = 0,\n      pp = 0,\n      qq = 0,\n      rr = 0,\n      ss = 0,\n      tt = 0,\n      uu = 0,\n      vv = 0,\n      ww = 0,\n      xx = 0,\n      yy = 0,\n      zz = 0;\n    let isBored = (S) => {\n      let i = 0,\n        j = 0,\n        k = 0,\n        l = 0,\n        m = 0,\n        n = 0,\n        o = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        t = 0,\n        u = 0,\n        v = 0,\n        w = 0,\n        x = 0,\n        y = 0,\n        z = 0,\n        A = 0,\n        B = 0,\n        C = 0,\n        D = 0,\n        E = 0,\n        F = 0,\n        G = 0,\n        H = 0,\n        I = 0,\n        J = 0,\n        K = 0,\n        L = 0,\n        M = 0,\n        N = 0,\n        O = 0,\n        P = 0,\n        Q = 0,\n        R = 0,\n        S = 0,\n        T = 0,\n        U = 0,\n        V = 0,\n        W = 0,\n        X = 0,\n        Y = 0,\n        Z = 0,\n        aa = 0,\n        bb = 0,\n        cc = 0,\n        dd = 0,\n        ee = 0,\n        ff = 0,\n        gg = 0,\n        hh = 0,\n        ii = 0,\n        jj = 0,\n        kk = 0,\n        ll = 0,\n        mm = 0,\n        nn = 0,\n        oo = 0,\n        pp = 0,\n        qq = 0,\n        rr = 0,\n        ss = 0,\n        tt =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two , and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const [x1, y1, z1] = [x, y, z];\n  const [x2, y2, z2] = [y, z, x];\n  const [x3, y3, z3] = [z, x, y];\n  const [x4, y4, z4] = [y, x, z];\n  const [x5, y5, z5] = [z, y, x];\n  const [x6, y6, z6] = [x, z, y];\n  const [x7, y7, z7] = [z, y, x];\n  const [x8, y8, z8] = [y, z, x];\n  const [x9, y9, z9] = [z, x, y];\n  const [x10, y10, z10] = [y, x, z];\n  const [x11, y11, z11] = [z, y, x];\n  const [x12, y12, z12] = [x, y, z];\n  const [x13, y13, z13] = [y, z, x];\n  const [x14, y14, z14] = [z, x, y];\n  const [x15, y15, z15] = [x, z, y];\n  const [x16, y16, z16] = [z, y, x];\n  const [x17, y17, z17] = [y, x, z];\n  const [x18, y18, z18] = [x, y, z];\n  const [x19, y19, z19] = [y, z, x];\n  const [x20, y20, z20] = [z, x, y];\n  const [x21, y21, z21] = [x, z, y];\n  const [x22, y22, z22] = [z, y, x];\n  const [x23, y23, z23] = [y, x, z];\n  const [x24, y24, z24] = [x, y, z];\n  const [x25, y25, z25] = [y, z, x];\n  const [x26, y26, z26] = [z, x, y];\n  const [x27, y27, z27] = [x, z, y];\n  const [x28, y28, z28] = [z, y, x];\n  const [x29, y29, z29] = [y, x, z];\n  const [x30, y30, z30] = [x, y, z];\n  const [x31, y31, z31] = [y, z, x];\n  const [x32, y32, z32] = [z, x, y];\n  const [x33, y33, z33] = [x, z, y];\n  const [x34, y34, z34] = [z, y, x];\n  const [x35, y35, z35] = [y, x, z];\n  const [x36, y36, z36] = [x, y, z];\n  const [x37, y37, z37] = [y, z, x];\n  const [x38, y38, z38] = [z, x, y];\n  const [x39, y39, z39] = [x, z, y];\n  const [x40, y40, z40] = [z, y, x];\n  const [x41, y41, z41] = [y, x, z];\n  const [x42, y42, z42] = [x, y, z];\n  const [x43, y43, z43] = [y, z, x];\n  const [x44, y44, z44] = [z, x, y];\n  const [x45, y45, z45] = [x, z, y];\n  const [x46, y46, z46] = [z, y, x];\n  const [x47, y47, z47] = [y, x, z];\n  const [x48, y48, z48] = [x, y, z];\n  const [x49, y49, z49] = [y, z, x];\n  const [x50, y50, z50] = [z, x, y];\n  const [x51, y51, z51] = [x, z, y];\n  const [x52, y52, z52] = [z, y, x];\n  const [x53, y53, z53] = [y, x, z];\n  const [x54, y54, z54] = [x, y, z];\n  const [x55, y55, z55] = [y, z, x];\n  const [x56, y56, z56] = [z, x, y];\n  const [x57, y57, z57] = [x, z, y];\n  const [x58, y58, z58] = [z, y, x];\n  const [x59, y59, z59] = [y, x, z];\n  const [x60, y60, z60] = [x, y, z];\n  const [x61, y61, z61] = [y, z, x];\n  const [x62, y62, z62] = [z, x, y];\n  const [x63, y63, z63] = [x, z, y];\n  const [x64, y64, z64] = [z, y, x];\n  const [x65, y65, z65] = [y, x, z];\n  const [x66, y66, z66] = [x, y, z", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonants_count = consonants.length;\n  const vowels_count = vowels.length;\n  const consonants_index = consonants.indexOf(message[0]);\n  const consonants_index_2 = consonants.indexOf(message[1]);\n  const consonants_index_3 = consonants.indexOf(message[2]);\n  const consonants_index_4 = consonants.indexOf(message[3]);\n  const consonants_index_5 = consonants.indexOf(message[4]);\n  const consonants_index_6 = consonants.indexOf(message[5]);\n  const consonants_index_7 = consonants.indexOf(message[6]);\n  const consonants_index_8 = consonants.indexOf(message[7]);\n  const consonants_index_9 = consonants.indexOf(message[8]);\n  const consonants_index_10 = consonants.indexOf(message[9]);\n  const consonants_index_11 = consonants.indexOf(message[10]);\n  const consonants_index_12 = consonants.indexOf(message[11]);\n  const consonants_index_13 = consonants.indexOf(message[12]);\n  const consonants_index_14 = consonants.indexOf(message[13]);\n  const consonants_index_15 = consonants.indexOf(message[14]);\n  const consonants_index_16 = consonants.indexOf(message[15]);\n  const consonants_index_17 = consonants.indexOf(message[16]);\n  const consonants_index_18 = consonants.indexOf(message[17]);\n  const consonants_index_19 = consonants.indexOf(message[18]);\n  const consonants_index_20 = consonants.indexOf(message[19]);\n  const consonants_index_21 = consonants.indexOf(message[20]);\n  const consonants_index_22 = consonants.indexOf(message[21]);\n  const consonants_index_23 = consonants.indexOf(message[22]);\n  const consonants_index_24 = consonants.indexOf(message[23]);\n  const consonants_index_25 = consonants.indexOf(message[24]);\n  const consonants_index_26 = consonants.indexOf(message[25]);\n  const consonants_index_27 = consonants.indexOf(message[26]);\n  const consonants_index_28 = consonants.indexOf(message[27]);\n  const consonants_index_29 = consonants.indexOf(message[28]);\n  const consonants_index_30 = consonants.indexOf(message[29]);\n  const consonants_index_31 = consonants.indexOf(message[30]);\n  const consonants_index_32 = consonants.indexOf(message[31]);\n  const consonants_index_33 = consonants.indexOf(message[32]);\n  const consonants_index_34 = consonants.indexOf(message[33]);\n  const consonants_index_35 = consonants.indexOf(message[34]);\n  const consonants_index_36 = consonants.indexOf(message[35]);\n  const consonants_index_37 = consonants.indexOf(message[36]);\n  const consonants_index_38 = consonants.indexOf(message[37]);\n  const consonants_index_39 = consonants.indexOf(message[38]);\n  const consonants_index_40 = consonants.indexOf(message[39]);\n  const consonants_index_41 = consonants.indexOf(message[40]);\n  const consonants_index_42 = consonants.indexOf(message[41]);\n  const consonants_index_43 = consonants.indexOf(message[42]);\n  const consonants_index_44 = consonants.indexOf(message[43]);\n  const consonants_index_45 = consonants.indexOf(message[44]);\n  const consonants_index_46 = consonants.indexOf(message[45]);\n  const consonants_index_47 = consonants.indexOf(message[46]);\n  const consonants_index_48 = consonants.indexOf(message[47]);\n  const consonants_index_49 = consonants.indexOf(message[48]);\n  const consonants_index_50 = consonants.indexOf(message[49]);\n  const consonants_index_51 = consonants.indexOf(message[50]);\n  const consonants_index_52 = consonants.indexOf(message[51]);\n  const consonants_index_53 = consonants.indexOf(message[52]);\n  const consonants_index_54 = consonants.indexOf(message[53]);\n  const consonants_index_55 = consonants.indexOf(message[54]);\n  const consonants_index_56 = consonants.indexOf(message[55]);\n  const consonants_index_57 = consonants.indexOf(message[56]);\n  const consonants_index_58 = consonants.indexOf(message[57]);\n  const consonants_index_59 = consonants.indexOf(message[58]);\n  const consonants_index_60 = consonants.indexOf(message[59]);\n  const consonants_index_61 = consonants.indexOf(message[60]);\n  const consonants_index_62 = consonants.indexOf(message[61]);\n  const consonants_index_63 = consonants.indexOf(message[62]);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_index = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let current = lst[i];\n    if (current > max) {\n      max = current;\n      max_index = i;\n    }\n    sum += current;\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i++;\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits .\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_unit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = 0;\n  for (let i = 0; i < a_unit.length; i++) {\n    for (let j = 0; j < b_unit.length; j++) {\n      product += a_unit[i] * b_unit[j];\n    }\n  }\n  return product;\n};\n\n/*\n  Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_unit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = 0;\n  for (let i = 0; i < a_unit.length; i++) {\n    for (let j = 0; j < b_unit.length; j++) {\n      product += a_unit[i] * b_unit[j];\n    }\n  }\n  return product;\n};\n\n/*\n  Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_unit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = 0;\n  for (let i = 0; i < a_unit.length; i++) {\n    for (let j = 0; j < b_unit.length; j++) {\n      product += a_unit[i] * b_unit[j];\n    }\n  }\n  return product;\n};\n\n/*\n  Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_unit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = 0;\n  for (let i = 0; i < a_unit.length; i++) {\n    for (let j = 0; j < b_unit.length; j++) {\n      product += a_unit[i] * b_unit[j];\n    }\n  }\n  return product;\n};\n\n/*\n  Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_unit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = 0;\n  for (let i = 0; i < a_unit.length; i++) {\n    for (let j = 0; j < b_unit.length; j++) {\n      product += a_unit[i] * b_unit[j];\n    }\n  }\n  return product;\n};\n\n/*\n  Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_unit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = 0;\n  for (let i = 0; i < a_unit.length; i++) {\n    for (let j = 0; j < b_unit.length; j++) {\n      product += a_unit[i] * b_unit[j];\n    }\n  }\n  return product;\n};\n\n/*\n  Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of lowercase letters in s.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of vowels in s.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants2 = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants3 = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants4 = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants5 = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants6 = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants7 = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants8 = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro .\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let number = parseFloat(value);\n  let closest = Math.round(number);\n  let diff = Math.abs(closest - number);\n  let diff2 = Math.abs(closest + number);\n  if (diff < diff2) {\n    closest = closest - 1;\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
