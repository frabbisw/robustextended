{"task_id": "JavaScript/0", "prompt": "/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, n, i) => {\n    if (i === 0) {\n      return n - numbers[i + 1]\n    }\n    return n - numbers[i - 1]\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len =", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_string_array = paren_string.split('(');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_length_minus_1 = paren_string_array_length - 1;\n  const paren_string_array_length_minus_2 = paren_string_array_length - 2;\n  const paren_string_array_length_minus_3 = paren_string_array_length - 3;\n  const paren_string_array_length_minus_4 = paren_string_array_length - 4;\n  const paren_string_array_length_minus_5 = paren_string_array_length - 5;\n  const paren_string_array_length_minus_6 = paren_string_array_length - 6;\n  const paren_string_array_length_minus_7 = paren_string_array_length - 7;\n  const paren_string_array_length_minus_8 = paren_string_array_length - 8;\n  const paren_string_array_length_minus_9 = paren_string_array_length - 9;\n  const paren_string_array_length_minus_10 = paren_string_array_length - 10;\n  const paren_string_array_length_minus_11 = paren_string_array_length - 11;\n  const paren_string_array_length_minus_12 = paren_string_array_length - 12;\n  const paren_string_array_length_minus_13 = paren_string_array_length - 13;\n  const paren_string_array_length_minus_14 = paren_string_array_length - 14;\n  const paren_string_array_length_minus_15 = paren_string_array_length - 15;\n  const paren_string_array_length_minus_16 = paren_string_array_length - 16;\n  const paren_string_array_length_minus_17 = paren_string_array_length - 17;\n  const paren_string_array_length_minus_18 = paren_string_array_length - 18;\n  const paren_string_array_length_minus_19 = paren_string_array_length - 19;\n  const paren_string_array_length_minus_20 = paren_string_array_length - 20;\n  const paren_string_array_length_minus_21 = paren_string_array_length - 21;\n  const paren_string_array_length_minus_22 = paren_string_array_length - 22;\n  const paren_string_array_length_minus_23 = paren_string_array_length - 23;\n  const paren_string_array_length_minus_24 = paren_string_array_length - 24;\n  const paren_string_array_length_minus_25 = paren_string_array_length - 25;\n  const paren_string_array_length_minus_26 = paren_string_array_length - 26;\n  const paren_string_array_length_minus_27 = paren_string_array_length - 27;\n  const paren_string_array_length_minus_28 = paren_string_array_length - 28;\n  const paren_string_array_length_minus_29 = paren_string_array_length - 29;\n  const paren_string_array_length_minus_30 = paren_string_array_length - 30;\n  const paren_string_array_length_minus_31 = paren_string_array_length - 31;\n  const paren_string_array_length_minus_32 = paren_string_array_length - 32;\n  const paren_string_array_length_minus_33 = paren_string_array_length - 33;\n  const paren_string_array_length_minus_34 = paren_string_array_length - 34;\n  const paren_string_array_length_minus_35 = paren_string_array_length - 35;\n  const paren_string_array_length_minus_36 = paren_string_array_length - 36;\n  const paren_string_array_length_minus_37 = paren_string_array_length - 37;\n  const paren_string_array_length_minus_38 = paren_string_array_length - 38;\n  const paren_string_array_length_minus_39 = paren_string_array_length - 39;\n  const paren_string_array_length_minus_40 = paren_string_array_length - 40;\n  const paren_string_array_length_minus_41 = paren_string_array_length - 41;\n  const paren_string_array_length_minus_42 = paren_string_array_length - 42;\n  const paren_string_array_length_minus_43 = paren_string_array_length - 43;\n  const paren_string_array_length_minus_44 = paren_string_array_length - 44;\n  const paren_string_array_length_minus_45 = paren_string_array_length - 45;\n  const paren_string_array_length_minus_46 = paren_string_array_length - 46;\n  const paren_string_array_length_minus_47 = paren_string_array_length - 47;\n  const paren_string_array_length_minus_48 = paren_string_array_length - 48;\n  const paren_string_array_length_minus_49 = paren_string_array_length - 49;\n  const paren_string_array_length_minus_50 = paren_string_array_length - 50;\n  const paren_string_array_length_minus_51 = paren_", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  const longest = Math.max(suffix.length, prefix.length)\n  const result = str.substring(0, longest)\n  return result\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {\n  const str = string.split('').reverse().join('')\n  const suffix = str.split('').reverse().join('')\n  const prefix = str.split('').reverse().join('')\n  return str == suffix && str == prefix\n}\n\n/* Testif a string is a palindrome */\nconst isPalindrome = (string) => {", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels of stones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile14 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    let pileLength = i;\n    if (i % 2 === 1) {\n      pileLength = pileLength + 1;\n    }\n    pile.push(pileLength);\n  }\n  return pile;\n};\n\nconst makeAPile15 = (n) => {\n  let pile = [];", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i++) {\n    if (i % x === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x; i <= y; i", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = (n + m) / 2\n  let nary = (avg << 1) + 1\n  let nary2 = nary << 1\n  let nary3 = nary2 << 1\n  let nary4 = nary3 << 1\n  let nary5 = nary4 << 1\n  let nary6 = nary5 << 1\n  let nary7 = nary6 << 1\n  let nary8 = nary7 << 1\n  let nary9 = nary8 << 1\n  let nary10 = nary9 << 1\n  let nary11 = nary10 << 1\n  let nary12 = nary11 << 1\n  let nary13 = nary12 << 1\n  let nary14 = nary13 << 1\n  let nary15 = nary14 << 1\n  let nary16 = nary15 << 1\n  let nary17 = nary16 << 1\n  let nary18 = nary17 << 1\n  let nary19 = nary18 << 1\n  let nary20 = nary19 << 1\n  let nary21 = nary20 << 1\n  let nary22 = nary21 << 1\n  let nary23 = nary22 << 1\n  let nary24 = nary23 << 1\n  let nary25 = nary24 << 1\n  let nary26 = nary25 << 1\n  let nary27 = nary26 << 1\n  let nary28 = nary27 << 1\n  let nary29 = nary28 << 1\n  let nary30 = nary29 << 1\n  let nary31 = nary30 << 1\n  let nary32 = nary31 << 1\n  let nary33 = nary32 << 1\n  let nary34 = nary33 << 1\n  let nary35 = nary34 << 1\n  let nary36 = nary35 << 1\n  let nary37 = nary36 << 1\n  let nary38 = nary37 << 1\n  let nary39 = nary38 << 1\n  let nary40 = nary39 << 1\n  let nary41 = nary40 << 1\n  let nary42 = nary41 << 1\n  let nary43 = nary42 << 1\n  let nary44 = nary43 << 1\n  let nary45 = nary44 << 1\n  let nary46 = nary45 << 1\n  let nary47 = nary46 << 1\n  let nary48 = nary47 << 1\n  let nary49 = nary48 << 1\n  let nary50 = nary49 << 1\n  let nary51 = nary50 << 1\n  let nary52 = nary51 << 1\n  let nary53 = nary52 << 1\n  let nary54 = nary53 << 1\n  let nary55 = nary54 << 1\n  let nary56 = nary55 << 1\n  let nary57 = nary56 << 1\n  let nary58 = nary57 << 1\n  let nary59 = nary58 << 1\n  let nary60 = nary59 << 1\n  let nary61 = nary60 << 1\n  let nary62 = nary61 << 1\n  let nary63 = nary62 << 1\n  let nary64 = nary63 << 1\n  let nary65 = nary64 << 1\n  let nary66 = nary65 << 1\n  let nary67 = nary66 << 1\n  let nary68 = nary67 << 1\n  let nary69 = nary68 << 1\n  let nary70 = nary69 << 1\n  let nary71 = nary70 << 1\n  let nary72 = nary71 << 1\n  let nary73 = nary72 << 1\n  let nary74 = nary73 << 1\n  let nary75 = nary74 << 1\n  let nary76 = nary75 << 1\n  let nary77 = nary76 << 1\n  let nary78 = nary77 << 1\n  let nary79 = nary78 << 1\n  let nary80 = nary79 << 1\n  let nary81 = nary80 << 1\n  let nary82 = nary81 << 1\n  let nary83 = nary82 << 1\n  let nary84 = nary83 << 1\n  let nary85 = nary84 << 1\n  let nary86 = nary85 << 1\n  let nary87 = nary86 << 1\n  let nary88 = nary87 << 1\n  let nary89 = nary88 << 1\n  let nary90 = nary89 << 1\n  let nary91 = nary90 << 1\n  let nary92 = nary91 << 1\n  let nary93 = nary92 << 1\n  let nary94 = nary93 << 1\n  let nary95 = nary94 << 1\n  let nary96 = nary95 << 1\n  let nary97 = nary96 << 1\n  let nary98 = nary97 << 1\n  let nary99 = nary98 << 1\n  let nary100 = nary99 << 1\n  let nary101 = nary100 << 1\n  let nary102 = nary101 << 1\n  let nary103 = nary102 << 1\n  let nary104 = nary103 << 1\n  let nary105 = nary104 << 1\n  let nary106 = nary105 << 1\n  let nary107 = nary106 << 1\n  let nary108 = nary107 << 1\n  let nary109 = nary108 << 1\n  let nary110 = nary109 << 1\n  let nary111 = nary110 << 1\n  let nary112 = nary111 << 1\n  let nary113 = nary112 << 1\n  let nary114 =", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits2 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits3 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits4 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits5 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits6 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits7 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits8 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits9 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits10 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits11 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits12 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits13 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits14 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits15 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits16 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2!== 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits17 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits18 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n = parseInt(i);\n    if (n % 2 === 0) {\n      l.push(n);\n    }\n  }\n  return l;\n};\n\nconst uniqueDigits19 = (x) => {\n  const l = [];\n  for (let i = 0; i < x; i++) {\n    const n", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray , and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\" ,  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let current = 0\n  let currentLength = 0\n  let currentName = \"\"\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      currentLength = currentLength + 1\n      if (currentLength === 3) {\n        currentName = names[current]\n        current = current + 1\n        currentLength = 0\n      }\n      result.push(currentName)\n      currentName = \"\"\n    }\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let current = 0\n  let currentLength = 0\n  let currentName = \"\"\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      currentLength = currentLength + 1\n      if (currentLength === 3) {\n        currentName = names[current]\n        current = current + 1\n        currentLength = 0\n      }\n      result.push(currentName)\n      currentName = \"\"\n    }\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let current = 0\n  let currentLength = 0\n  let currentName = \"\"\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      currentLength = currentLength + 1\n      if (currentLength === 3) {\n        currentName = names[current]\n        current = current + 1\n        currentLength = 0\n      }\n      result.push(currentName)\n      currentName = \"\"\n    }\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let current = 0\n  let currentLength = 0\n  let currentName = \"\"\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      currentLength = currentLength + 1\n      if (currentLength === 3) {\n        currentName = names[current]\n        current = current + 1\n        currentLength = 0\n      }\n      result.push(currentName)\n      currentName = \"\"\n    }\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let current = 0\n  let currentLength = 0\n  let currentName = \"\"\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      currentLength = currentLength + 1\n      if (currentLength === 3) {\n        currentName = names[current]\n        current = current + 1\n        currentLength = 0\n      }\n      result.push(currentName)\n      currentName = \"\"\n    }\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let current = 0\n  let currentLength = 0\n  let currentName = \"\"\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      currentLength = currentLength + 1\n      if (currentLength === 3) {\n        currentName = names[current]\n        current = current + 1\n        currentLength = 0\n      }\n      result.push(currentName)\n      currentName = \"\"\n    }\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = []\n  let current = 0\n  let currentLength = 0\n  let currentName = \"\"\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      currentLength = currentLength + 1\n      if (currentLength === 3) {\n        currentName = names[current]\n        current = current + 1\n        currentLength = 0\n      }\n      result.push(currentName)\n      currentName = \"\"\n    }\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f19 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f20 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst f21 = (n) => {\n  const factorials = [1]\n  for (let i = 2; i <= n; i++) {\n    factorials.push(factorials[i - 1] * i)\n  }\n  return factorials\n}\n\nconst", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1 , n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNumspassed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[ 2 ], ..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[ 2 ],..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[j] > arr[j - 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n        j--;\n      }\n      return true;\n    }\n    i--;\n  }\n  return false;\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[j] > arr[j - 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n        j--;\n      }\n      return true;\n    }\n    i--;\n  }\n  return false;\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[j] > arr[j - 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n        j--;\n      }\n      return true;\n    }\n    i--;\n  }\n  return false;\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[j] > arr[j - 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n        j--;\n      }\n      return true;\n    }\n    i--;\n  }\n  return false;\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[j] > arr[j - 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n        j--;\n      }\n      return true;\n    }\n    i--;\n  }\n  return false;\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[j] > arr[j - 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n        j--;\n      }\n      return true;\n    }\n    i--;\n  }\n  return false;\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[j] > arr[j - 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n        j--;\n      }\n      return true;\n    }\n    i--;\n  }\n  return false;\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i > 0) {\n    if (arr[i] > arr[i - 1]) {\n      let j = i;\n      while (j > 0 && arr[", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nexport default stringXor;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\" .\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n\n  if (lst1Length!== lst2Length) {\n    return false;\n  }\n\n  const lst1First = lst1[0];\n  const lst2First = lst2[0];\n\n  if (lst1First!== lst2First) {\n    return false;\n  }\n\n  const lst1Last = lst1[lst1Length - 1];\n  const lst2Last = lst2[lst2Length - 1];\n\n  if (lst1Last!== lst2Last) {\n    return false;\n  }\n\n  const lst1Middle = lst1[Math.floor(lst1Length / 2)];\n  const lst2Middle = lst2[Math.floor(lst2Length / 2)];\n\n  if (lst1Middle!== lst2Middle) {\n    return false;\n  }\n\n  const lst1MiddleIndex = lst1.indexOf(lst1Middle);\n  const lst2MiddleIndex = lst2.indexOf(lst2Middle);\n\n  const lst1MiddleLength = lst1MiddleIndex + 1;\n  const lst2MiddleLength = lst2MiddleIndex + 1;\n\n  const lst1MiddleLengthExch = lst1MiddleLength - lst2MiddleLength;\n\n  if (lst1MiddleLengthExch < 0) {\n    return false;\n  }\n\n  const lst2MiddleLengthExch = lst2MiddleLength - lst1MiddleLength;\n\n  if (lst2MiddleLengthExch < 0) {\n    return false;\n  }\n\n  const lst1MiddleLengthExchIndex = lst1.indexOf(lst1MiddleLengthExch);\n  const lst2MiddleLengthExchIndex = lst2.indexOf(lst2MiddleLengthExch);\n\n  const lst1MiddleLengthExchIndex2 = lst1.indexOf(lst1MiddleLengthExch + 1);\n  const lst2MiddleLengthExchIndex2 = lst2.indexOf(lst2MiddleLengthExch + 1);\n\n  if (lst1MiddleLengthExchIndex!== lst1MiddleLengthExchIndex2 ||\n    lst2MiddleLengthExchIndex!== lst2MiddleLengthExchIndex2) {\n    return false;\n  }\n\n  const lst1MiddleLengthExchIndex2Index = lst1.indexOf(lst1MiddleLengthExchIndex2);\n  const lst2MiddleLengthExchIndex2Index = lst2.indexOf(lst2MiddleLengthExchIndex2);\n\n  const lst1MiddleLengthExchIndex2Index2 = lst1.indexOf(lst1MiddleLengthExchIndex2 + 1);\n  const lst2MiddleLengthExchIndex2Index2 = lst2.indexOf(lst2MiddleLengthExchIndex2 + 1);\n\n  if (lst1MiddleLengthExchIndex2Index!== lst1MiddleLengthExchIndex2Index2 ||\n    lst2MiddleLengthExchIndex2Index!== lst2MiddleLengthExchIndex2Index2) {\n    return false;\n  }\n\n  return true;\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); // true\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); // false\nexchange([1, 2, 3, 4], [1, 2, 3, 5]); // false\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5]); // false\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]); // false\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/111", "prompt": "/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let result = '';\n    let index = 0;\n    let count = 0;\n    while (index < s.length) {\n        if (s[index] === c[count]) {\n            count++;\n            if (count === c.length) {\n                result += s[index];\n                index++;\n                count = 0;\n            }\n        } else {\n            result += s[index];\n            index++;\n        }\n    }\n    return [result, count === c.length];\n};\n\nconst test = [\n    ['abcde', 'ae'],\n    ['abcdef', 'b'],\n    ['abcdedcba', 'ab']\n];\n\ntest.forEach(t => {\n    const [s, c] = t;\n    console.log(`${s} -> ${reverseDelete(s, c)}`);\n});\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/113", "prompt": "/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (str) => {\n    const count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  };\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    result.push(count(lst[i]));\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => Math.min(acc, num), 0);\n  const minSubArraySum = (nums) => {\n    const sum = nums.reduce((acc, num) => acc + num, 0);\n    return sum - minSum;\n  };\n  return minSubArraySum(nums);\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const len = grid.length\n  const buckets = new Array(len)\n  const max = len * capacity\n\n  for (let i = 0; i < len; i++) {\n    buckets[i] = new Array(len)\n    for (let j = 0; j < len; j++) {\n      buckets[i][j] = 0\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1\n      }\n    }\n  }\n\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      if (buckets[i][j] > 0) {\n        count += 1\n      }\n    }\n  }\n\n  return count\n}\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${grid}`)\n  console.log(`capacity: ${capacity}`)\n  console.log(`expected: ${maxFill(grid, capacity)}`)\n  console.log(`actual: ${maxFill(grid, capacity)}`)\n}\n\ntest([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\ntest([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\ntest([[0,0,0], [0,0,0]], 5)\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return arr;\n  }\n  let decim = Math.pow(2, count);\n  let temp = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      temp.push(decim);\n      decim = decim / 2;\n    } else {\n      temp.push(arr[i]);\n    }\n  }\n  result = temp.concat(sortArray(temp));\n  return result;\n};\n\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/117", "prompt": "/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-empty string p, you have been tasked to implement a fu nction that ret u rns a list of all words fr om str ing s that contain p in t hestring s.\n\nIf the string s is e mpty then the function should return an empty list.\n\nNote: you may assume the inp ut string contains only letters an d spaces.\nExamples:\nselectWords(\"Hello world\", \"world\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"world\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==> [\"Hello\"]\nselectWords(\"Hello world\", \"Hello\") ==>", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const length = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      const vowel = word[i]\n      const consonant = word[j]\n      const distance = Math.abs(vowel.charCodeAt(0) - consonant.charCodeAt(0))\n      if (distance < closestDistance) {\n        closestVowel = vowel\n        closestDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconsole.log(getClosestVowel(\"yogurt\"))\nconsole.log(getClosestVowel(\"FULL\"))\nconsole.log(getClosestVowel(\"quick\"))\nconsole.log(getClosestVowel(\"ab\"))\nconsole.log(getClosestVowel(\"\"))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string s  consist of open\n parenth eses ' (' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given a list of two strings, both string s  consist of open\n parenth eses'(' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [],\n    isGood = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        isGood = false;\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return isGood;\n};\n\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParenspassed": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const maxCount = 1\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      maxCount = 1\n    } else if (arr[i] === max) {\n      maxCount++\n    }\n  }\n\n  const result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[maxIndex - i])\n  }\n\n  return result\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  const sum = odd.reduce((acc, x) => acc + x, 0)\n  const sumEven = even.reduce((acc, x) => acc + x, 0)\n  return sumEven - sum\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let collatzIndex = 1;\n  while (collatzIndex < n) {\n    let collatzTerm = collatz[collatzIndex - 1];\n    if (collatzTerm % 2 === 0) {\n      collatzTerm = collatzTerm * 2;\n    } else {\n      collatzTerm = collatzTerm * 3;\n    }\n    collatz.push(collatzTerm);\n    collatzIndex++;\n  }\n  return collatz;\n};\n\nconsole.log(getOddCollatz(5));\nconsole.log(getOddCollatz(10));\nconsole.log(getOddCollatz(15));\nconsole.log(getOddCollatz(20));\nconsole.log(getOddCollatz(25));\nconsole.log(getOddCollatz(30));\nconsole.log(getOddCollatz(35));\nconsole.log(getOddCollatz(40));\nconsole.log(getOddCollatz(45));\nconsole.log(getOddCollatz(50));\nconsole.log(getOddCollatz(55));\nconsole.log(getOddCollatz(60));\nconsole.log(getOddCollatz(65));\nconsole.log(getOddCollatz(70));\nconsole.log(getOddCollatz(75));\nconsole.log(getOddCollatz(80));\nconsole.log(getOddCollatz(85));\nconsole.log(getOddCollatz(90));\nconsole.log(getOddCollatz(95));\nconsole.log(getOddCollatz(100));\nconsole.log(getOddCollatz(105));\nconsole.log(getOddCollatz(110));\nconsole.log(getOddCollatz(115));\nconsole.log(getOddCollatz(120));\nconsole.log(getOddCollatz(125));\nconsole.log(getOddCollatz(130));\nconsole.log(getOddCollatz(135));\nconsole.log(getOddCollatz(140));\nconsole.log(getOddCollatz(145));\nconsole.log(getOddCollatz(150));\nconsole.log(getOddCollatz(155));\nconsole.log(getOddCollatz(160));\nconsole.log(getOddCollatz(165));\nconsole.log(getOddCollatz(170));\nconsole.log(getOddCollatz(175));\nconsole.log(getOddCollatz(180));\nconsole.log(getOddCollatz(185));\nconsole.log(getOddCollatz(190));\nconsole.log(getOddCollatz(195));\nconsole.log(getOddCollatz(200));\nconsole.log(getOddCollatz(205));\nconsole.log(getOddCollatz(210));\nconsole.log(getOddCollatz(215));\nconsole.log(getOddCollatz(220));\nconsole.log(getOddCollatz(225));\nconsole.log(getOddCollatz(230));\nconsole.log(getOddCollatz(235));\nconsole.log(getOddCollatz(240));\nconsole.log(getOddCollatz(245));\nconsole.log(getOddCollatz(250));\nconsole.log(getOddCollatz(255));\nconsole.log(getOddCollatz(260));\nconsole.log(getOddCollatz(265));\nconsole.log(getOddCollatz(270));\nconsole.log(getOddCollatz(275));\nconsole.log(getOddCollatz(280));\nconsole.log(getOddCollatz(285));\nconsole.log(getOddCollatz(290));\nconsole.log(getOddCollatz(295));\nconsole.log(getOddCollatz(300));\nconsole.log(getOddCollatz(305));\nconsole.log(getOddCollatz(310));\nconsole.log(getOddCollatz(315));\nconsole.log(getOddCollatz(320));\nconsole.log(getOddCollatz(325));\nconsole.log(getOddCollatz(330));\nconsole.log(getOddCollatz(335));\nconsole.log(getOddCollatz(340));\nconsole.log(getOddCollatz(345));\nconsole.log(getOddCollatz(350));\nconsole.log(getOddCollatz(355));\nconsole.log(getOddCollatz(360));\nconsole.log(getOddCollatz(365));\nconsole.log(getOddCollatz(370));\nconsole.log(getOddCollatz(375));\nconsole.log(getOddCollatz(380));\nconsole.log(getOddCollatz(385));\nconsole.log(getOddCollatz(390));\nconsole.log(getOddCollatz(395));\nconsole.log(getOddCollatz(400));\nconsole.log(getOddCollatz(405));\nconsole.log(getOddCollatz(410));\nconsole.log(getOddCollatz(415));\nconsole.log(getOddCollatz(420));\nconsole.log(getOddCollatz(425));\nconsole.log(getOddCollatz(430));\nconsole.log(getOddCollatz(435));\nconsole.log(getOddCollatz(440));\nconsole.log(getOddCollatz(445", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2 .\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2.\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = getDaysInMonth(month, year);\n  if (day < 1 || day > daysInMonth) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nconst getDaysInMonth = (month, year) => {\n  switch (month) {\n    case 1:\n      return 31;\n    case 2:\n      if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n        return 29;\n      } else {\n        return 28;\n      }\n    case 3:\n      return 31;\n    case 4:\n      return 30;\n    case 5:\n      return 31;\n    case 6:\n      return 30;\n    case 7:\n      return 31;\n    case 8:\n      return 31;\n    case 9:\n      return 30;\n    case 10:\n      return 31;\n    case 11:\n      return 30;\n    case 12:\n      return 31;\n  }\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1, ... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;\n};\n\nconst splitWords19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = words.map(w => w.toLowerCase());\n  const words3 = words2.filter(w => w.length > 1);\n  return words3;", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\n/*\n  Given a list of numbers, return whether or not t h ey are sorted\n  in descendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[lst.length - 1];\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nexport {\n  isSorted,\n  isSortedDesc\n};\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return 'NO'\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const divisor = 2\n    while (divisor <= n) {\n      if (n % divisor === 0) {\n        return false\n      }\n      divisor++\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return 'YES'\n  }\n  return 'NO'\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return 'NO'\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const divisor = 2\n    while (divisor <= n) {\n      if (n % divisor === 0) {\n        return false\n      }\n      divisor++\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return 'YES'\n  }\n  return 'NO'\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return 'NO'\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const divisor = 2\n    while (divisor <= n) {\n      if (n % divisor === 0) {\n        return false\n      }\n      divisor++\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return 'YES'\n  }\n  return 'NO'\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return 'NO'\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const divisor = 2\n    while (divisor <= n) {\n      if (n % divisor === 0) {\n        return false\n      }\n      divisor++\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return 'YES'\n  }\n  return 'NO'\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return 'NO'\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const divisor = 2\n    while (divisor <= n) {\n      if (n % divisor === 0) {\n        return false\n      }\n      divisor++\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return 'YES'\n  }\n  return 'NO'\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return 'NO'\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const divisor = 2\n    while (divisor <= n) {\n      if (n % divisor === 0) {\n        return false\n      }\n      divisor++\n    }\n    return true\n  }\n  if (isPrime(length))", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr) return null\n  const sign = (n) => n > 0? 1 : -1\n  const prod = (arr) => arr.reduce((acc, n) => sign(acc) * sign(n), 0)\n  return prod(arr)\n}\n\nconst sumOfSquares = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProd = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns2 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns3 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns4 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns5 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns6 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns7 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns8 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns9 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns10 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns11 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns12 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns13 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns14 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns15 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n, 0)\n  return sum(arr)\n}\n\nconst sumOfSquaresProdSigns16 = (arr) => {\n  if (!arr) return null\n  const sum = (arr) => arr.reduce((acc, n)", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B) , lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B), lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m);\n  dp[0] = 1;\n  for (let i = 1; i < n * m; i++) {\n    dp[i] = Infinity;\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 && j === 0) {\n        dp[i * m + j] = 1;\n      } else if (i === 0) {\n        dp[i * m + j] = grid[i][j] + dp[i * m + j - 1];\n      } else if (j === 0) {\n        dp[i * m + j] = grid[i][j] + dp[i * m + j - m];\n      } else {\n        dp[i * m + j] = Math.min(grid[i][j] + dp[i * m + j - m], grid[i][j] + dp[i * m + j - 1]);\n      }\n    }\n  }\n  const result = [];\n  for (let i = 0; i < n * m; i++) {\n    if (dp[i] === k) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconst k = 3;\nconsole.log(minPath(grid, k));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a, b % a);\n};\n\n// Return a least common multiple of two integers a and b\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n// Return a sum of two integers a and b\nconst sum = (a, b) => {\n  return a + b;\n};\n\n// Return a difference of two integers a and b\nconst difference = (a, b) => {\n  return a - b;\n};\n\n// Return a product of two integers a and b\nconst product = (a, b) => {\n  return a * b;\n};\n\n// Return a quotient of two integers a and b\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n// Return a remainder of two integers a and b\nconst remainder = (a, b) => {\n  return a % b;\n};\n\n// Return a modulus of two integers a and b\nconst modulus = (a, b) => {\n  return remainder(a, b);\n};\n\n// Return a power of two integer\nconst powerOfTwo = (n) => {\n  return n === 1? 1 : 2 * powerOfTwo(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return a power of ten integer\nconst powerOfTen = (n) => {\n  return n === 1? 1 : 10 * powerOfTen(n - 1);\n};\n\n// Return", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n\nconst tri = (n) => {\n  let res = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n  }\n  return res;\n};\n", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result *= n % 10;\n    }\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  let reversed = n;\n  while (reversed > 0) {\n    reversed = reversed / 10;\n    if (n % reversed!==", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[] ' ) ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n  const s = string.split('')\n  const n = s.length\n  const m = s[0].length\n  const i = 0\n  const j = 1\n  const k = 2\n  const l = 3\n  const m = 4\n  const n = 5\n  const a = 6\n  const b = 7\n  const c = 8\n  const d = 9\n  const e = 10\n  const f = 11\n  const g = 12\n  const h = 13\n  const i = 14\n  const j = 15\n  const k = 16\n  const l = 17\n  const m = 18\n  const n = 19\n  const a = 20\n  const b = 21\n  const c = 22\n  const d = 23\n  const e = 24\n  const f = 25\n  const g = 26\n  const h = 27\n  const i = 28\n  const j = 29\n  const k = 30\n  const l = 31\n  const m = 32\n  const n = 33\n  const a = 34\n  const b = 35\n  const c = 36\n  const d = 37\n  const e = 38\n  const f = 39\n  const g = 40\n  const h = 41\n  const i = 42\n  const j = 43\n  const k = 44\n  const l = 45\n  const m = 46\n  const n = 47\n  const a = 48\n  const b = 49\n  const c = 50\n  const d = 51\n  const e = 52\n  const f = 53\n  const g = 54\n  const h = 55\n  const i = 56\n  const j = 57\n  const k = 58\n  const l = 59\n  const m = 60\n  const n = 61\n  const a = 62\n  const b = 63\n  const c = 64\n  const d = 65\n  const e = 66\n  const f = 67\n  const g = 68\n  const h = 69\n  const i = 70\n  const j = 71\n  const k = 72\n  const l = 73\n  const m = 74\n  const n = 75\n  const a = 76\n  const b = 77\n  const c = 78\n  const d = 79\n  const e = 80\n  const f = 81\n  const g = 82\n  const h = 83\n  const i = 84\n  const j = 85\n  const k = 86\n  const l = 87\n  const m = 88\n  const n = 89\n  const a = 90\n  const b = 91\n  const c = 92\n  const d = 93\n  const e = 94\n  const f = 95\n  const g = 96\n  const h = 97\n  const i = 98\n  const j = 99\n  const k = 100\n  const l = 101\n  const m = 102\n  const n = 103\n  const a = 104\n  const b = 105\n  const c = 106\n  const d = 107\n  const e = 108\n  const f = 109\n  const g = 110\n  const h = 111\n  const i = 112\n  const j = 113\n  const k = 114\n  const l = 115\n  const m = 116\n  const n = 117\n  const a = 118\n  const b = 119\n  const c = 120\n  const d = 121\n  const e = 122\n  const f = 123\n  const g = 124\n  const h = 125\n  const i = 126\n  const j = 127\n  const k = 128\n  const l = 129\n  const m = 130\n  const n = 131\n  const a = 132\n  const b = 133\n  const c = 134\n  const d = 135\n  const e = 136\n  const f = 137\n  const g = 138\n  const h = 139\n  const i = 140\n  const j = 141\n  const k = 142\n  const l = 143\n  const m = 144\n  const n = 145\n  const a = 146\n  const b = 147\n  const c = 148\n  const d = 149\n  const e = 150\n  const f = 151\n  const g = 152\n  const h = 153\n  const i = 154\n  const j = 155\n  const k = 156\n  const l = 157\n  const m = 158\n  const n = 159\n  const a = 160\n  const b = 161\n  const c = 162\n  const d = 163\n  const e = 164\n  const f = 165\n  const g = 166\n  const h = 167\n  const i = 168\n  const j = 169\n  const k = 170\n  const l = 171\n  const m = 172\n  const n = 173\n  const a = 174\n  const b = 175\n  const c = 176\n  const d = 177\n  const e = 178\n  const f = 179\n  const g = 180\n  const h = 181\n  const i = 182\n  const j = 183\n  const k = 184\n  const l = 185\n  const m = 186\n  const n = 187\n  const a = 188\n  const b = 189\n  const c = 190\n  const d = 191\n  const e = 192\n  const f = 193\n  const g = 194\n  const h = 195\n  const i = 196\n  const j = 197\n  const k = 198\n  const l = 199\n  const m = 200\n  const n = 201\n  const a = 202\n  const b = 203\n  const c = 204\n  const d = 205\n  const e = 206\n  const f = 207\n  const g = 208\n  const h = 209\n  const i = 210\n  const j = 211\n  const k = 212\n  const l = 213\n  const m = 214\n  const n = 215\n  const a = 216\n  const b = 217\n  const c = 218\n  const d = 219\n  const e = 220\n  const f = 221", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t ,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = (a, b) => a + b;\n  const square = (a) => a * a;\n  const squareSum = (lst) => lst.reduce(sum, 0);\n  const squareSumSquares = (lst) => lst.reduce(square, 0);\n  return squareSumSquares(lst);\n};\n\nconst test = [1,2,3,4,5,6,7,8,9,10];\nconsole.log(sumSquares(test));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[0-9]/)\n}\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a number and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/[0-9]/)\n  return isANumber &&!isANumber.match(/[a-zA-Z]/)\n}\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[0-9]/)\n}\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a number and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/[0-9]/)\n  return isANumber &&!isANumber.match(/[a-zA-Z]/)\n}\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[0-9]/)\n}\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a number and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/[0-9]/)\n  return isANumber &&!isANumber.match(/[a-zA-Z]/)\n}\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[0-9]/)\n}\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a number and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  check", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return -1\n  }\n  let maxIndex = -1\n  let max = -1\n  let index = 0\n  let i = 0\n  while (i < arrLength) {\n    if (arr[i] > arr[max]) {\n      max = i\n      maxIndex = index\n    }\n    index++\n    i++\n  }\n  return maxIndex\n}\n\nmodule.exports = canArrange\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst)\n  const smallest = largestSmallest(lst)\n  if (largest === null || smallest === null) {\n    return (null, null)\n  }\n  return (largest, smallest)\n}\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallest = (lst) => {\n  const largest = largest(lst)\n  const smallest = smallest(lst)\n  if (largest === null || smallest === null) {\n    return (null, null)\n  }\n  return (largest, smallest)\n}\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallest = (lst) => {\n  const smallest = min(lst)\n  if (smallest === null) {\n    return null\n  }\n  return smallest\n}\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallest = (lst) => {\n  const smallest = min(lst)\n  if (smallest === null) {\n    return null\n  }\n  return smallest\n}\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst min = (lst) => {\n  const min = min(lst)\n  if (min === null) {\n    return null\n  }\n  return min\n}\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst max = (lst) => {\n  const max = max(lst)\n  if (max === null) {\n    return null\n  }\n  return max\n}\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst max = (lst) => {\n  const max = max(lst)\n  if (max === null) {\n    return null\n  }\n  return max\n}\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be .or ,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a.toFloat() > b? b : a;\n  }\n  return null;\n}\n\nconst compareO = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a.toFloat() > b? b : a;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a.toFloat() > b? b : a;\n  }\n  return null;\n}\n\nconst compare2 = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a.toFloat() > b? b : a;\n  }\n  return null;\n}\n\nconst compare3 = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a.toFloat() > b? b : a;\n  }\n  return null;\n}\n\nconst compare4 = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a.toFloat() > b? b : a;\n  }\n  return null;\n}\n\nconst compare5 = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a.toFloat() > b? b : a;\n  }\n  return null;\n}\n\nconst compare6 = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.toUpperCase() > b.toUpperCase()? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? b : a;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b.toFloat()? b : a;\n  }\n  if (typeof a === \"string", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writ", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1) ! * (n -2)! * ... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1)! * (n -2)! *... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to lon g est of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'bc', '", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(\" \")\n  let result = []\n  for (let i = 0; i < spaces.length; i++) {\n    let space = spaces[i]\n    if (space.length > 2) {\n      let spaces = space.split(\" \")\n      let newSpace = \"\"\n      for (let j = 0; j < spaces.length; j++) {\n        let space = spaces[j]\n        if (space.length > 2) {\n          let newSpace = newSpace + \"_\"\n        } else {\n          newSpace = newSpace + space\n        }\n      }\n      space = newSpace\n    } else {\n      space = space.replace(\" \", \"_\")\n    }\n    result.push(space)\n  }\n  return result.join(\" \")\n}\n\nconst fixSpaces2 = (text) => {\n  let spaces = text.split(\" \")\n  let result = []\n  for (let i = 0; i < spaces.length; i++) {\n    let space = spaces[i]\n    if (space.length > 2) {\n      let spaces = space.split(\" \")\n      let newSpace = \"\"\n      for (let j = 0; j < spaces.length; j++) {\n        let space = spaces[j]\n        if (space.length > 2) {\n          let newSpace = newSpace + \"-\"\n        } else {\n          newSpace = newSpace + space\n        }\n      }\n      space = newSpace\n    } else {\n      space = space.replace(\" \", \"-\")\n    }\n    result.push(space)\n  }\n  return result.join(\" \")\n}\n\nconst fixSpaces3 = (text) => {\n  let spaces = text.split(\" \")\n  let result = []\n  for (let i = 0; i < spaces.length; i++) {\n    let space = spaces[i]\n    if (space.length > 2) {\n      let spaces = space.split(\" \")\n      let newSpace = \"\"\n      for (let j = 0; j < spaces.length; j++) {\n        let space = spaces[j]\n        if (space.length > 2) {\n          let newSpace = newSpace + \"-\"\n        } else {\n          newSpace = newSpace + space\n        }\n      }\n      space = newSpace\n    } else {\n      space = space.replace(\" \", \"-\")\n    }\n    result.push(space)\n  }\n  return result.join(\" \")\n}\n\nconst fixSpaces4 = (text) => {\n  let spaces = text.split(\" \")\n  let result = []\n  for (let i = 0; i < spaces.length; i++) {\n    let space = spaces[i]\n    if (space.length > 2) {\n      let spaces = space.split(\" \")\n      let newSpace = \"\"\n      for (let j = 0; j < spaces.length; j++) {\n        let space = spaces[j]\n        if (space.length > 2) {\n          let newSpace = newSpace + \"-\"\n        } else {\n          newSpace = newSpace + space\n        }\n      }\n      space = newSpace\n    } else {\n      space = space.replace(\" \", \"-\")\n    }\n    result.push(space)\n  }\n  return result.join(\" \")\n}\n\nconst fixSpaces5 = (text) => {\n  let spaces = text.split(\" \")\n  let result = []\n  for (let i = 0; i < spaces.length; i++) {\n    let space = spaces[i]\n    if (space.length > 2) {\n      let spaces = space.split(\" \")\n      let newSpace = \"\"\n      for (let j = 0; j < spaces.length; j++) {\n        let space = spaces[j]\n        if (space.length > 2) {\n          let newSpace = newSpace + \"-\"\n        } else {\n          newSpace = newSpace + space\n        }\n      }\n      space = newSpace\n    } else {\n      space = space.replace(\" \", \"-\")\n    }\n    result.push(space)\n  }\n  return result.join(\" \")\n}\n\nconst fixSpaces6 = (text) => {\n  let spaces = text.split(\" \")\n  let result = []\n  for (let i = 0; i < spaces.length; i++) {\n    let space = spaces[i]\n    if (space.length > 2) {\n      let spaces = space.split(\" \")\n      let newSpace = \"\"\n      for (let j = 0; j < spaces.length; j++) {\n        let space = spaces[j]\n        if (space.length > 2) {\n          let newSpace = newSpace + \"-\"\n        } else {\n          newSpace = newSpace + space\n        }\n      }\n      space = newSpace\n    } else {\n      space = space.replace(\" \", \"-\")\n    }\n    result.push(space)\n  }\n  return result.join(\" \")\n}\n\nconst fixSpaces7 = (text) => {\n  let spaces = text.split(\" \")\n  let result = []\n  for (let i = 0; i < spaces.length; i++) {\n    let space = spaces[i]\n    if (space.length > 2) {\n      let spaces = space.split(\" \")\n      let newSpace = \"\"\n      for (let j = 0; j < spaces.length; j++) {\n        let space = spaces[j]\n        if (space.length > 2) {\n          let newSpace = newSpace + \"-\"\n        } else {\n          newSpace = newSpace + space\n        }\n      }\n      space = newSpace\n    } else {\n      space = space.replace(\" \", \"-\")\n    }\n    result.push(space)\n  }\n  return result.join(\" \")\n}\n\nconst fixSpaces8 = (text) => {\n  ", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representi n g a file's name, and retur ns\n  ' Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt', ' exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_array = file_name.split(\".\");\n  let file_name_length = file_name_array.length;\n  let file_name_first_letter = file_name_array[0];\n  let file_name_second_letter = file_name_array[1];\n  let file_name_third_letter = file_name_array[2];\n  let file_name_fourth_letter = file_name_array[3];\n  let file_name_fifth_letter = file_name_array[4];\n  let file_name_sixth_letter = file_name_array[5];\n  let file_name_seventh_letter = file_name_array[6];\n  let file_name_eighth_letter = file_name_array[7];\n  let file_name_ninth_letter = file_name_array[8];\n  let file_name_tenth_letter = file_name_array[9];\n  let file_name_eleventh_letter = file_name_array[10];\n  let file_name_twelfth_letter = file_name_array[11];\n  let file_name_thirteenth_letter = file_name_array[12];\n  let file_name_fourteenth_letter = file_name_array[13];\n  let file_name_fifteenth_letter = file_name_array[14];\n  let file_name_sixteenth_letter = file_name_array[15];\n  let file_name_seventeenth_letter = file_name_array[16];\n  let file_name_eighteenth_letter = file_name_array[17];\n  let file_name_nineteenth_letter = file_name_array[18];\n  let file_name_twentieth_letter = file_name_array[19];\n  let file_name_twenty_first_letter = file_name_array[20];\n  let file_name_twenty_second_letter = file_name_array[21];\n  let file_name_twenty_third_letter = file_name_array[22];\n  let file_name_twenty_fourth_letter = file_name_array[23];\n  let file_name_twenty_fifth_letter = file_name_array[24];\n  let file_name_twenty_sixth_letter = file_name_array[25];\n  let file_name_twenty_seventh_letter = file_name_array[26];\n  let file_name_twenty_eighth_letter = file_name_array[27];\n  let file_name_twenty_ninth_letter = file_name_array[28];\n  let file_name_twenty_tenth_letter = file_name_array[29];\n  let file_name_twenty_eleventh_letter = file_name_array[30];\n  let file_name_twenty_twelfth_letter = file_name_array[31];\n  let file_name_twenty_thirteenth_letter = file_name_array[32];\n  let file_name_twenty_fourteenth_letter = file_name_array[33];\n  let file_name_twenty_fifteenth_letter = file_name_array[34];\n  let file_name_twenty_sixteenth_letter = file_name_array[35];\n  let file_name_twenty_seventeenth_letter = file_name_array[36];\n  let file_name_twenty_eighteenth_letter = file_name_array[37];\n  let file_name_twenty_nineteenth_letter = file_name_array[38];\n  let file_name_twenty_twentieth_letter = file_name_array[39];\n  let file_name_twenty_twenty_first_letter = file_name_array[40];\n  let file_name_twenty_twenty_second_letter = file_name_array[41];\n  let file_name_twenty_twenty_third_letter = file_name_array[42];\n  let file_name_twenty_twenty_fourth_letter = file_name_array[43];\n  let file_name_twenty_twenty_fifth_letter = file_name_array[44];\n  let file_name_twenty_twenty_sixth_letter = file_name_array[45];\n  let file_name_twenty_twenty_seventh_letter = file_name_array[46];\n  let file_name_twenty_twenty_eighth_letter = file_name_array[47];\n  let file_name_twenty_twenty_ninth_letter = file_name_array[48];\n  let file_name_twenty_twenty_tenth_letter = file_name_array[49];\n  let file_name_twenty_twenty_eleventh_letter = file_name_array[50];\n  let file_name_twenty_twenty_twelfth_letter = file_name_array[51];\n  let file_name_twenty_twenty_thirteenth_letter = file_name_array[52];\n  let file_name_twenty_twenty_fourteenth_letter = file_name_array[53];\n  let file_name_twenty_twenty_fifteenth_letter = file_name_array[54];\n  let file_name_", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = isPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n  let xn = x.toString().split(\"/\")\n  let xd = n.toString().split(\"/\")\n  let xdlen = xd.length\n  let xlen = xn.length\n  if (xdlen === 1) {\n    return false\n  }\n  if (xlen === 1) {\n    return false\n  }\n  if (xn[0] === \"0\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"0\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"0\") {\n    return false\n  }\n  if (xd[0] === \"0\") {\n    return false\n  }\n  if (xn[0] === \"0\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"1\") {\n    return true\n  }\n  if (xn[xlen - 1] === \"1\") {\n    return true\n  }\n  if (xd[0] === \"1\") {\n    return true\n  }\n  if (xn[0] === \"1\") {\n    return true\n  }\n  if (xd[xdlen - 1] === \"2\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"2\") {\n    return false\n  }\n  if (xd[0] === \"2\") {\n    return false\n  }\n  if (xn[0] === \"2\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"3\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"3\") {\n    return false\n  }\n  if (xd[0] === \"3\") {\n    return false\n  }\n  if (xn[0] === \"3\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"4\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"4\") {\n    return false\n  }\n  if (xd[0] === \"4\") {\n    return false\n  }\n  if (xn[0] === \"4\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"5\") {\n    return true\n  }\n  if (xn[xlen - 1] === \"5\") {\n    return true\n  }\n  if (xd[0] === \"5\") {\n    return true\n  }\n  if (xn[0] === \"5\") {\n    return true\n  }\n  if (xd[xdlen - 1] === \"6\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"6\") {\n    return false\n  }\n  if (xd[0] === \"6\") {\n    return false\n  }\n  if (xn[0] === \"6\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"7\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"7\") {\n    return false\n  }\n  if (xd[0] === \"7\") {\n    return false\n  }\n  if (xn[0] === \"7\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"8\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"8\") {\n    return false\n  }\n  if (xd[0] === \"8\") {\n    return false\n  }\n  if (xn[0] === \"8\") {\n    return false\n  }\n  if (xd[xdlen - 1] === \"9\") {\n    return false\n  }\n  if (xn[xlen - 1] === \"9\") {\n    return false\n  }\n  if (xd[0] === \"9\") {\n    return false\n  }\n  if (xn[0] === \"9\") {\n    return false\n  }\n  return false\n}\n\nconsole.log(simplify(\"1/5 \", \" 5/ 1\"))\nconsole.log(simplify(\"1/6\", \"2/1 \"))\nconsole.log(simplify(\"7/10\", \"1 0/2\"))\nconsole.log(simplify(\"1/2\", \"2/1\"))\nconsole.log(simplify(\"1/3\", \"3/1\"))\nconsole.log(simplify(\"1/4\", \"4/1\"))\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"6/1\"))\nconsole.log(simplify(\"1/7\", \"7/1\"))\nconsole.log(simplify(\"1/8\", \"8/1\"))\nconsole.log(simplify(\"1/9\", \"9/1\"))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const sortedIndex = [];\n  const sortedSum = [];\n  const sortedSumIndex = [];\n  const sortedSumIndex2 = [];\n  const sortedSumIndex3 = [];\n  const sortedSumIndex4 = [];\n  const sortedSumIndex5 = [];\n  const sortedSumIndex6 = [];\n  const sortedSumIndex7 = [];\n  const sortedSumIndex8 = [];\n  const sortedSumIndex9 = [];\n  const sortedSumIndex10 = [];\n  const sortedSumIndex11 = [];\n  const sortedSumIndex12 = [];\n  const sortedSumIndex13 = [];\n  const sortedSumIndex14 = [];\n  const sortedSumIndex15 = [];\n  const sortedSumIndex16 = [];\n  const sortedSumIndex17 = [];\n  const sortedSumIndex18 = [];\n  const sortedSumIndex19 = [];\n  const sortedSumIndex20 = [];\n  const sortedSumIndex21 = [];\n  const sortedSumIndex22 = [];\n  const sortedSumIndex23 = [];\n  const sortedSumIndex24 = [];\n  const sortedSumIndex25 = [];\n  const sortedSumIndex26 = [];\n  const sortedSumIndex27 = [];\n  const sortedSumIndex28 = [];\n  const sortedSumIndex29 = [];\n  const sortedSumIndex30 = [];\n  const sortedSumIndex31 = [];\n  const sortedSumIndex32 = [];\n  const sortedSumIndex33 = [];\n  const sortedSumIndex34 = [];\n  const sortedSumIndex35 = [];\n  const sortedSumIndex36 = [];\n  const sortedSumIndex37 = [];\n  const sortedSumIndex38 = [];\n  const sortedSumIndex39 = [];\n  const sortedSumIndex40 = [];\n  const sortedSumIndex41 = [];\n  const sortedSumIndex42 = [];\n  const sortedSumIndex43 = [];\n  const sortedSumIndex44 = [];\n  const sortedSumIndex45 = [];\n  const sortedSumIndex46 = [];\n  const sortedSumIndex47 = [];\n  const sortedSumIndex48 = [];\n  const sortedSumIndex49 = [];\n  const sortedSumIndex50 = [];\n  const sortedSumIndex51 = [];\n  const sortedSumIndex52 = [];\n  const sortedSumIndex53 = [];\n  const sortedSumIndex54 = [];\n  const sortedSumIndex55 = [];\n  const sortedSumIndex56 = [];\n  const sortedSumIndex57 = [];\n  const sortedSumIndex58 = [];\n  const sortedSumIndex59 = [];\n  const sortedSumIndex60 = [];\n  const sortedSumIndex61 = [];\n  const sortedSumIndex62 = [];\n  const sortedSumIndex63 = [];\n  const sortedSumIndex64 = [];\n  const sortedSumIndex65 = [];\n  const sortedSumIndex66 = [];\n  const sortedSumIndex67 = [];\n  const sortedSumIndex68 = [];\n  const sortedSumIndex69 = [];\n  const sortedSumIndex70 = [];\n  const sortedSumIndex71 = [];\n  const sortedSumIndex72 = [];\n  const sortedSumIndex73 = [];\n  const sortedSumIndex74 = [];\n  const sortedSumIndex75 = [];\n  const sortedSumIndex76 = [];\n  const sortedSumIndex77 = [];\n  const sortedSumIndex78 = [];\n  const sortedSumIndex79 = [];\n  const sortedSumIndex80 = [];\n  const sortedSumIndex81 = [];\n  const sortedSumIndex82 = [];\n  const sortedSumIndex83 = [];\n  const sortedSumIndex84 = [];\n  const sortedSumIndex85 = [];\n  const sortedSumIndex86 = [];\n  const sortedSumIndex87 = [];\n  const sortedSumIndex88 = [];\n  const sortedSumIndex89 = [];\n  const sortedSumIndex90 = [];\n  const sortedSumIndex91 = [];\n  const sortedSumIndex92 = [];\n  const sortedSumIndex93 = [];\n  const sortedSumIndex94 = [];\n  const sortedSumIndex95 = [];\n  const sortedSumIndex96 = [];\n  const sortedSumIndex97 = [];\n  const sortedSumIndex98 = [];\n  const sortedSumIndex99 = [];\n  const sortedSumIndex100 = [];\n  const sortedSumIndex101 = [];\n  const sortedSumIndex102 = [];\n  const sortedSumIndex103 = [];\n  const sortedSumIndex104 = [];\n  const sortedSumIndex105 = [];\n  const sortedSumIndex106 = [];\n  const sortedSumIndex107 = [];\n  const sortedSumIndex108 = [];\n  const sortedSumIndex109 = [];\n  const sortedSumIndex110 = [];\n  const sortedSumIndex111 = [];\n  const sortedSumIndex112 = [];\n  const sortedSumIndex113 = [];\n  const sortedSumIndex114 = [];\n  const sortedSumIndex115 = [];\n  const sortedSumIndex116 = [];\n  const sortedSumIndex117 = [];\n  const sortedSumIndex118 = [];\n  const sortedSumIndex119 = [];\n  const sortedSumIndex120 = [];\n  const sortedSumIndex121 = [];\n  const sortedSumIndex122 = [];\n  const sortedSumIndex123 = [];\n  const sortedSumIndex124 = [];\n  const sortedSumIndex125 = [];\n  const sortedSumIndex126 = [];\n  const sortedSumIndex127 = [];\n  const sortedSumIndex128 = [];\n  const sortedSumIndex129 = [];\n  const sortedSumIndex130 = [];\n  const sortedSumIndex131 = [];\n  const sortedSumIndex132 = [];\n  const sortedSumIndex133 = [];\n  const sortedSumIndex134 = [];\n  const sortedSumIndex135 = [];\n  const sortedSumIndex136 = [];\n  const sortedSumIndex137 = [];\n  const sortedSumIndex138 = [];\n  const sortedSumIndex139 = [];\n  const sortedSumIndex140 = [];\n  const sortedSumIndex141 = [];\n  const sortedSumIndex142 = [];\n  const sortedSumIndex143 = [];\n  const sortedSumIndex144 = [];\n  const sortedSumIndex145 = [];\n  const sortedSumIndex146 = [];\n  const sortedSumIndex147 = [];\n  const sortedSumIndex148 = [];\n  const sortedSumIndex149 = [];\n  const sortedSumIndex150 = [];\n  const sortedSumIndex151 = [];\n  const sortedSumIndex152 = [];\n  const sortedSumIndex153 = [];", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury , the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury, the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet1 === planet || planet2 === planet) {\n      continue;\n    }\n    const distance = distance(planet1, planet2);\n    if (distance < 1) {\n      result.push([planet, distance]);\n    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;\n  const distance = Math.pow(x - y, 2);\n  return Math.sqrt(distance);\n};\n\nconst distance = (planet1, planet2) => {\n  const x = planet1.length;\n  const y = planet2.length;", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const l = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < l) {\n    const sum = 0;\n    let j = i;\n    while (j < l) {\n      sum += lst[j].length;\n      j++;\n    }\n    sorted.push(sum);\n    i++;\n  }\n  return sorted;\n};\n\nconst list_sort = (lst) => {\n  const sorted = [];\n  const l = lst.length;\n  let i = 0;\n  while (i < l) {\n    const j = i;\n    while (j < l) {\n      if (lst[j].length > lst[i].length) {\n        sorted.push(lst[i]);\n        i = j;\n      } else if (lst[j].length < lst[i].length) {\n        sorted.push(lst[j]);\n        j = l;\n      } else {\n        if (lst[j].length === lst[i].length) {\n          if (lst[j].toLowerCase() > lst[i].toLowerCase()) {\n            sorted.push(lst[i]);\n            i = j;\n          } else {\n            sorted.push(lst[j]);\n            j = l;\n          }\n        }\n      }\n    }\n    sorted.push(lst[i]);\n    i = l;\n  }\n  return sorted;\n};\n\nconst list_sort_by_length = (lst) => {\n  const sorted = [];\n  const l = lst.length;\n  let i = 0;\n  while (i < l) {\n    const j = i;\n    while (j < l) {\n      if (lst[j].length > lst[i].length) {\n        sorted.push(lst[i]);\n        i = j;\n      } else if (lst[j].length < lst[i].length) {\n        sorted.push(lst[j]);\n        j = l;\n      } else {\n        if (lst[j].length === lst[i].length) {\n          if (lst[j].toLowerCase() > lst[i].toLowerCase()) {\n            sorted.push(lst[i]);\n            i = j;\n          } else {\n            sorted.push(lst[j]);\n            j = l;\n          }\n        }\n      }\n    }\n    sorted.push(lst[i]);\n    i = l;\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_sorted = (lst) => {\n  const sorted = [];\n  const l = lst.length;\n  let i = 0;\n  while (i < l) {\n    const j = i;\n    while (j < l) {\n      if (lst[j].length > lst[i].length) {\n        sorted.push(lst[i]);\n        i = j;\n      } else if (lst[j].length < lst[i].length) {\n        sorted.push(lst[j]);\n        j = l;\n      } else {\n        if (lst[j].length === lst[i].length) {\n          if (lst[j].toLowerCase() > lst[i].toLowerCase()) {\n            sorted.push(lst[i]);\n            i = j;\n          } else {\n            sorted.push(lst[j]);\n            j = l;\n          }\n        }\n      }\n    }\n    sorted.push(lst[i]);\n    i = l;\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_sorted_reverse = (lst) => {\n  const sorted = [];\n  const l = lst.length;\n  let i = 0;\n  while (i < l) {\n    const j = i;\n    while (j < l) {\n      if (lst[j].length > lst[i].length) {\n        sorted.push(lst[i]);\n        i = j;\n      } else if (lst[j].length < lst[i].length) {\n        sorted.push(lst[j]);\n        j = l;\n      } else {\n        if (lst[j].length === lst[i].length) {\n          if (lst[j].toLowerCase() > lst[i].toLowerCase()) {\n            sorted.push(lst[i]);\n            i = j;\n          } else {\n            sorted.push(lst[j]);\n            j = l;\n          }\n        }\n      }\n    }\n    sorted.push(lst[i]);\n    i = l;\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_sorted_reverse_reverse = (lst) => {\n  const sorted = [];\n  const l = lst.length;\n  let i = 0;\n  while (i < l) {\n    const j = i;\n    while (j < l) {\n      if (lst[j].length > lst[i].length) {\n        sorted.push(lst[i]);\n        i = j;\n      ", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 2)\n  '0 1'\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 4)\n  '0 1 2 3'\n  >>> stringSequence(5, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence(5, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence(5, 7)\n  '0 1 2 3 4 5 6 7'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence(5, 8)\n  '0 1 2 3 4 5 6 7 8'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(5, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  for (let i = 0; i < n2; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> stringSequence(5, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    let sum = 0;\n    for (let i = 0; i < t.length; i++) {\n        sum += Math.pow(t[i], 2);\n    }\n    return sum;\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known .  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g .\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length , where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not , the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known.  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g.\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length, where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not, the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.slice();\n  const guesses = guess.slice();\n  const diff = [];\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === guesses[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(scores[i] - guesses[i]));\n    }\n  }\n  return diff;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM .  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM.  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.toLowerCase();\n    const extension_strength = strength[extension_name] || 0;\n    const extension_strength_cap = extension_name.length - extension_name.replace(/[a-z]/g, '').length;\n    strength[extension_name] = extension_strength_cap - extension_strength;\n  }\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[b] - strength[a])[0];\n  return class_name + '.' + strongest_extension;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n  const cpattern = /[a-zA-Z]+/;\n  const cycpattern = /[a-zA-Z]+/;\n  const cycpattern2 = /[a-zA-Z]+/;\n  const cycpattern3 = /[a-zA-Z]+/;\n  const cycpattern4 = /[a-zA-Z]+/;\n  const cycpattern5 = /[a-zA-Z]+/;\n  const cycpattern6 = /[a-zA-Z]+/;\n  const cycpattern7 = /[a-zA-Z]+/;\n  const cycpattern8 = /[a-zA-Z]+/;\n  const cycpattern9 = /[a-zA-Z]+/;\n  const cycpattern10 = /[a-zA-Z]+/;\n  const cycpattern11 = /[a-zA-Z]+/;\n  const cycpattern12 = /[a-zA-Z]+/;\n  const cycpattern13 = /[a-zA-Z]+/;\n  const cycpattern14 = /[a-zA-Z]+/;\n  const cycpattern15 = /[a-zA-Z]+/;\n  const cycpattern16 = /[a-zA-Z]+/;\n  const cycpattern17 = /[a-zA-Z]+/;\n  const cycpattern18 = /[a-zA-Z]+/;\n  const cycpattern19 = /[a-zA-Z]+/;\n  const cycpattern20 = /[a-zA-Z]+/;\n  const cycpattern21 = /[a-zA-Z]+/;\n  const cycpattern22 = /[a-zA-Z]+/;\n  const cycpattern23 = /[a-zA-Z]+/;\n  const cycpattern24 = /[a-zA-Z]+/;\n  const cycpattern25 = /[a-zA-Z]+/;\n  const cycpattern26 = /[a-zA-Z]+/;\n  const cycpattern27 = /[a-zA-Z]+/;\n  const cycpattern28 = /[a-zA-Z]+/;\n  const cycpattern29 = /[a-zA-Z]+/;\n  const cycpattern30 = /[a-zA-Z]+/;\n  const cycpattern31 = /[a-zA-Z]+/;\n  const cycpattern32 = /[a-zA-Z]+/;\n  const cycpattern33 = /[a-zA-Z]+/;\n  const cycpattern34 = /[a-zA-Z]+/;\n  const cycpattern35 = /[a-zA-Z]+/;\n  const cycpattern36 = /[a-zA-Z]+/;\n  const cycpattern37 = /[a-zA-Z]+/;\n  const cycpattern38 = /[a-zA-Z]+/;\n  const cycpattern39 = /[a-zA-Z]+/;\n  const cycpattern40 = /[a-zA-Z]+/;\n  const cycpattern41 = /[a-zA-Z]+/;\n  const cycpattern42 = /[a-zA-Z]+/;\n  const cycpattern43 = /[a-zA-Z]+/;\n  const cycpattern44 = /[a-zA-Z]+/;\n  const cycpattern45 = /[a-zA-Z]+/;\n  const cycpattern46 = /[a-zA-Z]+/;\n  const cycpattern47 = /[a-zA-Z]+/;\n  const cycpattern48 = /[a-zA-Z]+/;\n  const cycpattern49 = /[a-zA-Z]+/;\n  const cycpattern50 = /[a-zA-Z]+/;\n  const cycpattern51 = /[a-zA-Z]+/;\n  const cycpattern52 = /[a-zA-Z]+/;\n  const cycpattern53 = /[a-zA-Z]+/;\n  const cycpattern54 = /[a-zA-Z]+/;\n  const cycpattern55 = /[a-zA-Z]+/;\n  const cycpattern56 = /[a-zA-Z]+/;\n  const cycpattern57 = /[a-zA-Z]+/;\n  const cycpattern58 = /[a-zA-Z]+/;\n  const cycpattern59 = /[a-zA-Z]+/;\n  const cycpattern60 = /[a-zA-Z]+/;\n  const cycpattern61 = /[a-zA-Z]+/;\n  const cycpattern62 = /[a-zA-Z]+/;\n  const cycpattern63 = /[a-zA-Z]+/;\n  const cycpattern64 = /[a-zA-Z]+/;\n  const cycpattern65 = /[a-zA-Z]+/;\n  const cycpattern66 = /[a-zA-Z]+/;\n  const cycpattern67 = /[a-zA-Z]+/;\n  const cycpattern68 = /[a-zA-Z]+/;\n  const cycpattern69 = /[a-zA-Z]+/;\n  const cycpattern70 = /[a-zA-Z]+/;\n  const cycpattern71 = /[a-zA-Z]+/;\n  const cycpattern72 = /[a-zA-Z]+/;\n  const cycpattern73 =", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let num = number;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      result = result + 'x';\n      num = num / 10;\n    } else if (num % 5 === 0) {\n      result = result + 'v';\n      num = num / 5;\n    } else if (num % 4 === 0) {\n      result = result + 'iv';\n      num = num / 4;\n    } else if (num % 3 === 0) {\n      result = result + 'iii';\n      num = num / 3;\n    } else if (num % 2 === 0) {\n      result = result + 'ii';\n      num = num / 2;\n    } else {\n      result = result + 'i';\n      num = num;\n    }\n  }\n  return result;\n};\n\nconsole.log(intToMiniRoman(19));\nconsole.log(intToMiniRoman(152));\nconsole.log(intToMiniRoman(426));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true if the thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1,", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \" , \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\" ,\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max =", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts , but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining;\n  const result = [];\n  if (total <= 0) {\n    result.push(0);\n    result.push(0);\n    return result;\n  }\n  if (total <= left) {\n    result.push(total);\n    result.push(left - total);\n    return result;\n  }\n  result.push(left);\n  result.push(0);\n  return result;\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1)\n    } else {\n      map.set(char, 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char.toLowerCase())) {\n      map.set(char.toLowerCase(), map.get(char.toLowerCase()) + 1)\n    } else {\n      map.set(char.toLowerCase(), 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char.toUpperCase())) {\n      map.set(char.toUpperCase(), map.get(char.toUpperCase()) + 1)\n    } else {\n      map.set(char.toUpperCase(), 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char.toLowerCase())) {\n      map.set(char.toLowerCase(), map.get(char.toLowerCase()) + 1)\n    } else {\n      map.set(char.toLowerCase(), 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char.toUpperCase())) {\n      map.set(char.toUpperCase(), map.get(char.toUpperCase()) + 1)\n    } else {\n      map.set(char.toUpperCase(), 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char.toLowerCase())) {\n      map.set(char.toLowerCase(), map.get(char.toLowerCase()) + 1)\n    } else {\n      map.set(char.toLowerCase(), 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char.toUpperCase())) {\n      map.set(char.toUpperCase(), map.get(char.toUpperCase()) + 1)\n    } else {\n      map.set(char.toUpperCase(), 1)\n    }\n  }\n  return map.size\n}\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (map.has(char.toLowerCase())) {\n      map.set(char.toLowerCase(), map.get(char.toLowerCase()) + 1)\n    } else {\n      map.set(char.toLowerCase(), 1)\n    }\n  }\n  return map.size\n}", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len && j < len2) {\n    const op = operator[i]\n    const op2 = operand[j]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len && j < len2) {\n    const op = operator[i]\n    const op2 = operand[j]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len && j < len2) {\n    const op = operator[i]\n    const op2 = operand[j]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len && j < len2) {\n    const op = operator[i]\n    const op2 = operand[j]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len && j < len2) {\n    const op = operator[i]\n    const op2 = operand[j]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len && j < len2) {\n    const op = operator[i]\n    const op2 = operand[j]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      ", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is .\n  Ifthe string contains no letters , reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is.\n  Ifthe string contains no letters, reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  let j = str.length - 1;\n  while (i < j) {\n    if (str[i] === str[j]) {\n      result += str[i];\n      i++;\n      j--;\n    } else if (str[i] === str[j].toLowerCase()) {\n      result += str[i].toUpperCase();\n      i++;\n      j--;\n    } else {\n      result += str[j].toLowerCase();\n      j--;\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r .\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) =>", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last .\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = [];\n  const current_note = 0;\n  const current_beat = 0;\n  const current_beat_length = 0;\n  const current_note_length = 0;\n  const current_note_length_in_beats = 0;\n  const current_note_length_in_seconds = 0;\n  const current_note_length_in_seconds_in_beats = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters_in_quarters = 0;\n  const current_note_length_in_seconds_in_beats_in_quarters_in_quarters_", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s .\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      start = i;\n      end = i + 1;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n          end = i + j + 1;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return string.slice(start, end);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      start = i;\n      end = i + 1;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n          end = i + j + 1;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return string.slice(start, end);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      start = i;\n      end = i + 1;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n          end = i + j + 1;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return string.slice(start, end);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      start = i;\n      end = i + 1;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n          end = i + j + 1;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return string.slice(start, end);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = 0;\n  for (let i = 0; i < string.length; i++)", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero' ,  'one', 'two',  'three', 'f our','five', 'six', 'seven', 'eight' and ' nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers2 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers3('one two three')\n  'one two three'\n  */\nconst sortNumbers3 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers4('one two three')\n  'one two three'\n  */\nconst sortNumbers4 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers5('one two three')\n  'one two three'\n  */\nconst sortNumbers5 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers6('one two three')\n  'one two three'\n  */\nconst sortNumbers6 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers7('one two three')\n  'one two three'\n  */\nconst sortNumbers7 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers8('one two three')\n  'one two three'\n  */\nconst sortNumbers8 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers9('one two three')\n  'one two three'\n  */\nconst sortNumbers9 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsFloat = number - numberAsInt;\n  const numberAsDecimal = numberAsFloat * Math.pow(10, numberAsInt);\n  return numberAsDecimal;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = sort(numbers);\n  const closestElements = [];\n  const closestElementsLength = sortedNumbers.length;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    const closestElement = sortedNumbers[i];\n    const closestElementsIndex = closestElements.indexOf(closestElement);\n    if (closestElementsIndex === -1) {\n      closestElements.push(closestElement);\n    } else {\n      if (Math.abs(closestElement - sortedNumbers[closestElementsIndex]) > Math.abs(closestElement - sortedNumbers[i])) {\n        closestElements[closestElementsIndex] = closestElement;\n      }\n    }\n  }\n  return closestElements;\n};\n\nexport default findClosestElements;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (ofat least two elements) ,  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const diff = max - min;\n  const scale = 1 / diff;\n  return numbers.map((x) => x * scale);\n};\n\nexport default rescaleToUnit;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUnique = (values, list) => {\n  return values.filter(v => list.indexOf(v) === -1);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueInt = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  return filterUnique(values, list);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// that are not already in the given list\nconst filterUniqueIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (values, list) => {\n  ", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return a copy of given string\n  >>> strcopy('abc')\n  'abc'\n  >>> strcopy('abc')\n  'abc'\n  */\nconst strcopy = (string) => {\n  return string;\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.slice(0, length);\n};\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> str", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple2 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple3 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple4 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple5 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple6 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple7 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple8 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple9 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple10 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple11 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that n = t * k, where k is an integer\n  >>> largestMultiple(15)\n  6\n  */\nconst largestMultiple12 = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = Math.max(result, i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number t such that", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to  small st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors of given integer in the order from largest to  small st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse(8)\n  [2, 2, 2]\n  >>> factorizeReverse(25)\n  [5, 5]\n  >>> factorizeReverse(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse2 = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors of given integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse2(8)\n  [2, 2, 2]\n  >>> factorizeReverse2(25)\n  [5, 5]\n  >>> factorizeReverse2(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse3 = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors of given integer in the order from largest to  small st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse3(8)\n  [2, 2, 2]\n  >>> factorizeReverse3(25)\n  [5, 5]\n  >>> factorizeReverse3(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse4 = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors of given integer in the order from largest to  small st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse4(8)\n  [2, 2, 2]\n  >>> factorizeReverse4(25)\n  [5, 5]\n  >>> factorizeReverse4(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse5 = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors of given integer in the order from largest to  small st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse5(8)\n  [2, 2, 2]\n  >>> factorizeReverse5(25)\n  [5, 5]\n  >>> factorizeReverse5(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse6 = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors.reverse()\n}\n\n/* Return list of prime factors of given integer in the order from largest to  small", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the vowels replaced by an underscore.\n  >>> replaceVowels('hello')\n  'hello'\n  */\nconst replaceVowels = (string) => {\n  return string.replace(/[aeiou]/g, '_');\n};\n\n/*\n  Given a string, return a string with all the consonants replaced by an underscore.\n  >>> replaceConsonants('hello')\n  'hello'\n  */\nconst replaceConsonants = (string) => {\n  return string.replace(/[bcdfghjklmnpqrstvwxz]/g, '_');\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll2 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll3 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll4 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll5 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll6 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll7 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll8 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll9 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll10 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll11 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll12 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll13 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll14 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll15 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll16 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll17 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll18 = (string) => {\n  return replaceConsonants(replaceVowels(string));\n};\n\n/*\n  Given a string, return a string with all the consonants and vowels replaced by an underscore.\n  >>> replaceAll('hello')\n  'hello'\n  */\nconst replaceAll19 = (string) => {", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>>", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 9) return true\n  const limit = Math.sqrt(n)\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>> count", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 + ....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l .\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  re t x = xs[0];\n  for (i nd i = 1; i < xs.length; i ++) {\n    if (xs[i] < x) {\n      x = xs[i];\n    }\n  }\n  return x;\n}\n/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  re t x = xs[0];\n  for (i nd i = 1; i < xs.length; i ++) {\n    if (xs[i] < x) {\n      x = xs[i];\n    }\n  }\n  return x;\n}\n/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  re t x = xs[0];\n  for (i nd i = 1; i < xs.length; i ++) {\n    if (xs[i] < x) {\n      x = xs[i];\n    }\n  }\n  return x;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    let index = i\n    while (index < l.length - 1 && l[index] % 3!= 0) {\n      index++\n    }\n    sorted.push(l[index])\n  }\n  return sorted\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    let index = i\n    while (index < l.length - 1 && l[index] % 3!= 0) {\n      index++\n    }\n    sorted.push(l[index])\n  }\n  return sorted\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    let index = i\n    while (index < l.length - 1 && l[index] % 3!= 0) {\n      index++\n    }\n    sorted.push(l[index])\n  }\n  return sorted\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    let index = i\n    while (index < l.length - 1 && l[index] % 3!= 0) {\n      index++\n    }\n    sorted.push(l[index])\n  }\n  return sorted\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    let index = i\n    while (index < l.length - 1 && l[index] % 3!= 0) {\n      index++\n    }\n    sorted.push(l[index])\n  }\n  return sorted\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    let index = i\n    while (index < l.length - 1 && l[index] % 3!= 0) {\n      index++\n    }\n    sorted.push(l[index])\n  }\n  return sorted\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(l[i])) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[l[i]] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn2 = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn3 = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn4 = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn5 = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn6 = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn7 = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap[fn(l[i])] = 1\n  }\n  return uniqueList\n}\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn8 = (l, fn) => {\n  const uniqueList = []\n  const uniqueMap = {}\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueMap.hasOwnProperty(fn(l[i]))) {\n      continue\n    }\n    uniqueList.push(l[i])\n    uniqueMap", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => {\n    return a > b? a : b;\n  }, -Infinity);\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0\n  let buzz = 0\n  let div = 11\n  let div2 = 13\n  let div3 = 17\n  let div4 = 19\n  let div5 = 23\n  let div6 = 29\n  let div7 = 31\n  let div8 = 37\n  let div9 = 41\n  let div10 = 43\n  let div11 = 47\n  let div12 = 53\n  let div13 = 59\n  let div14 = 61\n  let div15 = 67\n  let div16 = 71\n  let div17 = 73\n  let div18 = 79\n  let div19 = 83\n  let div20 = 89\n  let div21 = 97\n  let div22 = 101\n  let div23 = 103\n  let div24 = 107\n  let div25 = 109\n  let div26 = 113\n  let div27 = 127\n  let div28 = 131\n  let div29 = 137\n  let div30 = 139\n  let div31 = 149\n  let div32 = 151\n  let div33 = 157\n  let div34 = 163\n  let div35 = 167\n  let div36 = 173\n  let div37 = 179\n  let div38 = 181\n  let div39 = 191\n  let div40 = 193\n  let div41 = 197\n  let div42 = 199\n  let div43 = 211\n  let div44 = 223\n  let div45 = 227\n  let div46 = 229\n  let div47 = 233\n  let div48 = 239\n  let div49 = 241\n  let div50 = 251\n  let div51 = 257\n  let div52 = 263\n  let div53 = 269\n  let div54 = 271\n  let div55 = 277\n  let div56 = 281\n  let div57 = 283\n  let div58 = 293\n  let div59 = 307\n  let div60 = 311\n  let div61 = 313\n  let div62 = 317\n  let div63 = 331\n  let div64 = 337\n  let div65 = 347\n  let div66 = 349\n  let div67 = 353\n  let div68 = 359\n  let div69 = 367\n  let div70 = 373\n  let div71 = 379\n  let div72 = 383\n  let div73 = 389\n  let div74 = 397\n  let div75 = 401\n  let div76 = 409\n  let div77 = 419\n  let div78 = 421\n  let div79 = 431\n  let div80 = 433\n  let div81 = 439\n  let div82 = 447\n  let div83 = 457\n  let div84 = 461\n  let div85 = 463\n  let div86 = 467\n  let div87 = 479\n  let div88 = 487\n  let div89 = 491\n  let div90 = 499\n  let div91 = 503\n  let div92 = 509\n  let div93 = 521\n  let div94 = 523\n  let div95 = 541\n  let div96 = 547\n  let div97 = 557\n  let div98 = 563\n  let div99 = 569\n  let div100 = 571\n  let div101 = 577\n  let div102 = 587\n  let div103 = 593\n  let div104 = 599\n  let div105 = 601\n  let div106 = 607\n  let div107 = 613\n  let div108 = 617\n  let div109 = 619\n  let div110 = 631\n  let div111 = 641\n  let div112 = 643\n  let div113 = 647\n  let div114 = 653\n  let div115 = 659\n  let div116 = 661\n  let div117 = 673\n  let div118 = 677\n  let div119 = 683\n  let div120 = 691\n  let div121 = 701\n  let div122 = 709\n  let div123 = 719\n  let div124 = 727\n  let div125 = 733\n  let div126 = 739\n  let div127 = 743\n  let div128 = 751\n  let div129 = 757\n  let div130 = 761\n  let div131 = 769\n  let div132 = 787\n  let div133 = 797\n  let div134 = 809\n  let div135 = 811\n  let div136 = 821\n  let div137 = 823\n  let div138 = 827\n  let div139 = 829\n  let div140 = 839\n  let div141 = 853\n  let div142 = 857\n  let div143 = 859\n  let div144 = 863\n  let div145 = 877\n  let div146 = 881\n  let div147 = 883\n  let div148 = 887\n  let div149 = 907\n  let div150 = 911\n  let div151 = 919\n  let div152 = 929\n  let div153 = 937\n  let div154 = 941\n  let div155 = 947\n  let div156 = 953\n  let div157 = 967\n  let div158 = 971\n  let div159 = 977\n  let div160 = 983\n  let div161 = 991\n  let div162 = 997\n  let div163 = 1009\n  let div164 = 1013\n  let div165 = 1019\n  let div166 = 1021\n  let div167 = 1031\n  let div168 = 1033\n  let div169 = 1039\n  let div170 = 1049\n  let div171 = 1051\n  let div172 = 1061\n  let div173 = 1063\n  let div174 = 1069\n  let div175 = 1087\n  let div176 = 1091\n  let div177 = 1093\n  let div178 = 1097\n  let div179 = 1103\n  let div180 = 1109\n  let div181 = 1117\n  let div182 = 1123\n  let div183 = 1129\n  let div184 = 1141\n  let div185 = 1147\n  let div186 = 1153\n  let div187 = 1163\n  let div188 = 1171\n  let div189 = 1181\n  let div190 = 1187\n  let div191 = 1193\n  ", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const even = sorted.filter((x) => x % 2 === 0);\n  const odd = sorted.filter((x) => x % 2!== 0);\n  return even.concat(odd);\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2 .push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i < Math.floor((s.length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic2 = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i < Math.floor((s.length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic3 = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i < Math.floor((s.length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic4 = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i < Math.floor((s.length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic5 = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i < Math.floor((s.length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic6 = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i < Math.floor((s.length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic7 = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i < Math.floor((s.length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic8 = (s ) => {\n  var groups = [], groups2 = [];\n  for(let i = 0; i", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime .\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = fib;\n    }\n  }\n  return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const sum = numbers.reduce((acc, n) => acc + Math.abs(n - mean), 0)\n  return sum / numbers.length\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Mean of this d a taset.\n Mean is the average of all the numbers in the list:\n  >>> mean([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst mean = (numbers) => {\n  return numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Standard Deviation of this d a taset.\n Standard Deviation is the square root of the  variance of the list:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.414\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers)\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Variance of this d a taset.\n Variance is the average of the squares of the differences between each number and the mean of the list:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.reduce((acc, n) => acc + (n - mean) * (n - mean), 0) / numbers.length\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Standard Deviation of this d a taset.\n Standard Deviation is the square root of the  variance of the list:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.414\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers)\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Variance of this d a taset.\n Variance is the average of the squares of the differences between each number and the mean of the list:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.reduce((acc, n) => acc + (n - mean) * (n - mean), 0) / numbers.length\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Standard Deviation of this d a taset.\n Standard Deviation is the square root of the  variance of the list:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.414\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers)\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Variance of this d a taset.\n Variance is the average of the squares of the differences between each number and the mean of the list:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.reduce((acc, n) => acc + (n - mean) * (n - mean), 0) / numbers.length\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Standard Deviation of this d a taset.\n Standard Deviation is the square root of the  variance of the list:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.414\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers)\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Variance of this d a taset.\n Variance is the average of the squares of the differences between each number and the mean of the list:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.reduce((acc, n) => acc + (n - mean) * (n - mean), 0) / numbers.length\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Standard Deviation of this d a taset.\n Standard Deviation is the square root of the  variance of the list:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.414\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers)\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Variance of this d a taset.\n Variance is the average of the squares of the differences between each number and the mean of the list:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.reduce((acc, n) => acc + (n - mean) * (n - mean), 0) / numbers.length\n}\n\n/*\n  For a given list of inputnumbers, calculate the  Standard Deviation of this d a t", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result , th ey  continuemoving\n  in  their traje ctoryasif they did not collide .\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result, th ey  continuemoving\n  in  their traje ctoryasif they did not collide.\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n    const carRaceCol lisi = []\n    for (let i = 0; i < n; i++) {\n        const carRaceCol lisi = []\n        for (let j = 0; j < n; j++) {\n            const carRaceCol lisi = []\n            for (let k = 0; k < n; k++) {\n                const carRaceCol lisi = []\n                for (let l = 0; l < n; l++) {\n                    const carRaceCol lisi = []\n                    for (let m = 0; m < n; m++) {\n                        const carRaceCol lisi = []\n                        for (let n = 0; n < n; n++) {\n                            const carRaceCol lisi = []\n                            for (let o = 0; o < n; o++) {\n                                const carRaceCol lisi = []\n                                for (let p = 0; p < n; p++) {\n                                    const carRaceCol lisi = []\n                                    for (let q = 0; q < n; q++) {\n                                        const carRaceCol lisi = []\n                                        for (let r = 0; r < n; r++) {\n                                            const carRaceCol lisi = []\n                                            for (let s = 0; s < n; s++) {\n                                                const carRaceCol lisi = []\n                                                for (let t = 0; t < n; t++) {\n                                                    const carRaceCol lisi = []\n                                                    for (let u = 0; u < n; u++) {\n                                                        const carRaceCol lisi = []\n                                                        for (let v = 0; v < n; v++) {\n                                                            const carRaceCol lisi = []\n                                                            for (let w = 0; w < n; w++) {\n                                                                const carRaceCol lisi = []\n                                                                for (let x = 0; x < n; x++) {\n                                                                    const carRaceCol lisi = []\n                                                                    for (let y = 0; y < n; y++) {\n                                                                        const carRaceCol lisi = []\n                                                                        for (let z = 0; z < n; z++) {\n                                                                            const carRaceCol lisi = []\n                                                                            for (let A = 0; A < n; A++) {\n                                                                                const carRaceCol lisi = []\n                                                                                for (let B = 0; B < n; B++) {\n                                                                                    const carRaceCol lisi = []\n                                                                                    for (let C = 0; C < n; C++) {\n                                                                                        const carRaceCol lisi = []\n                                                                                        for (let D = 0; D < n; D++) {\n                                                                                            const carRaceCol lisi = []\n                                                                                            for (let E = 0; E < n; E++) {\n                                                                                                const carRaceCol lisi = []\n                                                                                                for (let F = 0; F < n; F++) {\n                                                                                                    const carRaceCol lisi = []\n                                                                                                    for (let G = 0; G < n; G++) {\n                                                                                                        const carRaceCol lisi = []\n                                                                                                        for (let H = 0; H < n; H++) {\n                                                                                                            const carRaceCol lisi = []\n                                                                                                            for (let I = 0; I < n; I++) {\n                                                                                                                const carRaceCol lisi = []\n                                                                                                                for (let J = 0; J < n; J++) {\n                                                                                                                    const carRaceCol lisi = []\n                                                                                                                    for (let K = 0; K < n; K++) {\n                                                                                                                        const carRaceCol lisi = []\n                                                                                                                        for (let L = 0; L < n; L++) {\n                                                                                                                        \tconst carRaceCol lisi = []\n                                                                                                                        \tfor (let M = 0; M < n; M++) {\n                                                                                                                        \t    const carRaceCol lisi = []\n                                                                                                                        \t    for (let N = 0; N < n; N++) {\n                                                                                                                        \t        const carRaceCol lisi = []\n                                                                                                                        \t        for (let O = 0; O < n; O++) {\n                                                                                                                        \t            const carRaceCol lisi = []\n                                                                                                                        \t            for (let P = 0; P < n; P++) {\n                                                                                                                        \t                const carRaceCol lisi = []\n                                                                                                                        \t                for (let Q = 0; Q < n; Q++) {\n                                                                                                                        \t                    const carRaceCol lisi = []\n                                                                                                                        \t                    for (let R = 0; R < n; R++) {\n                                                                                                                        \t                        const carRaceCol lisi = []\n                                                                                                                        \t                        for (let S = 0; S < n; S++) {\n                                                                                                                        \t                            const carRaceCol lisi = []\n                                                                                                                        \t                            for (let T = 0; T < n; T++) {\n                                                                                                                        \t                                const carRaceCol lisi = []\n                                                                                                                        \t                                for (", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1\n  return l.reduce((acc, x) => [...acc, incr(x)], [])\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 3, 2, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (x) => x - 1\n  return l.reduce((acc, x) => [...acc, decr(x)], [])\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6,", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.filter((x, i) => i < l.length - 1)\n  const sum = pairs.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const pairs = l.filter((x, i) => i < l.length - 1)\n  const sum = pairs.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const pairs = l.filter((x, i) => i < l.length - 1)\n  const sum = pairs.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  const pairs = l.filter((x, i) => i < l.length - 1)\n  const sum = pairs.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  const pairs = l.filter((x, i) => i < l.length - 1)\n  const sum = pairs.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  const pairs = l.filter((x, i) => i < l.length - 1)\n  const sum = pairs.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  const pairs = l.filter((x, i) => i < l.length - 1)\n  const sum = pairs.reduce((acc, x) => acc + x, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  ", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase2 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase3 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase4 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase5 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase6 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase7 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase8 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase9 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase10 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase11 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase12 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase13 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase14 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase15 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase16 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase17 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    count++;\n  }\n  return result.toString();\n};\n\nconst convertBase18 = (x, base) => {\n  let result = '';\n  let count = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea2(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea3(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea4(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea5(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea6(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea7(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea8(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea9(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea10(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea11(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea12(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea13(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea14(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea15(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea16(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea17(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea18(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea19(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea20(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea21(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea22(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea23(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea24(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high of a triangle, return area.\n  >>> triangleArea25(5, 3)\n  7.5\n  */\nconst triangleArea26 =", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = text.substring(0, half);\n    let right = text.substring(half, textLength);\n    return left === right;\n};\n\n/*\n  Finds the longest palindrome in a string\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('abcdab')\n  'abcdab'\n  >>> findLongestPalindrome('abcdabcd')\n  'abcdabcd'\n  >>> findLongestPalindrome('abcdabcdab')\n  'abcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcd')\n  'abcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdab')\n  'abcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcd')\n  'abcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdab')\n  'abcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> findLongestPalindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> findLongestPalindrome('abcdabcdabcdabcd", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p\n}\n\n/*Return the number of 1 bits in n.\n  >>> bitcount(0)\n  0\n  >>> bitcount(1)\n  1\n  >>> bitcount(2)\n  1\n  >>> bitcount(3)\n  2\n  >>> bitcount(4)\n  2\n  >>> bitcount(5)\n  3\n  >>> bitcount(6)\n  3\n  >>> bitcount(7)\n  4\n  >>> bitcount(8)\n  4\n  >>> bitcount(9)\n  5\n  >>> bitcount(10)\n  5\n  >>> bitcount(11)\n  6\n  >>> bitcount(12)\n  6\n  >>> bitcount(13)\n  7\n  >>> bitcount(14)\n  7\n  >>> bitcount(15)\n  8\n  >>> bitcount(16)\n  8\n  >>> bitcount(17)\n  9\n  >>> bitcount(18)\n  9\n  >>> bitcount(19)\n  10\n  >>> bitcount(20)\n  10\n  >>> bitcount(21)\n  11\n  >>> bitcount(22)\n  11\n  >>> bitcount(23)\n  12\n  >>> bitcount(24)\n  12\n  >>> bitcount(25)\n  13\n  >>> bitcount(26)\n  13\n  >>> bitcount(27)\n  14\n  >>> bitcount(28)\n  14\n  >>> bitcount(29)\n  15\n  >>> bitcount(30)\n  15\n  >>> bitcount(31)\n  16\n  >>> bitcount(32)\n  16\n  >>> bitcount(33)\n  17\n  >>> bitcount(34)\n  17\n  >>> bitcount(35)\n  18\n  >>> bitcount(36)\n  18\n  >>> bitcount(37)\n  19\n  >>> bitcount(38)\n  19\n  >>> bitcount(39)\n  20\n  >>> bitcount(40)\n  20\n  >>> bitcount(41)\n  21\n  >>> bitcount(42)\n  21\n  >>> bitcount(43)\n  22\n  >>> bitcount(44)\n  22\n  >>> bitcount(45)\n  23\n  >>> bitcount(46)\n  23\n  >>> bitcount(47)\n  24\n  >>> bitcount(48)\n  24\n  >>> bitcount(49)\n  25\n  >>> bitcount(50)\n  25\n  >>> bitcount(51)\n  26\n  >>> bitcount(52)\n  26\n  >>> bitcount(53)\n  27\n  >>> bitcount(54)\n  27\n  >>> bitcount(55)\n  28\n  >>> bitcount(56)\n  28\n  >>> bitcount(57)\n  29\n  >>> bitcount(58)\n  29\n  >>> bitcount(59)\n  30\n  >>> bitcount(60)\n  30\n  >>> bitcount(61)\n  31\n  >>> bitcount(62)\n  31\n  >>> bitcount(63)\n  32\n  >>> bitcount(64)\n  32\n  >>> bitcount(65)\n  33\n  >>> bitcount(66)\n  33\n  >>> bitcount(67)\n  34\n  >>> bitcount(68)\n  34\n  >>> bitcount(69)\n  35\n  >>> bitcount(70)\n  35\n  >>> bitcount(71)\n  36\n  >>> bitcount(72)\n  36\n  >>> bitcount(73)\n  37\n  >>> bitcount(74)\n  37\n  >>> bitcount(75)\n  38\n  >>> bitcount(76)\n  38\n  >>> bitcount(77)\n  39\n  >>> bitcount(78)\n  39\n  >>> bitcount(79)\n  40\n  >>> bitcount(80)\n  40\n  >>> bitcount(81)\n  41\n  >>> bitcount(82)\n  41\n  >>> bitcount(83)\n  42\n  >>> bitcount(84)\n  42\n  >>> bitcount(85)\n  43\n  >>> bitcount(86)\n  43\n  >>> bitcount(87)\n  44\n  >>> bitcount(88)\n  44\n  >>> bitcount(89)\n  45\n  >>> bitcount(90)\n  45\n  >>> bitcount(91)\n  46\n  >>> bitcount(92)\n  46\n  >>> bitcount(93)\n  47\n  >>> bitcount(94)\n  47\n  >>> bitcount(95)\n  48\n  >>> bitcount(96)\n  48\n  >>> bitcount(97)\n  49\n  >>> bitcount(98)\n  49\n  >>> bitcount(99)\n  50\n  >>> bitcount(100)\n  50\n  >>> bitcount(101)\n  51\n  >>> bitcount(102)\n  51\n  >>> bitcount(103)\n  52\n  >>> bitcount(104)\n  52\n  >>> bitcount(105)\n  53\n  >>> bitcount(106)\n  53\n  >>> bitcount(107)\n  54\n  >>> bitcount(108)\n  54\n  >>> bitcount(109)\n  55\n  >>> bitcount(110)\n  55\n  >>> bitcount(111)\n  56\n  >>> bitcount(112)\n  56\n  >>> bitcount(113)\n  57\n  >>> bitcount(114)\n  57\n  >>> bitcount(115)\n  58\n  >>> bitcount(116)\n  58\n  >>> bitcount(117)\n  59\n  >>> bitcount(118)\n  59\n  >>> bitcount(119)\n  60\n  >>> bitcount(120)\n  60\n  >>> bitcount(121)\n  61\n  >>> bitcount(122)\n  61\n  >>> bitcount(123)\n  62\n  >>> bitcount(124)\n  62\n  >>> bitcount(125)\n  63\n  >>> bitcount(126)\n  63\n  >>> bitcount(127)\n  64\n  >>> bitcount", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse3 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse4 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse5 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse6 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse7 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse8 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse9 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse10 = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3],", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  let r = \"\";\n  for (let i = 0; i < s.length; i++) {\n    r = r + String.fromCharCode(\n      ((s.charCodeAt (i ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt (0)\n    );\n  }\n  return r;\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon decodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode = (s) => {\n  let r = \"\";\n  for (let i = 0; i < s.length; i++) {\n    r = r + String.fromCharCode(\n      ((s.charCodeAt (i ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n    );\n  }\n  return r;\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon decode_shift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_2=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_3=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_4=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_5=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_6=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_7=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_8=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_9=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - \"a\".charCodeAt (0) ) - 5) % 26 + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decode_shift", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let vowelIndex = 0\n  let vowel = ''\n  while (i < textLength) {\n    vowel = text[i]\n    if (vowels.indexOf(vowel)!== -1) {\n      vowelIndex = vowels.indexOf(vowel)\n      vowel = vowels[vowelIndex]\n      text = text.slice(0, i) + vowel + text.slice(i + 1)\n      i = i + vowelsLength\n      j = j + vowelsLength\n    }\n    i = i + 1\n  }\n  return text\n}\n\n/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let vowelIndex = 0\n  let vowel = ''\n  while (i < textLength) {\n    vowel = text[i]\n    if (vowels.indexOf(vowel)!== -1) {\n      vowelIndex = vowels.indexOf(vowel)\n      vowel = vowels[vowelIndex]\n      text = text.slice(0, i) + vowel + text.slice(i + 1)\n      i = i + vowelsLength\n      j = j + vowelsLength\n    }\n    i = i + 1\n  }\n  return text\n}\n\n/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let vowelIndex = 0\n  let vowel = ''\n  while (i < textLength) {\n    vowel = text[i]\n    if (vowels.indexOf(vowel)!== -1) {\n      vowelIndex = vowels.indexOf(vowel)\n      vowel = vowels[vowelIndex]\n      text = text.slice(0, i) + vowel + text.slice(i + 1)\n      i = i + vowelsLength\n      j = j + vowelsLength\n    }\n    i = i + 1\n  }\n  return text\n}\n\n/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let vowelIndex = 0\n  let vowel = ''\n  while (i < textLength) {\n    vowel = text[i]\n    if (vowels.indexOf(vowel)!== -1) {\n      vowelIndex = vowels.indexOf(vowel)\n      vowel = vowels[vowelIndex]\n      text = text.slice(0, i) + vowel + text.slice(i + 1)\n      i = i + vowelsLength\n      j = j + vowelsLength\n    }\n    i = i + 1\n  }\n  return text\n}\n\n/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vow", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 20)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 21)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 0)\n  false\n  >>> belowThreshold([1, 2, 4, 10], -1)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold2([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold2([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold2([1, 2, 4, 10], 20)\n  true\n  >>> belowThreshold2([1, 2, 4, 10], 21)\n  false\n  >>> belowThreshold2([1, 2, 4, 10], 0)\n  false\n  >>> belowThreshold2([1, 2, 4, 10], -1)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold3([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold3([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold3([1, 2, 4, 10], 20)\n  true\n  >>> belowThreshold3([1, 2, 4, 10], 21)\n  false\n  >>> belowThreshold3([1, 2, 4, 10], 0)\n  false\n  >>> belowThreshold3([1, 2, 4, 10], -1)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold4([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold4([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold4([1, 2, 4, 10], 20)\n  true\n  >>> belowThreshold4([1, 2, 4, 10], 21)\n  false\n  >>> belowThreshold4([1, 2, 4, 10], 0)\n  false\n  >>> belowThreshold4([1, 2, 4, 10], -1)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold5([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold5([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold5([1, 2, 4, 10], 20)\n  true\n  >>> belowThreshold5([1, 2, 4, 10], 21)\n  false\n  >>> belowThreshold5([1, 2, 4, 10], 0)\n  false\n  >>> belowThreshold5([1, 2, 4, 10], -1)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold6([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold6([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold6([1, 2, 4, 10], 20)\n  true\n  >>> belowThreshold6([1, 2, 4, 10], 21)\n  false\n  >>> belowThreshold6([1, 2, 4, 10], 0)\n  false\n  >>> belowThreshold6([1, 2, 4, 10], -1)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold7([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold7([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold7([1, 2, 4, 10], 20)\n  true\n  >>> belowThreshold7([1, 2, 4, 10], 21)\n  false\n  >>> belowThreshold7([1, 2, 4, 10], 0)\n  false\n  >>> belowThreshold7([1, 2, 4, 10], -1)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold8([1, 2, 4, 10], 5)\n", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * >>> sumOfSquares(1, 10)\n  * 55\n  * >>> sumOfSquares(1, 100)\n  * 3125\n  * >>> sumOfSquares(1, 1000)\n  * 328125\n  * >>> sumOfSquares(1, 10000)\n  * 328125000\n  * >>> sumOfSquares(1, 100000)\n  * 328125000000\n  * >>> sumOfSquares(1, 1000000)\n  * 32812500000000\n  * >>> sumOfSquares(1, 10000000)\n  * 3281250000000000\n  * >>> sumOfSquares(1, 100000000)\n  * 32812500000000000\n  * >>> sumOfSquares(1, 1000000000)\n  * 328125000000000000\n  * >>> sumOfSquares(1, 10000000000)\n  * 328125000000000000000\n  * >>> sumOfSquares(1, 100000000000)\n  * 3281250000000000000000\n  * >>> sumOfSquares(1, 1000000000000)\n  * 328125000000000000000000\n  * >>> sumOfSquares(1, 10000000000000)\n  * 328125000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000)\n  * 328125000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000)\n  * 32812500000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000)\n  * 3281250000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000)\n  * 32812500000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000)\n  * 3281250000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000)\n  * 3281250000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000)\n  * 3281250000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000)\n  * 328125000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 10000000000000000000000000000000000000000000000000000)\n  * 32812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 100000000000000000000000000000000000000000000000000000)\n  * 328125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000)\n  * 3281250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  * >>> sumOf", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Length = s0.length;\n  const s1Length = s1.length;\n  if (s0Length!== s1Length) {\n    return false;\n  }\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default sameChars;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\nconsole.log(fib(10));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return the string of brackets\n  that is the shortest possible.\n\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<\")\n  \"<\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  \">\"\n  >>> shortestBracket(\"<>\")\n  ", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[0] === sorted[1];\n};\n\n/*Return true if list is a permutation of the set {1, 2,..., n}.\n  >>> permutation([1, 2, 3])\n  true\n  >>> permutation([1, 2, 3, 4])\n  false\n  >>> permutation([1, 2, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two list s .\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.values());\n  const intersection_set = new Set(l2_set.values());\n  return intersection_set.values();\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n >1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n >1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n >1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n >1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n >1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n >1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let prime = 2;\n  while (prime * prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor7", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_array = paren_string.split(' ')\n  const paren_string_array_length = paren_string_array.length\n  const paren_string_array_deepest_level = paren_string_array_length - 1\n  const paren_string_array_deepest_level_deepest = paren_string_array_deepest_level - 1\n  const paren_string_array_deepest_level_deepest_deepest = paren_string_array_deepest_level_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest - 1\n  const paren_string_array_deepest_level_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest_deepest = paren_string_array_deepest_level_deepest_", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 ton .\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is a function that sums numbers from 1 ton.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket .\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsLengthMinusOne = bracketsLength - 1\n  const bracketsLengthMinusTwo = bracketsLength - 2\n  const bracketsLengthMinusThree = bracketsLength - 3\n  const bracketsLengthMinusFour = bracketsLength - 4\n  const bracketsLengthMinusFive = bracketsLength - 5\n  const bracketsLengthMinusSix = bracketsLength - 6\n  const bracketsLengthMinusSeven = bracketsLength - 7\n  const bracketsLengthMinusEight = bracketsLength - 8\n  const bracketsLengthMinusNine = bracketsLength - 9\n  const bracketsLengthMinusTen = bracketsLength - 10\n  const bracketsLengthMinusEleven = bracketsLength - 11\n  const bracketsLengthMinusTwelve = bracketsLength - 12\n  const bracketsLengthMinusThirteen = bracketsLength - 13\n  const bracketsLengthMinusFourteen = bracketsLength - 14\n  const bracketsLengthMinusFifteen = bracketsLength - 15\n  const bracketsLengthMinusSixteen = bracketsLength - 16\n  const bracketsLengthMinusSeventeen = bracketsLength - 17\n  const bracketsLengthMinusEighteen = bracketsLength - 18\n  const bracketsLengthMinusNineteen = bracketsLength - 19\n  const bracketsLengthMinusTwenty = bracketsLength - 20\n  const bracketsLengthMinusTwentyOne = bracketsLength - 21\n  const bracketsLengthMinusTwentyTwo = bracketsLength - 22\n  const bracketsLengthMinusTwentyThree = bracketsLength - 23\n  const bracketsLengthMinusTwentyFour = bracketsLength - 24\n  const bracketsLengthMinusTwentyFive = bracketsLength - 25\n  const bracketsLengthMinusTwentySix = bracketsLength - 26\n  const bracketsLengthMinusTwentySeven = bracketsLength - 27\n  const bracketsLengthMinusTwentyEight = bracketsLength - 28\n  const bracketsLengthMinusTwentyNine = bracketsLength - 29\n  const bracketsLengthMinusThirty = bracketsLength - 30\n  const bracketsLengthMinusThirtyOne = bracketsLength - 31\n  const bracketsLengthMinusThirtyTwo = bracketsLength - 32\n  const bracketsLengthMinusThirtyThree = bracketsLength - 33\n  const bracketsLengthMinusThirtyFour = bracketsLength - 34\n  const bracketsLengthMinusThirtyFive = bracketsLength - 35\n  const bracketsLengthMinusThirtySix = bracketsLength - 36\n  const bracketsLengthMinusThirtySeven = bracketsLength - 37\n  const bracketsLengthMinusThirtyEight = bracketsLength - 38\n  const bracketsLengthMinusThirtyNine = bracketsLength - 39\n  const bracketsLengthMinusForty = bracketsLength - 40\n  const bracketsLengthMinusFortyOne = bracketsLength - 41\n  const bracketsLengthMinusFortyTwo = bracketsLength - 42\n  const bracketsLengthMinusFortyThree = bracketsLength - 43\n  const bracketsLengthMinusFortyFour = bracketsLength - 44\n  const bracketsLengthMinusFortyFive = bracketsLength - 45\n  const bracketsLengthMinusFortySix = bracketsLength - 46\n  const bracketsLengthMinusFortySeven = bracketsLength - 47\n  const bracketsLengthMinusFortyEight = bracketsLength - 48\n  const bracketsLengthMinusFortyNine = bracketsLength - 49\n  const bracketsLengthMinusFifty = bracketsLength - 50\n  const bracketsLengthMinusFiftyOne = bracketsLength - 51\n  const bracketsLengthMinusFiftyTwo = bracketsLength - 52\n  const bracketsLengthMinusFiftyThree = bracketsLength - 53\n  const bracketsLengthMinusFiftyFour = bracketsLength - 54\n  const bracketsLengthMinusFiftyFive = bracketsLength - 55\n  const bracketsLengthMinusFiftySix = bracketsLength - 56\n  const bracketsLengthMinusFiftySeven = bracketsLength - 57\n  const bracketsLengthMinusFiftyEight = bracketsLength - 58\n  const bracketsLengthMinusFiftyNine = bracketsLength - 59\n  const bracketsLengthMinusSixty = bracketsLength - 60\n  const bracketsLengthMinusSixtyOne = bracketsLength - 61\n  const bracketsLengthMinusSixtyTwo = bracketsLength - 62\n  const bracketsLengthMinusSixtyThree = bracketsLength - 63\n  const bracketsLengthMinusSixtyFour = bracketsLength - 64\n  const bracketsLengthMinusSixtyFive = bracketsLength - 65\n  const bracketsLengthMinusSixtySix = bracketsLength - 66\n  const bracketsLengthMinusSixtySeven = bracketsLength - 67\n  const bracketsLengthMinusSixtyEight = bracketsLength - 68\n  const bracketsLengthMinusSixtyNine = bracketsLength - 69\n  const bracketsLengthMinusSeventy = bracketsLength - 70\n  const bracketsLengthMinusSeventyOne = bracketsLength - 71\n  const bracketsLengthMinusSeventyTwo = bracketsLength - 72\n  const bracketsLengthMinusSeventyThree = bracketsLength - 73\n  const bracketsLengthMinusSeventyFour = bracketsLength - 74\n  const bracketsLengthMinusSeventyFive = bracketsLength - 75\n  const bracketsLengthMinusSeventySix = bracketsLength - 76\n  const bracketsLengthMinusSeventySeven = bracketsLength - 77\n  const bracketsLengthMinusSeventyEight = bracketsLength - 78\n  const bracketsLengthMinusSeventyNine = bracketsLength - 79\n  const bracketsLengthMinusSeventyTen = bracketsLength - 80\n  const bracketsLengthMinusSeventyEleven = bracketsLength - 81\n  const bracketsLengthMinusSeventyTwelve = bracketsLength - 82\n  const bracketsLengthMinusSeventyThirteen = bracketsLength - 83\n  const bracketsLengthMinusSeventyFourteen = bracketsLength - 84\n  const bracketsLengthMinusSeventyFifteen = bracketsLength - 85\n  const bracketsLengthMinusSeventySixteen = bracketsLength - 86\n  const bracketsLengthMinusSeventySeventeen = bracketsLength - 87\n  const bracketsLengthMinusSeventyEighteen = bracketsLength - 88\n  const bracketsLengthMinusSeventyNineteen = bracketsLength - 89\n  const bracketsLengthMinusSeventyTwenty = bracketsLength - 90\n  const bracketsLengthMinusSeventyTwentyOne = bracketsLength - 91\n  const bracketsLengthMinusSeventyTwentyTwo = bracketsLength - 92\n  const bracketsLengthMinusSeventyTwentyThree = bracketsLength - 93\n  const bracketsLengthMinusSeventyTwentyFour = bracketsLength - 94\n  const bracketsLengthMinusSeventyTwentyFive = bracketsLength - 95\n  const bracketsLengthMinusSeventyTwenty", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 + .. ..\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 +....\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, c = 0;\n  while (a < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/64", "prompt": "/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"ab\")\n  2", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.substr(1, res.length - 1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> reverse(\"12\")\n  \"21\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"12\"\n  >>> reverse(\"12\")\n  \"", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution2 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution3 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution4 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution5 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution6 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution7 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution8 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution9 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution10 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution11 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution12 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution13 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution14 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  return count\n}\n\nconst fruitDistribution15 = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    if (num > 0) {\n      count += num\n    }\n  }\n  ", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty , re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty, re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > max) {\n      max = cur;\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring2 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring3 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring4 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring5 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring6 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring7 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring8 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring9 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring10 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nexport const filterBySubstring11 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of stringsonly for ones th a t contain given substring\n  * @param {Array}", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const sorted2 = sorted.slice().reverse();\n  return sorted2;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= a || s <= b || s <= c) {\n    return -1\n  }\n  return Math.sqrt(s * (s - a) *", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it 's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly2 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly3 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly4 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly5 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly6 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly7 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly8 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly9 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly10 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly11 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly12 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly13 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly14 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly15 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly16 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly17 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly18 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly19 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly20 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly21 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly22 = (q, w)", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic . A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let j = arr.length - i - 1;\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch9 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch10 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch11 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    lst.push(lst1[i] + lst2[i])\n  }\n  return lst\n}\n\nconst totalMatch12 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return l", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 1;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow8 = (n) => {\n  if (n < 2", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    result += parseInt(num[i], 16);\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst primeNumbers = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers2 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers3 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers4 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 2) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers5 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 3) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers6 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 4) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers7 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 5) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers8 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 6) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers9 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 7) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers10 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 8) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers11 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 9) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers12 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 10) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers13 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 11) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers14 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i) && primeNumbers(i).length > 12) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primeNumbers15 = (num) => {\n  let result = [];\n  for (let i = 2; i < num; i++) {\n    if (is", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er . Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return binary + 'db' + i;\n};\n\n/*\n  This function will convert a binary string to decimal.\n  The function will return a decimal number.\n  \n  Example:\n  binaryToDecimal(\"db100000db\") -> 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] == '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  This function will convert a decimal number to binary.\n  The function will return a binary string.\n  \n  Example:\n  decimalToBinary(32) -> \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return binary + 'db' + i;\n};\n\n/*\n  This function will convert a binary string to decimal.\n  The function will return a decimal number.\n  \n  Example:\n  binaryToDecimal(\"db100000db\") -> 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] == '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  This function will convert a decimal number to binary.\n  The function will return a binary string.\n  \n  Example:\n  decimalToBinary(32) -> \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return binary + 'db' + i;\n};\n\n/*\n  This function will convert a binary string to decimal.\n  The function will return a decimal number.\n  \n  Example:\n  binaryToDecimal(\"db100000db\") -> 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] == '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  This function will convert a decimal number to binary.\n  The function will return a binary string.\n  \n  Example:\n  decimalToBinary(32) -> \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return binary + 'db' + i;\n};\n\n/*\n  This function will convert a binary string to decimal.\n  The function will return a decimal number.\n  \n  Example:\n  binaryToDecimal(\"db100000db\") -> 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] == '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  This function will convert a decimal number to binary.\n  The function will return a binary string.\n  \n  Example:\n  decimalToBinary(32) -> \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return binary + 'db' + i;\n};\n\n/*\n  This function will convert a binary string to decimal.\n  The function will return a decimal number.\n  \n  Example:\n  binaryToDecimal(\"db100000db\") -> 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] == '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  This function will convert a decimal number to binary.\n  The function will return a binary string.\n  \n  Example:\n  decimalToBinary(32) -> \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  ", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct2 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct3 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct4 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct5 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct6 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct7 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct8 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct9 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct10 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct11 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct12 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct13 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct14 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct15 = (numbers) => {\n  let sum = 0;\n  let product = 1", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0;\n  let len = s.length;\n  let res = true;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i] + s[j] > s[i + 1] + s[j + 1]) {\n        res = false;\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3 .7               A\n         > 3 .3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3.7               A\n         > 3.3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  return prime.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only letters\n  Examples\n  containsOnlyLetters('Hello') == true\n  containsOnlyLetters('abcdcba') == true\n  containsOnlyLetters('kittens') == true\n  containsOnlyLetters('orange') == false\n  */\nconst containsOnlyLetters = (string) => {\n  const letters = /[a-zA-Z]/;\n  return letters.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only numbers\n  Examples\n  containsOnlyNumbers('Hello') == true\n  containsOnlyNumbers('abcdcba') == true\n  containsOnlyNumbers('kittens') == true\n  containsOnlyNumbers('orange') == false\n  */\nconst containsOnlyNumbers = (string) => {\n  const numbers = /[0-9]/;\n  return numbers.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only letters and numbers\n  Examples\n  containsOnlyLettersAndNumbers('Hello') == true\n  containsOnlyLettersAndNumbers('abcdcba') == true\n  containsOnlyLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbers('orange') == false\n  */\nconst containsOnlyLettersAndNumbers = (string) => {\n  const letters = /[a-zA-Z]/;\n  const numbers = /[0-9]/;\n  return letters.test(string) && numbers.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only letters and numbers and spaces\n  Examples\n  containsOnlyLettersAndNumbers('Hello') == true\n  containsOnlyLettersAndNumbers('abcdcba') == true\n  containsOnlyLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbers('orange') == false\n  */\nconst containsOnlyLettersAndNumbersAndSpaces = (string) => {\n  const letters = /[a-zA-Z]/;\n  const numbers = /[0-9]/;\n  const spaces = /\\s/;\n  return letters.test(string) && numbers.test(string) && spaces.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only letters, numbers and spaces\n  Examples\n  containsOnlyLettersAndNumbersAndSpaces('Hello') == true\n  containsOnlyLettersAndNumbersAndSpaces('abcdcba') == true\n  containsOnlyLettersAndNumbersAndSpaces('kittens') == true\n  containsOnlyLettersAndNumbersAndSpaces('orange') == false\n  */\nconst containsOnlyLettersAndNumbersAndSpaces = (string) => {\n  const letters = /[a-zA-Z]/;\n  const numbers = /[0-9]/;\n  const spaces = /\\s/;\n  return letters.test(string) && numbers.test(string) && spaces.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only letters, numbers and spaces and hyphens\n  Examples\n  containsOnlyLettersAndNumbersAndSpaces('Hello') == true\n  containsOnlyLettersAndNumbersAndSpaces('abcdcba') == true\n  containsOnlyLettersAndNumbersAndSpaces('kittens') == true\n  containsOnlyLettersAndNumbersAndSpaces('orange') == false\n  */\nconst containsOnlyLettersAndNumbersAndSpacesAndHyphens = (string) => {\n  const letters = /[a-zA-Z]/;\n  const numbers = /[0-9]/;\n  const spaces = /\\s/;\n  const hyphens = /\\-/;\n  return letters.test(string) && numbers.test(string) && spaces.test(string) && hyphens.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only letters, numbers and spaces and hyphens\n  Examples\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('Hello') == true\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('abcdcba') == true\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('kittens') == true\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('orange') == false\n  */\nconst containsOnlyLettersAndNumbersAndSpacesAndHyphens = (string) => {\n  const letters = /[a-zA-Z]/;\n  const numbers = /[0-9]/;\n  const spaces = /\\s/;\n  const hyphens = /\\-/;\n  return letters.test(string) && numbers.test(string) && spaces.test(string) && hyphens.test(string);\n};\n\n/*Write a function that takes a string and returnst rue if the string  contains only letters, numbers and spaces and hyphens and apostrophes\n  Examples\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('Hello') == true\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('abcdcba') == true\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('kittens') == true\n  containsOnlyLettersAndNumbersAndSpacesAndHyphens('orange') == false\n  */\nconst containsOnlyLettersAndNumbersAndSpacesAndHyphensAndApostrophes = (string) => {\n  const letters = /[a-zA-Z]/;\n  const numbers = /[0-9]/;\n  const spaces = /\\s/;\n  const hyphens = /\\-/;\n  const apostrophes = /\\'/;\n  return letters.test(string) && numbers.test(string) && spaces.test(string) && hyphens.test(string) && apostrophes.test(string);", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    let sum = 0\n    while (i <= n) {\n      sum += i\n      i++\n    }\n    if (sum == n) {\n      count++\n    }\n  }\n  return count\n}\n\nconsole.log(startsOneEnds(1))\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\nconsole.log(startsOneEnds(101))\nconsole.log(startsOneEnds(102))\nconsole.log(startsOneEnds(103))\nconsole.log(startsOneEnds(104))\nconsole.log(startsOneEnds(105))\nconsole.log(startsOneEnds(106))\nconsole.log(startsOneEnds(107))\nconsole.log(startsOneEnds(108))\nconsole.log", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add2 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add3 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add4 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add5 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add6 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add7 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add8 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add9 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add10 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add11 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add12 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add13 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add14 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add15 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add16 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add17 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add18 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add19 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add20 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add21 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add22 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add23 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add24 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add25 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add26 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ');\n  let arr2 = [];\n  let arr3 = [];\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i];\n    let char2 = arr[i];\n    let char3 = arr[i];\n    if (char.length > 1) {\n      let char4 = char.charCodeAt(0);\n      let char5 = char.charCodeAt(1);\n      let char6 = char.charCodeAt(2);\n      let char7 = char.charCodeAt(3);\n      let char8 = char.charCodeAt(4);\n      let char9 = char.charCodeAt(5);\n      let char10 = char.charCodeAt(6);\n      let char11 = char.charCodeAt(7);\n      let char12 = char.charCodeAt(8);\n      let char13 = char.charCodeAt(9);\n      let char14 = char.charCodeAt(10);\n      let char15 = char.charCodeAt(11);\n      let char16 = char.charCodeAt(12);\n      let char17 = char.charCodeAt(13);\n      let char18 = char.charCodeAt(14);\n      let char19 = char.charCodeAt(15);\n      let char20 = char.charCodeAt(16);\n      let char21 = char.charCodeAt(17);\n      let char22 = char.charCodeAt(18);\n      let char23 = char.charCodeAt(19);\n      let char24 = char.charCodeAt(20);\n      let char25 = char.charCodeAt(21);\n      let char26 = char.charCodeAt(22);\n      let char27 = char.charCodeAt(23);\n      let char28 = char.charCodeAt(24);\n      let char29 = char.charCodeAt(25);\n      let char30 = char.charCodeAt(26);\n      let char31 = char.charCodeAt(27);\n      let char32 = char.charCodeAt(28);\n      let char33 = char.charCodeAt(29);\n      let char34 = char.charCodeAt(30);\n      let char35 = char.charCodeAt(31);\n      let char36 = char.charCodeAt(32);\n      let char37 = char.charCodeAt(33);\n      let char38 = char.charCodeAt(34);\n      let char39 = char.charCodeAt(35);\n      let char40 = char.charCodeAt(36);\n      let char41 = char.charCodeAt(37);\n      let char42 = char.charCodeAt(38);\n      let char43 = char.charCodeAt(39);\n      let char44 = char.charCodeAt(40);\n      let char45 = char.charCodeAt(41);\n      let char46 = char.charCodeAt(42);\n      let char47 = char.charCodeAt(43);\n      let char48 = char.charCodeAt(44);\n      let char49 = char.charCodeAt(45);\n      let char50 = char.charCodeAt(46);\n      let char51 = char.charCodeAt(47);\n      let char52 = char.charCodeAt(48);\n      let char53 = char.charCodeAt(49);\n      let char54 = char.charCodeAt(50);\n      let char55 = char.charCodeAt(51);\n      let char56 = char.charCodeAt(52);\n      let char57 = char.charCodeAt(53);\n      let char58 = char.charCodeAt(54);\n      let char59 = char.charCodeAt(55);\n      let char60 = char.charCodeAt(56);\n      let char61 = char.charCodeAt(57);\n      let char62 = char.charCodeAt(58);\n      let char63 = char.charCodeAt(59);\n      let char64 = char.charCodeAt(60);\n      let char65 = char.charCodeAt(61);\n      let char66 = char.charCodeAt(62);\n      let char67 = char.charCodeAt(63);\n      let char68 = char.charCodeAt(64);\n      let char69 = char.charCodeAt(65);\n      let char70 = char.charCodeAt(66);\n      let char71 = char.charCodeAt(67);\n      let char72 = char.charCodeAt(68);\n      let char73 = char.charCodeAt(69);\n      let char74 = char.charCodeAt(70);\n      let char75 = char.charCodeAt(71);\n      let char76 = char.charCodeAt(72);\n      let char77 = char.charCodeAt(73);\n      let char78 = char.charCodeAt(74);\n      let char79 = char.charCodeAt(75);\n      let char80 = char.charCodeAt(76);\n      let char81 = char.charCodeAt(77);\n      let char82 = char.charCodeAt(78);\n      let char83 = char.charCodeAt(79);\n      let char84 = char.charCodeAt(80);\n      let char85 = char.charCodeAt(81);\n      let char86 = char.charCodeAt(82);\n      let char87 = char.charCodeAt(83);\n      let char88 = char.charCodeAt(84);\n      let char89 = char.charCodeAt(85);\n      let char90 = char.charCodeAt(86);\n      let char91 = char.charCodeAt(87);\n      let char92 = char.charCodeAt(88);\n      let char93 = char.charCodeAt(89);\n      let char94 = char.charCodeAt(90);\n      let char95 = char.charCodeAt(91);\n      let char96 = char", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2) ...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j))\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((i, j", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd , \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n .\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  let sortedArray = array.slice();\n  let sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let temp = 0;\n  while (i < j) {\n    while (i < j && sortedArray[i] < sortedArray[j]) {\n      j--;\n    }\n    while (i < j && sortedArray[i] > sortedArray[j]) {\n      i++;\n    }\n    if (i < j) {\n      temp = sortedArray[i];\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = temp;\n    }\n  }\n  return sortedArray;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 2, 6]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let alphabet_len = alphabet.length;\n  let alphabet_len_half = alphabet_len/2;\n  let alphabet_len_half_mult = alphabet_len_half*2;\n  let alphabet_len_half_mult_half = alphabet_len_half_mult/2;\n  let alphabet_len_half_mult_half_mult = alphabet_len_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half = alphabet_len_half_mult_half_mult/2;\n  let alphabet_len_half_mult_half_mult_half_mult = alphabet_len_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult/2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult = alphabet_len_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult/2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult = alphabet_len_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult/2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult/2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult/2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half = alphabet_len_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half_mult_half*2;\n  let", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'T'\n \n  For example:\n  >>> isTired(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isTired(\"Hello world\")\n  0\n  */\nconst isTired = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'T') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'W'\n \n  For example:\n  >>> isWorried(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isWorried(\"Hello world\")\n  0\n  */\nconst isWorried = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'W') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'A'\n \n  For example:\n  >>> isAngry(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isAngry(\"Hello world\")\n  0\n  */\nconst isAngry = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'E'\n \n  For example:\n  >>> isEating(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isEating(\"Hello world\")\n  0\n  */\nconst isEating = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'E') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'O'\n \n  For example:\n  >>> isOdd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isOdd(\"Hello world\")\n  0\n  */\nconst isOdd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'N'\n \n  For example:\n  >>> isNight(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isNight(\"Hello world\")\n  0\n  */\nconst isNight = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'N') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'Y'\n \n  For example:\n  >>> isYoung(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isYoung(\"Hello world\")\n  0\n  */\nconst isYoung = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'Y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'M'\n \n  For example:\n  >>> isMale(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isMale(\"Hello world\")\n  0\n  */\nconst isMale = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'M') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a 'F'\n \n  For example:\n  >>> isFemale(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isFemale(\"Hello world\")\n  0\n  */\nconst isFemale = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y || x === -z - y || x === z - y || x === -y + z || x === -y - z;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y || x === -z - y || x === z - y || x === -y + z || x === -y - z;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y || x === -z - y || x === z - y || x === -y + z || x === -y - z;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y || x === -z - y || x === z - y || x === -y + z || x === -y - z;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y || x === -z - y || x === z - y || x === -y + z || x === -y - z;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y || x === -z - y || x === z - y || x === -y + z || x === -y - z;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y || x === -z - y || x === z - y || x === -y + z || x === -y - z;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z || x === z + y || x === y - z || x === -z + y", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const encoded = message.replace(/[aeiou]/g, (letter) => {\n    return letter.toUpperCase();\n  });\n  return encoded;\n};\n\nconst decode = (message) => {\n  const message = message.toUpperCase();\n  const decoded = message.replace(/[A-Z]/g, (letter) => {\n    return letter.toLowerCase();\n  });\n  return decoded;\n};\n\nconst encode_decode = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst test = () => {\n  const message = 'This is a message';\n  const encoded = encode(message);\n  console.log(encoded);\n  const decoded = decode(encoded);\n  console.log(decoded);\n};\n\ntest();\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let prime = 0;\n    while (num > 0) {\n      prime = (prime + num % 10) % 10;\n      num = Math.floor(num / 10);\n    }\n    if (prime > max) {\n      max = prime;\n    }\n  }\n  return max;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false .\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllKeys = keys.every(key => key.toLowerCase() === key)\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllKeys || isAllKeysUpper\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllKeys = keys.every(key => key.toLowerCase() === key)\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllKeys || isAllKeysUpper\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllKeys = keys.every(key => key.toLowerCase() === key)\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllKeys || isAllKeysUpper\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllKeys = keys.every(key => key.toLowerCase() === key)\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllKeys || isAllKeysUpper\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllKeys = keys.every(key => key.toLowerCase() === key)\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key)\n  return isAllKeys || isAllKeysUpper\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_2 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_3 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_4 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_5 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_6 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_7 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_8 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_9 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_10 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_11 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_12 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_13 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_14 = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = 0;\n  while (a_unit!== 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_15 = (a, b) => {\n  let a_unit = a % 10;\n", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  count", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const nums = [num, num + 1, num - 1];\n  const closest = nums.reduce((a, b) => {\n    if (Math.abs(a) < Math.abs(b)) {\n      return a;\n    }\n    return b;\n  });\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 1}
