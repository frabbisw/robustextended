{"task_id": "JavaScript/0", "prompt": "/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = sorted(numbers);\n  const length = sortedNumbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < length && j < length) {\n    if (Math.abs(sortedNumbers[i] - sortedNumbers[j]) < threshold) {\n      k++;\n      i++;\n      j++;\n    } else if (sortedNumbers[i] < sortedNumbers[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return k > 1;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_length_minus_1 = paren_string_array_length - 1;\n  const paren_string_array_length_minus_2 = paren_string_array_length - 2;\n  const paren_string_array_length_minus_3 = paren_string_array_length - 3;\n  const paren_string_array_length_minus_4 = paren_string_array_length - 4;\n  const paren_string_array_length_minus_5 = paren_string_array_length - 5;\n  const paren_string_array_length_minus_6 = paren_string_array_length - 6;\n  const paren_string_array_length_minus_7 = paren_string_array_length - 7;\n  const paren_string_array_length_minus_8 = paren_string_array_length - 8;\n  const paren_string_array_length_minus_9 = paren_string_array_length - 9;\n  const paren_string_array_length_minus_10 = paren_string_array_length - 10;\n  const paren_string_array_length_minus_11 = paren_string_array_length - 11;\n  const paren_string_array_length_minus_12 = paren_string_array_length - 12;\n  const paren_string_array_length_minus_13 = paren_string_array_length - 13;\n  const paren_string_array_length_minus_14 = paren_string_array_length - 14;\n  const paren_string_array_length_minus_15 = paren_string_array_length - 15;\n  const paren_string_array_length_minus_16 = paren_string_array_length - 16;\n  const paren_string_array_length_minus_17 = paren_string_array_length - 17;\n  const paren_string_array_length_minus_18 = paren_string_array_length - 18;\n  const paren_string_array_length_minus_19 = paren_string_array_length - 19;\n  const paren_string_array_length_minus_20 = paren_string_array_length - 20;\n  const paren_string_array_length_minus_21 = paren_string_array_length - 21;\n  const paren_string_array_length_minus_22 = paren_string_array_length - 22;\n  const paren_string_array_length_minus_23 = paren_string_array_length - 23;\n  const paren_string_array_length_minus_24 = paren_string_array_length - 24;\n  const paren_string_array_length_minus_25 = paren_string_array_length - 25;\n  const paren_string_array_length_minus_26 = paren_string_array_length - 26;\n  const paren_string_array_length_minus_27 = paren_string_array_length - 27;\n  const paren_string_array_length_minus_28 = paren_string_array_length - 28;\n  const paren_string_array_length_minus_29 = paren_string_array_length - 29;\n  const paren_string_array_length_minus_30 = paren_string_array_length - 30;\n  const paren_string_array_length_minus_31 = paren_string_array_length - 31;\n  const paren_string_array_length_minus_32 = paren_string_array_length - 32;\n  const paren_string_array_length_minus_33 = paren_string_array_length - 33;\n  const paren_string_array_length_minus_34 = paren_string_array_length - 34;\n  const paren_string_array_length_minus_35 = paren_string_array_length - 35;\n  const paren_string_array_length_minus_36 = paren_string_array_length - 36;\n  const paren_string_array_length_minus_37 = paren_string_array_length - 37;\n  const paren_string_array_length_minus_38 = paren_string_array_length - 38;\n  const paren_string_array_length_minus_39 = paren_string_array_length - 39;\n  const paren_string_array_length_minus_40 = paren_string_array_length - 40;\n  const paren_string_array_length_minus_41 = paren_string_array_length - 41;\n  const paren_string_array_length_minus_42 = paren_string_array_length - 42;\n  const paren_string_array_length_minus_43 = paren_string_array_length - 43;\n  const paren_string_array_length_minus_44 = paren_string_array_length - 44;\n  const paren_string_array_length_minus_45 = paren_string_array_length - 45;\n  const paren_string_array_length_minus_46 = paren_string_array_length - 46;\n  const paren_string_array_length_minus_47 = paren_string_array_length - 47;\n  const paren_string_array_length_minus_48 = paren_string_array_length - 48;\n  const paren_string_array_length_minus_49 = paren_string_array_length - 49;\n  const paren_string_array_length_minus_50 = paren_string_array_length - 50;\n  const paren_string_array_length_minus_51 = paren_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let longest = 0;\n  for (let i = 0; i < string.length; i++) {\n    let current = string[i];\n    if (isPalindrome(current)) {\n      if (longest < i) {\n        longest = i;\n        prefix = string.substring(0, i);\n        suffix = string.substring(i);\n      }\n    }\n  }\n  return prefix + string.substring(0, longest) + suffix.reverse();\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile2 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 4 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 5 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 6 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 7 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 8 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 9 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 12 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile14 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 14 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile15 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 15 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile16 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 16 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile17 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 17 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile18 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 18 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile19 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 19 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile20 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 20 === 0) {\n      pile.push(i);\n    }\n  }\n  return pile;\n};\n\nconst makeAPile21 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 21 === 0) {\n      pile.push(i);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrder = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\" \");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithCommas = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\", \");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithSpaces = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\" \");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithSpacesAndCommas = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\", \");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithSpacesAndCommasAndQuotes = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\"\\\"\");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithSpacesAndQuotes = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\"\\\"\");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithQuotes = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\"\\\"\");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithQuotesAndCommas = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\"\\\"\");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithQuotesAndCommasAndQuotes = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\"\\\"\");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three four five six\"\n  */\nconst wordsStringInOrderWithQuotesAndQuotes = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words.join(\"\\\"\");\n};\n\n/*\n  Given a string of words, return a string of the words in order with a space in between.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One two three", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % x === 0) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = Math.ceil(Math.log(n) / Math.log(2));\n  const mBits = Math.ceil(Math.log(m) / Math.log(2));\n  const nMask = (1 << nBits) - 1;\n  const mMask = (1 << mBits) - 1;\n  const nMasked = n & nMask;\n  const mMasked = m & mMask;\n  const nMaskedBits = nMasked.toString(2);\n  const mMaskedBits = mMasked.toString(2);\n  const nMaskedBitsLength = nMaskedBits.length;\n  const mMaskedBitsLength = mMaskedBits.length;\n  const nMaskedBitsLengthDiff = nMaskedBitsLength - mMaskedBitsLength;\n  const nMaskedBitsLengthDiffDiff = nMaskedBitsLengthDiff - mMaskedBitsLengthDiff;\n  const nMaskedBitsLengthDiffDiffDiff = nMaskedBitsLengthDiffDiff - mMaskedBitsLengthDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiff - mMaskedBitsLengthDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff - mMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n  const nMaskedBitsLengthDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = nMaskedBitsLengthDiffDiffDiffDiffDiffDiff", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray , and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\" ,  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const reversedArr = sortedArr.reverse();\n  const reversedArrLength = reversedArr.length;\n  const result = [];\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const reversedArr = sortedArr.reverse();\n  const reversedArrLength = reversedArr.length;\n  const result = [];\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const reversedArr = sortedArr.reverse();\n  const reversedArrLength = reversedArr.length;\n  const result = [];\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const reversedArr = sortedArr.reverse();\n  const reversedArrLength = reversedArr.length;\n  const result = [];\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const reversedArr = sortedArr.reverse();\n  const reversedArrLength = reversedArr.length;\n  const result = [];\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const reversedArr = sortedArr.reverse();\n  const reversedArrLength = reversedArr.length;\n  const result = [];\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const reversedArr = sortedArr.reverse();\n  const reversedArrLength = reversedArr.length;\n  const result = [];\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(factorial(i));\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nmodule.exports = f;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1 , n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = []\n  const even = []\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (isEven(i)) {\n        even.push(i)\n      } else {\n        odd.push(i)\n      }\n    }\n    i++\n  }\n  return (odd.length, even.length)\n}\n\nconst isPalindrome = (n) => {\n  let s = ''\n  while (n > 0) {\n    s = s + n % 10\n    n = n / 10\n  }\n  return s === s.split('').reverse().join('')\n}\n\nconst isEven = (n) => {\n  return n % 2 === 0\n}\n\nconsole.log(evenOddPalindrome(3))\nconsole.log(evenOddPalindrome(12))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 2, 3]));\nconsole.log(countNums([1, 2, 3, 4]));\nconsole.log(countNums([1, 2, 3, 4, 5]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[ 2 ], ..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[ 2 ],..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return true;\n  }\n  let k = arr.length - 1;\n  while (k > 0) {\n    if (arr[k] > arr[k - 1]) {\n      flag = false;\n      break;\n    }\n    k--;\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return true;\n  }\n  let k = arr.length - 1;\n  while (k > 0) {\n    if (arr[k] > arr[k - 1]) {\n      flag = false;\n      break;\n    }\n    k--;\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return true;\n  }\n  let k = arr.length - 1;\n  while (k > 0) {\n    if (arr[k] > arr[k - 1]) {\n      flag = false;\n      break;\n    }\n    k--;\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return true;\n  }\n  let k = arr.length - 1;\n  while (k > 0) {\n    if (arr[k] > arr[k - 1]) {\n      flag = false;\n      break;\n    }\n    k--;\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return true;\n  }\n  let k = arr.length - 1;\n  while (k > 0) {\n    if (arr[k] > arr[k - 1]) {\n      flag = false;\n      break;\n    }\n    k--;\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return true;\n  }\n  let k = arr.length - 1;\n  while (k > 0) {\n    if (arr[k] > arr[k - 1]) {\n      flag = false;\n      break;\n    }\n    k--;\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = false;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '0' : '1');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '0' : '1');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length; i++) {\n    res += (b[i] === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === '1'? '1' : '0');\n  }\n  for (let i = 0; i < b.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\" .\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return false\n  }\n  for (let i = 0; i < len1; i++) {\n    if (lst1[i]!== lst2[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst test = () => {\n  exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  exchange([1, 2, 3, 4], [1, 5, 3, 4])\n  exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n  exchange([1, 2, 3, 4, 5], [1, 2, 3, 4])\n  exchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n  exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\n  exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7])\n  exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6])\n  exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/111", "prompt": "/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  hist", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < s.length) {\n        if (s[i] === c[j]) {\n            j++;\n            if (j === c.length) {\n                result.push(s.slice(i + 1));\n                break;\n            }\n        } else {\n            result.push(s[i]);\n            i++;\n        }\n    }\n    return [result.join(''), j === c.length];\n};\n\nconst test = [\n    ['abcde', 'ae'],\n    ['abcdef', 'b'],\n    ['abcdedcba', 'ab'],\n];\n\ntest.forEach(t => {\n    console.log(reverseDelete(t[0], t[1]));\n});\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i].replace(/\\D/g, '');\n    count += num.length % 2;\n  }\n  return [`the number of odd elements ${count} of the ${lst.length} input.`];\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0);\n  const minSum = Math.min(sum, 0);\n  const maxSum = Math.max(sum, 0);\n  const minSubArraySum = (nums) => {\n    const sum = nums.reduce((a, b) => a + b, 0);\n    const minSum = Math.min(sum, 0);\n    const maxSum = Math.max(sum, 0);\n    return Math.min(minSum, maxSum);\n  };\n  return minSubArraySum(nums);\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n  const buckets = new Array(n)\n  const buckets_used = new Array(n)\n  const buckets_capacity = new Array(n)\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m)\n    buckets_used[i] = 0\n    buckets_capacity[i] = capacity\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1\n        buckets_used[i]++\n      }\n    }\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j] === 1) {\n        count += buckets_used[i]\n      }\n    }\n  }\n  return count\n}\n\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\nconst capacity = 1\nconsole.log(maxFill(grid, capacity))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice();\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < j) {\n    while (sortedArray[i] === 1) {\n      i++;\n    }\n    while (sortedArray[j] === 1) {\n      j--;\n    }\n    if (i < j) {\n      temp = sortedArray[i];\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = temp;\n      i++;\n      j--;\n    }\n  }\n  return sortedArray;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === n) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-empty string p, you have been tasked to implement a fu nction that ret u rns a list of all words fr om str ing s that contain p in t hestring s.\n\nIf the string s is e mpty then the function should return an empty list.\n\nNote: you may assume the inp ut string contains only letters an d spaces.\n\nExamples:\n\nselectWords(\"Hello world\", \"world\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"zebra\") ==> []\nselectWords(\"Hello world\", \"a\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"hellow\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ello\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lo\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ld\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"lddddddddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", \"ldddddddddddddddddddddddddddddddddddddd\") ==> [\"Hello\", \"world\"]\nselectWords", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = '';\n  let vowelIndex = 0;\n  let vowelLength = 0;\n  let vowelIndex2 = 0;\n  let vowelLength2 = 0;\n  let vowelIndex3 = 0;\n  let vowelLength3 = 0;\n  let vowelIndex4 = 0;\n  let vowelLength4 = 0;\n  let vowelIndex5 = 0;\n  let vowelLength5 = 0;\n  let vowelIndex6 = 0;\n  let vowelLength6 = 0;\n  let vowelIndex7 = 0;\n  let vowelLength7 = 0;\n  let vowelIndex8 = 0;\n  let vowelLength8 = 0;\n  let vowelIndex9 = 0;\n  let vowelLength9 = 0;\n  let vowelIndex10 = 0;\n  let vowelLength10 = 0;\n  let vowelIndex11 = 0;\n  let vowelLength11 = 0;\n  let vowelIndex12 = 0;\n  let vowelLength12 = 0;\n  let vowelIndex13 = 0;\n  let vowelLength13 = 0;\n  let vowelIndex14 = 0;\n  let vowelLength14 = 0;\n  let vowelIndex15 = 0;\n  let vowelLength15 = 0;\n  let vowelIndex16 = 0;\n  let vowelLength16 = 0;\n  let vowelIndex17 = 0;\n  let vowelLength17 = 0;\n  let vowelIndex18 = 0;\n  let vowelLength18 = 0;\n  let vowelIndex19 = 0;\n  let vowelLength19 = 0;\n  let vowelIndex20 = 0;\n  let vowelLength20 = 0;\n  let vowelIndex21 = 0;\n  let vowelLength21 = 0;\n  let vowelIndex22 = 0;\n  let vowelLength22 = 0;\n  let vowelIndex23 = 0;\n  let vowelLength23 = 0;\n  let vowelIndex24 = 0;\n  let vowelLength24 = 0;\n  let vowelIndex25 = 0;\n  let vowelLength25 = 0;\n  let vowelIndex26 = 0;\n  let vowelLength26 = 0;\n  let vowelIndex27 = 0;\n  let vowelLength27 = 0;\n  let vowelIndex28 = 0;\n  let vowelLength28 = 0;\n  let vowelIndex29 = 0;\n  let vowelLength29 = 0;\n  let vowelIndex30 = 0;\n  let vowelLength30 = 0;\n  let vowelIndex31 = 0;\n  let vowelLength31 = 0;\n  let vowelIndex32 = 0;\n  let vowelLength32 = 0;\n  let vowelIndex33 = 0;\n  let vowelLength33 = 0;\n  let vowelIndex34 = 0;\n  let vowelLength34 = 0;\n  let vowelIndex35 = 0;\n  let vowelLength35 = 0;\n  let vowelIndex36 = 0;\n  let vowelLength36 = 0;\n  let vowelIndex37 = 0;\n  let vowelLength37 = 0;\n  let vowelIndex38 = 0;\n  let vowelLength38 = 0;\n  let vowelIndex39 = 0;\n  let vowelLength39 = 0;\n  let vowelIndex40 = 0;\n  let vowelLength40 = 0;\n  let vowelIndex41 = 0;\n  let vowelLength41 = 0;\n  let vowelIndex42 = 0;\n  let vowelLength42 = 0;\n  let vowelIndex43 = 0;\n  let vowelLength43 = 0;\n  let vowelIndex44 = 0;\n  let vowelLength44 = 0;\n  let vowelIndex45 = 0;\n  let vowelLength45 = 0;\n  let vowelIndex46 = 0;\n  let vowelLength46 = 0;\n  let vowelIndex47 = 0;\n  let vowelLength47 = 0;\n  let vowelIndex48 = 0;\n  let vowelLength48 = 0;\n  let vowelIndex49 = 0;\n  let vowelLength49 = 0;\n  let vowelIndex50 = 0;\n  let vowelLength50 = 0;\n  let vowelIndex51 = 0;\n  let vowelLength51 = 0;\n  let vowelIndex52 = 0;\n  let vowelLength52 = 0;\n  let vowelIndex53 = 0;\n  let vowelLength53 = 0;\n  let vowelIndex54 = 0;\n  let vowelLength54 = 0;\n  let vowelIndex55 = 0;\n  let vowelLength55 = 0;\n  let vowelIndex56 = 0;\n  let vowelLength56 = 0;\n  let vowelIndex57 = 0;\n  let vowelLength57 = 0;\n  let vowelIndex58 = 0;\n  let vowelLength58 = 0;\n  let vowelIndex59 = 0;\n  let vowelLength59 = 0;\n  let vowelIndex60 = 0;\n  let vowelLength60 = 0;\n  let vowelIndex61 = 0;\n  let vowelLength61 = 0;\n  let vowelIndex62 = 0;\n  let vowelLength62 = 0;\n  let vowelIndex63 = 0;\n  let vowelLength63 = 0;\n  let vowelIndex64 = 0;\n  let vowelLength64 = 0;\n  let vowelIndex65 = 0;\n  let vowelLength65 = 0;\n  let vowelIndex66 = 0;\n  let vowelLength66 = 0;\n  let vowelIndex67 = 0;\n  let vowelLength67 = 0;\n  let vowelIndex68 = 0;\n  let vowelLength68 = 0;\n  let vowelIndex69 = 0;\n  let vowelLength69 = 0;\n  let vowelIndex70 = 0;\n  let vowelLength70 = 0;\n  let vowelIndex71 = 0;\n  let vowelLength71 = 0;\n  let vowelIndex72 = 0;\n  let vowelLength72 = 0;\n  let vowelIndex73 = 0;\n  let vowelLength73 = 0;\n  let vowelIndex74 = 0;\n  let vowelLength74 = 0;\n  let vowelIndex75 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string s  consist of open\n parenth eses ' (' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given a list of two strings, both string s  consist of open\n parenth eses'(' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconsole.log(matchParens(['()', ')', '()()']));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null;\n  }\n  return strings[0];\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n\n/*\n  >>> longest([1, 2, 3])\n  1\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  11\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  13\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  14\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  15\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  17\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  18\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  19\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  21\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  22\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  23\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  26\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  30\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  31\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  32\n  */\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLength = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const maxLength = 1\n\n  for (let i = 1; i < arrLength; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      maxLength = 1\n    } else if (arr[i] === max) {\n      maxLength++\n    }\n  }\n\n  return [...new Array(k).fill(0).map((_, index) => {\n    return maxIndex === index? max : arr[index]\n  }), maxLength]\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let odd = 0, even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  return odd + even;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nexport default addElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = []\n  let current = n\n  while (current > 1) {\n    if (current % 2 === 0) {\n      collatz.push(current)\n      current = current / 2\n    } else {\n      collatz.push(current * 3)\n      current = current * 3\n    }\n  }\n  collatz.push(current)\n  return collatz.sort()\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = []\n  let current = n\n  while (current > 1) {\n    if (current % 2 === 1) {\n      collatz.push(current)\n      current = current / 2\n    } else {\n      collatz.push(current * 3)\n      current = current * 3\n    }\n  }\n  collatz.push(current)\n  return collatz.sort()\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd and even numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddAndEvenCollatz(5) returns [1, 5, 8] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd and even numbers are only 1, and 5.\n  */\nconst getOddAndEvenCollatz = (n) => {\n  let collatz = []\n  let current = n\n  while (current > 1) {\n    if (current % 2 === 0) {\n      collatz.push(current)\n      current = current / 2\n    } else {\n      collatz.push(current * 3)\n      current = current * 3\n    }\n  }\n  collatz.push(current)\n  return collatz.sort()\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd and even numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddAndEvenCollatz(5) returns [1, 5, 8] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd and even numbers are only 1, and 5.\n  */\nconst getOddAndEvenCollatz = (n) => {\n  let collatz = []\n  let current = n\n  while (current > 1) {\n    if (current % 2 === 1) {\n      collatz.push(current)\n      current = current / 2\n    } else {\n      collatz.push(current * 3)\n      current = current * 3\n    }\n  }\n  collatz.push(current)\n  return collatz.sort()\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd and even numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2 .\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2.\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate2 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate3 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate4 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate5 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate6 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && year % 4 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1, ... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords20 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords21 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords22 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords23 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords24 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords25 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords26 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords27 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords28 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords29 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords30 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords31 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  let isSorted = true\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      isSorted = false\n      break\n    }\n    i++\n    j--\n  }\n  return isSorted\n}\n\nexport default isSorted\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const [start, end] = [start1, end1];\n  const [start2, end2] = [start2, end2];\n  const [start3, end3] = [start, end];\n  const [start4, end4] = [start2, end2];\n  const [start5, end5] = [start3, end3];\n  const [start6, end6] = [start4, end4];\n  const [start7, end7] = [start5, end5];\n  const [start8, end8] = [start6, end6];\n  const [start9, end9] = [start7, end7];\n  const [start10, end10] = [start8, end8];\n  const [start11, end11] = [start9, end9];\n  const [start12, end12] = [start10, end10];\n  const [start13, end13] = [start11, end11];\n  const [start14, end14] = [start12, end12];\n  const [start15, end15] = [start13, end13];\n  const [start16, end16] = [start14, end14];\n  const [start17, end17] = [start15, end15];\n  const [start18, end18] = [start16, end16];\n  const [start19, end19] = [start17, end17];\n  const [start20, end20] = [start18, end18];\n  const [start21, end21] = [start19, end19];\n  const [start22, end22] = [start20, end20];\n  const [start23, end23] = [start21, end21];\n  const [start24, end24] = [start22, end22];\n  const [start25, end25] = [start23, end23];\n  const [start26, end26] = [start24, end24];\n  const [start27, end27] = [start25, end25];\n  const [start28, end28] = [start26, end26];\n  const [start29, end29] = [start27, end27];\n  const [start30, end30] = [start28, end28];\n  const [start31, end31] = [start29, end29];\n  const [start32, end32] = [start30, end30];\n  const [start33, end33] = [start31, end31];\n  const [start34, end34] = [start32, end32];\n  const [start35, end35] = [start33, end33];\n  const [start36, end36] = [start34, end34];\n  const [start37, end37] = [start35, end35];\n  const [start38, end38] = [start36, end36];\n  const [start39, end39] = [start37, end37];\n  const [start40, end40] = [start38, end38];\n  const [start41, end41] = [start39, end39];\n  const [start42, end42] = [start40, end40];\n  const [start43, end43] = [start41, end41];\n  const [start44, end44] = [start42, end42];\n  const [start45, end45] = [start43, end43];\n  const [start46, end46] = [start44, end44];\n  const [start47, end47] = [start45, end45];\n  const [start48, end48] = [start46, end46];\n  const [start49, end49] = [start47, end47];\n  const [start50, end50] = [start48, end48];\n  const [start51, end51] = [start49, end49];\n  const [start52, end52] = [start50, end50];\n  const [start53, end53] = [start51, end51];\n  const [start54, end54] = [start52, end52];\n  const [start55, end55] = [start53, end53];\n  const [start56, end56] = [start54, end54];\n  const [start57, end57] = [start55, end55];\n  const [start58, end58] = [start56, end56];\n  const [start59, end59] = [start57, end57];\n  const [start60, end60] = [start58, end58];\n  const [start61, end61] = [start59, end59];\n  const [start62, end62] = [start60, end60];\n  const [start63, end63] = [start61, end61];\n  const [start64, end64] = [start62, end62];\n  const [start65, end65] = [start63, end63];\n  const [start66, end66] = [start64, end64];\n  const [start67, end67] = [start65, end65];\n  const [start68,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sum = arr.reduce((a, b) => a + b, 0);\n  const sign = arr.reduce((a, b) => a * b, 1);\n  return sum * sign;\n};\n\nconst testProdSigns = () => {\n  const arr = [1, 2, 2, -4];\n  console.log(prodSigns(arr));\n  console.log(prodSigns([0, 1]));\n  console.log(prodSigns([]));\n};\n\ntestProdSigns();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B) , lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B), lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n * m).fill(0)\n  const lst = new Array(k).fill(0)\n  const dp_row = new Array(n).fill(0)\n  const dp_col = new Array(m).fill(0)\n  const dp_diag = new Array(n).fill(0)\n  const dp_diag_row = new Array(m).fill(0)\n  const dp_diag_col = new Array(n).fill(0)\n  const dp_diag_diag = new Array(n).fill(0)\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i * m + j] = grid[i][j]\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 && j === 0) {\n        dp_row[i] = dp[i * m + j]\n      } else if (i === 0) {\n        dp_col[j] = dp[i * m + j]\n      } else if (j === 0) {\n        dp_diag[i] = dp[i * m + j]\n      } else {\n        dp_diag_row[j] = dp[i * m + j]\n        dp_diag_col[i] = dp[i * m + j]\n        dp_diag_diag[i] = dp[i * m + j]\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 && j === 0) {\n        lst[0] = dp_row[i]\n      } else if (i === 0) {\n        lst[0] = dp_col[j]\n      } else if (j === 0) {\n        lst[0] = dp_diag[i]\n      } else {\n        lst[0] = Math.min(dp_row[i], dp_col[j], dp_diag[i], dp_diag_row[j], dp_diag_col[i], dp_diag_diag[i])\n      }\n      for (let k = 1; k < k; k++) {\n        lst[k] = Math.min(lst[k - 1], lst[k])\n      }\n    }\n  }\n\n  return lst\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconsole.log(minPath(grid, 3))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a % b, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2));\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const arr = Array.from(n);\n  const result = arr.reduce((acc, curr) => acc * curr, 1);\n  return result % 10;\n}\n\nconst isOdd = (n) => {\n  return digits(n) % 2 === 1;\n}\n\nconst isEven = (n) => {\n  return digits(n) % 2 === 0;\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n < 9) {\n    return true;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[] ' ) ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n] = sNested(string)\n  return n\n}\n\nconst sNested = (string)=> {\n  const [s, n]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t ,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]$/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and not a p art of  a word,\n  and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and not a p art of  a word,\n  and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and not a p art of  a word,\n  and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and not a p art of  a word,\n  and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and not a p art of  a word,\n  and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and not a p art of  a word,\n  and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter7 = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is a letter and not a p art of  a word,\n  and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter8 = (txt) => {\n  return txt.length > 0 && /[a-zA-Z]/.test(txt.slice(-1));\n};\n\n/*\n  Create a function that returns true if the lastc haracter\n  of a given stri ng is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    const largest = (a, b) => a > b? a : b;\n    const smallest = (a, b) => a < b? a : b;\n    return lst.reduce((a, b) => largest(a, b), null);\n  };\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    const largest = (a, b) => a > b? a : b;\n    const smallest = (a, b) => a < b? a : b;\n    return lst.reduce((a, b) => largestSmallest(a, b), null);\n  };\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    const largest = (a, b) => a > b? a : b;\n    const smallest = (a, b) => a < b? a : b;\n    return lst.reduce((a, b) => largestSmallest(a, b), null);\n  };\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    const largest = (a, b) => a > b? a : b;\n    const smallest = (a, b) => a < b? a : b;\n    return lst.reduce((a, b) => largestSmallest(a, b), null);\n  };\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    const largest = (a, b) => a > b? a : b;\n    const smallest = (a, b) => a < b? a : b;\n    return lst.reduce((a, b) => largestSmallest(a, b), null);\n  };\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be .or ,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compareO =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare2 =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare3 =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare4 =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare5 =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare6 =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  return null;\n}\n\nconst compare7 =(a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  if (typeof a ==='string", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2 + 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd2 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2 + 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd3 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2 + 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd4 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2 + 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd5 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2 + 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd6 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2 + 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd7 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2 + 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  const sum = n + n + n + n;\n  return sum === n * 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isE", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1) ! * (n -2)! * ... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1)! * (n -2)! *... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nconst test = (n) => {\n  const factorial = specialFactorial(n);\n  console.log(`The ${n}th factorial is: ${factorial}`);\n};\n\ntest(4);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    suffixes.push(suffix);\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces2 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces3 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces4 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces5 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces6 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces7 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces8 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces9 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces10 = (text) => {\n  let spaces = text.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i].length > 2) {\n      spaces[i] = spaces[i].replace(/\\s/g, \"-\");\n    } else {\n      spaces[i] = spaces[i].replace(/\\s/g, \"\");\n    }\n    result += spaces[i] + \" \";\n  }\n  return result.trim();\n};\n\nconst fixSpaces11 = (text) => {\n  let spaces = text.split(\" \");\n  let result =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representi n g a file's name, and retur ns\n  ' Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt', ' exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9_.]+$/;\n  const regex_dot = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+$/;\n  const regex_txt = /^[a-zA-Z0-9_.]+\\.(txt|exe|dll)$/;\n  const regex_dot_txt = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(txt|exe|dll)$/;\n  const regex_dot_exe = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(exe)$/;\n  const regex_dot_dll = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(dll)$/;\n  const regex_dot_exe_dll = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(exe|dll)$/;\n  if (regex.test(file_name) && file_name.indexOf(\".\")!== -1) {\n    if (regex_dot.test(file_name) && file_name.indexOf(\".\")!== -1) {\n      if (regex_txt.test(file_name) || regex_dot_txt.test(file_name) || regex_dot_exe.test(file_name) || regex_dot_dll.test(file_name) || regex_dot_exe_dll.test(file_name)) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/*\n  Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threedigits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_.]+$/;\n  const regex_dot = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+$/;\n  const regex_txt = /^[a-zA-Z0-9_.]+\\.(txt|exe|dll)$/;\n  const regex_dot_txt = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(txt|exe|dll)$/;\n  const regex_dot_exe = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(exe)$/;\n  const regex_dot_dll = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(dll)$/;\n  const regex_dot_exe_dll = /^[a-zA-Z0-9_.]+\\.[a-zA-Z0-9_.]+\\.(exe|dll)$/;\n  if (regex.test(file_name) && file_name.indexOf(\".\")!== -1) {\n    if (regex_dot.test(file_name) && file_name.indexOf(\".\")!== -1) {\n      if (regex_txt.test(file_name) || regex_dot_txt.test(file_name) || regex_dot_exe.test(file_name) || regex_dot_dll.test(file_name) || regex_dot_exe_dll.test(file_name)) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\nmodule.exports = fileNameCheck;\nmodule.exports = fileNameCheck2;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = isPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nexport default wordsInSentence\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n  const [x, n] = [x, n].map(s => s.trim());\n  const [xN, nN] = [x, n].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN, nN].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN_].map(s => s.replace(/\\s/g, ''));\n  const [xN_, nN_] = [xN_, nN", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2!== 0)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter2 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 0)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter3 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 0)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter4 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 1)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter5 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 1)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter6 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 0)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter7 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 0)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter8 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 1)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter9 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 1)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter10 = (nums) => {\n  const arr = nums.filter((n) => n > 10 && n % 2 === 0)\n  return arr.length\n}\n\n/*Write a function that takes an array of numbers a s input and returns \n  the number of elements in the array that are greater than 10 and \n  the first and last digit of the number are even", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array(n).fill(1);\n  const b = Array(n).fill(0);\n  const c = Array(n).fill(0);\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          b[i] = 1;\n          b[j] = 1;\n          b[k] = 1;\n        }\n      }\n    }\n  }\n  return b.reduce((acc, val, i) => acc + val, 0);\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury , the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury, the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1_name = planet1.toLowerCase();\n  let planet2_name = planet2.toLowerCase();\n  let planet1_orbit = getOrbit(planet1_name);\n  let planet2_orbit = getOrbit(planet2_name);\n  let planet1_distance = getDistance(planet1_name, planet2_name);\n  let planet2_distance = getDistance(planet2_name, planet1_name);\n  let planet1_proximity = getProximity(planet1_name, planet2_name);\n  let planet2_proximity = getProximity(planet2_name, planet1_name);\n  let planet1_sorted = sortByProximity(planet1_orbit, planet2_orbit);\n  let planet2_sorted = sortByProximity(planet2_orbit, planet1_orbit);\n  let planet1_sorted_sorted = sortByProximity(planet1_sorted, planet2_sorted);\n  let planet2_sorted_sorted = sortByProximity(planet2_sorted, planet1_sorted);\n  let planet1_sorted_sorted_sorted = sortByProximity(planet1_sorted_sorted, planet2_sorted_sorted);\n  return planet1_sorted_sorted_sorted;\n};\n\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Earth\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Mars\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Earth\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Mars\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_alpha = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_alpha_by_len = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_len = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_len_alpha = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_len_alpha_by_len = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_len_alpha_by_len_alpha = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_len_alpha_by_len_alpha_by_len = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i = 0; i < len; i++) {\n    if (sum - lst[i].length > 0) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_len_alpha_by_len_alpha_by_len_alpha = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n  }\n  for (let i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2, nr2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1, 0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2, nr2, nc3) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1, 0, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2, nr2, nc3, nr3) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1, 0, 1, 0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2, nr2, nc3, nr3, nc4) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1, 0, 1, 0, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2, nr2, nc3, nr3, nc4, nr4) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1, 0, 1, 0, 1, 0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2, nr2, nc3, nr3, nc4, nr4, nc5) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1, 0, 1, 0, 1, 0, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, nc, nr, nc2, nr2, nc3, nr3, nc4, nr4, nc5, nr5) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0, 5, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0)\n  '0 1 2 3 4 5'", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a, b) => a + b, 0);\n    return sumOdd - sum;\n};\n\nconst doubleTheDifference = (ls t)  => {\n    if (t.length === 0) {\n        return 0;\n    }\n    const sum = t.reduce((a, b) => a + b, 0);\n    const sumOdd = t.reduce((a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known .  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g .\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length , where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not , the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known.  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g.\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length, where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not, the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.map(Number.parseFloat);\n  const guesses = guess.map(Number.parseFloat);\n  const diff = scores.filter(x => x!== guesses[x]);\n  const diffLength = diff.length;\n  const diffSum = diff.reduce((a, b) => a + b);\n  const diffAvg = diffSum / diffLength;\n  const diffAvgDiff = Math.abs(diffAvg - scores[0]);\n  const diffAvgDiff2 = Math.abs(diffAvg - scores[1]);\n  const diffAvgDiff3 = Math.abs(diffAvg - scores[2]);\n  const diffAvgDiff4 = Math.abs(diffAvg - scores[3]);\n  const diffAvgDiff5 = Math.abs(diffAvg - scores[4]);\n  const diffAvgDiff6 = Math.abs(diffAvg - scores[5]);\n  const diffAvgDiff7 = Math.abs(diffAvg - scores[6]);\n  const diffAvgDiff8 = Math.abs(diffAvg - scores[7]);\n  const diffAvgDiff9 = Math.abs(diffAvg - scores[8]);\n  const diffAvgDiff10 = Math.abs(diffAvg - scores[9]);\n  const diffAvgDiff11 = Math.abs(diffAvg - scores[10]);\n  const diffAvgDiff12 = Math.abs(diffAvg - scores[11]);\n  const diffAvgDiff13 = Math.abs(diffAvg - scores[12]);\n  const diffAvgDiff14 = Math.abs(diffAvg - scores[13]);\n  const diffAvgDiff15 = Math.abs(diffAvg - scores[14]);\n  const diffAvgDiff16 = Math.abs(diffAvg - scores[15]);\n  const diffAvgDiff17 = Math.abs(diffAvg - scores[16]);\n  const diffAvgDiff18 = Math.abs(diffAvg - scores[17]);\n  const diffAvgDiff19 = Math.abs(diffAvg - scores[18]);\n  const diffAvgDiff20 = Math.abs(diffAvg - scores[19]);\n  const diffAvgDiff21 = Math.abs(diffAvg - scores[20]);\n  const diffAvgDiff22 = Math.abs(diffAvg - scores[21]);\n  const diffAvgDiff23 = Math.abs(diffAvg - scores[22]);\n  const diffAvgDiff24 = Math.abs(diffAvg - scores[23]);\n  const diffAvgDiff25 = Math.abs(diffAvg - scores[24]);\n  const diffAvgDiff26 = Math.abs(diffAvg - scores[25]);\n  const diffAvgDiff27 = Math.abs(diffAvg - scores[26]);\n  const diffAvgDiff28 = Math.abs(diffAvg - scores[27]);\n  const diffAvgDiff29 = Math.abs(diffAvg - scores[28]);\n  const diffAvgDiff30 = Math.abs(diffAvg - scores[29]);\n  const diffAvgDiff31 = Math.abs(diffAvg - scores[30]);\n  const diffAvgDiff32 = Math.abs(diffAvg - scores[31]);\n  const diffAvgDiff33 = Math.abs(diffAvg - scores[32]);\n  const diffAvgDiff34 = Math.abs(diffAvg - scores[33]);\n  const diffAvgDiff35 = Math.abs(diffAvg - scores[34]);\n  const diffAvgDiff36 = Math.abs(diffAvg - scores[35]);\n  const diffAvgDiff37 = Math.abs(diffAvg - scores[36]);\n  const diffAvgDiff38 = Math.abs(diffAvg - scores[37]);\n  const diffAvgDiff39 = Math.abs(diffAvg - scores[38]);\n  const diffAvgDiff40 = Math.abs(diffAvg - scores[39]);\n  const diffAvgDiff41 = Math.abs(diffAvg - scores[40]);\n  const diffAvgDiff42 = Math.abs(diffAvg - scores[41]);\n  const diffAvgDiff43 = Math.abs(diffAvg - scores[42]);\n  const diffAvgDiff44 = Math.abs(diffAvg - scores[43]);\n  const diffAvgDiff45 = Math.abs(diffAvg - scores[44]);\n  const diffAvgDiff46 = Math.abs(diffAvg - scores[45]);\n  const diffAvgDiff47 = Math.abs(diffAvg - scores[46]);\n  const diffAvgDiff48 = Math.abs(diffAvg - scores[47]);\n  const diffAvgDiff49 = Math.abs(diffAvg - scores[48]);\n  const diffAvgDiff50 = Math.abs(diffAvg - scores[49]);\n  const diffAvgDiff51 = Math.abs(diffAvg - scores[50]);\n  const diffAvgDiff52 = Math.abs(diffAvg - scores[51]);\n  const diffAvgDiff53 = Math.abs(diffAvg - scores[52]);\n  const diffAvgDiff54 = Math.abs(diffAvg - scores[53]);\n  const diffAvgDiff55 = Math.abs(diffAvg - scores[54]);\n  const diffAvgDiff56 = Math.abs(diffAvg - scores[55]);\n  const diffAvgDiff57 = Math.abs(diffAvg - scores[56]);\n  const diffAvgDiff58 = Math.abs(diffAvg - scores[57]);\n  const diffAvgDiff59 = Math.abs(diffAvg - scores[58]);\n  const diffAvgDiff60 = Math.abs(diffAvg - scores[59]);\n  const diffAvgDiff61 = Math.abs(diffAvg - scores[60]);\n  const diffAvgDiff", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM .  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM.  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const ext_name = ext.toLowerCase();\n    strength[ext_name] = strength[ext_name] || 0;\n    const cap = ext.toUpperCase().length;\n    const sm = ext.toLowerCase().length;\n    strength[ext_name] += (cap - sm) / cap;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[b] - strength[a])[0];\n  return `${class_name}.${strongest}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n  const cpattern = /[a-zA-Z]+/;\n  const cycpattern = /[a-zA-Z]+/;\n  const cycpattern2 = /[a-zA-Z]+/;\n  const cycpattern3 = /[a-zA-Z]+/;\n  const cycpattern4 = /[a-zA-Z]+/;\n  const cycpattern5 = /[a-zA-Z]+/;\n  const cycpattern6 = /[a-zA-Z]+/;\n  const cycpattern7 = /[a-zA-Z]+/;\n  const cycpattern8 = /[a-zA-Z]+/;\n  const cycpattern9 = /[a-zA-Z]+/;\n  const cycpattern10 = /[a-zA-Z]+/;\n  const cycpattern11 = /[a-zA-Z]+/;\n  const cycpattern12 = /[a-zA-Z]+/;\n  const cycpattern13 = /[a-zA-Z]+/;\n  const cycpattern14 = /[a-zA-Z]+/;\n  const cycpattern15 = /[a-zA-Z]+/;\n  const cycpattern16 = /[a-zA-Z]+/;\n  const cycpattern17 = /[a-zA-Z]+/;\n  const cycpattern18 = /[a-zA-Z]+/;\n  const cycpattern19 = /[a-zA-Z]+/;\n  const cycpattern20 = /[a-zA-Z]+/;\n  const cycpattern21 = /[a-zA-Z]+/;\n  const cycpattern22 = /[a-zA-Z]+/;\n  const cycpattern23 = /[a-zA-Z]+/;\n  const cycpattern24 = /[a-zA-Z]+/;\n  const cycpattern25 = /[a-zA-Z]+/;\n  const cycpattern26 = /[a-zA-Z]+/;\n  const cycpattern27 = /[a-zA-Z]+/;\n  const cycpattern28 = /[a-zA-Z]+/;\n  const cycpattern29 = /[a-zA-Z]+/;\n  const cycpattern30 = /[a-zA-Z]+/;\n  const cycpattern31 = /[a-zA-Z]+/;\n  const cycpattern32 = /[a-zA-Z]+/;\n  const cycpattern33 = /[a-zA-Z]+/;\n  const cycpattern34 = /[a-zA-Z]+/;\n  const cycpattern35 = /[a-zA-Z]+/;\n  const cycpattern36 = /[a-zA-Z]+/;\n  const cycpattern37 = /[a-zA-Z]+/;\n  const cycpattern38 = /[a-zA-Z]+/;\n  const cycpattern39 = /[a-zA-Z]+/;\n  const cycpattern40 = /[a-zA-Z]+/;\n  const cycpattern41 = /[a-zA-Z]+/;\n  const cycpattern42 = /[a-zA-Z]+/;\n  const cycpattern43 = /[a-zA-Z]+/;\n  const cycpattern44 = /[a-zA-Z]+/;\n  const cycpattern45 = /[a-zA-Z]+/;\n  const cycpattern46 = /[a-zA-Z]+/;\n  const cycpattern47 = /[a-zA-Z]+/;\n  const cycpattern48 = /[a-zA-Z]+/;\n  const cycpattern49 = /[a-zA-Z]+/;\n  const cycpattern50 = /[a-zA-Z]+/;\n  const cycpattern51 = /[a-zA-Z]+/;\n  const cycpattern52 = /[a-zA-Z]+/;\n  const cycpattern53 = /[a-zA-Z]+/;\n  const cycpattern54 = /[a-zA-Z]+/;\n  const cycpattern55 = /[a-zA-Z]+/;\n  const cycpattern56 = /[a-zA-Z]+/;\n  const cycpattern57 = /[a-zA-Z]+/;\n  const cycpattern58 = /[a-zA-Z]+/;\n  const cycpattern59 = /[a-zA-Z]+/;\n  const cycpattern60 = /[a-zA-Z]+/;\n  const cycpattern61 = /[a-zA-Z]+/;\n  const cycpattern62 = /[a-zA-Z]+/;\n  const cycpattern63 = /[a-zA-Z]+/;\n  const cycpattern64 = /[a-zA-Z]+/;\n  const cycpattern65 = /[a-zA-Z]+/;\n  const cycpattern66 = /[a-zA-Z]+/;\n  const cycpattern67 = /[a-zA-Z]+/;\n  const cycpattern68 = /[a-zA-Z]+/;\n  const cycpattern69 = /[a-zA-Z]+/;\n  const cycpattern70 = /[a-zA-Z]+/;\n  const cycpattern71 = /[a-zA-Z]+/;\n  const cycpattern72 = /[a-zA-Z]+/;\n  const cycpattern73 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [odd, even];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\nconsole.log(evenOddCount(12345));\nconsole.log(evenOddCount(123456));\nconsole.log(evenOddCount(1234567));\nconsole.log(evenOddCount(12345678));\nconsole.log(evenOddCount(123456789));\nconsole.log(evenOddCount(1234567890));\nconsole.log(evenOddCount(12345678901));\nconsole.log(evenOddCount(123456789012));\nconsole.log(evenOddCount(1234567890123));\nconsole.log(evenOddCount(12345678901234));\nconsole.log(evenOddCount(123456789012345));\nconsole.log(evenOddCount(1234567890123456));\nconsole.log(evenOddCount(12345678901234567));\nconsole.log(evenOddCount(123456789012345678));\nconsole.log(evenOddCount(1234567890123456789));\nconsole.log(evenOddCount(12345678901234567890));\nconsole.log(evenOddCount(123456789012345678901));\nconsole.log(evenOddCount(1234567890123456789012));\nconsole.log(evenOddCount(12345678901234567890123));\nconsole.log(evenOddCount(123456789012345678901234));\nconsole.log(evenOddCount(1234567890123456789012345));\nconsole.log(evenOddCount(12345678901234567890123456));\nconsole.log(evenOddCount(123456789012345678901234567));\nconsole.log(evenOddCount(1234567890123456789012345678));\nconsole.log(evenOddCount(12345678901234567890123456789));\nconsole.log(evenOddCount(123456789012345678901234567890));\nconsole.log(evenOddCount(1234567890123456789012345678901));\nconsole.log(evenOddCount(12345678901234567890123456789012));\nconsole.log(evenOddCount(123456789012345678901234567890123));\nconsole.log(evenOddCount(1234567890123456789012345678901234));\nconsole.log(evenOddCount(12345678901234567890123456789012345));\nconsole.log(evenOddCount(123456789012345678901234567890123456));\nconsole.log(evenOddCount(1234567890123456789012345678901234567));\nconsole.log(evenOddCount(12345678901234567890123456789012345678));\nconsole.log(evenOddCount(123456789012345678901234567890123456789));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789012));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890123));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901234));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789012345));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890123456));\nconsole.log(evenOddCount(1234567890123456789", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let number = number;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result = `${digit}` + result;\n    } else if (digit == 2) {\n      result = `${digit}v` + result;\n    } else if (digit == 3) {\n      result = `${digit}ix` + result;\n    } else if (digit == 4) {\n      result = `${digit}iv` + result;\n    } else if (digit == 5) {\n      result = `${digit}x` + result;\n    } else if (digit == 6) {\n      result = `${digit}ix` + result;\n    } else if (digit == 7) {\n      result = `${digit}vii` + result;\n    } else if (digit == 8) {\n      result = `${digit}viii` + result;\n    } else if (digit == 9) {\n      result = `${digit}ix` + result;\n    }\n  }\n  return result;\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b);\n};\n\n/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \" , \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\" ,\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    return acc;\n  }, []);\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconst findMax = (words) => {\n  const unique = words.reduce((acc, word) => {\n    if (acc.indexOf(word) === -1) {\n      acc.push(word);\n    }\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts , but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (number + remaining >= need) {\n    return [number, remaining - need];\n  }\n  return [number, remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chara = string.split('')\n  const charaLength = chara.length\n  const charaLengthUnique = chara.length\n  const charaLengthUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique = chara.length\n  const charaLengthUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUniqueUnique\n\n\n    //\n    // @returns {@link https://en.wikipedia.org/wiki/List_of_airlines#List_of_airlines}\n    //\n    // @param {string} name - The name of the object\n    // @param {string} [type] - The type of the object\n    // @param {string} [id] - The id of the object\n    // @param {string} [description] - The description of the object\n    // @param {string} [type] - The type of the object\n    // @param {string} [id] - The id of the object\n    // @param {string} [description] - The description of the object\n    // @param {string} [type] - The type of the object\n    // @param {string} [id] - The id of the object\n    // @param {string} [description] - The description of the object\n    // @param {string} [type] - The type of the object\n    // @param {string} [id] - The id of the object\n    // @param {string} [description] - The description of the object\n    // @param {string} [type] - The type of the object\n    // @param {string} [id] - The id of the object\n    // @param {string} [description] - The description of the object\n    // @param {string} [type] - The type of the object\n    // @", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1]\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1]\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1]\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1]\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1]\n    } else if (operatorValue === '**') {\n      resultValue = Math.p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is .\n  Ifthe string contains no letters , reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is.\n  Ifthe string contains no letters, reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      result += s[i];\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined || text === null) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r .\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last .\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      notes_list.push(4);\n    } else if (note === 'o|') {\n      notes_list.push(2);\n    } else if (note === '.') {\n      notes_list.push(1);\n    } else if (note === '|') {\n      notes_list.push(0);\n    }\n  }\n  return notes_list;\n};\n\n/*\n  Input to this function is a string representing a musical note in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturn list of integers corresponding  to how many beats does each note lasts.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseNote('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNote = (note_string) => {\n  const notes = note_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      notes_list.push(4);\n    } else if (note === 'o|') {\n      notes_list.push(2);\n    } else if (note === '.') {\n      notes_list.push(1);\n    }\n  }\n  return notes_list;\n};\n\n/*\n  Input to this function is a string representing a musical note in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturn list of integers corresponding  to how many beats does each note lasts.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseNote('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNote2 = (note_string) => {\n  const notes = note_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      notes_list.push(4);\n    } else if (note === 'o|') {\n      notes_list.push(2);\n    } else if (note === '.') {\n      notes_list.push(1);\n    }\n  }\n  return notes_list;\n};\n\n/*\n  Input to this function is a string representing a musical note in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturn list of integers corresponding  to how many beats does each note lasts.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseNote('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNote3 = (note_string) => {\n  const notes = note_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      notes_list.push(4);\n    } else if (note === 'o|') {\n      notes_list.push(2);\n    } else if (note === '.') {\n      notes_list.push(1);\n    }\n  }\n  return notes_list;\n};\n\n/*\n  Input to this function is a string representing a musical note in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturn list of integers corresponding  to how many beats does each note lasts.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseNote('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNote4 = (note_string) => {\n  const notes = note_string.split(' ');\n  const notes_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      notes_list.push(4);\n    } else if (note === 'o|') {\n      notes_list.push(2);\n    } else if (note === '.') {\n      notes_list.push(1);\n    }\n  }\n  return notes_list;\n};\n\n/*\n  Input to this function is a string representing a musical note in aspecialASCII", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s .\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the originalstring that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n      if (count > count) {\n        start = i;\n        end = i + substring.length - 1;\n      }\n    }\n  }\n  return string.substr(start, end - start + 1);\n};\n\n/*\n  Find the longest substring in the originalstring that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n      if (count > count) {\n        start = i;\n        end = i + substring.length - 1;\n      }\n    }\n  }\n  return string.substr(start, end - start + 1);\n};\n\n/*\n  Find the longest substring in the originalstring that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n      if (count > count) {\n        start = i;\n        end = i + substring.length - 1;\n      }\n    }\n  }\n  return string.substr(start, end - start + 1);\n};\n\n/*\n  Find the longest substring in the originalstring that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n      if (count > count) {\n        start = i;\n        end = i + substring.length - 1;\n      }\n    }\n  }\n  return string.substr(start, end - start + 1);\n};\n\n/*\n  Find the longest substring in the originalstring that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n      if (count > count) {\n        start = i;\n        end = i + substring.length - 1;\n      }\n    }\n  }\n  return string.substr(start, end - start + 1);\n};\n\n/*\n  Find the longest substring in the originalstring that contains all the characters in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n      if (count > count) {\n        start = i;\n        end = i + substring.length - 1;\n      }\n    }\n  }\n  return string.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero' ,  'one', 'two',  'three', 'f our','five', 'six', 'seven', 'eight' and ' nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers.\n  Val id choices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = parseInt(number);\n  const numberAsFloat = parseFloat(number);\n  const numberAsFloatInt = numberAsFloat.toFixed(0);\n  const numberAsIntInt = numberAsInt.toFixed(0);\n  const numberAsFloatIntInt = numberAsFloatInt.toFixed(0);\n  const numberAsIntIntInt = numberAsIntInt.toFixed(0);\n  const numberAsFloatIntIntInt = numberAsFloatIntInt.toFixed(0);\n  const numberAsIntIntIntInt = numberAsIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntInt = numberAsFloatIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntInt = numberAsIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntInt = numberAsFloatIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntInt = numberAsIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntInt = numberAsFloatIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntInt = numberAsIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsFloatIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toFixed(0);\n  const numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numberAsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements3 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements4 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements5 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements6 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements7 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements8 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements9 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements10 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements11 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements12 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements13 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements14 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements15 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements16 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements17 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nconst findClosestElements18 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (ofat least two elements) ,  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\nconst rescaleToUnit = (numbers) => {\n  const max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstInteger = (values) => {\n  return filterIntegers(values).map(v => v);\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstString = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstBoolean = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstFloat = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstObject = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstArray = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstFunction = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstNull = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirstUndefined = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filterFirst = (values) => {\n  return filterIntegers(values).map(v => v.toString());\n};\n\n// Filter given list of any pythonvalues only fori ntegers\n// and return only the first one\nconst filter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return the index of the first occurrence of a substring in a string\n  *\n  * @param {string} string\n  * @param {string} substring\n  * @returns {number}\n  *\n  * @example\n  * strindex( 'abc', 'b' )\n  * // => 1\n  *\n  * @example\n  * strindex( 'abc', 'bc' )\n  * // => 0\n  *\n  * @example\n  * strindex( 'abc', 'c' )\n  * // => 2\n  *\n  * @example\n  * strindex( 'abc', 'd' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'ab' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'abcd' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'bcd' )\n  * // => 1\n  *\n  * @example\n  * strindex( 'abc', 'bc' )\n  * // => 0\n  *\n  * @example\n  * strindex( 'abc', 'c' )\n  * // => 2\n  *\n  * @example\n  * strindex( 'abc', 'd' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'a' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )\n  * // => -1\n  *\n  * @example\n  * strindex( 'abc', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number t such that t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let i = 2\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  const factors = []\n  let i = 2\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse(8)\n  [2, 2, 2]\n  >>> factorizeReverse(25)\n  [5, 5]\n  >>> factorizeReverse(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse2 = (n) => {\n  const factors = []\n  let i = 2\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to  largest.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse2(8)\n  [2, 2, 2]\n  >>> factorizeReverse2(25)\n  [5, 5]\n  >>> factorizeReverse2(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse3 = (n) => {\n  const factors = []\n  let i = 2\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to  largest.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse3(8)\n  [2, 2, 2]\n  >>> factorizeReverse3(25)\n  [5, 5]\n  >>> factorizeReverse3(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse4 = (n) => {\n  const factors = []\n  let i = 2\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to  largest.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse4(8)\n  [2, 2, 2]\n  >>> factorizeReverse4(25)\n  [5, 5]\n  >>> factorizeReverse4(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse5 = (n) => {\n  const factors = []\n  let i = 2\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to  largest.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorizeReverse5(8)\n  [2, 2, 2]\n  >>> factorizeReverse5(25)\n  [5, 5]\n  >>> factorizeReverse5(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse6 = (n) => {\n  const factors = []", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen.has(numbers[i])) {\n      result.push(numbers[i]);\n      seen.add(numbers[i]);\n    }\n  }\n  return result;\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> spaceToUnderscore('Hello World')\n  'hello_world'\n  */\nconst spaceToUnderscore = (string) => {\n  return string.replace(/ /g, '_');\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> underscoreToSpace('hello_world')\n  'Hello World'\n  */\nconst underscoreToSpace = (string) => {\n  return string.replace(/_/g,'');\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> camelCaseToSnakeCase('HelloWorld')\n  'hello_world'\n  */\nconst camelCaseToSnakeCase = (string) => {\n  return string.replace(/([A-Z])/g, (c) => {\n    return '_' + c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase = (string) => {\n  return string.replace(/_([a-z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase2 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase3 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase4 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase5 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase6 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase7 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase8 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase9 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase10 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase11 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces replaced by '_'\n  >>> snakeCaseToCamelCase('hello_world')\n  'HelloWorld'\n  */\nconst snakeCaseToCamelCase12 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0)\n  return balance < 0\n}\n\nexport default belowZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 5", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n % 3 === 0) return false\n  if (n < 9) return true\n  if (n % 7 === 0) return false\n  if (n < 99) return true\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return false\n  if (n < 999) return true\n  if (n % 17 === 0) return false\n  if (n < 9999) return true\n  if (n % 19 === 0) return false\n  if (n % 23 === 0) return false\n  if (n < 99999) return true\n  if (n % 29 === 0) return false\n  if (n < 99999999) return true\n  if (n % 31 === 0) return false\n  if (n < 999999999999) return true\n  if (n % 37 === 0) return false\n  if (n < 9999999999999999) return true\n  if (n % 41 === 0) return false\n  if (n < 99999999999999999999) return true\n  return false\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 + ....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l .\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  while (i < n) {\n    let xi = xs[i];\n    if (xi < 0) {\n      x = xi;\n      y = xs[i + 1];\n      break;\n    }\n    i++;\n  }\n  if (i == n) {\n    return -1;\n  }\n  let f = poly(x);\n  while (f == 0) {\n    x++;\n    f = poly(x);\n  }\n  return [x, y];\n}\n/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  while (i < n) {\n    let xi = xs[i];\n    if (xi < 0) {\n      x = xi;\n      y = xs[i + 1];\n      break;\n    }\n    i++;\n  }\n  if (i == n) {\n    return -1;\n  }\n  let f = poly(x);\n  while (f == 0) {\n    x++;\n    f = poly(x);\n  }\n  return [x, y];\n}\n/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  while (i < n) {\n    let xi = xs[i];\n    if (xi < 0) {\n      x = xi;\n      y = xs[i + 1];\n      break;\n    }\n    i++;\n  }\n  if (i == n) {\n    return -1;\n  }\n  let f = poly(x);\n  while (f == 0) {\n    x++;\n    f = poly(x);\n  }\n  return [x, y];\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sorted.push(sortedValues[sortedIndices[i]])\n  }\n  return sorted\n}\n\n/*\n  This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n  to the values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sorted.push(sortedValues[sortedIndices[i]])\n  }\n  return sorted\n}\n\nconst sortThird3 = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sorted.push(sortedValues[sortedIndices[i]])\n  }\n  return sorted\n}\n\nconst sortThird4 = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sorted.push(sortedValues[sortedIndices[i]])\n  }\n  return sorted\n}\n\nconst sortThird5 = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sorted.push(sortedValues[sortedIndices[i]])\n  }\n  return sorted\n}\n\nconst sortThird6 = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sorted.push(sortedValues[sortedIndices[i]])\n  }\n  return sorted\n}\n\nconst sortThird7 = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sorted.push(sortedValues[sortedIndices[i]])\n  }\n  return sorted\n}\n\nconst sortThird8 = (l) => {\n  const sorted = []\n  const sortedIndices = []\n  const sortedValues = []\n  const sortedIndicesLength = l.length\n  for (let i = 0; i < sortedIndicesLength; i++) {\n    sortedIndices.push(i)\n    sortedValues.push(l[i])\n  }\n  sortedIndices.sort((a, b) => {\n    return a - b\n  })\n  for (let i = 0; i < sortedIndicesLength; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn2 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn2([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn3 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn3([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn4 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn4([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn5 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn5([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn6 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn6([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn7 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn7([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn8 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> uniqueByFn8([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn9 = (l, fn) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(fn(l[i])) === -1) {\n      uniqueList.push(fn(l[i]));\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  let sorted = sortedArray(l);\n  if (sorted.length % 2 === 0) {\n    return (sorted[(sorted.length / 2) - 1] + sorted[sorted.length / 2]) / 2;\n  } else {\n    return sorted[sorted.length / 2];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode2 = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode3 = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode4 = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode5 = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode6 = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0, buzz = 0, fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzz++;\n    } else if (i % 3 === 0) {\n      fizz++;\n    } else if (i % 5 === 0) {\n      buzz++;\n    }\n  }\n  return fizzBuzz;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const even = [...l].filter((i) => i % 2 === 0);\n  const odd = [...l].filter((i) => i % 2!== 0);\n  return [...sorted,...even,...odd];\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2 .push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n  var groups =  [], groups2  = [];\n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  returns decoded string bycycling groups of thre e  characters.\n  */const decodeCyclic = (s ) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  returns decoded string bycycling groups of thre e  characters.\n  */const decodeCyclic = (s ) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  returns decoded string bycycling groups of thre e  characters.\n  */const decodeCyclic = (s ) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  returns decoded string bycycling groups of thre e  characters.\n  */const decodeCyclic = (s ) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  returns decoded string bycycling groups of thre e  characters.\n  */const decodeCyclic = (s ) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  returns decoded string bycycling groups of thre e  characters.\n  */const decodeCyclic = (s ) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  returns decoded string bycycling groups of thre e  characters.\n  */const decodeCyclic = (s ) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime .\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const dev = numbers.reduce((a, b) => Math.abs(a - b))\n  return dev / sum\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.reduce((a, b) => a + b) * (numbers.reduce((a, b) => a + b) - numbers.length)) / (numbers.length * (numbers.length - 1))\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of inputnumbers, calculate the  standard deviation\n  of this d a taset.\n Standard Deviation is the square root of the  variance:\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result , th ey  continuemoving\n  in  their traje ctoryasif they did not collide .\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result, th ey  continuemoving\n  in  their traje ctoryasif they did not collide.\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n  const carRaceCol lisi on = (n) => {\n    const carRaceCol lisi on = (n) => {\n      const carRaceCol lisi on = (n) => {\n        const carRaceCol lisi on = (n) => {\n          const carRaceCol lisi on = (n) => {\n            const carRaceCol lisi on = (n) => {\n              const carRaceCol lisi on = (n) => {\n                const carRaceCol lisi on = (n) => {\n                  const carRaceCol lisi on = (n) => {\n                    const carRaceCol lisi on = (n) => {\n                      const carRaceCol lisi on = (n) => {\n                        const carRaceCol lisi on = (n) => {\n                          const carRaceCol lisi on = (n) => {\n                            const carRaceCol lisi on = (n) => {\n                              const carRaceCol lisi on = (n) => {\n                                const carRaceCol lisi on = (n) => {\n                                  const carRaceCol lisi on = (n) => {\n                                    const carRaceCol lisi on = (n) => {\n                                      const carRaceCol lisi on = (n) => {\n                                        const carRaceCol lisi on = (n) => {\n                                          const carRaceCol lisi on = (n) => {\n                                            const carRaceCol lisi on = (n) => {\n                                              const carRaceCol lisi on = (n) => {\n                                                const carRaceCol lisi on = (n) => {\n                                                  const carRaceCol lisi on = (n) => {\n                                                    const carRaceCol lisi on = (n) => {\n                                                      const carRaceCol lisi on = (n) => {\n                                                        const carRaceCol lisi on = (n) => {\n                                                          const carRaceCol lisi on = (n) => {\n                                                           const carRaceCol lisi on = (n) => {\n                                                            const carRaceCol lisi on = (n) => {\n                                                            const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                                              const carRaceCol lisi on = (n) => {\n                                 ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (i) => i + 1;\n  return l.reduce((acc, i) => [...acc, incr(i)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const decr = (i) => i - 1;\n  return l.reduce((acc, i) => [...acc, decr(i)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let left = 0;\n    let right = textLength - 1;\n    while (left < half) {\n        if (text[left]!== text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n};\n\nexport default isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return n^2 modulo p (be aware ofnumerics).\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  9\n  >>> modp2(0, 101)\n  0\n  >>> modp2(3, 11)\n  1\n  >>> modp2(100, 101)\n  0\n  */\nconst modp2 = (n, p) => {\n  return (n * n + p) % p;\n};\n\n/*Return n^3 modulo p (be aware ofnumerics).\n  >>> modp3(3, 5)\n  12\n  >>> modp3(1101, 101)\n  12\n  >>> modp3(0, 101)\n  0\n  >>> modp3(3, 11)\n  1\n  >>> modp3(100, 101)\n  0\n  */\nconst modp3 = (n, p) => {\n  return (n * n * n + p) % p;\n};\n\n/*Return n^4 modulo p (be aware ofnumerics).\n  >>> modp4(3, 5)\n  15\n  >>> modp4(1101, 101)\n  15\n  >>> modp4(0, 101)\n  0\n  >>> modp4(3, 11)\n  1\n  >>> modp4(100, 101)\n  0\n  */\nconst modp4 = (n, p) => {\n  return (n * n * n * n + p) % p;\n};\n\n/*Return n^5 modulo p (be aware ofnumerics).\n  >>> modp5(3, 5)\n  20\n  >>> modp5(1101, 101)\n  20\n  >>> modp5(0, 101)\n  0\n  >>> modp5(3, 11)\n  1\n  >>> modp5(100, 101)\n  0\n  */\nconst modp5 = (n, p) => {\n  return (n * n * n * n * n + p) % p;\n};\n\n/*Return n^6 modulo p (be aware ofnumerics).\n  >>> modp6(3, 5)\n  30\n  >>> modp6(1101, 101)\n  30\n  >>> modp6(0, 101)\n  0\n  >>> modp6(3, 11)\n  1\n  >>> modp6(100, 101)\n  0\n  */\nconst modp6 = (n, p) => {\n  return (n * n * n * n * n * n + p) % p;\n};\n\n/*Return n^7 modulo p (be aware ofnumerics).\n  >>> modp7(3, 5)\n  42\n  >>> modp7(1101, 101)\n  42\n  >>> modp7(0, 101)\n  0\n  >>> modp7(3, 11)\n  1\n  >>> modp7(100, 101)\n  0\n  */\nconst modp7 = (n, p) => {\n  return (n * n * n * n * n * n * n + p) % p;\n};\n\n/*Return n^8 modulo p (be aware ofnumerics).\n  >>> modp8(3, 5)\n  60\n  >>> modp8(1101, 101)\n  60\n  >>> modp8(0, 101)\n  0\n  >>> modp8(3, 11)\n  1\n  >>> modp8(100, 101)\n  0\n  */\nconst modp8 = (n, p) => {\n  return (n * n * n * n * n * n * n * n + p) % p;\n};\n\n/*Return n^9 modulo p (be aware ofnumerics).\n  >>> modp9(3, 5)\n  90\n  >>> modp9(1101, 101)\n  90\n  >>> modp9(0, 101)\n  0\n  >>> modp9(3, 11)\n  1\n  >>> modp9(100, 101)\n  0\n  */\nconst modp9 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n + p) % p;\n};\n\n/*Return n^10 modulo p (be aware ofnumerics).\n  >>> modp10(3, 5)\n  120\n  >>> modp10(1101, 101)\n  120\n  >>> modp10(0, 101)\n  0\n  >>> modp10(3, 11)\n  1\n  >>> modp10(100, 101)\n  0\n  */\nconst modp10 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n + p) % p;\n};\n\n/*Return n^11 modulo p (be aware ofnumerics).\n  >>> modp11(3, 5)\n  210\n  >>> modp11(1101, 101)\n  210\n  >>> modp11(0, 101)\n  0\n  >>> modp11(3, 11)\n  1\n  >>> modp11(100, 101)\n  0\n  */\nconst modp11 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n + p) % p;\n};\n\n/*Return n^12 modulo p (be aware ofnumerics).\n  >>> modp12(3, 5)\n  240\n  >>> modp12(1101, 101)\n  240\n  >>> modp12(0, 101)\n  0\n  >>> modp12(3, 11)\n  1\n  >>> modp12(100, 101)\n  0\n  */\nconst modp12 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n * n + p", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([1, 2, 3],'')\n  [1 2 3]\n  >>> intersperse([", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsencoded string.\n  */\nconst encode = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst decode = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst encode_shift = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst decode_shift = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) + 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst decode_shift_reverse = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) + 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst encode_reverse = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) + 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst decode_reverse = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) + 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst encode_reverse_shift = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) + 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst decode_reverse_shift = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) + 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst encode_reverse_shift_reverse = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst decode_reverse_shift_reverse = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringdecoded with decode_shift function. Returnsdecoded string.\n  */\nconst encode_shift_reverse_reverse = (s) => {\n  return s.split (\"\").m ap(ch => String.fromCharCode(\n    ((c h.charCodeAt (0 ) - 5 - \"a\".charCodeAt(0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const newText = text.toLowerCase()\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(vowels[i], '')\n  }\n  return newText\n}\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aBAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '*', '\\'', '\"', '%', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+', '=', '&', '^', '~', '{', '}', '[', ']', '|', '\\\\', '/', '<', '>', '`', '^', '$', '@', '#', '+", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold2 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold4 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold6 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold8 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold9 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold10 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold11 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold12 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold13 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold14 = (l, min, max) => {\n  return l.every(n => n >= min && n <= max);\n};\n\n/*Return true if all numbers in the list l are between min and max.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst negate = (x) => {\n  return -x;\n};\n\n/*\n  >>> negate(2)\n  -2\n  >>> negate(5)\n  -5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(-2)\n  2\n  >>> abs(5)\n  5\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  1.414213562373095\n  >>> sqrt(5)\n  2.23606797749978\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  1229\n  */\nconst gcd = (x, y) => {\n  return gcd(y, x % y);\n};\n\n/*\n  >>> gcd(2, 3)\n  1\n  >>> gcd(5, 7)\n  1\n  */\nconst lcm = (x, y) => {\n  return x * y / gcd(x, y);\n};\n\n/*\n  >>> lcm(2, 3)\n  6\n  >>> lcm(5, 7)\n  35\n  */\nconst factorial = (x) => {\n  return x <= 1? 1 : x * factorial(x - 1);\n};\n\n/*\n  >>> factorial(2)\n  2\n  >>> factorial(5)\n  120\n  */\nconst factorial2 = (x) => {\n  return x <= 1? 1 : x * factorial2(x - 1);\n};\n\n/*\n  >>> factorial2(2)\n  2\n  >>> factorial2(5)\n  120\n  */\nconst factorial3 = (x) => {\n  return x <= 1? 1 : x * factorial3(x - 1);\n};\n\n/*\n  >>> factorial3(2)\n  2\n  >>> factorial3(5)\n  120\n  */\nconst factorial4 = (x) => {\n  return x <= 1? 1 : x * factorial4(x - 1);\n};\n\n/*\n  >>> factorial4(2)\n  2\n  >>> factorial4(5)\n  120\n  */\nconst factorial5 = (x) => {\n  return x <= 1? 1 : x * factorial5(x - 1);\n};\n\n/*\n  >>> factorial5(2)\n  2\n  >>> factorial5(5)\n  120\n  */\nconst factorial6 = (x) => {\n  return x <= 1? 1 : x * factorial6(x - 1);\n};\n\n/*\n  >>> factorial6(2)\n  2\n  >>> factorial6(5)\n  120\n  */\nconst factorial7 = (x) => {\n  return x <= 1? 1 : x * factorial7(x - 1);\n};\n\n/*\n  >>> factorial7(2)\n  2\n  >>> factorial7(5)\n  120\n  */\nconst factorial8 = (x) => {\n  return x <= 1? 1 : x * factorial8(x - 1);\n};\n\n/*\n  >>> factorial8(2)\n  2\n  >>> factorial8(5)\n  120\n  */\nconst factorial9 = (x) => {\n  return x <= 1? 1 : x * factorial9(x - 1);\n};\n\n/*\n  >>> factorial9(2)\n  2\n  >>> factorial9(5)\n  120\n  */\nconst factorial10 = (x) => {\n  return x <= 1? 1 : x * factorial10(x - 1);\n};\n\n/*\n  >>> factorial10(2)\n  2\n  >>> factorial10(5)\n  120\n  */\nconst factorial11 = (x) => {\n  return x <= 1? 1 : x * factorial11(x - 1);\n};\n\n/*\n  >>> factorial11(2)\n  2\n  >>> factorial11(5)\n  120\n  */\nconst factorial12 = (x) => {\n  return x <= 1? 1 : x * factorial12(x - 1);\n};\n\n/*\n  >>> factorial12(2)\n  2\n  >>> factorial12(5)\n  120\n  */\nconst factorial13 = (x) => {\n  return x <= 1? 1 : x * factorial13(x - 1);\n};\n\n/*\n  >>> factorial13(2)\n  2\n  >>> factorial13(5)\n  120\n  */\nconst factorial14 = (x) => {\n  return x <= 1? 1 : x * factorial14(x - 1);\n};\n\n/*\n  >>> factorial14(2)\n  2\n  >>> factorial14(5)\n  120\n  */\nconst factorial15 = (x) => {\n  return x <= 1? 1 : x * factorial15(x - 1);\n};\n\n/*\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    let c = brackets[i];\n    if (c === '<') {\n      stack.push(c);\n    } else if (c === '>') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return a string of the brackets in the correct order.\n  For example, given \"<<><>>\", return \"<<><>>\".\n  Given \"><<\", return \"><<\".\n  Given \"><\", return \"><\".\n  Given \"><>\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given \"><\", return \"><\".\n  Given", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let x = l[i]\n  let y = l[j]\n  while (i < j) {\n    if (x < y) {\n      i++\n      x = l[i]\n    } else if (x > y) {\n      j--\n      y = l[j]\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true iff the list is sorted.\n  >>> sorted([1, 2, 3])\n  true\n  >>> sorted([1, 3, 2])\n  false\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  >>> sorted([1, 2, 3, 4, 5, 6])\n  false\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  */\nconst sorted = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/* Return true iff the list is sorted in increasing order.\n  >>> increasing([1, 2, 3])\n  true\n  >>> increasing([1, 3, 2])\n  false\n  >>> increasing([1, 2, 3, 4, 5])\n  true\n  >>> increasing([1, 2, 3, 4, 5, 6])\n  false\n  >>> increasing([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  >>> increasing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  */\nconst increasing = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/* Return true iff the list is sorted in decreasing order.\n  >>> decreasing([1, 2, 3])\n  false\n  >>> decreasing([1, 3, 2])\n  true\n  >>> decreasing([1, 2, 3, 4, 5])\n  false\n  >>> decreasing([1, 2, 3, 4, 5, 6])\n  true\n  >>> decreasing([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> decreasing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  true\n  */\nconst decreasing = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/* Return true iff the list is sorted in ascending order.\n  >>> ascending([1, 2, 3])\n  false\n  >>> ascending([1, 3, 2])\n  true\n  >>> ascending([1, 2, 3, 4, 5])\n  false\n  >>> ascending([1, 2, 3, 4, 5, 6])\n  true\n  >>> ascending([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> ascending([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  true\n  */\nconst ascending = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/* Return true iff the list is sorted in descending order.\n  >>> descending([1, 2, 3])\n  true\n  >>> descending([1, 3, 2])\n  false\n  >>> descending([1, 2, 3, 4, 5])\n  true\n  >>> descending([1, 2, 3, 4, 5, 6])\n  false\n  >>> descending([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  >>> descending([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  */\nconst descending = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/* Return true iff the list is sorted in ascending order.\n  >>> ascending([1, 2, 3])\n  false\n  >>> ascending([1, 3, 2])\n  true\n  >>> ascending([1, 2, 3, 4, 5])\n  false\n  >>> ascending([1, 2, 3, 4, 5, 6])\n  true\n  >>> ascending([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> ascending([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  true\n  */\nconst ascending = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/* Return true iff the list is sorted in descending order.\n  >>> descending([1, 2, 3])\n  true\n  >>> descending([1, 3, 2])\n  false\n  >>> descending([1, 2, 3, 4, 5])\n  true\n  >>> descending([1, 2, 3, 4, 5, 6])\n  false\n  >>> descending", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two list s .\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.values());\n  const union = new Set(l1_set.values());\n  union.addAll(l2_set.values());\n  return intersection.values();\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n >1  and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n >1  and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n >1  and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n >1  and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n >1  and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n >1  and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let level = 0;\n  let max_level = 0;\n  let current_level = 0;\n  let current_level_depth = 0;\n  let current_level_depth_max = 0;\n  let current_level_depth_max_index = 0;\n  let current_level_depth_max_index_max = 0;\n  let current_level_depth_max_index_max_index = 0;\n  let current_level_depth_max_index_max_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_level_depth_max_index_max_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 ton .\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is a function that sums numbers from 1 ton.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket .\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  let bracketsLength = brackets.length\n  let bracketsIndex = 0\n  let bracketsIndex2 = 0\n  let bracketsIndex3 = 0\n  let bracketsIndex4 = 0\n  let bracketsIndex5 = 0\n  let bracketsIndex6 = 0\n  let bracketsIndex7 = 0\n  let bracketsIndex8 = 0\n  let bracketsIndex9 = 0\n  let bracketsIndex10 = 0\n  let bracketsIndex11 = 0\n  let bracketsIndex12 = 0\n  let bracketsIndex13 = 0\n  let bracketsIndex14 = 0\n  let bracketsIndex15 = 0\n  let bracketsIndex16 = 0\n  let bracketsIndex17 = 0\n  let bracketsIndex18 = 0\n  let bracketsIndex19 = 0\n  let bracketsIndex20 = 0\n  let bracketsIndex21 = 0\n  let bracketsIndex22 = 0\n  let bracketsIndex23 = 0\n  let bracketsIndex24 = 0\n  let bracketsIndex25 = 0\n  let bracketsIndex26 = 0\n  let bracketsIndex27 = 0\n  let bracketsIndex28 = 0\n  let bracketsIndex29 = 0\n  let bracketsIndex30 = 0\n  let bracketsIndex31 = 0\n  let bracketsIndex32 = 0\n  let bracketsIndex33 = 0\n  let bracketsIndex34 = 0\n  let bracketsIndex35 = 0\n  let bracketsIndex36 = 0\n  let bracketsIndex37 = 0\n  let bracketsIndex38 = 0\n  let bracketsIndex39 = 0\n  let bracketsIndex40 = 0\n  let bracketsIndex41 = 0\n  let bracketsIndex42 = 0\n  let bracketsIndex43 = 0\n  let bracketsIndex44 = 0\n  let bracketsIndex45 = 0\n  let bracketsIndex46 = 0\n  let bracketsIndex47 = 0\n  let bracketsIndex48 = 0\n  let bracketsIndex49 = 0\n  let bracketsIndex50 = 0\n  let bracketsIndex51 = 0\n  let bracketsIndex52 = 0\n  let bracketsIndex53 = 0\n  let bracketsIndex54 = 0\n  let bracketsIndex55 = 0\n  let bracketsIndex56 = 0\n  let bracketsIndex57 = 0\n  let bracketsIndex58 = 0\n  let bracketsIndex59 = 0\n  let bracketsIndex60 = 0\n  let bracketsIndex61 = 0\n  let bracketsIndex62 = 0\n  let bracketsIndex63 = 0\n  let bracketsIndex64 = 0\n  let bracketsIndex65 = 0\n  let bracketsIndex66 = 0\n  let bracketsIndex67 = 0\n  let bracketsIndex68 = 0\n  let bracketsIndex69 = 0\n  let bracketsIndex70 = 0\n  let bracketsIndex71 = 0\n  let bracketsIndex72 = 0\n  let bracketsIndex73 = 0\n  let bracketsIndex74 = 0\n  let bracketsIndex75 = 0\n  let bracketsIndex76 = 0\n  let bracketsIndex77 = 0\n  let bracketsIndex78 = 0\n  let bracketsIndex79 = 0\n  let bracketsIndex80 = 0\n  let bracketsIndex81 = 0\n  let bracketsIndex82 = 0\n  let bracketsIndex83 = 0\n  let bracketsIndex84 = 0\n  let bracketsIndex85 = 0\n  let bracketsIndex86 = 0\n  let bracketsIndex87 = 0\n  let bracketsIndex88 = 0\n  let bracketsIndex89 = 0\n  let bracketsIndex90 = 0\n  let bracketsIndex91 = 0\n  let bracketsIndex92 = 0\n  let bracketsIndex93 = 0\n  let bracketsIndex94 = 0\n  let bracketsIndex95 = 0\n  let bracketsIndex96 = 0\n  let bracketsIndex97 = 0\n  let bracketsIndex98 = 0\n  let bracketsIndex99 = 0\n  let bracketsIndex100 = 0\n  let bracketsIndex101 = 0\n  let bracketsIndex102 = 0\n  let bracketsIndex103 = 0\n  let bracketsIndex104 = 0\n  let bracketsIndex105 = 0\n  let bracketsIndex106 = 0\n  let bracketsIndex107 = 0\n  let bracketsIndex108 = 0\n  let bracketsIndex109 = 0\n  let bracketsIndex110 = 0\n  let bracketsIndex111 = 0\n  let bracketsIndex112 = 0\n  let bracketsIndex113 = 0\n  let bracketsIndex114 = 0\n  let bracketsIndex115 = 0\n  let bracketsIndex116 = 0\n  let bracketsIndex117 = 0\n  let bracketsIndex118 = 0\n  let bracketsIndex119 = 0\n  let bracketsIndex120 = 0\n  let bracketsIndex121 = 0\n  let bracketsIndex122 = 0\n  let bracketsIndex123 = 0\n  let bracketsIndex124 = 0\n  let bracketsIndex125 = 0\n  let bracketsIndex126 = 0\n  let bracketsIndex127 = 0\n  let bracketsIndex128 = 0\n  let bracketsIndex129 = 0\n  let bracketsIndex130 = 0\n  let bracketsIndex131 = 0\n  let bracketsIndex132 = 0\n  let bracketsIndex133 = 0\n  let bracketsIndex134 = 0\n  let bracketsIndex135 = 0\n  let bracketsIndex136 = 0\n  let bracketsIndex137 = 0\n  let bracketsIndex138 = 0\n  let bracketsIndex139 = 0\n  let bracketsIndex140 = 0\n  let bracketsIndex141 = 0\n  let bracketsIndex142 = 0\n  let bracketsIndex143 = 0\n  let bracketsIndex144 = 0\n  let bracketsIndex145 = 0\n  let bracketsIndex146 = 0\n  let bracketsIndex147 = 0\n  let bracketsIndex148 = 0\n  let bracketsIndex149 = 0\n  let bracketsIndex150 = 0\n  let bracketsIndex151 = 0\n  let bracketsIndex152 = 0\n  let bracketsIndex153 = 0\n  let bracketsIndex154 = 0\n  let bracketsIndex155 = 0\n  let bracketsIndex156 = 0\n  let bracketsIndex157 = 0\n  let bracketsIndex158 = 0\n  let bracketsIndex159 = 0\n  let bracketsIndex160 = 0\n  let bracketsIndex161 = 0\n  let bracketsIndex162 = 0\n  let bracketsIndex163 = 0\n  let bracketsIndex164 = 0\n  let bracketsIndex165 = 0\n  let bracketsIndex166 = 0\n  let bracketsIndex167 = 0\n  let bracketsIndex168 = 0\n  let bracketsIndex169 = 0\n  let bracketsIndex170 = 0\n  let bracketsIndex171 = 0\n  let bracketsIndex172 = 0\n  let bracketsIndex173 = 0\n  let bracketsIndex174 = 0\n  let bracketsIndex175 = 0\n  let bracketsIndex176 = 0\n  let bracketsIndex177 = 0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 + .. ..\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 +....\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^ 2 +....\n  Return the derivative of p(x) in the same form.\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5])\n  [2, 6, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [2, 6, 12, 20, 30]\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^ 2 +....\n  Return the derivative of p(x) in the same form.\n  >>> derivative([1, 2, 3, 4, 5])\n  [2, 6, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [2, 6, 12, 20, 30]\n  */\nconst derivative3 = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^ 2 +....\n  Return the derivative of p(x) in the same form.\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [2, 6, 12, 20, 30]\n  */\nconst derivative4 = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^ 2 +....\n  Return the derivative of p(x) in the same form.\n  >>> derivative([1, 2, 3, 4, 5, 6, 7])\n  [2, 6, 12, 20, 30, 42, 56]\n  */\nconst derivative5 = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^ 2 +....\n  Return the derivative of p(x) in the same form.\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 6, 12, 20, 30, 42, 56, 72]\n  */\nconst derivative6 = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^ 2 +....\n  Return the derivative of p(x) in the same form.\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90]\n  */\nconst derivative7 = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^ 2 +....\n  Return the derivative of p(x) in the same form.\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 6, 12, 20, 30, 42, 56, 72, 90, 108]\n  */\nconst derivative8 = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i]\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\n/*Write a function that takes a string as input and returns the number of\n  characters in the string that are not vowels.\n  Vowels in this case are 'a', 'e', 'i ', 'o', 'u' and 'y'.\n  Example:\n  >>> notVowelsCount(\"abcde\")\n  5\n  >>> notVowelsCount(\"ACEDY\")\n  6\n  */\nconst notVowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes a string as input and returns the number of\n  characters in the string that are not vowels.\n  Vowels in this case are 'a', 'e', 'i ', 'o', 'u' and 'y'.\n  Example:\n  >>> notVowelsCount(\"abcde\")\n  5\n  >>> notVowelsCount(\"ACEDY\")\n  6\n  */\nconst notVowelsCount2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes a string as input and returns the number of\n  characters in the string that are not vowels.\n  Vowels in this case are 'a', 'e', 'i ', 'o', 'u' and 'y'.\n  Example:\n  >>> notVowelsCount(\"abcde\")\n  5\n  >>> notVowelsCount(\"ACEDY\")\n  6\n  */\nconst notVowelsCount3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes a string as input and returns the number of\n  characters in the string that are not vowels.\n  Vowels in this case are 'a', 'e', 'i ', 'o', 'u' and 'y'.\n  Example:\n  >>> notVowelsCount(\"abcde\")\n  5\n  >>> notVowelsCount(\"ACEDY\")\n  6\n  */\nconst notVowelsCount4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes a string as input and returns the number of\n  characters in the string that are not vowels.\n  Vowels in this case are 'a', 'e', 'i ', 'o', 'u' and 'y'.\n  Example:\n  >>> notVowelsCount(\"abcde\")\n  5\n  >>> notVowelsCount(\"ACEDY\")\n  6\n  */\nconst notVowelsCount5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes a string as input and returns the number of\n  characters in the string that are not vowels.\n  Vowels in this case are 'a', 'e', 'i ', 'o', 'u' and 'y'.\n  Example:\n  >>> notVowelsCount(\"abcde\")\n  5\n  >>> notVowelsCount(\"ACEDY\")\n  6\n  */\nconst notVowelsCount6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      count++;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.charAt(0) + res.slice(1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverse = (x) => {\n  let res = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.charAt(0) + res.slice(1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> circularShift2(12, 1)\n  \"21\"\n  >>> circularShift2(12, 2)\n  \"12\"\n  */\nconst reverse2 = (x) => {\n  let res = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n};\n\n/*\n  >>> circularShift2(12, 1)\n  \"21\"\n  >>> circularShift2(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse2(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.charAt(0) + res.slice(1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> circularShift3(12, 1)\n  \"21\"\n  >>> circularShift3(12, 2)\n  \"12\"\n  */\nconst reverse3 = (x) => {\n  let res = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n};\n\n/*\n  >>> circularShift3(12, 1)\n  \"21\"\n  >>> circularShift3(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse3(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.charAt(0) + res.slice(1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> circularShift4(12, 1)\n  \"21\"\n  >>> circularShift4(12, 2)\n  \"12\"\n  */\nconst reverse4 = (x) => {\n  let res = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n};\n\n/*\n  >>> circularShift4(12, 1)\n  \"21\"\n  >>> circularShift4(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse4(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.charAt(0) + res.slice(1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> circularShift5(12, 1)\n  \"21\"\n  >>> circularShift5(12, 2)\n  \"12\"\n  */\nconst reverse5 = (x) => {\n  let res = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n};\n\n/*\n  >>> circularShift5(12, 1)\n  \"21\"\n  >>> circularShift5(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse5(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.charAt(0) + res.slice(1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> circularShift6(12, 1)\n  \"21\"\n  >>> circularShift6(12, 2)\n  \"12\"\n  */\nconst reverse6 = (x) => {\n  let res = \"\";\n  for (let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n};\n\n/*\n  >>> circularShift6(12, 1)\n  \"21\"\n  >>> circularShift6(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let res = x;\n  if (shift > x.length) {\n    res = reverse6(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.charAt(0) + res.slice(1);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> circularShift7(12,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \")\n  const nApples = arr[0]\n  const nOranges = arr[1]\n  const nFruits = arr[2]\n  const totalApples = parseInt(nApples)\n  const totalOranges = parseInt(nOranges)\n  const totalFruits = parseInt(nFruits)\n  const total = totalApples + totalOranges + totalFruits\n  return total\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 orange\", 3))\nconsole.log(fruitDistribution(\"2 apples  and 3 oranges\", 100))\nconsole.log(fruitDistribution(\"100 apples and  1 oranges\", 120))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty , re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty, re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  let i = 1;\n  while (i < arr.length) {\n    if (arr[i] % 2 === 0) {\n      if (min > arr[i]) {\n        min = arr[i];\n        index = i;\n      }\n    }\n    i++;\n  }\n  return [min, index];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search2 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search3 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search4 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search5 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search6 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search7 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search8 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search9 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search10 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search11 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search12 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search13 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search14 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search15 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search16 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search17 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search18 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst search19 = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const sorted2 = lst.slice().sort((a, b) => b - a);\n  const sorted3 = lst.slice().sort((a, b) => a - b);\n  const sorted4 = lst.slice().sort((a, b) => b - a);\n  return sorted.concat(sorted2, sorted3, sorted4);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s === a || s === b || s === c) {\n    return Math.round(s * 0.5)\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.round(Math.sqrt(a * b * c) * 0.5)\n}\n\n/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s === a || s === b || s === c) {\n    return Math.round(s * 0.5)\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.round(Math.sqrt(a * b * c) * 0.5)\n}\n\n/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s === a || s === b || s === c) {\n    return Math.round(s * 0.5)\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.round(Math.sqrt(a * b * c) * 0.5)\n}\n\n/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s === a || s === b || s === c) {\n    return Math.round(s * 0.5)\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.round(Math.sqrt(a * b * c) * 0.5)\n}\n\n/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s === a || s === b || s === c) {\n    return Math.round(s * 0.5)\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.round(Math.sqrt(a * b * c) * 0.5)\n}\n\n/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s === a || s === b || s === c) {\n    return Math.round(s * 0.5)\n  }\n  if (a + b > c) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it 's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly2 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly3 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly4 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly5 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly6 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly7 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly8 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly9 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly10 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly11 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly12 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly13 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly14 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly15 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly16 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly17 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly18 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly19 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly20 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly21 = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && sum % 2 === 0\n}\n\nconst willItFly22 = (q, w)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic . A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let count = 0;\n  let min = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[arr.length - i - 1]) {\n      count++;\n      if (count > min) {\n        min = count;\n      }\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    const elem1 = lst1[i]\n    const elem2 = lst2[i]\n    if (elem1.length!== elem2.length) {\n      return lst1\n    }\n    result.push(elem1)\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns the list of the numbers that are divisible by 3.\n  Examples\n  divisibleBy3([1, 2, 3, 4, 5]) ➞ [3, 6]\n  divisibleBy3([1, 2, 3, 4, 5, 6]) ➞ [3, 6]\n  divisibleBy3([1, 2, 3, 4, 5, 6, 7]) ➞ [3, 6]\n  divisibleBy3([1, 2, 3, 4, 5, 6, 7, 8]) ➞ [3, 6]\n  divisibleBy3([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [3, 6]\n  */\nconst divisibleBy3 = (nums) => {\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      result.push(nums[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns the list of the numbers that are divisible by 5.\n  Examples\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ [5, 10]\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ [5, 10]\n  */\nconst divisibleBy5 = (nums) => {\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      result.push(nums[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns the list of the numbers that are divisible by 7.\n  Examples\n  divisibleBy7([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [7, 14]\n  divisibleBy7([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [7, 14]\n  divisibleBy7([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ [7, 14]\n  divisibleBy7([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ [7, 14]\n  divisibleBy7([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ [7, 14]\n  divisibleBy7([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ [7, 14]\n  divisibleBy7([1, 2, 3,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const result = prime.filter((p) => {\n    return a % p === 0;\n  });\n  return result.length === 0;\n};\n\n/*Write a function that returns true if the given n u mber is the multiplication  of 3 prime numbers and falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime2 = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const result = prime.filter((p) => {\n    return a % p === 0;\n  });\n  return result.length === 0;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const result = prime.filter((p) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) return x === 1;\n  if (n === 2) return x === 2;\n  if (n === 3) return x === 3;\n  if (n === 4) return x === 4;\n  if (n === 5) return x === 5;\n  if (n === 6) return x === 6;\n  if (n === 7) return x === 7;\n  if (n === 8) return x === 8;\n  if (n === 9) return x === 9;\n  if (n === 10) return x === 10;\n  if (n === 11) return x === 11;\n  if (n === 12) return x === 12;\n  if (n === 13) return x === 13;\n  if (n === 14) return x === 14;\n  if (n === 15) return x === 15;\n  if (n === 16) return x === 16;\n  if (n === 17) return x === 17;\n  if (n === 18) return x === 18;\n  if (n === 19) return x === 19;\n  if (n === 20) return x === 20;\n  if (n === 21) return x === 21;\n  if (n === 22) return x === 22;\n  if (n === 23) return x === 23;\n  if (n === 24) return x === 24;\n  if (n === 25) return x === 25;\n  if (n === 26) return x === 26;\n  if (n === 27) return x === 27;\n  if (n === 28) return x === 28;\n  if (n === 29) return x === 29;\n  if (n === 30) return x === 30;\n  if (n === 31) return x === 31;\n  if (n === 32) return x === 32;\n  if (n === 33) return x === 33;\n  if (n === 34) return x === 34;\n  if (n === 35) return x === 35;\n  if (n === 36) return x === 36;\n  if (n === 37) return x === 37;\n  if (n === 38) return x === 38;\n  if (n === 39) return x === 39;\n  if (n === 40) return x === 40;\n  if (n === 41) return x === 41;\n  if (n === 42) return x === 42;\n  if (n === 43) return x === 43;\n  if (n === 44) return x === 44;\n  if (n === 45) return x === 45;\n  if (n === 46) return x === 46;\n  if (n === 47) return x === 47;\n  if (n === 48) return x === 48;\n  if (n === 49) return x === 49;\n  if (n === 50) return x === 50;\n  if (n === 51) return x === 51;\n  if (n === 52) return x === 52;\n  if (n === 53) return x === 53;\n  if (n === 54) return x === 54;\n  if (n === 55) return x === 55;\n  if (n === 56) return x === 56;\n  if (n === 57) return x === 57;\n  if (n === 58) return x === 58;\n  if (n === 59) return x === 59;\n  if (n === 60) return x === 60;\n  if (n === 61) return x === 61;\n  if (n === 62) return x === 62;\n  if (n === 63) return x === 63;\n  if (n === 64) return x === 64;\n  if (n === 65) return x === 65;\n  if (n === 66) return x === 66;\n  if (n === 67) return x === 67;\n  if (n === 68) return x === 68;\n  if (n === 69) return x === 69;\n  if (n === 70) return x === 70;\n  if (n === 71) return x === 71;\n  if (n === 72) return x === 72;\n  if (n === 73) return x === 73;\n  if (n === 74) return x === 74;\n  if (n === 75) return x === 75;\n  if (n === 76) return x === 76;\n  if (n === 77) return x === 77;\n  if (n === 78) return x === 78;\n  if (n === 79) return x === 79;\n  if (n === 80) return x === 80;\n  if (n === 81) return x === 81;\n  if (n === 82) return x === 82;\n  if (n === 83) return x === 83;\n  if (n === 84) return x === 84;\n  if (n === 85) return x === 85;\n  if (n === 86) return x === 86;\n  if (n === 87) return x === 87;\n  if (n === 88) return x === 88;\n  if (n === 89) return x === 89;\n  if (n === 90) return x === 90;\n  if (n === 91) return x === 91;\n  if (n === 92) return x === 92;\n  if (n === 93) return x === 93;\n  if (n === 94) return x === 94;\n  if (n === 95) return x === 95;\n  if (n === 96) return x === 96;\n  if (n === 97) return x === 97;\n  if (n === 98) return x === 98;\n  if (n === 99) return x === 99;\n  if (n === 100) return x === 100;\n  if (n === 101) return x === 101;\n  if (n === 102) return x === 102;\n  if (n === 103) return x === 103;\n  if (n === 104) return x === 104;\n  if (n === 105) return x === 105;\n  if (n === 106) return x === 106;\n  if (n === 107) return x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 2 === 0) return iscube(a / 2);\n  return iscube(a - (a / 2));\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er . Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.toString().length; i++) {\n    let char = decimal.toString()[i]\n    binary += (char === '0')? '1' : '0'\n  }\n  return 'db' + binary + 'db'\n}\n\n/*\n  You will be given a number in binary form and yo u r task is to convert it to decimal.\n  The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    let char = binary[i]\n    if (char === '1') {\n      decimal += 1\n    } else {\n      decimal -= 1\n    }\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in binary form and yo u r task is to convert it to decimal.\n  The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    let char = binary[i]\n    if (char === '1') {\n      decimal += 1\n    } else {\n      decimal -= 1\n    }\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in decimal form and yo u r task is to convert it to binary.\n  The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.toString().length; i++) {\n    let char = decimal.toString()[i]\n    binary += (char === '1')? '1' : '0'\n  }\n  return 'db' + binary + 'db'\n}\n\n/*\n  You will be given a number in binary form and yo u r task is to convert it to decimal.\n  The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    let char = binary[i]\n    if (char === '1') {\n      decimal += 1\n    } else {\n      decimal -= 1\n    }\n  }\n  return decimal\n}\n\n/*\n  You will be given a number in decimal form and yo u r task is to convert it to binary.\n  The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.toString().length; i++) {\n    let char = decimal.toString()[i]\n    binary += (char === '1')? '1' : '0'\n  }\n  return 'db' + binary + 'db'\n}\n\n/*\n  You will be given a number in binary form and yo u r task is to convert it to decimal.\n  The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct2 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct3 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct4 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct5 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct6 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct7 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct8 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct9 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct10 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct11 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct12 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct13 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct14 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct15 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct16 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct17 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct18 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct19 = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct20 = (numbers, int) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let map = {};\n  let count = 0;\n  let len = s.length;\n  let i = 0;\n  while (i < len) {\n    let num = parseInt(s[i]);\n    if (map[num] === undefined) {\n      map[num] = 1;\n    } else {\n      map[num]++;\n    }\n    i++;\n  }\n  for (let key in map) {\n    if (map[key]!== 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3 .7               A\n         > 3 .3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3.7               A\n         > 3.3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.isArray(grades)? grades : [grades];\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayAverage = gradesArraySum / gradesArrayLength;\n  const gradesArrayPercentage = gradesArray.reduce((a, b) => a + b) / gradesArrayLength;\n  const gradesArrayPercentageAverage = gradesArrayPercentage / gradesArrayLength;\n  const gradesArrayPercentageAverageSum = gradesArrayPercentageAverage.reduce((a, b) => a + b);\n  const gradesArrayPercentageAverageAverage = gradesArrayPercentageAverageSum / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverage = gradesArrayPercentageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n  const gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayPercentageAverageAverageAverageAverageAverageAverageAverageAverageAverage / gradesArrayLength;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(string[i]) === -1) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returnst true if the string contains all the characters in the string\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('Hello', 'ell') == false\n  containsAll('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconsole.log(startsOneEnds(1))\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\nconsole.log(startsOneEnds(101))\nconsole.log(startsOneEnds(102))\nconsole.log(startsOneEnds(103))\nconsole.log(startsOneEnds(104))\nconsole.log(startsOneEnds(105))\nconsole.log(startsOneEnds(106))\nconsole.log(startsOneEnds(107))\nconsole.log(startsOneEnds(108))\nconsole.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2\n      add([1, 2, 3, 4, 5, 6, 7]) ==> 14\n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle2 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle3 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle4 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle5 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle6 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle7 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle8 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle9 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle10 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle11 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle12 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle13 = (s) => {\n  const words = s.split(' ')\n  const shuffled = words.map((word) => {\n    const shuffledWord = word.split('')\n    shuffledWord.sort((a, b) => {\n      return a - b\n    })\n    return shuffledWord.join('')\n  })\n  return shuffled.join(' ')\n}\n\nconst shuffle", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2) ...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [rows, cols] = lst.length\n  const [row, col] = x\n  const [row1, col1] = row\n  const [row2, col2] = col\n  const [row3, col3] = rows - row - 1\n  const [row4, col4] = cols - col - 1\n  const [row5, col5] = rows - row - 1\n  const [row6, col6] = cols - col - 1\n  const [row7, col7] = rows - row - 1\n  const [row8, col8] = cols - col - 1\n  const [row9, col9] = rows - row - 1\n  const [row10, col10] = cols - col - 1\n  const [row11, col11] = rows - row - 1\n  const [row12, col12] = cols - col - 1\n  const [row13, col13] = rows - row - 1\n  const [row14, col14] = cols - col - 1\n  const [row15, col15] = rows - row - 1\n  const [row16, col16] = cols - col - 1\n  const [row17, col17] = rows - row - 1\n  const [row18, col18] = cols - col - 1\n  const [row19, col19] = rows - row - 1\n  const [row20, col20] = cols - col - 1\n  const [row21, col21] = rows - row - 1\n  const [row22, col22] = cols - col - 1\n  const [row23, col23] = rows - row - 1\n  const [row24, col24] = cols - col - 1\n  const [row25, col25] = rows - row - 1\n  const [row26, col26] = cols - col - 1\n  const [row27, col27] = rows - row - 1\n  const [row28, col28] = cols - col - 1\n  const [row29, col29] = rows - row - 1\n  const [row30, col30] = cols - col - 1\n  const [row31, col31] = rows - row - 1\n  const [row32, col32] = cols - col - 1\n  const [row33, col33] = rows - row - 1\n  const [row34, col34] = cols - col - 1\n  const [row35, col35] = rows - row - 1\n  const [row36, col36] = cols - col - 1\n  const [row37, col37] = rows - row - 1\n  const [row38, col38] = cols - col - 1\n  const [row39, col39] = rows - row - 1\n  const [row40, col40] = cols - col - 1\n  const [row41, col41] = rows - row - 1\n  const [row42, col42] = cols - col - 1\n  const [row43, col43] = rows - row - 1\n  const [row44, col44] = cols - col - 1\n  const [row45, col45] = rows - row - 1\n  const [row46, col46] = cols - col - 1\n  const [row47, col47] = rows - row - 1\n  const [row48, col48] = cols - col - 1\n  const [row49, col49] = rows - row - 1\n  const [row50, col50] = cols - col - 1\n  const [row51, col51] = rows - row - 1\n  const [row52, col52] = cols - col - 1\n  const [row53, col53] = rows - row - 1\n  const [row54, col54] = cols - col - 1\n  const [row55, col55] = rows - row - 1\n  const [row56, col56] = cols - col - 1\n  const [row57, col57] = rows - row - 1\n  const [row58, col58] = cols - col - 1\n  const [row59, col59] = rows - row - 1\n  const [row60, col60] = cols - col - 1\n  const [row61, col61] = rows - row - 1\n  const [row62, col62] = cols - col - 1\n  const [row63, col63] = rows - row - 1\n  const [row64, col64] = cols - col - 1\n  const [row65, col65] = rows - row - 1\n  const [row66, col66] = cols - col - 1\n  const [row67, col67] = rows - row - 1\n  const [row68, col68] = cols - col - 1\n  const [row69, col69] = rows - row - 1\n  const [row70, col70] = cols - col - 1\n  const [row71, col71] = rows - row - 1\n  const [row72, col72] = cols - col - 1\n  const [row73, col73] = rows - row - 1\n  const [row74, col74] = cols - col - 1\n  const [row", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd , \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n .\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let temp = 0\n  let sum = 0\n  while (i < len) {\n    sum = 0\n    while (j < len) {\n      sum += array[j]\n      j++\n    }\n    if (sum % 2 === 1) {\n      sorted.push(array[i])\n      i++\n    } else {\n      sorted.push(array[len - 1 - i])\n      i++\n    }\n  }\n  return sorted\n}\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 2]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const shift = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const encrypt = (s) => {\n    let r = s;\n    for (let i = 0; i < s.length; i++) {\n      r = r.split('').reverse().join('');\n      r = rotate(r, alphabet.length);\n      r = shift(r, alphabet.length);\n    }\n    return r;\n  };\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const shift = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const decrypt = (s) => {\n    let r = s;\n    for (let i = 0; i < s.length; i++) {\n      r = r.split('').reverse().join('');\n      r = rotate(r, alphabet.length);\n      r = shift(r, alphabet.length);\n    }\n    return r;\n  };\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const shift = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const encrypt = (s) => {\n    let r = s;\n    for (let i = 0; i < s.length; i++) {\n      r = r.split('').reverse().join('');\n      r = rotate(r, alphabet.length);\n      r = shift(r, alphabet.length);\n    }\n    return r;\n  };\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const shift = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const decrypt = (s) => {\n    let r = s;\n    for (let i = 0; i < s.length; i++) {\n      r = r.split('').reverse().join('');\n      r = rotate(r, alphabet.length);\n      r = shift(r, alphabet.length);\n    }\n    return r;\n  };\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const shift = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const encrypt = (s) => {\n    let r = s;\n    for (let i = 0; i < s.length; i++) {\n      r = r.split('').reverse().join('');\n      r = rotate(r, alphabet.length);\n      r = shift(r, alphabet.length);\n    }\n    return r;\n  };\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const shift = (s, m) => {\n    let r = s;\n    for (let i = 0; i < m; i++) {\n      r = r.split('').reverse().join('');\n    }\n    return r;\n  };\n  const decrypt", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconst nextSmallest2 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 2]\n}\n\nconst nextSmallest3 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 3]\n}\n\nconst nextSmallest4 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 4]\n}\n\nconst nextSmallest5 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 5]\n}\n\nconst nextSmallest6 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 6]\n}\n\nconst nextSmallest7 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 7]\n}\n\nconst nextSmallest8 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 8]\n}\n\nconst nextSmallest9 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 9]\n}\n\nconst nextSmallest10 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 10]\n}\n\nconst nextSmallest11 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 11]\n}\n\nconst nextSmallest12 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 12]\n}\n\nconst nextSmallest13 = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 13]\n}\n\nconst nextSmallest14 = (lst) => {\n  if (lst.length === 0) return null\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored2 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored3 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored4 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored5 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored6 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored7 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored8 = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word.startsWith('I')) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x === z) || (y === z);\n};\n\nconst anyInt2 = (x, y) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y);\n};\n\nconst anyInt3 = (x, y, z) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y);\n};\n\nconst anyInt4 = (x, y, z, w) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y);\n};\n\nconst anyInt5 = (x, y, z, w, u) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y);\n};\n\nconst anyInt6 = (x, y, z, w, u, v) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y);\n};\n\nconst anyInt7 = (x, y, z, w, u, v, t) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y);\n};\n\nconst anyInt8 = (x, y, z, w, u, v, t, s) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y) || (s === x + y);\n};\n\nconst anyInt9 = (x, y, z, w, u, v, t, s, o) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y) || (s === x + y) || (o === x + y);\n};\n\nconst anyInt10 = (x, y, z, w, u, v, t, s, o, p) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y) || (s === x + y) || (o === x + y) || (p === x + y);\n};\n\nconst anyInt11 = (x, y, z, w, u, v, t, s, o, p, q) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y) || (s === x + y) || (o === x + y) || (p === x + y) || (q === x + y);\n};\n\nconst anyInt12 = (x, y, z, w, u, v, t, s, o, p, q, r) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y) || (s === x + y) || (o === x + y) || (p === x + y) || (q === x + y) || (r === x + y);\n};\n\nconst anyInt13 = (x, y, z, w, u, v, t, s, o, p, q, r, tt) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y) || (s === x + y) || (o === x + y) || (p === x + y) || (q === x + y) || (r === x + y) || (tt === x + y);\n};\n\nconst anyInt14 = (x, y, z, w, u, v, t, s, o, p, q, r, tt, ss) => {\n  return (x + y === x + y) || (x === x + y) || (y === x + y) || (z === x + y) || (w === x + y) || (u === x + y) || (v === x + y) || (t === x + y) || (s === x + y) || (o === x + y) || (p === x + y) || (q === x + y) || (r === x + y) || (tt === x + y) || (ss === x + y);\n};\n\nconst anyInt15 = (x, y, z, w, u, v, t, s, o, p, q", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter.toUpperCase();\n    } else {\n      encoded += letter.toLowerCase();\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter.toLowerCase()) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  return decoded;\n};\n\nconst encodeMessage = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage2 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage2 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage3 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage3 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage4 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage4 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage5 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage5 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage6 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage6 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage7 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage7 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage8 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage8 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage9 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage9 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage10 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage10 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage11 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage11 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage12 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage12 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage13 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage13 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage14 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage14 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage15 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage15 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage16 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage16 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage17 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage17 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage18 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage18 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage19 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage19 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage20 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage20 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage21 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage21 = (message) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let d = n.toString().length;\n    if (n > max) {\n      max = n;\n    }\n  }\n  return max;\n};\n\nconst main = () => {\n  let lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3];\n  console.log(skjkasdkd(lst));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false .\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllKeysStrings = keys.every(key => typeof key ==='string')\n  const isAllKeysLowerCase = keys.every(key => key.toLowerCase() === key)\n  return isAllKeysStrings && isAllKeysLowerCase\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllKeysStrings = keys.every(key => typeof key ==='string')\n  const isAllKeysUpperCase = keys.every(key => key.toUpperCase() === key)\n  return isAllKeysStrings && isAllKeysUpperCase\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllKeysStrings = keys.every(key => typeof key ==='string')\n  const isAllKeysUpperCase = keys.every(key => key.toUpperCase() === key)\n  return isAllKeysStrings && isAllKeysUpperCase\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllKeysStrings = keys.every(key => typeof key ==='string')\n  const isAllKeysLowerCase = keys.every(key => key.toLowerCase() === key)\n  return isAllKeysStrings && isAllKeysLowerCase\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllKeysStrings = keys.every(key => typeof key ==='string')\n  const isAllKeysUpperCase = keys.every(key => key.toUpperCase() === key)\n  return isAllKeysStrings && isAllKeysUpperCase\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply2 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply3 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply4 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply5 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply6 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply7 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply8 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply9 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply10 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply11 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply12 = (a, b) => {\n  let a_digits = a.toString().split('').reverse().join('');\n  let b_digits = b.toString().split('').reverse().join('');\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    product += parseInt(a_digits[i] * b_digits[i]);\n  }\n  return product;\n};\n\nconst multiply13 = (a, b)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercasev owels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 2\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 2\n  */\nconst countVowels2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 2\n  */\nconst countVowels3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 3\n  countCons", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = num;\n  let diff = Math.abs(num);\n  let diffs = [];\n  for (let i = 1; i < 10; i++) {\n    diffs.push(Math.abs(num - i));\n  }\n  diffs.sort((a, b) => a - b);\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i] < diff) {\n      closest = i + 1;\n      diff = diffs[i];\n    }\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
