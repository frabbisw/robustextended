{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('')\n  const paren_stack = []\n  let paren_index = 0\n  let paren_stack_index = 0\n  let paren_stack_length = 0\n  let paren_stack_length_max = 0\n  let paren_stack_length_min = 0\n  let paren_stack_length_sum = 0\n  let paren_stack_length_avg = 0\n  let paren_stack_length_max_index = 0\n  let paren_stack_length_min_index = 0\n  let paren_stack_length_sum_index = 0\n  let paren_stack_length_avg_index = 0\n  let paren_stack_length_max_index_2 = 0\n  let paren_stack_length_min_index_2 = 0\n  let paren_stack_length_sum_index_2 = 0\n  let paren_stack_length_avg_index_2 = 0\n  let paren_stack_length_max_index_3 = 0\n  let paren_stack_length_min_index_3 = 0\n  let paren_stack_length_sum_index_3 = 0\n  let paren_stack_length_avg_index_3 = 0\n  let paren_stack_length_max_index_4 = 0\n  let paren_stack_length_min_index_4 = 0\n  let paren_stack_length_sum_index_4 = 0\n  let paren_stack_length_avg_index_4 = 0\n  let paren_stack_length_max_index_5 = 0\n  let paren_stack_length_min_index_5 = 0\n  let paren_stack_length_sum_index_5 = 0\n  let paren_stack_length_avg_index_5 = 0\n  let paren_stack_length_max_index_6 = 0\n  let paren_stack_length_min_index_6 = 0\n  let paren_stack_length_sum_index_6 = 0\n  let paren_stack_length_avg_index_6 = 0\n  let paren_stack_length_max_index_7 = 0\n  let paren_stack_length_min_index_7 = 0\n  let paren_stack_length_sum_index_7 = 0\n  let paren_stack_length_avg_index_7 = 0\n  let paren_stack_length_max_index_8 = 0\n  let paren_stack_length_min_index_8 = 0\n  let paren_stack_length_sum_index_8 = 0\n  let paren_stack_length_avg_index_8 = 0\n  let paren_stack_length_max_index_9 = 0\n  let paren_stack_length_min_index_9 = 0\n  let paren_stack_length_sum_index_9 = 0\n  let paren_stack_length_avg_index_9 = 0\n  let paren_stack_length_max_index_10 = 0\n  let paren_stack_length_min_index_10 = 0\n  let paren_stack_length_sum_index_10 = 0\n  let paren_stack_length_avg_index_10 = 0\n  let paren_stack_length_max_index_11 = 0\n  let paren_stack_length_min_index_11 = 0\n  let paren_stack_length_sum_index_11 = 0\n  let paren_stack_length_avg_index_11 = 0\n  let paren_stack_length_max_index_12 = 0\n  let paren_stack_length_min_index_12 = 0\n  let paren_stack_length_sum_index_12 = 0\n  let paren_stack_length_avg_index_12 = 0\n  let paren_stack_length_max_index_13 = 0\n  let paren_stack_length_min_index_13 = 0\n  let paren_stack_length_sum_index_13 = 0\n  let paren_stack_length_avg_index_13 = 0\n  let paren_stack_length_max_index_14 = 0\n  let paren_stack_length_min_index_14 = 0\n  let paren_stack_length_sum_index_14 = 0\n  let paren_stack_length_avg_index_14 = 0\n  let paren_stack_length_max_index_15 = 0\n  let paren_stack_length_min_index_15 = 0\n  let paren_stack_length_sum_index_15 = 0\n  let paren_stack_length_avg_index_15 = 0\n  let paren_stack_length_max_index_16 = 0\n  let paren_stack_length_min_index_16 = 0\n  let paren_stack_length_sum_index_16 = 0\n  let paren_stack_length_avg_index_16 = 0\n  let paren_stack_length_max_index_17 = 0\n  let paren_stack_length_min_index_17 = 0\n  let paren_stack_length_sum_index_17 = 0\n  let paren_stack_length_avg_index_17 = 0\n  let paren_stack_length_max_index_18 = 0\n  let paren_stack_length_min_index_18 = 0\n  let paren_stack_length_sum_index_18 = 0\n  let paren_stack_length_avg_index_18 = 0\n  let paren_stack_length_max_index_19 = 0\n  let paren_stack_length_min_index_19 = 0\n  let paren_stack_length_sum_index_19 = 0\n  let paren_stack_length_avg_index_19 = 0\n  let", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string)", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let count = i;\n    if (i % 2 === 0) {\n      count = i + 1;\n    }\n    result.push(count);\n  }\n  return result;\n};\n\nconsole.log(makeAPile(3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num += 2;\n  }\n  return -1;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x < y) {\n    return", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 = n_m - 92;\n", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const map = new Map();\n  for (let i = 0; i < x.length; i++) {\n    const cur = x[i];\n    if (map.has(cur)) {\n      map.set(cur, map.get(cur) + 1);\n    } else {\n      map.set(cur, 1);\n    }\n  }\n  const result = [];\n  for (let [k, v] of map) {\n    if (v === 1) {\n      result.push(k);\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i] - 1]);\n  }\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1);\n      for (let j = 1; j < i; j++) {\n        result.push(result[j - 1] + result[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst f5 = f(5);\nconsole.log(f5);\n\n/*\n  Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is odd \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      result.push(1);\n    } else {\n      result.push(1);\n      for (let j = 1; j < i; j++) {\n        result.push(result[j - 1] + result[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst f7 = f(7);\nconsole.log(f7);\n\n/*\n  Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1);\n      for (let j = 1; j < i; j++) {\n        result.push(result[j - 1] + result[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst f9 = f(9);\nconsole.log(f9);\n\n/*\n  Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is odd \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      result.push(1);\n    } else {\n      result.push(1);\n      for (let j = 1; j < i; j++) {\n        result.push(result[j - 1] + result[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst f11 = f(11);\nconsole.log(f11);\n\n/*\n  Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1);\n      for (let j = 1; j < i; j++) {\n        result.push(result[j - 1] + result[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst f13 = f(13);\nconsole.log(f13);\n\n/*\n  Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is odd \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f14 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      result.push(1);\n    } else {\n      result.push(1);\n      for (let j = 1; j < i; j++) {\n        result.push(result[j - 1] + result[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst f15 = f(15);\nconsole.log(f15);\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome2 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome3 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome4 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome5 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome6 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome7 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome8 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome9 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome10 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome11 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome12 = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall2 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall3 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall4 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall5 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall6 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall7 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall8 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n}\n\nconst moveOneBall9 = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k++;\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  ", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let result = '';\n  for (let i = 0;", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return 'NO';\n  }\n  const lst1_even = lst1.filter(x => x % 2 === 0);\n  const lst2_even = lst2.filter(x => x % 2 === 0);\n  if (lst1_even.length!== lst2_even.length) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); //=> 'YES'\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 5]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 6]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 7]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 8]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 9]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 10]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 11]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 12]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 13]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 14]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 15]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 16]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 17]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 18]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 19]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 20]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 21]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 22]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 23]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 24]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 25]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 26]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 27]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 28]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 29]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 30]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 31]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 32]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 33]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 34]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 35]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 36]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 37]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 38]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 39]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 40]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 41]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 42]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 43]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 44]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 45]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 46]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 47]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 48]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated small letter letters, return a dictionary \n  of the letter with the most repeat and containing the corresponding count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram2 = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated small letter letters, return a dictionary \n  of the letter with the most repeat and containing the corresponding count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram3 = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated small letter letters, return a dictionary \n  of the letter with the most repeat and containing the corresponding count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram4 = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated small letter letters, return a dictionary \n  of the letter with the most repeat and containing the corresponding count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram5 = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated small letter letters, return a dictionary \n  of the letter with the most repeat and containing the corresponding count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram6 = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated small letter letters, return a dictionary \n  of the letter with the most repeat and containing the corresponding count. \n  If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let i = 0, j = s.length - 1;\n    while (i < j) {\n        while (i < j && s[i] === c[j]) {\n            j--;\n        }\n        s[i] = s[j];\n        i++;\n        j--;\n    }\n    return [s, s.length === 0];\n};\n\nconst isPalindrome = (s) => {\n    let i = 0, j = s.length - 1;\n    while (i < j) {\n        while (i < j && s[i] === s[j]) {\n            j--;\n        }\n        i++;\n        j--;\n    }\n    return i === j;\n};\n\nconst test = [\n    [\"abcde\", \"ae\"],\n    [\"abcdef\", \"b\"],\n    [\"abcdedcba\", \"ab\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopq", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const odd = [];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        odd.push(str[j]);\n      }\n    }\n    result.push(odd.join(\" \"));\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = 0;\n  let minSumIndex = 0;\n  let minSumLength = 0;\n  let minSumLengthIndex = 0;\n  let minSumLengthLength = 0;\n  let minSumLengthLengthIndex = 0;\n  let minSumLengthLengthLength = 0;\n  let minSumLengthLengthLengthIndex = 0;\n  let minSumLengthLengthLengthLength = 0;\n  let minSumLengthLengthLengthLengthIndex = 0;\n  let minSumLengthLengthLengthLengthLengthIndex = 0;\n  let minSumLengthLengthLengthLengthLengthLengthIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n      minSumIndex = i;\n      minSumLength = 1;\n      minSumLengthIndex = i;\n      minSumLengthLength = 1;\n      minSumLengthLengthIndex = i;\n      minSumLengthLengthLength = 1;\n      minSumLengthLengthLengthIndex = i;\n      minSumLengthLengthLengthLengthIndex = i;\n      minSumLengthLengthLengthLengthLengthIndex = i;\n    } else if (sum === minSum) {\n      minSumLength++;\n      if (minSumLength < minSumLengthIndex) {\n        minSumLength = 1;\n        minSumLengthIndex = i;\n        minSumLengthLength = 1;\n        minSumLengthLengthIndex = i;\n        minSumLengthLengthLength = 1;\n        minSumLengthLengthLengthIndex = i;\n        minSumLengthLengthLengthLengthIndex = i;\n        minSumLengthLengthLengthLengthLengthIndex = i;\n      } else if (minSumLength === minSumLengthIndex) {\n        minSumLengthLength++;\n        if (minSumLengthLength < minSumLengthLengthIndex) {\n          minSumLengthLength = 1;\n          minSumLengthLengthIndex = i;\n          minSumLengthLengthLength = 1;\n          minSumLengthLengthLengthIndex = i;\n          minSumLengthLengthLengthLength = 1;\n          minSumLengthLengthLengthLengthIndex = i;\n          minSumLengthLengthLengthLengthLengthIndex = i;\n          minSumLengthLengthLengthLengthLengthLengthIndex = i;\n        } else if (minSumLengthLength === minSumLengthLengthIndex) {\n          minSumLengthLengthLength++;\n          if (minSumLengthLengthLength < minSumLengthLengthLengthIndex) {\n            minSumLengthLengthLength = 1;\n            minSumLengthLengthLengthIndex = i;\n            minSumLengthLengthLengthLength = 1;\n            minSumLengthLengthLengthLengthLengthIndex = i;\n            minSumLengthLengthLengthLengthLengthLengthIndex = i;\n            minSumLengthLengthLengthLengthLengthLengthLengthIndex = i;\n          } else if (minSumLengthLengthLength === minSumLengthLengthLengthIndex) {\n            minSumLengthLengthLengthLength++;\n            if (minSumLengthLengthLengthLength < minSumLengthLengthLengthLengthIndex) {\n              minSumLengthLengthLengthLength = 1;\n              minSumLengthLengthLengthLengthIndex = i;\n              minSumLengthLengthLengthLengthLengthLengthIndex = i;\n              minSumLengthLengthLengthLengthLengthLengthLengthIndex = i;\n              minSumLengthLengthLengthLengthLengthLengthLengthIndex = i;\n            } else if (minSumLengthLengthLengthLength === minSumLengthLengthLengthLengthIndex) {\n              minSumLengthLengthLengthLengthLength++;\n              if (minSumLengthLengthLengthLengthLength < minSumLengthLengthLengthLengthLengthIndex) {\n                minSumLengthLengthLengthLengthLength = 1;\n                minSumLengthLengthLengthLengthLengthIndex = i;\n                minSumLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n              } else if (minSumLengthLengthLengthLengthLength === minSumLengthLengthLengthLengthLengthIndex) {\n                minSumLengthLengthLengthLengthLengthLength++;\n                if (minSumLengthLengthLengthLengthLengthLength < minSumLengthLengthLengthLengthLengthLengthIndex) {\n                  minSumLengthLengthLengthLengthLengthLength = 1;\n                  minSumLengthLengthLengthLengthLengthLengthIndex = i;\n                  minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                  minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                  minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                } else if (minSumLengthLengthLengthLengthLengthLength === minSumLengthLengthLengthLengthLengthLengthIndex) {\n                  minSumLengthLengthLengthLengthLengthLengthLength++;\n                  if (minSumLengthLengthLengthLengthLengthLengthLength < minSumLengthLengthLengthLengthLengthLengthLengthIndex) {\n                    minSumLengthLengthLengthLengthLengthLengthLength = 1;\n                    minSumLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                    minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                    minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                    minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                  } else if (minSumLengthLengthLengthLengthLengthLengthLength === minSumLengthLengthLengthLengthLengthLengthLengthIndex) {\n                    minSumLengthLengthLengthLengthLengthLengthLengthLength++;\n                    if (minSumLengthLengthLengthLengthLengthLengthLengthLength < minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex) {\n                      minSumLengthLengthLengthLengthLengthLengthLengthLength = 1;\n                      minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                      minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                      minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                      minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                    } else if (minSumLengthLengthLengthLengthLengthLengthLengthLength === minSumLengthLengthLengthLengthLengthLengthLengthLengthIndex) {\n                      minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthLength++;\n                      if (minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthLength < minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex) {\n                        minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 1;\n                        minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                        minSumLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = i;\n                        minSumLengthLengthLength", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let total = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        total += 1;\n      }\n    }\n  }\n  let fill = 0;\n  let time = 0;\n  while (fill < total) {\n    fill += capacity;\n    time++;\n  }\n  return time;\n};\n\nconst main = () => {\n  let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  let capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char] === n) {\n      words.push(s.substring(i));\n    }\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (charCount[char]", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestDistance = Infinity;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        let distance = Math.abs(i - j);\n        if (distance < closestDistance) {\n          closestVowel = vowels[j];\n          closestDistance = distance;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel('yogurt'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\nconsole.log(getClosestVowel('ab'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const stackSize = 0\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n      stackSize++\n    } else if (c === ')') {\n      if (stackSize === 0) {\n        return 'No'\n      }\n      stack.pop()\n      stackSize--\n    }\n  }\n  if (stackSize === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens(['())', ')']));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return ''\n  }\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr\n    }\n    return prev\n  }, strings[0])\n}\n\nmodule.exports = longest\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLength = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  let i = 1\n  while (i < arrLength) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      i++\n    } else {\n      i++\n    }\n  }\n  return arr.slice(0, k).concat([max], arr.slice(maxIndex + 1))\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements27 = (arr, k) => {\n  const sum =", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    even = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      odd.push(i);\n    }\n    i++;\n  }\n  return odd.concat(even);\n};\n\nexport default getOddCollatz;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  const days = month * 31 + day;\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const calendar = [4, 6, 9, 11];\n  const daysOfMonth = [31, 30, 29];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysOfMonth[month - 1]) {\n    return false;\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  if (days < 1 || days > daysOfMonth[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 1 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDateChain = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  const days = month * 31 + day;\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const calendar = [4, 6, 9, 11];\n  const daysOfMonth = [31, 30, 29];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysOfMonth[month - 1]) {\n    return false;\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  if (days < 1 || days > daysOfMonth[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 1 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDateChain2 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  const days = month * 31 + day;\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const calendar = [4, 6, 9, 11];\n  const daysOfMonth = [31, 30, 29];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysOfMonth[month - 1]) {\n    return false;\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  if (days < 1 || days > daysOfMonth[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 1 && year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDateChain3 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  const days = month * 31 + day;\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const calendar = [4, 6, 9, 11];\n  const daysOfMonth = [31, 30, 29];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysOfMonth[month - 1]) {\n    return false;\n  }\n  if (year < 1900 || year > 2020) {\n", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n  should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  if (len === 0) return true\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] > lst[j]) return false\n    i++\n    j--\n  }\n  return true\n}\n\n/* Given a list of numbers, return the largest number in the list.\n  Examples\n  largest([1, 2, 3, 4]) ➞ 4\n  largest([1, 2, 3, 4, 5]) ➞ 5\n  largest([1, 2, 3, 4, 5, 6]) ➞ 6\n  largest([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  largest([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 8\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 9\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 10\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 11\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 12\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 13\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 14\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 15\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 16\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 17\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 18\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 19\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 20\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 21\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 22\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 23\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 24\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 25\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 26\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 27\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 28\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 29\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ 30\n  largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) ➞ 31\n  largest([1", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  const sign = (x) => {\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x > 0) {\n      return 1;\n    }\n\n    return -1;\n  };\n\n  const prod = (x, y) => x * y;\n\n  const sum = (x, y) => x + y;\n\n  const union = (x, y) => x + y;\n\n  const max = (x, y) => Math.max(x, y);\n\n  const min = (x, y) => Math.min(x, y);\n\n  const prodSigns = (arr) => {\n    const signSum = (x, y) => sign(x) + sign(y);\n\n    const prodSum = (x, y) => prod(x, y);\n\n    const sumSign = (x, y) => sum(x, y);\n\n    const unionSign = (x, y) => union(x, y);\n\n    const maxSign = (x, y) => max(x, y);\n\n    const minSign = (x, y) => min(x, y);\n\n    const signSumSum = (x, y) => signSum(x, y);\n\n    const prodSumSum = (x, y) => prodSum(x, y);\n\n    const sumSignSum = (x, y) => sumSign(x, y);\n\n    const unionSignSum = (x, y) => unionSign(x, y);\n\n    const maxSignSum = (x, y) => maxSign(x, y);\n\n    const minSignSum = (x, y) => minSign(x, y);\n\n    const signSumSumSum = (x, y) => signSumSum(x, y);\n\n    const prodSumSumSum = (x, y) => prodSumSum(x, y);\n\n    const sumSignSumSum = (x, y) => sumSignSum(x, y);\n\n    const unionSignSumSum = (x, y) => unionSignSum(x, y);\n\n    const maxSignSumSum = (x, y) => maxSignSum(x, y);\n\n    const minSignSumSum = (x, y) => minSignSum(x, y);\n\n    const signSumSumSumSum = (x, y) => signSumSumSum(x, y);\n\n    const prodSumSumSumSum = (x, y) => prodSumSumSum(x, y);\n\n    const sumSignSumSumSum = (x, y) => sumSignSumSum(x, y);\n\n    const unionSignSumSumSum = (x, y) => unionSignSumSum(x, y);\n\n    const maxSignSumSumSum = (x, y) => maxSignSumSum(x, y);\n\n    const minSignSumSumSum = (x, y) => minSignSumSum(x, y);\n\n    const signSumSumSumSumSum = (x, y) => signSumSumSumSum(x, y);\n\n    const prodSumSumSumSumSum = (x, y) => prodSumSumSumSum(x, y);\n\n    const sumSignSumSumSumSum = (x, y) => sumSignSumSumSum(x, y);\n\n    const unionSignSumSumSumSum = (x, y) => unionSignSumSumSum(x, y);\n\n    const maxSignSumSumSumSum = (x, y) => maxSignSumSumSum(x, y);\n\n    const minSignSumSumSumSum = (x, y) => minSignSumSumSum(x, y);\n\n    const signSumSumSumSumSumSum = (x, y) => signSumSumSumSumSum(x, y);\n\n    const prodSumSumSumSumSumSum = (x, y) => prodSumSumSumSumSum(x, y);\n\n    const sumSignSumSumSumSumSum = (x, y) => sumSignSumSumSumSum(x, y);\n\n    const unionSignSumSumSumSumSumSum = (x, y) => unionSignSumSumSumSumSum(x, y);\n\n    const maxSignSumSumSumSumSumSum = (x, y) => maxSignSumSumSumSumSumSum(x, y);\n\n    const minSignSumSumSumSumSumSum = (x, y) => minSignSumSumSumSumSumSum(x, y);\n\n    const signSumSumSumSumSumSumSum = (x, y) => signSumSumSumSumSumSumSum(x, y);\n\n    const prodSumSumSumSumSumSumSum = (x, y) => prodSumSumSumSumSumSumSum(x, y);\n\n    const sumSignSumSumSumSumSumSum = (x, y) => sumSignSumSumSumSumSumSum(x, y);\n\n    const unionSignSumSumSumSumSumSumSum = (x, y) => unionSignSumSumSumSumSumSumSum(x, y);\n\n    const maxSignSumSumSumSumSumSumMax = (x, y) => maxSignSumSumSumSumSumSumMax(x, y);\n\n    const minSignSumSumSumSumSumSumMin = (x, y) => minSignSumSumSumSumSumSumMin(x, y);\n\n    const signSumSumSumSumSumSumSumSign = (x, y) => signSumSumSumSumSumSumSumSign(x, y);\n\n    const prodSumSumSumSumSumSumProd = (x, y) => prodSumSumSumSumSumSumProd(x, y);\n\n    const sumSignSumSumSumSumSumSumSum = (x, y) => sumSignSumSumSumSumSumSumSum(x, y);\n\n    const unionSignSumSumSumSumSumSumSumUnion = (x, y) => unionSignSumSumSumSumSumSumSumUnion(x, y);\n\n    const maxSignSumSumSumSumSumSumMax = (x, y) => maxSignSumSumSumSumSumSumMax(x, y);\n\n    const minSignSumSumSumSumSumSumMin = (x, y) => minSignSumSumSumSumSumSumMin(x, y);\n\n    const signSumSumSumSumSumSumSumSign = (x, y) =>", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const [row, col] = [0, 0];\n  const [row_min, col_min] = [N, N];\n  const [row_max, col_max] = [0, 0];\n  const [row_min_step, col_min_step] = [N, N];\n  const [row_max_step, col_max_step] = [0, 0];\n  const [row_step, col_step] = [0, 0];\n  const [row_step_step, col_step_step] = [0, 0];\n  const [row_step_step_step, col_step_step_step] = [0, 0];\n  const [row_step_step_step_step, col_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step, col_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step, col_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step_step_step_step_step_step_step_step, col_step_step_step_step_step_step_step_step_step_step_step_step_step] = [0, 0];\n  const [row_step_step_step_step_step_step_step_step", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor(a, b);\n  }\n  return a;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1 + i / 2)\n    tri.push(1 + i)\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const isValid = (string) = > {\n    const isValid = (string) = > {\n      const isValid = (string) = > {\n        const isValid = (string) = > {\n          const isValid = (string) = > {\n            const isValid = (string) = > {\n              const isValid = (string) = > {\n                const isValid = (string) = > {\n                  const isValid = (string) = > {\n                    const isValid = (string) = > {\n                      const isValid = (string) = > {\n                        const isValid = (string) = > {\n                          const isValid = (string) = > {\n                            const isValid = (string) = > {\n                              const isValid = (string) = > {\n                                const isValid = (string) = > {\n                                  const isValid = (string) = > {\n                                    const isValid = (string) = > {\n                                      const isValid = (string) = > {\n                                        const isValid = (string) = > {\n                                          const isValid = (string) = > {\n                                            const isValid = (string) = > {\n                                              const isValid = (string) = > {\n                                                const isValid = (string) = > {\n                                                  const isValid = (string) = > {\n                                                    const isValid = (string) = > {\n                                                      const isValid = (string) = > {\n                                                        const isValid = (string) = > {\n                                                          const isValid = (string) = > {\n                                                           const isValid = (string) = > {\n                                                            const isValid = (string) = > {\n                                                            const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                             const isValid = (string) = > {\n                                                           ", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLength = txt.length\n  if (txtLength === 0) {\n    return false\n  }\n  const lastChar = txt[txtLength - 1]\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n  return isALetter\n}\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLength = txt.length\n  if (txtLength === 0) {\n    return false\n  }\n  const lastChar = txt[txtLength - 1]\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n  return isALetter\n}\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLength = txt.length\n  if (txtLength === 0) {\n    return false\n  }\n  const lastChar = txt[txtLength - 1]\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n  return isALetter\n}\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLength = txt.length\n  if (txtLength === 0) {\n    return false\n  }\n  const lastChar = txt[txtLength - 1]\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n  return isALetter\n}\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLength = txt.length\n  if (txtLength === 0) {\n    return false\n  }\n  const lastChar = txt[txtLength - 1]\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n  return isALetter\n}\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLength = txt.length\n  if (txtLength === 0) {\n    return false\n  }\n  const lastChar = txt[txtLength - 1]\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n  return isALetter\n}\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") �", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let currExp = Math.log(curr);\n    if (currExp > max) {\n      max = currExp;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let currExp = Math.log(curr);\n    if (currExp > max) {\n      max = currExp;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let currExp = Math.log(curr);\n    if (currExp > max) {\n      max = currExp;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let currExp = Math.log(curr);\n    if (currExp > max) {\n      max = currExp;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let currExp = Math.log(curr);\n    if (currExp > max) {\n      max = currExp;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let currExp = Math.log(curr);\n    if (currExp > max) {\n      max = currExp;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let currExp = Math.log(curr);\n    if (currExp > max) {\n      max = currExp;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   du", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = [null, null];\n  const [a_, b_] = largestSmallestIntegers(lst.slice(1));\n  if (a_ === null) {\n    return [lst[0], b_];\n  }\n  if (b_ === null) {\n    return [a_, lst[0]];\n  }\n  if (a_ > b_) {\n    return [lst[0], b_];\n  }\n  return [a_, lst[0]];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = largestSmallestIntegers(lst);\n  return [a, b];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const [a,", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a === b) {\n     return null;\n   }\n   if (a < b) {\n     return a;\n   }\n   if (a > b) {\n     return b;\n   }\n   if (a === \"\") {\n     return b;\n   }\n   if (b === \"\") {\n     return a;\n   }\n   if (a < \"\") {\n     return a;\n   }\n   if (a > \"\") {\n     return b;\n   }\n   if (b < \"\") {\n     return b;\n   }\n   if (b > \"\") {\n     return a;\n   }\n   return null;\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  if (a === \"\") {\n    return b;\n  }\n  if (b === \"\") {\n    return a;\n  }\n  if (a < \"\") {\n    return a;\n  }\n  if (a > \"\") {\n    return b;\n  }\n  if (b < \"\") {\n    return b;\n  }\n  if (b > \"\") {\n    return a;\n  }\n  return null;\n};\n\nconsole.log(compareOne(1, 2.5));\nconsole.log(compareOne(1, \" 2,3 \"));\nconsole.log(compareOne(\"5,1\", \" 6 \"));\nconsole.log(compareOne(\"1\", 1));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSum = (n) => {\n  return isEqualToSumEven(n) || isEqualToSumOdd(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum2 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum3 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum4 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum5 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum6 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum7 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum8 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualToSum9 = (n) => {\n  return isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumEven(n) && isEqualToSumOdd(n)\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure numbers\n  Example\n  isEqualToSum(4) == true\n  isEqualToSum(6) == false\n  isEqualToSum(8) == false\n  */\nconst isEqualTo", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst binomial = (n, k) => {\n  if (k === 0) {\n    return 1\n  }\n  if (k === 1) {\n    return n\n  }\n  return n * binomial(n - 1, k - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst catalan = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * catalan(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst euler = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * euler(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst harmonic = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * harmonic(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst bell = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * bell(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst lgamma = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 0\n  }\n  return n * lgamma(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 0\n  }\n  return n * gamma(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst zeta = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 0\n  }\n  return n * zeta(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst polygonal = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * polygonal(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst tribonacci = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * tribonacci(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst trinomial = (n, k) => {\n  if (k === 0) {\n    return 1\n  }\n  if (k === 1) {\n    return n\n  }\n  return n * trinomial(n - 1, k - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst pentagonal = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * pentagonal(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst hexagonal = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * hexagonal(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst heptagonal = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  return n * heptagonal(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst octagonal = (n) => {\n  if (n === 0) {\n    ", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string)", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const SPACE =''\n  const BOW = '_'\n  const SPACE_REPLACE = '-'\n  const BOW_REPLACE = '-'\n  const SPACE_LEN = SPACE.length\n  const BOW_LEN = BOW.length\n  const SPACE_LEN_REPLACE = SPACE_LEN + SPACE_REPLACE.length\n  const BOW_LEN_REPLACE = BOW_LEN + BOW_REPLACE.length\n  const SPACE_REPLACE_LEN = SPACE_REPLACE.length\n  const BOW_REPLACE_LEN = BOW_REPLACE.length\n  const SPACE_REPLACE_LEN_REPLACE = SPACE_REPLACE_LEN + SPACE_REPLACE_LEN_REPLACE\n  const BOW_REPLACE_LEN_REPLACE = BOW_REPLACE_LEN + BOW_REPLACE_LEN_REPLACE\n  \n  return text.replace(new RegExp(`${SPACE}`, 'g'), SPACE_REPLACE)\n   .replace(new RegExp(`${BOW}`, 'g'), BOW_REPLACE)\n   .replace(new RegExp(`${SPACE}+`, 'g'), SPACE_REPLACE_LEN)\n   .replace(new RegExp(`${BOW}+`, 'g'), BOW_REPLACE_LEN)\n}\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  const SPACE =''\n  const BOW = '_'\n  const SPACE_REPLACE = '-'\n  const BOW_REPLACE = '-'\n  const SPACE_LEN = SPACE.length\n  const BOW_LEN = BOW.length\n  const SPACE_LEN_REPLACE = SPACE_LEN + SPACE_REPLACE.length\n  const BOW_LEN_REPLACE = BOW_LEN + BOW_REPLACE.length\n  const SPACE_REPLACE_LEN = SPACE_REPLACE.length\n  const BOW_REPLACE_LEN = BOW_REPLACE.length\n  const SPACE_REPLACE_LEN_REPLACE = SPACE_REPLACE_LEN + SPACE_REPLACE_LEN_REPLACE\n  const BOW_REPLACE_LEN_REPLACE = BOW_REPLACE_LEN + BOW_REPLACE_LEN_REPLACE\n  \n  return text.replace(new RegExp(`${SPACE}`, 'g'), SPACE_REPLACE)\n   .replace(new RegExp(`${BOW}`, 'g'), BOW_REPLACE)\n   .replace(new RegExp(`${SPACE}+`, 'g'), SPACE_REPLACE_LEN)\n   .replace(new RegExp(`${BOW}+`, 'g'), BOW_REPLACE_LEN)\n}\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n  const SPACE =''\n  const BOW = '_'\n  const SPACE_REPLACE = '-'\n  const BOW_REPLACE = '-'\n  const SPACE_LEN = SPACE.length\n  const BOW_LEN = BOW.length\n  const SPACE_LEN_REPLACE = SPACE_LEN + SPACE_REPLACE.length\n  const BOW_LEN_REPLACE = BOW_LEN + BOW_REPLACE.length\n  const SPACE_REPLACE_LEN = SPACE_REPLACE.length\n  const BOW_REPLACE_LEN = BOW_REPLACE.length\n  const SPACE_REPLACE_LEN_REPLACE = SPACE_REPLACE_LEN + SPACE_REPLACE_LEN_REPLACE\n  const BOW_REPLACE_LEN_REPLACE = BOW_REPLACE_LEN + BOW_REPLACE_LEN_REPLACE\n  \n  return text.replace(new RegExp(`${SPACE}`, 'g'), SPACE_REPLACE)\n   .replace(new RegExp(`${BOW}`, 'g'), BOW_REPLACE)\n   .replace(new RegExp(`${SPACE}+`, 'g'), SPACE_REPLACE_LEN)\n   .replace(new RegExp(`${BOW}+`, 'g'), BOW_REPLACE_LEN)\n}\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n  const SPACE =''\n  const BOW = '_'\n  const SPACE_REPLACE = '", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    }\n    if (i % 4 === 0) {\n      sum *= lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  let i = 0\n  let j = 0\n  let newWord = ''\n  while (i < words.length) {\n    if (words[i] ==='') {\n      newWords.push(newWord)\n      newWord = ''\n    } else {\n      newWord += words[i]\n    }\n    i++\n  }\n  newWords.push(newWord)\n  return newWords\n}\n\nconst chain = (sentence) => {\n  const words = wordsInSentence(sentence)\n  const newWords = words.slice(0)\n  const newChain = []\n  let i = 0\n  let j = 0\n  let newWord = ''\n  while (i < newWords.length) {\n    if (newWords[i] ==='') {\n      newChain.push(newWord)\n      newWord = ''\n    } else {\n      newWord += newWords[i]\n    }\n    i++\n  }\n  newChain.push(newWord)\n  return newChain\n}\n\nconst chainLength = (sentence) => {\n  const words = wordsInSentence(sentence)\n  const newWords = words.slice(0)\n  const newChain = []\n  let i = 0\n  let j = 0\n  let newWord = ''\n  while (i < newWords.length) {\n    if (newWords[i] ==='') {\n      newChain.push(newWord)\n      newWord = ''\n    } else {\n      newWord += newWords[i]\n    }\n    i++\n  }\n  newChain.push(newWord)\n  return newChain.length\n}\n\nconst test = (sentence, expected) => {\n  const actual = chain(sentence)\n  console.log(`${sentence} -> ${actual}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual: ${chainLength(sentence)}`)\n  console", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   if (x === 0) return false\n   if (n === 0) return false\n   if (x === 1) return true\n   if (n === 1) return true\n   if (x === -1) return true\n   if (n === -1) return true\n   if (x === -2) return false\n   if (n === -2) return false\n   if (x === 2) return false\n   if (n === 2) return false\n   if (x === 3) return false\n   if (n === 3) return false\n   if (x === 4) return false\n   if (n === 4) return false\n   if (x === 5) return false\n   if (n === 5) return false\n   if (x === 6) return false\n   if (n === 6) return false\n   if (x === 7) return false\n   if (n === 7) return false\n   if (x === 8) return false\n   if (n === 8) return false\n   if (x === 9) return false\n   if (n === 9) return false\n   if (x === 10) return false\n   if (n === 10) return false\n   if (x === 11) return false\n   if (n === 11) return false\n   if (x === 12) return false\n   if (n === 12) return false\n   if (x === 13) return false\n   if (n === 13) return false\n   if (x === 14) return false\n   if (n === 14) return false\n   if (x === 15) return false\n   if (n === 15) return false\n   if (x === 16) return false\n   if (n === 16) return false\n   if (x === 17) return false\n   if (n === 17) return false\n   if (x === 18) return false\n   if (n === 18) return false\n   if (x === 19) return false\n   if (n === 19) return false\n   if (x === 20) return false\n   if (n === 20) return false\n   if (x === 21) return false\n   if (n === 21) return false\n   if (x === 22) return false\n   if (n === 22) return false\n   if (x === 23) return false\n   if (n === 23) return false\n   if (x === 24) return false\n   if (n === 24) return false\n   if (x === 25) return false\n   if (n === 25) return false\n   if (x === 26) return false\n   if (n === 26) return false\n   if (x === 27) return false\n   if (n === 27) return false\n   if (x === 28) return false\n   if (n === 28) return false\n   if (x === 29) return false\n   if (n === 29) return false\n   if (x === 30) return false\n   if (n === 30) return false\n   if (x === 31) return false\n   if (n === 31) return false\n   if (x === 32) return false\n   if (n === 32) return false\n   if (x === 33) return false\n   if (n === 33) return false\n   if (x === 34) return false\n   if (n === 34) return false\n   if (x === 35) return false\n   if (n === 35) return false\n   if (x === 36) return false\n   if (n === 36) return false\n   if (x === 37) return false\n   if (n === 37) return false\n   if (x === 38) return false\n   if (n === 38) return false\n   if (x === 39) return false\n   if (n === 39) return false\n   if (x === 40) return false\n   if (n === 40) return false\n   if (x === 41) return false\n   if (n === 41) return false\n   if (x === 42) return false\n   if (n === 42) return false\n   if (x === 43) return false\n   if (n === 43) return false\n   if (x === 44) return false\n   if (n === 44) return false\n   if (x === 45) return false\n   if (n === 45) return false\n   if (x === 46) return false\n   if (n === 46) return false\n   if (x === 47) return false\n   if (n === 47) return false\n   if (x === 48) return false\n   if (n === 48) return false\n   if (x === 49) return false\n   if (n === 49) return false\n   if (x === 50) return false\n   if (n === 50) return false\n   if (x === 51) return false\n   if (n === 51) return false\n   if (x === 52) return false\n   if (n === 52) return false\n   if (x === 53) return false\n   if (n === 53) return false\n   if (x === 54) return false\n   if (n === 54) return false\n   if (x === 55) return false\n   if (n === 55) return false\n   if (x === 56) return false\n   if (n === 56) return false\n   if (x === 57) return false\n   if (n === 57) return false\n   if (x === 58) return false\n   if (n === 58) return false\n   if (x === 59) return false\n   if (n === 59) return false\n   if (x === 60) return false\n   if (n === 60) return false\n   if (x === 61) return false\n   if (n === 61) return false\n   if (x === 62) return false\n   if (n === 62) return false\n   if (x === 63) return false\n   if (n === 63) return false\n   if (x === 64) return false\n   if (n === 64) return false\n   if (x", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => acc + num, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => acc + num, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in descending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => acc + num, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => acc + num, 0);\n    return bExp - aExp;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending order according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => acc + num, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => acc + num, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in descending order according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => acc + num, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => acc + num, 0);\n    return bExp - aExp;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending order according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => acc + num, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => acc + num, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in descending order according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => acc + num, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => acc + num, 0);\n    return bExp - aExp;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending order according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => acc + num, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => acc + num, 0);\n    return aExp - bExp;\n  });\n  return", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(num => num > 10 && num % 2 === 1 && num % 10 === 1);\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples2 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples3 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples4 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples5 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples6 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples7 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples8 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples9 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples10 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples11 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n  const d = c.filter((x, i) => i < n - 1)\n  return d.length\n}\n\nconst getMaxTriples12 = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1)\n  const b = a.map((x, i) => x * (x - 1) / 2)\n  const c = b.map((x, i) => x * (x - 1) / 3)\n", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  if (planet1Index < 0 || planet2Index < 0) {\n    return ()\n  }\n  const planet1Orbit = getOrbit(planet1)\n  const planet2Orbit = getOrbit(planet2)\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1)\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2)\n  const planet1OrbitEnd = planet1OrbitIndex + planet1OrbitLength\n  const planet2OrbitEnd = planet2OrbitIndex + planet2OrbitLength\n  const planet1OrbitStart = planet1OrbitIndex\n  const planet2OrbitStart = planet2OrbitIndex\n  const planet1OrbitEndInclusive = planet1OrbitEnd + 1\n  const planet2OrbitEndInclusive = planet2OrbitEnd + 1\n  const planet1OrbitStartInclusive = planet1OrbitStart\n  const planet2OrbitStartInclusive = planet2OrbitStart\n  const planet1OrbitEndInclusiveInclusive = planet1OrbitEndInclusive + 1\n  const planet2OrbitEndInclusiveInclusive = planet2OrbitEndInclusive + 1\n  const planet1OrbitStartInclusiveInclusive = planet1OrbitStartInclusive\n  const planet2OrbitStartInclusiveInclusive = planet2OrbitStartInclusiveInclusive\n  const planet1OrbitEndInclusiveInclusiveInclusive = planet1OrbitEndInclusiveInclusiveInclusive + 1\n  const planet2OrbitEndInclusiveInclusiveInclusive = planet2OrbitEndInclusiveInclusiveInclusive + 1\n  const planet1OrbitStartInclusiveInclusiveInclusive = planet1OrbitStartInclusiveInclusiveInclusive\n  const planet2OrbitStartInclusiveInclusiveInclusive = planet2OrbitStartInclusiveInclusiveInclusiveInclusive\n  const planet1OrbitEndInclusiveInclusiveInclusiveInclusive = planet1OrbitEndInclusiveInclusiveInclusiveInclusiveInclusive + 1\n  const planet2OrbitEndInclusiveInclusiveInclusiveInclusive = planet2OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusive + 1\n  const planet1OrbitStartInclusiveInclusiveInclusiveInclusive = planet1OrbitStartInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet2OrbitStartInclusiveInclusiveInclusiveInclusive = planet2OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet1OrbitEndInclusiveInclusiveInclusiveInclusiveInclusive = planet1OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet2OrbitEndInclusiveInclusiveInclusiveInclusiveInclusive = planet2OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet1OrbitStartInclusiveInclusiveInclusiveInclusiveInclusive = planet1OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet2OrbitStartInclusiveInclusiveInclusiveInclusiveInclusive = planet2OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet1OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = planet1OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet2OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = planet2OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet1OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = planet1OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet2OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = planet2OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet1OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = planet1OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet2OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = planet2OrbitEndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive\n  const planet1OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = planet1OrbitStartInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_2 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_3 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_4 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_5 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_6 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_7 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_8 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_9 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_10 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_11 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_12 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_13 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\nconst list_sort_14 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 1)\n  '0 1 2'\n  >>> stringSequence(5, 3, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 1, 2)\n  '0 1 2'\n  >>> stringSequence(5, 3, 1, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 1, 2, 3)\n  '0 1 2 3'\n  >>> stringSequence(5, 3, 1, 2, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n5; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 1, 2, 3, 4)\n  '0 1 2 3 4'\n  >>> stringSequence(5, 3, 1, 2, 3, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5, n6) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n5; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n6; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 1, 2, 3, 4, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, 3, 1, 2, 3, 4, 5)\n  '0 1 2 3 4 5 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5, n6, n7) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n5; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n6; i++) {\n    str +='';\n  }\n  for (let i = 0; i < n7; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 1, 2, 3, 4, 5, 6)\n  '0 1 2 3 4 5 6'\n  ", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY26 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY27 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY28 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY29 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY30 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY31 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY32 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0\n   for (i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i]\n     }\n   }\n   return sum\n }\n */\n\nfunction doubleTheDifference(lst) {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare2 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare3 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare4 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare5 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare6 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare7 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare8 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare9 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare10 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare11 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare12 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare13 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare14 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare15 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff > 0) {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare16 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const capital_count = class_name.split(\"\").filter(x => x.toUpperCase() === x).length\n  const lower_count = class_name.split(\"\").filter(x => x.toLowerCase() === x).length\n  const strength = capital_count - lower_count\n  const strongest = extensions.find(x => strength === x.length)\n  return class_name + \".\" + strongest\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  Example:\n  for length('abc') == 3\n  */\nconst length = (str) => {\n  return str.length\n}\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  Example:\n  for lower_count('abc') == 1\n  */\nconst lower_count = (str) => {\n  return str.split(\"\").filter(x => x.toLowerCase() === x).length\n}\n\n/*\n  Given a string, return the number of capital letters in the string.\n  Example:\n  for capital_count('abc') == 1\n  */\nconst capital_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  Example:\n  for lower_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst upper_count = (str) => {\n  return str.split(\"\").filter(x => x.toUpperCase() === x).length\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  for upper_count('abc') == 1\n  */\nconst", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   while (i < a.length) {\n     while (j < b.length) {\n       if (a[i] === b[j]) {\n         k = i;\n         l = j;\n         break;\n       }\n       j++;\n     }\n     if (k === i) {\n       break;\n     }\n     i++;\n     j = k;\n   }\n   if (k === i) {\n     return false;\n   }\n   while (k < a.length) {\n     while (l < b.length) {\n       if (a[k] === b[l]) {\n         m = k;\n         n = l;\n         break;\n       }\n       l++;\n     }\n     if (m === k) {\n       break;\n     }\n     k++;\n     l = m;\n   }\n   if (m === k) {\n     return false;\n   }\n   while (m < a.length) {\n     while (n < b.length) {\n       if (a[m] === b[n]) {\n         o = m;\n         p = n;\n         break;\n       }\n       n++;\n     }\n     if (o === m) {\n       break;\n     }\n     m++;\n     n = o;\n   }\n   if (o === m) {\n     return false;\n   }\n   while (o < a.length) {\n     while (p < b.length) {\n       if (a[o] === b[p]) {\n         q = o;\n         r = p;\n         break;\n       }\n       p++;\n     }\n     if (q === o) {\n       break;\n     }\n     o++;\n     p = q;\n   }\n   if (q === o) {\n     return false;\n   }\n   while (q < a.length) {\n     while (r < b.length) {\n       if (a[q] === b[r]) {\n         s = q;\n         t = r;\n         break;\n       }\n       r++;\n     }\n     if (s === q) {\n       break;\n     }\n     q++;\n     r = s;\n   }\n   if (s === q) {\n     return false;\n   }\n   while (s < a.length) {\n     while (t < b.length) {\n       if (a[s] === b[t]) {\n         u = s;\n         v = t;\n         break;\n       }\n       t++;\n     }\n     if (u === s) {\n       break;\n     }\n     s++;\n     t = u;\n   }\n   if (u === s) {\n     return false;\n   }\n   while (u < a.length) {\n     while (v < b.length) {\n       if (a[u] === b[v]) {\n         w = u;\n         x = v;\n         break;\n       }\n       v++;\n     }\n     if (w === u) {\n       break;\n     }\n     u++;\n     v = w;\n   }\n   if (w === u) {\n     return false;\n   }\n   return true;\n }\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(0));\nconsole.log(evenOddCount(1));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  let j = roman.length - 1;\n  while (number > 0) {\n    while (number >= roman[j]) {\n      number -= roman[j];\n      result += roman[j];\n      j--;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n   restriction: 1 <= = romanNumeral < = 1000\n\n   Examples:\n  >>> miniRomanToInt('xix') == 19\n  >>> miniRomanToInt('clii') == 152\n  >>> miniRomanToInt('cdxxvi') == 426\n  */\nconst miniRomanToInt = (romanNumeral) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = 0;\n  let i = 0;\n  let j = roman.length - 1;\n  while (i < romanNumeral.length) {\n    while (romanNumeral[i]!= roman[j]) {\n      if (romanNumeral[i] < roman[j]) {\n        result -= roman[j];\n      } else {\n        result += roman[j];\n      }\n      j--;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\n/*\n  Given a roman numeral, return the number of letters in the roman numeral.\n   restriction: 1 <= = romanNumeral < = 1000\n\n   Examples:\n  >>> romanNumeralLength('xix') == 4\n  >>> romanNumeralLength('clii') == 3\n  >>> romanNumeralLength('cdxxvi') == 7\n  */\nconst romanNumeralLength = (romanNumeral) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = 0;\n  let i = 0;\n  let j = roman.length - 1;\n  while (i < romanNumeral.length) {\n    while (romanNumeral[i]!= roman[j]) {\n      if (romanNumeral[i] < roman[j]) {\n        result--;\n      } else {\n        result++;\n      }\n      j--;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\n/*\n  Given a roman numeral, return the number of digits in the roman numeral.\n   restriction: 1 <= = romanNumeral < = 1000\n\n   Examples:\n  >>> romanNumeralDigitLength('xix') == 4\n  >>> romanNumeralDigitLength('clii') == 3\n  >>> romanNumeralDigitLength('cdxxvi') == 7\n  */\nconst romanNumeralDigitLength = (romanNumeral) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = 0;\n  let i = 0;\n  let j = roman.length - 1;\n  while (i < romanNumeral.length) {\n    while (romanNumeral[i]!= roman[j]) {\n      result++;\n      j--;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\n/*\n  Given a roman numeral, return the number of letters in the roman numeral.\n   restriction: 1 <= = romanNumeral < = 1000\n\n   Examples:\n  >>> romanNumeralDigitLength('xix') == 4\n  >>> romanNumeralDigitLength('clii') == 3\n  >>> romanNumeralDigitLength('cdxxvi') == 7\n  */\nconst romanNumeralDigitLength = (romanNumeral) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = 0;\n  let i = 0;\n  let j = roman.length - 1;\n  while (i < romanNumeral.length) {\n    while (romanNumeral[i]!= roman[j]) {\n      result++;\n      j--;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\n/*\n  Given a roman numeral, return the number of digits in the roman numeral.\n   restriction: 1 <= = romanNumeral < = 1000\n\n   Examples:\n  >>> romanNumeralDigitLength('xix') == 4\n  >>> romanNumeralDigitLength('clii') == 3\n  >>> romanNumeralDigitLength('cdxxvi') == 7\n  */\nconst romanNumeralDigitLength = (romanNumeral) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = 0;\n  let i = 0;\n  let j = roman.length - 1;\n  while (i < romanNumeral.length) {\n    while (romanNumeral[i]!= roman[j]) {\n      result++;\n      j--;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\n/*\n  Given a roman numeral, return the number of letters", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) return true;\n  if (a === b || b === c || a === c) return false;\n  if (a === c) return (b > c);\n  if (b === c) return (a > c);\n  if (a === b) return (a < c);\n  if (b === c) return (b < a);\n  return false;\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const words = words.sort((a, b) => a.length - b.length)\n   const max = words[0]\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max.length) {\n       max = words[i]\n     }\n   }\n   return max\n }\n*/\n\nconst findMax = (words) => {\n  const words = words.sort((a, b) => a.length - b.length)\n  const max = words[0]\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i]\n    }\n  }\n  return max\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]))\nconsole.log(findMax([\"name\", \" enam \", \" plot \"]))\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \"]))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [need - number, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst main = () => {\n  const [number, need, remaining] = eat(5, 6, 10);\n  console.log(`${number} carrots eaten, ${remaining} remaining`);\n  const [number2, remaining2] = eat(4, 8, 9);\n  console.log(`${number2} carrots eaten, ${remaining2} remaining`);\n  const [number3, remaining3] = eat(1, 10, 10);\n  console.log(`${number3} carrots eaten, ${remaining3} remaining`);\n  const [number4, remaining4] = eat(2, 11, 5);\n  console.log(`${number4} carrots eaten, ${remaining4} remaining`);\n}\n\nmain();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char] === undefined) {\n      count[char] = 1\n    } else {\n      count[char]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toLowerCase()] === undefined) {\n      count[char.toLowerCase()] = 1\n    } else {\n      count[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toUpperCase()] === undefined) {\n      count[char.toUpperCase()] = 1\n    } else {\n      count[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toUpperCase()] === undefined) {\n      count[char.toUpperCase()] = 1\n    } else {\n      count[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toLowerCase()] === undefined) {\n      count[char.toLowerCase()] = 1\n    } else {\n      count[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toUpperCase()] === undefined) {\n      count[char.toUpperCase()] = 1\n    } else {\n      count[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toLowerCase()] === undefined) {\n      count[char.toLowerCase()] = 1\n    } else {\n      count[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toUpperCase()] === undefined) {\n      count[char.toUpperCase()] = 1\n    } else {\n      count[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out how many distinct characters does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string) => {\n  const chars = string.split('')\n  const count = {}\n  chars.forEach((char) => {\n    if (count[char.toLowerCase()] === undefined) {\n      count[char.toLowerCase()] = 1\n    ", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let resultSum = 0\n  let resultProduct = 1\n  let resultFloor = 0\n  let resultExponent = 1\n\n  while (i < operatorLength) {\n    operatorList.push(operator[i])\n    i++\n  }\n\n  while (j < operandLength) {\n    operandList.push(operand[j])\n    j++\n  }\n\n  while (k < operatorLength) {\n    if (operatorList[k] === '+') {\n      sum = sum + operandList[k]\n    } else if (operatorList[k] === '-') {\n      sum = sum - operandList[k]\n    } else if (operatorList[k] === '*') {\n      product = product * operandList[k]\n    } else if (operatorList[k] === '/') {\n      resultFloor = resultFloor / operandList[k]\n    } else if (operatorList[k] === '**') {\n      resultExponent = resultExponent * operandList[k]\n    }\n    k++\n  }\n\n  while (k < operandLength) {\n    resultSum = resultSum + operandList[k]\n    k++\n  }\n\n  while (k < operatorLength) {\n    if (operatorList[k] === '+') {\n      resultProduct = resultProduct * operandList[k]\n    } else if (operatorList[k] === '-') {\n      resultProduct = resultProduct / operandList[k]\n    } else if (operatorList[k] === '*') {\n      resultSum = resultSum * operandList[k]\n    } else if (operatorList[k] === '/') {\n      resultSum = resultSum / operandList[k]\n    } else if (operatorList[k] === '**') {\n      resultProduct = resultProduct * operandList[k]\n    }\n    k++\n  }\n\n  while (k < operandLength) {\n    resultSum = resultSum + operandList[k]\n    k++\n  }\n\n  while (k < operatorLength) {\n    if (operatorList[k] === '+') {\n      resultProduct = resultProduct * operandList[k]\n    } else if (operatorList[k] === '-') {\n      resultProduct = resultProduct / operandList[k]\n    } else if (operatorList[k] === '*') {\n      resultSum = resultSum * operandList[k]\n    } else if (operatorList[k] === '/') {\n      resultSum = resultSum / operandList[k]\n    } else if (operatorList[k] === '**') {\n      resultProduct = resultProduct * operandList[k]\n    }\n    k++\n  }\n\n  while (k < operandLength) {\n    resultSum = resultSum + operandList[k]\n    k++\n  }\n\n  while (k < operatorLength) {\n    if (operatorList[k] === '+') {\n      resultProduct = resultProduct * operandList[k]\n    } else if (operatorList[k] === '-') {\n      resultProduct = resultProduct / operandList[k]\n    } else if (operatorList[k] === '*') {\n      resultSum = resultSum * operandList[k]\n    } else if (operatorList[k] === '/') {\n      resultSum = resultSum / operandList[k]\n    } else if (operatorList[k] === '**') {\n      resultProduct = resultProduct * operandList[k]\n    }\n    k++\n  }\n\n  while (k < operandLength) {\n    resultSum = resultSum + operandList[k]\n    k++\n  }\n\n  while (k < operatorLength) {\n    if (operatorList[k] === '+') {\n      resultProduct = resultProduct * operandList[k]\n    } else if (operatorList[k] === '-') {\n      resultProduct = resultProduct / operandList[k]\n    } else if (operatorList[k] === '*') {\n      resultSum = resultSum * operandList[k]\n    } else if (operatorList[k] === '/') {\n      resultSum = resultSum / operandList[k]\n    } else if (operatorList[k] === '**') {\n      resultProduct = resultProduct * operandList[k]\n    }\n    k++\n  }\n\n  while (k < operandLength) {\n    resultSum = resultSum + operandList[k]\n    k++\n  }\n\n  while (k < operatorLength) {\n    if (operatorList[k] === '+') {\n      resultProduct = resultProduct * operandList[k]\n    } else if (operatorList[k] === '-') {\n      resultProduct = resultProduct / operandList[k]\n    } else if (operatorList[k] === '*') {\n      resultSum = resultSum * operandList[k]\n    } else if (operatorList[k] === '/') {\n      resultSum = resultSum / operandList[k]\n    } else if (operatorList[k] === '**') {\n      resultProduct = resultProduct * oper", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  let temp = '';\n  while (i < j) {\n    if (s[i] === '#') {\n      temp = s[i] + s[j];\n      s[i] = '#';\n      s[j] = '#';\n      j--;\n    } else if (s[i] === '@') {\n      temp = s[i] + s[j];\n      s[i] = '@';\n      s[j] = '@';\n      j--;\n    } else if (s[i] === 'A') {\n      temp = s[i] + s[j];\n      s[i] = 'a';\n      s[j] = 'a';\n      j--;\n    } else if (s[i] === 'a') {\n      temp = s[i] + s[j];\n      s[i] = 'A';\n      s[j] = 'A';\n      j--;\n    } else if (s[i] === 'C') {\n      temp = s[i] + s[j];\n      s[i] = 'c';\n      s[j] = 'c';\n      j--;\n    } else if (s[i] === 'c') {\n      temp = s[i] + s[j];\n      s[i] = 'C';\n      s[j] = 'C';\n      j--;\n    } else {\n      temp = s[i] + s[j];\n      s[i] = s[j];\n      s[j] = s[i];\n      i--;\n      j--;\n    }\n  }\n  return temp;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString2 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString3 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString4 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString5 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString6 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString7 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString8 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString9 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString10 = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString11 = (md5) => {\n  if", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing melodious notes in a particular ASCII format. \n  Your task is to parse this string and return list of integers equate to how many beats does each \n  not ending. \n\n  Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing melodious notes in a particular ASCII format. \n  Your task is to parse this string and return list of integers equate to how many beats does each \n  not ending. \n\n  Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing melodious notes in a particular ASCII format. \n  Your task is to parse this string and return list of integers equate to how many beats does each \n  not ending. \n\n  Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing melodious notes in a particular ASCII format. \n  Your task is to parse this string and return list of integers equate to how many beats does each \n  not ending. \n\n  Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing melodious notes in a particular ASCII format. \n  Your task is to parse this string and return list of integers equate to how many beats does each \n  not ending. \n\n  Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === substring[0]) {\n      count++;\n      index++;\n      while (index < string.length && string[index] === substring[0]) {\n        count++;\n        index++;\n      }\n    }\n    index++;\n  }\n  return count;\n};\n\n/*\n  Given a string, find the length of the longest substring without repeating characters.\n  >>> longestSubstring('abcabcbb')\n  'abc'\n  >>> longestSubstring('bbbbb')\n  'b'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring('pwwkew')\n  'wke'\n  >>> longestSubstring", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  let numbersArraySorted = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n  revert the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersReverse = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  let numbersArraySorted = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n  revert the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  let numbersArraySorted = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n  revert the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverse('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  let numbersArraySorted = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n  revert the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  let numbersArraySorted = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n  revert the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverseReverse('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  let numbersArraySorted = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers from' zero' to' nine'. \n  revert the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverseReverse('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverseReverseReverseReverse = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  let numbersArraySorted = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    ", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncate = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncate = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncate = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncate = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncate = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncate = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number with the decimal part removed.\n  >>> truncateNumber(3.5)\n  3\n  */", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const closestIndex = [0, 1];\n  let min = Math.min(numbers[0], numbers[1]);\n  let minIndex = [0, 1];\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.min(numbers[i], min);\n    if (current < min) {\n      min = current;\n      minIndex = [i, i];\n    }\n  }\n  for (let i = 2; i < numbers.length; i++) {\n    const current = Math.max(numbers[i], min);\n    if (current > min) {\n      min = current;\n      minIndex = [i, i];\n    }\n  }\n  return [min, minIndex];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const diff = max - min\n  const rescaled = []\n  for (let i = 0; i < numbers.length; i++) {\n    rescaled[i] = (numbers[i] - min) / diff\n  }\n  return rescaled\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = numbers[i] * numbers[i]\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList2 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList3 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList4 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList5 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList6 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList7 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList8 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList9 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList10 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList11 = (numbers) => {\n  const squares = []\n  for (let i = 0; i < numbers.length; i++) {\n    squares[i] = Math.pow(numbers[i], 2)\n  }\n  return squares\n}\n\n/*\n  Given a list of numbers, return the list of the squares of the numbers\n  >>> squareList([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareList12 = (numbers", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for float\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for string\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for boolean\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dict\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for list\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v!== null);\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  * Filter given list of any python values only for object\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for array\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAll = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNone = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmpty = (values) => {\n  return values.filter(v => v === undefined || v === null || v === '');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrNone = (values) => {\n  return values.filter(v => v === undefined || v === null || v === '');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrUndefined = (values) => {\n  return values.filter(v => v === undefined || v === null || v === '');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrUndefinedOrNone = (values) => {\n  return values.filter(v => v === undefined || v === null || v === '');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrUndefinedOrNoneOrNull = (values) => {\n  return values.filter(v => v === undefined || v === null || v === '' || v === null);\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrUndefinedOrNoneOrNullOrEmpty = (values) => {\n  return values.filter(v => v === undefined || v === null || v === '' || v === null || v === '');\n};\n\n/**\n  * Filter given list of any python values only for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyOrUndefinedOrNoneOrNullOrEmptyOrBlank = (values) => {\n  return values.filter(v => v === undefined || v === null || v === '' || v === null || v === '' || v === '');\n};\n\n/**\n  * Filter given list of any python values only for function\n  ", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n  * Return the index of the first occurrence of a substring in a string\n  *\n  * @param {string} string\n  * @param {string} substring\n  * @returns {number}\n  * @example\n  * strindex('')\n  * // => -1\n  * strindex('abc')\n  * // => 0\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'c')\n  * // => 2\n  * strindex('abc', 'd')\n  * // => -1\n  * strindex('abc', 'ab')\n  * // => -1\n  * strindex('abc', 'bc')\n  * // => 0\n  * strindex('abc', 'ac')\n  * // => -1\n  * strindex('abc', 'abc')\n  * // => 0\n  * strindex('abc', 'cba')\n  * // => 1\n  * strindex('abc', 'cba', 2)\n  * // => 3\n  * strindex('abc', 'cba', 3)\n  * // => -1\n  * strindex('abc', 'cba', 4)\n  * // => -1\n  * strindex('abc', 'cba', 5)\n  * // => -1\n  * strindex('abc', 'cba', 6)\n  * // => -1\n  * strindex('abc', 'cba', 7)\n  * // => -1\n  * strindex('abc', 'cba', 8)\n  * // => -1\n  * strindex('abc', 'cba', 9)\n  * // => -1\n  * strindex('abc', 'cba', 10)\n  * // => -1\n  * strindex('abc', 'cba', 11)\n  * // => -1\n  * strindex('abc', 'cba', 12)\n  * // => -1\n  * strindex('abc', 'cba', 13)\n  * // => -1\n  * strindex('abc', 'cba', 14)\n  * // => -1\n  * strindex('abc', 'cba', 15)\n  * // => -1\n  * strindex('abc', 'cba', 16)\n  * // => -1\n  * strindex('abc', 'cba', 17)\n  * // => -1\n  * strindex('abc', 'cba', 18)\n  * // => -1\n  * strindex('abc', 'cba', 19)\n  * // => -1\n  * strindex('abc', 'cba', 20)\n  * // => -1\n  * strindex('abc', 'cba', 21)\n  * // => -1\n  * strindex('abc', 'cba', 22)\n  * // => -1\n  * strindex('abc', 'cba', 23)\n  * // => -1\n  * strindex('abc', 'cba', 24)\n  * // => -1\n  * strindex('abc', 'cba', 25)\n  * // => -1\n  * strindex('abc', 'cba', 26)\n  * // => -1\n  * strindex('abc', 'cba', 27)\n  * // => -1\n  * strindex('abc', 'cba', 28)\n  * // => -1\n  * strindex('abc', 'cba', 29)\n  * // => -1\n  * strindex('abc', 'cba', 30)\n  * // => -1\n  * strindex('abc', 'cba', 31)\n  * // => -1\n  * strindex('abc', 'cba', 32)\n  * // => -1\n  * strindex('abc', 'cba', 33)\n  * // => -1\n  * strindex('abc', 'cba', 34)\n  * // => -1\n  * strindex('abc', 'cba', 35)\n  * // => -1\n  * strindex('abc', 'cba', 36)\n  * // => -1\n  * strindex('abc', 'cba', 37)\n  * // => -1\n  * strindex('abc', 'cba', 38)\n  * // => -1\n  * strindex('abc', 'cba', 39)\n  * // => -1\n  * strindex('abc', 'cba', 40)\n  * // => -1\n  * strindex('abc', 'cba', 41)\n  * // => -1\n  * strindex('abc', 'cba', 42)\n  * // => -1\n  * strindex('abc', 'cba', 43)\n  * // => -1\n  * strindex('abc', 'cba', 44)\n  * // => -1\n  * strindex('abc', 'cba', 45)\n  * // => -1\n  * strindex('abc', 'cba', 46)\n  * // => -1\n  * strindex('abc', 'cba', 47)\n  * // => -1\n  * strindex('abc', 'cba', 48)\n  * // => -1\n  * strindex('abc', 'cba', 49)\n  * // => -1\n  * strindex('abc', 'cba', 50)\n  * // => -1\n  * strindex('abc', 'cba', 51)\n  * // => -1\n  * strindex('abc', 'cba', 52)\n  * // => -1\n  * strindex('abc', 'cba', 53)\n  * // => -1\n  * strindex('abc', 'cba', 54)\n  * // => -1\n  * strindex('abc', 'cba', 55)\n  * // => -1\n  * strindex('abc', 'cba', 56)\n  * // => -1\n  * strindex('abc', 'cba', 57)\n  * // => -1\n  * strindex('abc', 'cba', 58)\n  * // => -1\n  * strindex('abc', 'cba', 59)\n  * // => -1\n  * strindex('abc', 'cba', 60)\n  * // => -1\n  * strindex('abc", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOfFactors(8)\n  6\n  >>> sumOfFactors(25)\n  25\n  >>> sumOfFactors(70)\n  70\n  */\nconst sumOfFactors = (n) => {\n  let factors = factorize(n);\n  let sum = 0;\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i];\n  }\n  return sum;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOfFactors2(8)\n  6\n  >>> sumOfFactors2(25)\n  25\n  >>> sumOfFactors2(70)\n  70\n  */\nconst sumOfFactors2 = (n) => {\n  let factors = factorize(n);\n  let sum = 0;\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i] * i;\n  }\n  return sum;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOfFactors3(8)\n  6\n  >>> sumOfFactors3(25)\n  25\n  >>> sumOfFactors3(70)\n  70\n  */\nconst sumOfFactors3 = (n) => {\n  let factors = factorize(n);\n  let sum = 0;\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i] * (i + 1);\n  }\n  return sum;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOfFactors4(8)\n  6\n  >>> sumOfFactors4(25)\n  25\n  >>> sumOfFactors4(70)\n  70\n  */\nconst sumOfFactors4 = (n) => {\n  let factors = factorize(n);\n  let sum = 0;\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i] * (i + 1) * (i + 2);\n  }\n  return sum;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOfFactors5(8)\n  6\n  >>> sumOfFactors5(25)\n  25\n  >>> sumOfFactors5(70)\n  70\n  */\nconst sumOfFactors5 = (n) => {\n  let factors = factorize(n);\n  let sum = 0;\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i] * (i + 1) * (i + 2) * (i + 3);\n  }\n  return sum;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOfFactors6(8)\n  6\n  >>> sumOfFactors6(25)\n  25\n  >>> sumOfFactors6(70)\n  70\n  */\nconst sumOfFactors6 = (n) => {\n  let factors = factorize(n);\n  let sum = 0;\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4);\n  }\n  return sum;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOfFactors7(8)\n  6\n  >>> sumOfFactors7(25)\n  25\n  >>> sumOfFactors7(70)\n  70\n  */\nconst sumOfFactors7 = (n) => {\n  let factors = factorize(n);\n  let sum = 0;\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5);\n  }\n  return sum;\n};\n\n/* Return the sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> sumOf", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all lowercase characters converted to uppercase.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hello')\n  'hELLO'\n  */\nconst swapCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('HELLO')\n  'hELLO'\n  */\nconst swapCase2 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase3 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('HELLO')\n  'hELLO'\n  */\nconst swapCase4 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase5 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase6 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase7 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase8 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase9 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase10 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase11 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase12 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lowercase characters converted to uppercase.\n  >>> swapCase('hELLO')\n  'hELLO'\n  */\nconst swapCase13 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all uppercase characters converted to lowercase and all lower", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOut = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')\n  []\n  >>> filterOut(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterOutByPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut([], 'a')", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const balance = 0;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n  } = operations;\n  const {\n    deposit,\n    withdraw\n", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6,", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i + 1\n    }\n    i += 2\n  }\n  return n\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  >>> divisors(13441)\n  44\n  >>> divisors(61)\n  2\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  3\n  >>> divisors(101)\n  20\n  >>> divisors(11)\n  2\n  ", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const poly = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  };\n  const recurrence = (x) => {\n    return poly(x) === 0? x : recurrence(x + 1);\n  };\n  const recurrenceZero = recurrence(0);\n  const recurrenceOne = recurrence(1);\n  const recurrenceTwo = recurrence(2);\n  const recurrenceThree = recurrence(3);\n  const recurrenceFour = recurrence(4);\n  const recurrenceFive = recurrence(5);\n  const recurrenceSix = recurrence(6);\n  const recurrenceSeven = recurrence(7);\n  const recurrenceEight = recurrence(8);\n  const recurrenceNine = recurrence(9);\n  const recurrenceTen = recurrence(10);\n  const recurrenceEleven = recurrence(11);\n  const recurrenceTwelve = recurrence(12);\n  const recurrenceThirteen = recurrence(13);\n  const recurrenceFourteen = recurrence(14);\n  const recurrenceFifteen = recurrence(15);\n  const recurrenceSixteen = recurrence(16);\n  const recurrenceSeventeen = recurrence(17);\n  const recurrenceEighteen = recurrence(18);\n  const recurrenceNineteen = recurrence(19);\n  const recurrenceTwenty = recurrence(20);\n  const recurrenceTwentyOne = recurrence(21);\n  const recurrenceTwentyTwo = recurrence(22);\n  const recurrenceTwentyThree = recurrence(23);\n  const recurrenceTwentyFour = recurrence(24);\n  const recurrenceTwentyFive = recurrence(25);\n  const recurrenceTwentySix = recurrence(26);\n  const recurrenceTwentySeven = recurrence(27);\n  const recurrenceTwentyEight = recurrence(28);\n  const recurrenceTwentyNine = recurrence(29);\n  const recurrenceThirty = recurrence(30);\n  const recurrenceThirtyOne = recurrence(31);\n  const recurrenceThirtyTwo = recurrence(32);\n  const recurrenceThirtyThree = recurrence(33);\n  const recurrenceThirtyFour = recurrence(34);\n  const recurrenceThirtyFive = recurrence(35);\n  const recurrenceThirtySix = recurrence(36);\n  const recurrenceThirtySeven = recurrence(37);\n  const recurrenceThirtyEight = recurrence(38);\n  const recurrenceThirtyNine = recurrence(39);\n  const recurrenceFourty = recurrence(40);\n  const recurrenceFourtyOne = recurrence(41);\n  const recurrenceFourtyTwo = recurrence(42);\n  const recurrenceFourtyThree = recurrence(43);\n  const recurrenceFourtyFour = recurrence(44);\n  const recurrenceFourtyFive = recurrence(45);\n  const recurrenceFourtySix = recurrence(46);\n  const recurrenceFourtySeven = recurrence(47);\n  const recurrenceFourtyEight = recurrence(48);\n  const recurrenceFourtyNine = recurrence(49);\n  const recurrenceFifty = recurrence(50);\n  const recurrenceFiftyOne = recurrence(51);\n  const recurrenceFiftyTwo = recurrence(52);\n  const recurrenceFiftyThree = recurrence(53);\n  const recurrenceFiftyFour = recurrence(54);\n  const recurrenceFiftyFive = recurrence(55);\n  const recurrenceFiftySix = recurrence(56);\n  const recurrenceFiftySeven = recurrence(57);\n  const recurrenceFiftyEight = recurrence(58);\n  const recurrenceFiftyNine = recurrence(59);\n  const recurrenceSixty = recurrence(60);\n  const recurrenceSixtyOne = recurrence(61);\n  const recurrenceSixtyTwo = recurrence(62);\n  const recurrenceSixtyThree = recurrence(63);\n  const recurrenceSixtyFour = recurrence(64);\n  const recurrenceSixtyFive = recurrence(65);\n  const recurrenceSixtySix = recurrence(66);\n  const recurrenceSixtySeven = recurrence(67);\n  const recurrenceSixtyEight = recurrence(68);\n  const recurrenceSixtyNine = recurrence(69);\n  const recurrenceSeventy = recurrence(70);\n  const recurrenceSeventyOne = recurrence(71);\n  const recurrenceSeventyTwo = recurrence(72);\n  const recurrenceSeventyThree = recurrence(73);\n  const recurrenceSeventyFour = recurrence(74);\n  const recurrenceSeventyFive = recurrence(75);\n  const recurrenceSeventySix = recurrence(76);\n  const recurrenceSeventySeven = recurrence(77);\n  const recurrenceSeventyEight = recurrence(78);\n  const recurrenceSeventyNine = recurrence(79);\n  const recurrenceEighty = recurrence(80);\n  const recurrenceEightyOne = recurrence(81);\n  const recurrenceEightyTwo = recurrence(82);\n  const recurrenceEightyThree = recurrence(83);\n  const recurrenceEightyFour = recurrence(", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  const sortedLength = l.length;\n  for (let i = 0; i < sortedLength; i++) {\n    const value = l[i];\n    const index = i;\n    const divisibleByThree = index % 3 === 0;\n    if (divisibleByThree) {\n      sorted.push(value);\n    }\n  }\n  return sorted;\n};\n\nmodule.exports = sortThird;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => {\n    return a > b? a : b;\n  });\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => {\n    return a + b;\n  });\n};\n\n/*Return the product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst product = (l) => {\n  return l.reduce((a, b) => {\n    return a * b;\n  });\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode2 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode3 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode4 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode5 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode6 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode7 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode8 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const count = sorted.filter((x) => x === sorted[half]).length;\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    const divisor = Math.floor(i / divisors[0])\n    if (divisor === 3) {\n      result.push(3)\n    } else if (divisor === 5) {\n      result.push(5)\n    } else if (divisor === 7) {\n      result.push(7)\n    } else if (divisor === 11) {\n      result.push(11)\n    } else if (divisor === 13) {\n      result.push(13)\n    }\n  }\n  return result\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n    l3[i + 1] = l[i + 1];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n    l3[i + 1] = l[i + 1];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n    l3[i + 1] = l[i + 1];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n    l3[i + 1] = l[i + 1];\n  }\n  return [l2, l3];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3,", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (const group of s.split('')) { \n     if (group.length = = 3) \n       groups.push(group.slice(1) + group[0]);\n     else \n       groups.push(group);\n   } \n   return groups.join('');\n}\n*/\n\nconst encodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < (s.length + 2) / 3; i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\nconst decodeCyclic = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst encode = (s) => {\n  const groups = [];\n  for (let i = 0; i < (s.length + 2) / 3; i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\nconst decode = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_decode = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic_decode = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_decode_cyclic = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic_decode_cyclic = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_decode_cyclic_decode = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic_decode_cyclic_decode = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_decode_cyclic_decode_cyclic = (s) => {\n  const groups = [];\n  for (const group of s.split('')) {\n    if (group.length === 3) {\n      groups.push(group.slice(1) + group[0]);\n    } else {\n      groups.push(group);\n    }\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 2 === 0) {\n      prime = prime + 2\n    }\n  }\n  return fib\n}\n\nexport default primeFib\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation10 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation11 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation12 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation13 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation14 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation15 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation16 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation17 = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result.push([l[i], l[j], l[k]]);\n        }\n      }\n    }\n  }\n  return result.length === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   let {x: x1, y: y1, vx: vx1, vy: vy1} = car1\n   let {x: x2, y: y2, vx: vx2, vy: vy2} = car2\n   let {x: x3, y: y3, vx: vx3, vy: vy3} = car3\n   let {x: x4, y: y4, vx: vx4, vy: vy4} = car4\n   let {x: x5, y: y5, vx: vx5, vy: vy5} = car5\n   let {x: x6, y: y6, vx: vx6, vy: vy6} = car6\n   let {x: x7, y: y7, vx: vx7, vy: vy7} = car7\n   let {x: x8, y: y8, vx: vx8, vy: vy8} = car8\n   let {x: x9, y: y9, vx: vx9, vy: vy9} = car9\n   let {x: x10, y: y10, vx: vx10, vy: vy10} = car10\n   let {x: x11, y: y11, vx: vx11, vy: vy11} = car11\n   let {x: x12, y: y12, vx: vx12, vy: vy12} = car12\n   let {x: x13, y: y13, vx: vx13, vy: vy13} = car13\n   let {x: x14, y: y14, vx: vx14, vy: vy14} = car14\n   let {x: x15, y: y15, vx: vx15, vy: vy15} = car15\n   let {x: x16, y: y16, vx: vx16, vy: vy16} = car16\n   let {x: x17, y: y17, vx: vx17, vy: vy17} = car17\n   let {x: x18, y: y18, vx: vx18, vy: vy18} = car18\n   let {x: x19, y: y19, vx: vx19, vy: vy19} = car19\n   let {x: x20, y: y20, vx: vx20, vy: vy20} = car20\n   let {x: x21, y: y21, vx: vx21, vy: vy21} = car21\n   let {x: x22, y: y22, vx: vx22, vy: vy22} = car22\n   let {x: x23, y: y23, vx: vx23, vy: vy23} = car23\n   let {x: x24, y: y24, vx: vx24, vy: vy24} = car24\n   let {x: x25, y: y25, vx: vx25, vy: vy25} = car25\n   let {x: x26, y: y26, vx: vx26, vy: vy26} = car26\n   let {x: x27, y: y27, vx: vx27, vy: vy27} = car27\n   let {x: x28, y: y28, vx: vx28, vy: vy28} = car28\n   let {x: x29, y: y29, vx: vx29, vy: vy29} = car29\n   let {x: x30, y: y30, vx: vx30, vy: vy30} = car30\n   let {x: x31, y: y31, vx: vx31, vy: vy31} = car31\n   let {x: x32, y: y32, vx: vx32, vy: vy32} = car32\n   let {x: x33, y: y33, vx: vx33, vy: vy33} = car33\n   let {x: x34, y: y34, vx: vx34, vy: vy34} = car34\n   let {x: x35, y: y35, vx: vx35, vy: vy35} = car35\n   let {x: x36, y: y36, vx: vx36, vy: vy36} = car36\n   let {x: x37, y: y37, vx: vx37, vy: vy37} = car37\n   let {x: x38, y: y38, vx: vx38, vy: vy38} = car38\n   let {x: x39, y: y39, vx: vx39, vy: vy39} = car39\n   let {x: x40, y: y40, vx: vx40, vy: vy40} = car40\n   let {x: x41, y: y41, vx: vx41, vy: vy41} = car41\n   let {x: x42, y: y42, vx: vx42, vy: vy42} = car42\n   let {x: x43, y: y43, vx: vx43, vy: vy43} = car43\n   let {x: x44, y: y44, vx: vx44, vy: vy44} = car44\n   let", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10,", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>>", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase3 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase4 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase5 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase6 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase7 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase8 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase9 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase10 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase11 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase12 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase13 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase14 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase15 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase16 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase17 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase18 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase19 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase20 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase21 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst changeBase22 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < half) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let textLength = text.length;\n    let half", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const nn = n % p;\n  if (nn === 0) return 1;\n  return nn;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 4)\n  3\n  >>> gcd", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n */\n\nfunction encodeShift(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction decodeShift(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction encodeShift2(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction decodeShift2(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction encodeShift3(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction decodeShift3(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction encodeShift4(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction decodeShift4(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction encodeShift5(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction decodeShift5(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction encodeShift6(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction decodeShift6(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction encodeShift7(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction decodeShift7(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).join(\" \");\n}\n\nfunction encodeShift8(s) {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(((ch.charCodeAt(0) - \" a\".charCodeAt(0)) % 26) + \" a\".charCodeAt(0));\n  }).", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation is a function that takes string and returns drawstring without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', '?', '!', ';', ':', '-', '_', '\\'', '\"', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndBelow = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x < t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndAbove = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndBetween = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndBetweenAndAbove = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndBetweenAndBelow = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x < t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndBetweenAndBetween = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t2 && x < t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndBetweenAndBetweenAndAbove = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t2 && x < t2 && x > t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThresholdsAndBetweenAndBetweenAndBelow = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2 && x > t1 && x < t2 && x > t1 && x < t2 && x < t2 && x > t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>>", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0;\n    while (i < s0.length && i < s1.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n    let i = 0;\n    while (i < s0.length && i < s1.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords2 = (s0, s1) => {\n    let i = 0;\n    while (i < s0.length && i < s1.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords3 = (s0, s1) => {\n    let i = 0;\n    while (i < s0.length && i < s1.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords4 = (s0, s1) => {\n    let i = 0;\n    while (i < s0.length && i < s1.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords5 = (s0, s1) => {\n    let i = 0;\n    while (i < s0.length && i < s1.length) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords6 = (s0, s1) => {\n    let i = 0;\n    while (i < s0", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib2(n - 1) + fib2(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib3(n - 1) + fib3(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib4(n - 1) + fib4(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib5(n - 1) + fib5(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib6(n - 1) + fib6(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib7(n - 1) + fib7(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib8(n - 1) + fib8(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib9(n - 1) + fib9(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib10(n - 1) + fib10(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib11(n - 1) + fib11(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib12(n - 1) + fib12(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib13(n - 1) + fib13(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) {\n    return 1;\n  }", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === \"<\") {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<\")\n  0\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sortedL1 = l1.sort();\n  const sortedL2 = l2.sort();\n  const intersection = sortedL1.filter(x => sortedL2.indexOf(x)!== -1);\n  return intersection.sort();\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor7 =", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_list = paren_string.split(' ')\n  const paren_list_len = paren_list.length\n  const paren_list_len_minus_1 = paren_list_len - 1\n  const paren_list_len_minus_2 = paren_list_len - 2\n  const paren_list_len_minus_3 = paren_list_len - 3\n  const paren_list_len_minus_4 = paren_list_len - 4\n  const paren_list_len_minus_5 = paren_list_len - 5\n  const paren_list_len_minus_6 = paren_list_len - 6\n  const paren_list_len_minus_7 = paren_list_len - 7\n  const paren_list_len_minus_8 = paren_list_len - 8\n  const paren_list_len_minus_9 = paren_list_len - 9\n  const paren_list_len_minus_10 = paren_list_len - 10\n  const paren_list_len_minus_11 = paren_list_len - 11\n  const paren_list_len_minus_12 = paren_list_len - 12\n  const paren_list_len_minus_13 = paren_list_len - 13\n  const paren_list_len_minus_14 = paren_list_len - 14\n  const paren_list_len_minus_15 = paren_list_len - 15\n  const paren_list_len_minus_16 = paren_list_len - 16\n  const paren_list_len_minus_17 = paren_list_len - 17\n  const paren_list_len_minus_18 = paren_list_len - 18\n  const paren_list_len_minus_19 = paren_list_len - 19\n  const paren_list_len_minus_20 = paren_list_len - 20\n  const paren_list_len_minus_21 = paren_list_len - 21\n  const paren_list_len_minus_22 = paren_list_len - 22\n  const paren_list_len_minus_23 = paren_list_len - 23\n  const paren_list_len_minus_24 = paren_list_len - 24\n  const paren_list_len_minus_25 = paren_list_len - 25\n  const paren_list_len_minus_26 = paren_list_len - 26\n  const paren_list_len_minus_27 = paren_list_len - 27\n  const paren_list_len_minus_28 = paren_list_len - 28\n  const paren_list_len_minus_29 = paren_list_len - 29\n  const paren_list_len_minus_30 = paren_list_len - 30\n  const paren_list_len_minus_31 = paren_list_len - 31\n  const paren_list_len_minus_32 = paren_list_len - 32\n  const paren_list_len_minus_33 = paren_list_len - 33\n  const paren_list_len_minus_34 = paren_list_len - 34\n  const paren_list_len_minus_35 = paren_list_len - 35\n  const paren_list_len_minus_36 = paren_list_len - 36\n  const paren_list_len_minus_37 = paren_list_len - 37\n  const paren_list_len_minus_38 = paren_list_len - 38\n  const paren_list_len_minus_39 = paren_list_len - 39\n  const paren_list_len_minus_40 = paren_list_len - 40\n  const paren_list_len_minus_41 = paren_list_len - 41\n  const paren_list_len_minus_42 = paren_list_len - 42\n  const paren_list_len_minus_43 = paren_list_len - 43\n  const paren_list_len_minus_44 = paren_list_len - 44\n  const paren_list_len_minus_45 = paren_list_len - 45\n  const paren_list_len_minus_46 = paren_list_len - 46\n  const paren_list_len_minus_47 = paren_list_len - 47\n  const paren_list_len_minus_48 = paren_list_len - 48\n  const paren_list_len_minus_49 = paren_list_len - 49\n  const paren_list_len_minus_50 = paren_list_len - 50\n  const paren_list_len_minus_51 = paren_list_len - 51\n  const paren_list_len_minus_52 = paren_list_len - 52\n  const paren_list_len_minus_53 = paren_list_len - 53\n  const paren_list_len_minus_54 = paren_list_len - 54\n  const paren_list_len_minus_55 = paren_list_len - 55\n  const paren_list_len_minus_56 = paren_list_len - 56\n  const paren_list_len_minus_57 = paren_list_len - 57\n  const paren_list_len_minus_58 = paren_list_len - 58\n  const paren_list_len_minus_59 = paren_list_len - 59\n  const paren_list_len_minus_60 = paren_list_len - 60\n  const paren_list_len_minus_61 = paren_list_len - 61\n  const paren_list_len_minus_62 = paren_list_len - 62\n  const paren_list_len_minus_63 = paren_list_len - 63\n  const paren", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(brackets[i])\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      if (stack[stack.length - 1] === \"(\") {\n        stack.pop()\n      } else {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  2\n  */\nconst countBrackets = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\" && str[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of closing brackets.\n\n  >>> countBrackets(\"(())\")\n  2\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  1\n  */\nconst countClosingBrackets = (str) => {\n  let count = 0\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (str[i] === \")\" && str[i + 1] === \"(\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  2\n  */\nconst countOpeningBrackets = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\" && str[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of closing brackets.\n\n  >>> countBrackets(\"(())\")\n  2\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  1\n  */\nconst countClosingBrackets = (str) => {\n  let count = 0\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (str[i] === \")\" && str[i + 1] === \"(\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"(())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  2\n  */\nconst countOpeningBrackets = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\" && str[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"(())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  2\n  */\nconst countOpeningBrackets = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\" && str[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"(())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  2\n  */\nconst countOpeningBrackets = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\" && str[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"(())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  2\n  */\nconst countOpeningBrackets = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\" && str[i + 1] === \")\") {\n      count++\n      i++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"(())\")\n  3\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  2\n  */\nconst countOpeningBrackets = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\" && str[i + 1] === \")\") {\n      count++\n      ", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    d.push(xs[i + 1] * d[i]);\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6])\n  [-1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7])\n  [-1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8])\n  [-1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [-1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [-1, -1, -1, -1", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\nconsole.log(vowelsCount(\"abcde\"))\nconsole.log(vowelsCount(\"ACEDY\"))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const numDigits = x.length\n  const shifted = x.slice()\n  const shiftedDigits = shifted.slice()\n  const shiftedDigitsLength = shiftedDigits.length\n  const shiftedDigitsLengthMinusOne = shiftedDigitsLength - 1\n  const shiftedDigitsLengthMinusShift = shiftedDigitsLength - shift\n  const shiftedDigitsLengthMinusShiftMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOneMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShiftMinusOne - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = shiftedDigitsLengthMinusShift - 1\n  const shiftedDigitsLengthMinusShiftMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\nconsole.log(digitSum(\"\"))\nconsole.log(digitSum(\"abAB\"))\nconsole.log(digitSum(\"abcCd\"))\nconsole.log(digitSum(\"helloE\"))\nconsole.log(digitSum(\"woArBld\"))\nconsole.log(digitSum(\"aAaaaXa\"))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let fruits = s.split(\" \")\n  let total = 0\n  for (fruit of fruits) {\n    fruit = parseInt(fruit)\n    total += fruit\n  }\n  return total - fruits.reduce((a, b) => a + b, 0)\n}\n\nfruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n*/\n\nconst fruitDistribution = (s, n) => {\n  let fruits = s.split(\" \")\n  let total = 0\n  for (fruit of fruits) {\n    fruit = parseInt(fruit)\n    total += fruit\n  }\n  return total - fruits.reduce((a, b) => a + b, 0)\n}\n\nfruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \nfruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \nfruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \nfruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let minValueIndex = -1;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n        minValue = arr[i];\n        minValueIndex = i;\n      }\n    }\n  }\n  if (minValue === Number.MAX_SAFE_INTEGER) {\n    return result;\n  }\n  result.push(minValue);\n  result.push(minValueIndex);\n  return result;\n};\n\nconsole.log(pluck([4,2,3]));\nconsole.log(pluck([1,2,3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > 0 && cur > max) {\n      max = cur;\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArray = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArrayWithCaseSensitive = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.toLowerCase().indexOf(substring.toLowerCase()) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArrayWithCaseInsensitive = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.toLowerCase().indexOf(substring.toLowerCase()) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArrayWithCaseSensitiveAndCaseInsensitive = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.toLowerCase().indexOf(substring.toLowerCase()) >= 0 && string.toLowerCase().indexOf(substring.toUpperCase()) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArrayWithCaseSensitiveAndCaseInsensitive = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.toLowerCase().indexOf(substring.toLowerCase()) >= 0 || string.toLowerCase().indexOf(substring.toUpperCase()) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArrayWithCaseSensitiveAndCaseInsensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.toLowerCase().indexOf(substring.toLowerCase()) >= 0 || string.toLowerCase().indexOf(substring.toUpperCase()) >= 0 || string.toLowerCase().indexOf(substring.toUpperCase()) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArrayWithCaseSensitiveAndCaseInsensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.toLowerCase().indexOf(substring.toLowerCase()) >= 0 || string.toLowerCase().indexOf(substring.toUpperCase()) >= 0 || string.toLowerCase().indexOf(substring.toUpperCase()) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain grant substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filterBySubstringInArrayWithCaseSensitiveAndCaseInsensitiveAndCaseSensitive = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.toLowerCase().indexOf(substring.toLowerCase()) >= 0 || string.toLowerCase().indexOf(substring.toUpperCase()) >= 0 || string.toLowerCase().indexOf(substring.toUpperCase()) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  sorted.unshift(min)\n  sorted.push(max)\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else if (a + c > b) {\n    return (Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b, 2)) / 2\n  } else if (b + c > a) {\n    return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length\n  const max = Math.pow(10, len)\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= max && sum % 2 === 0\n}\n\nconsole.log(willItFly([3, 2, 3], 9))\nconsole.log(willItFly([3, 2, 3], 5))\nconsole.log(willItFly([3, 2, 3], 1))\nconsole.log(willItFly([3], 5))\nconsole.log(willItFly([3], 1))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  let count = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] === arr[i - 1] && arr[i]!== arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch9 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch10 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch11 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = len1 < len2? len1 : len2\n  const match = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i])\n    }\n  }\n  return match\n}\n\nconst totalMatch12 = (lst1,", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719,", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a % 3 === 0) return iscube(a / 3);\n  return false;\n};\n\nconst iscube2 = (a) => {\n  if (a === 0) return true;\n  if (a % 5 === 0) return iscube2(a / 5);\n  return false;\n};\n\nconst iscube3 = (a) => {\n  if (a === 0) return true;\n  if (a % 7 === 0) return iscube3(a / 7);\n  return false;\n};\n\nconst iscube4 = (a) => {\n  if (a === 0) return true;\n  if (a % 11 === 0) return iscube4(a / 11);\n  return false;\n};\n\nconst iscube5 = (a) => {\n  if (a === 0) return true;\n  if (a % 13 === 0) return iscube5(a / 13);\n  return false;\n};\n\nconst iscube6 = (a) => {\n  if (a === 0) return true;\n  if (a % 17 === 0) return iscube6(a / 17);\n  return false;\n};\n\nconst iscube7 = (a) => {\n  if (a === 0) return true;\n  if (a % 19 === 0) return iscube7(a / 19);\n  return false;\n};\n\nconst iscube8 = (a) => {\n  if (a === 0) return true;\n  if (a % 23 === 0) return iscube8(a / 23);\n  return false;\n};\n\nconst iscube9 = (a) => {\n  if (a === 0) return true;\n  if (a % 29 === 0) return iscube9(a / 29);\n  return false;\n};\n\nconst iscube10 = (a) => {\n  if (a === 0) return true;\n  if (a % 31 === 0) return iscube10(a / 31);\n  return false;\n};\n\nconst iscube11 = (a) => {\n  if (a === 0) return true;\n  if (a % 37 === 0) return iscube11(a / 37);\n  return false;\n};\n\nconst iscube12 = (a) => {\n  if (a === 0) return true;\n  if (a % 41 === 0) return iscube12(a / 41);\n  return false;\n};\n\nconst iscube13 = (a) => {\n  if (a === 0) return true;\n  if (a % 43 === 0) return iscube13(a / 43);\n  return false;\n};\n\nconst iscube14 = (a) => {\n  if (a === 0) return true;\n  if (a % 47 === 0) return iscube14(a / 47);\n  return false;\n};\n\nconst iscube15 = (a) => {\n  if (a === 0) return true;\n  if (a % 51 === 0) return iscube15(a / 51);\n  return false;\n};\n\nconst iscube16 = (a) => {\n  if (a === 0) return true;\n  if (a % 53 === 0) return iscube16(a / 53);\n  return false;\n};\n\nconst iscube17 = (a) => {\n  if (a === 0) return true;\n  if (a % 59 === 0) return iscube17(a / 59);\n  return false;\n};\n\nconst iscube18 = (a) => {\n  if (a === 0) return true;\n  if (a % 61 === 0) return iscube18(a / 61);\n  return false;\n};\n\nconst iscube19 = (a) => {\n  if (a === 0) return true;\n  if (a % 67 === 0) return iscube19(a / 67);\n  return false;\n};\n\nconst iscube20 = (a) => {\n  if (a === 0) return true;\n  if (a % 71 === 0) return iscube20(a / 71);\n  return false;\n};\n\nconst iscube21 = (a) => {\n  if (a === 0) return true;\n  if (a % 73 === 0) return iscube21(a / 73);\n  return false;\n};\n\nconst iscube22 = (a) => {\n  if (a === 0) return true;\n  if (a % 79 === 0) return iscube22(a / 79);\n  return false;\n};\n\nconst iscube23 = (a) => {\n  if (a === 0) return true;\n  if (a % 81 === 0) return iscube23(a / 81);\n  return false;\n};\n\nconst iscube24 = (a) => {\n  if (a === 0) return true;\n  if (a % 87 === 0) return iscube24(a / 87);\n  return false;\n};\n\nconst iscube25 = (a) => {\n  if (a === 0) return true;\n  if (a % 89 === 0) return iscube25(a / 89);\n  return false;\n};\n\nconst iscube26 = (a) => {\n  if (a === 0) return true;\n  if (a % 97 === 0) return iscube26(a / 97);\n  return false;\n};\n\nconst iscube27 = (a) => {\n  if (a === 0) return true;\n  if (a % 101 === 0) return iscube27(a / 101);\n  return false;\n};\n\nconst iscube28 = (a) => {\n  if (a === 0) return true;\n  if (a % 103 === 0) return iscube28(a / 103);\n  return false;\n};\n\nconst iscube29 = (a) => {\n  if (a === 0) return true;\n  if (a % 107 === 0) return iscube29(a / 107);\n  return false;\n};\n\nconst iscube30", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const numArr = num.split(\"\");\n  const numArrLen = numArr.length;\n  const numArrLenMinusOne = numArrLen - 1;\n  const numArrLenMinusTwo = numArrLen - 2;\n  const numArrLenMinusThree = numArrLen - 3;\n  const numArrLenMinusFour = numArrLen - 4;\n  const numArrLenMinusFive = numArrLen - 5;\n  const numArrLenMinusSix = numArrLen - 6;\n  const numArrLenMinusSeven = numArrLen - 7;\n  const numArrLenMinusEight = numArrLen - 8;\n  const numArrLenMinusNine = numArrLen - 9;\n  const numArrLenMinusTen = numArrLen - 10;\n  const numArrLenMinusEleven = numArrLen - 11;\n  const numArrLenMinusTwelve = numArrLen - 12;\n  const numArrLenMinusThirteen = numArrLen - 13;\n  const numArrLenMinusFourteen = numArrLen - 14;\n  const numArrLenMinusFifteen = numArrLen - 15;\n  const numArrLenMinusSixteen = numArrLen - 16;\n  const numArrLenMinusSeventeen = numArrLen - 17;\n  const numArrLenMinusEighteen = numArrLen - 18;\n  const numArrLenMinusNineteen = numArrLen - 19;\n  const numArrLenMinusTwenty = numArrLen - 20;\n  const numArrLenMinusTwentyOne = numArrLen - 21;\n  const numArrLenMinusTwentyTwo = numArrLen - 22;\n  const numArrLenMinusTwentyThree = numArrLen - 23;\n  const numArrLenMinusTwentyFour = numArrLen - 24;\n  const numArrLenMinusTwentyFive = numArrLen - 25;\n  const numArrLenMinusTwentySix = numArrLen - 26;\n  const numArrLenMinusTwentySeven = numArrLen - 27;\n  const numArrLenMinusTwentyEight = numArrLen - 28;\n  const numArrLenMinusTwentyNine = numArrLen - 29;\n  const numArrLenMinusThirty = numArrLen - 30;\n  const numArrLenMinusThirtyOne = numArrLen - 31;\n  const numArrLenMinusThirtyTwo = numArrLen - 32;\n  const numArrLenMinusThirtyThree = numArrLen - 33;\n  const numArrLenMinusThirtyFour = numArrLen - 34;\n  const numArrLenMinusThirtyFive = numArrLen - 35;\n  const numArrLenMinusThirtySix = numArrLen - 36;\n  const numArrLenMinusThirtySeven = numArrLen - 37;\n  const numArrLenMinusThirtyEight = numArrLen - 38;\n  const numArrLenMinusThirtyNine = numArrLen - 39;\n  const numArrLenMinusForty = numArrLen - 40;\n  const numArrLenMinusFortyOne = numArrLen - 41;\n  const numArrLenMinusFortyTwo = numArrLen - 42;\n  const numArrLenMinusFortyThree = numArrLen - 43;\n  const numArrLenMinusFortyFour = numArrLen - 44;\n  const numArrLenMinusFortyFive = numArrLen - 45;\n  const numArrLenMinusFortySix = numArrLen - 46;\n  const numArrLenMinusFortySeven = numArrLen - 47;\n  const numArrLenMinusFortyEight = numArrLen - 48;\n  const numArrLenMinusFortyNine = numArrLen - 49;\n  const numArrLenMinusFifty = numArrLen - 50;\n  const numArrLenMinusFiftyOne = numArrLen - 51;\n  const numArrLenMinusFiftyTwo = numArrLen - 52;\n  const numArrLenMinusFiftyThree = numArrLen - 53;\n  const numArrLenMinusFiftyFour = numArrLen - 54;\n  const numArrLenMinusFiftyFive = numArrLen - 55;\n  const numArrLenMinusFiftySix = numArrLen - 56;\n  const numArrLenMinusFiftySeven = numArrLen - 57;\n  const numArrLenMinusFiftyEight = numArrLen - 58;\n  const numArrLenMinusFiftyNine = numArrLen - 59;\n  const numArrLenMinusSixty = numArrLen - 60;\n  const numArrLenMinusSixtyOne = numArrLen - 61;\n  const numArrLenMinusSixtyTwo = numArrLen - 62;\n  const numArrLenMin", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let number = decimal;\n  while (number > 0) {\n    binary = number % 2 + binary;\n    number = Math.floor(number / 2);\n  }\n  return binary.substring(0, binary.length - 1) + 'db';\n};\n\n/*\n  Given a string, this function will return the number in decimal form.\n  \n  Examples:\n  decimalToBinary(\"db1111db\")   # returns 15\n  decimalToBinary(\"db100000db\") # returns 32\n  */\nconst decimalToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binary.charAt(i) * Math.pow(2, binaryLength - i - 1);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, this function will return the number in binary form.\n  \n  Examples:\n  decimalToBinary(\"db1111db\")   # returnspassed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const intersection = numbers.reduce((acc, number) => acc & number, 0);\n  return (sum, intersection);\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let flag = true;\n  while (i < len) {\n    sum += s[i];\n    i++;\n  }\n  if (sum % 3 === 0) {\n    while (j < len) {\n      if (s[j] === s[j + 1]) {\n        j++;\n      } else {\n        flag = false;\n        break;\n      }\n    }\n    if (flag) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const average = gradesArray.reduce((a, b) => a + b) / gradesArray.length;\n  const averageArray = gradesArray.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return'speed of light';\n    }\n  });\n  return averageArray;\n};\n\nconst letterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const average = gradesArray.reduce((a, b) => a + b) / gradesArray.length;\n  const averageArray = gradesArray.map(grade => {\n    if (grade >= 4.0) {\n      return 'A';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A';\n    } else if (grade >= 3.0) {\n      return 'B';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B';\n    } else if (grade >= 2.0) {\n      return 'C';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C';\n    } else if (grade >= 1.0) {\n      return 'D';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D';\n    } else {\n      return 'E';\n    }\n  });\n  return averageArray;\n};\n\nconst letterGrade2 = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const average = gradesArray.reduce((a, b) => a + b) / gradesArray.length;\n  const averageArray = gradesArray.map(grade => {\n    if (grade >= 4.0) {\n      return 'A';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A';\n    } else if (grade >= 3.0) {\n      return 'B';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B';\n    } else if (grade >= 2.0) {\n      return 'C';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C';\n    } else if (grade >= 1.0) {\n      return 'D';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D';\n    } else {\n      return 'E';\n    }\n  });\n  return averageArray;\n};\n\nconst letterGrade3 = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const average = gradesArray.reduce((a, b) => a + b) / gradesArray.length;\n  const averageArray = gradesArray.map(grade => {\n    if (grade >= 4.0) {\n      return 'A';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A';\n    } else if (grade >= 3.0) {\n      return 'B';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B';\n    } else if (grade >= 2.0) {\n      return 'C';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C';\n    } else if (grade >= 1.0) {\n      return 'D';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const isPrime = (number) => {\n    if (number === 1) return false\n    if (number === 2) return true\n    if (number % 2 === 0) return false\n    for (let i = 3; i < number; i += 2) {\n      if (number % i === 0) return false\n    }\n    return true\n  }\n  const length = string.length\n  for (let i = 2; i < length; i++) {\n    if (!isPrime(i)) return false\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in the string\n  Examples\n  characters('Hello') == 5\n  characters('abcdcba') == 5\n  characters('kittens') == 5\n  characters('orange') == 4\n  */\nconst characters = (string) => {\n  return string.length\n}\n\n/*Write a function that takes a string and returns the number of\n   characters that are in", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n*/\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconsole.log(startsOneEnds(1))\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\nconsole.log(startsOneEnds(101))\nconsole.log(starts", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n  }\n  let result = '';\n  for (let i = 1; i <= N; i++) {\n    result += sum % 2? '1' : '0';\n    sum = sum / 2;\n  }\n  return result;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle2 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle3 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle4 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle5 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle6 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle7 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle8 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArrNew = []\n  let i = 0\n  let j = 0\n  while (i < sArrLen) {\n    if (sArr[i] ==='') {\n      sArrNew[j] =''\n      j++\n    } else {\n      sArrNew[j] = sArr[i]\n      j++\n    }\n    i++\n  }\n  return sArrNew.join('')\n}\n\nconst shuffle9 = (s) => {\n  const sArr = s.split('')\n  const sArrLen = sArr.length\n  const sArr", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[x] - b[x]);\n  return sorted.map(t => t.slice(x));\n};\n\nconst getRow = (", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = []\n  const len = array.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let temp = 0\n  let flag = 0\n  while (i < len) {\n    sum = array[i]\n    if (sum > 0) {\n      sorted[j] = sum\n      j++\n    }\n    i++\n  }\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_length = alphabet.length;\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let letter = 0;\n  let letter_length = 0;\n  let letter_index = 0;\n  let letter_index_2 = 0;\n  let letter_index_3 = 0;\n  let letter_index_4 = 0;\n  let letter_index_5 = 0;\n  let letter_index_6 = 0;\n  let letter_index_7 = 0;\n  let letter_index_8 = 0;\n  let letter_index_9 = 0;\n  let letter_index_10 = 0;\n  let letter_index_11 = 0;\n  let letter_index_12 = 0;\n  let letter_index_13 = 0;\n  let letter_index_14 = 0;\n  let letter_index_15 = 0;\n  let letter_index_16 = 0;\n  let letter_index_17 = 0;\n  let letter_index_18 = 0;\n  let letter_index_19 = 0;\n  let letter_index_20 = 0;\n  let letter_index_21 = 0;\n  let letter_index_22 = 0;\n  let letter_index_23 = 0;\n  let letter_index_24 = 0;\n  let letter_index_25 = 0;\n  let letter_index_26 = 0;\n  let letter_index_27 = 0;\n  let letter_index_28 = 0;\n  let letter_index_29 = 0;\n  let letter_index_30 = 0;\n  let letter_index_31 = 0;\n  let letter_index_32 = 0;\n  let letter_index_33 = 0;\n  let letter_index_34 = 0;\n  let letter_index_35 = 0;\n  let letter_index_36 = 0;\n  let letter_index_37 = 0;\n  let letter_index_38 = 0;\n  let letter_index_39 = 0;\n  let letter_index_40 = 0;\n  let letter_index_41 = 0;\n  let letter_index_42 = 0;\n  let letter_index_43 = 0;\n  let letter_index_44 = 0;\n  let letter_index_45 = 0;\n  let letter_index_46 = 0;\n  let letter_index_47 = 0;\n  let letter_index_48 = 0;\n  let letter_index_49 = 0;\n  let letter_index_50 = 0;\n  let letter_index_51 = 0;\n  let letter_index_52 = 0;\n  let letter_index_53 = 0;\n  let letter_index_54 = 0;\n  let letter_index_55 = 0;\n  let letter_index_56 = 0;\n  let letter_index_57 = 0;\n  let letter_index_58 = 0;\n  let letter_index_59 = 0;\n  let letter_index_60 = 0;\n  let letter_index_61 = 0;\n  let letter_index_62 = 0;\n  let letter_index_63 = 0;\n  let letter_index_64 = 0;\n  let letter_index_65 = 0;\n  let letter_index_66 = 0;\n  let letter_index_67 = 0;\n  let letter_index_68 = 0;\n  let letter_index_69 = 0;\n  let letter_index_70 = 0;\n  let letter_index_71 = 0;\n  let letter_index_72 = 0;\n  let letter_index_73 = 0;\n  let letter_index_74 = 0;\n  let letter_index_75 = 0;\n  let letter_index_76 = 0;\n  let letter_index_77 = 0;\n  let letter_index_78 = 0;\n  let letter_index_79 = 0;\n  let letter_index_80 = 0;\n  let letter_index_81 = 0;\n  let letter_index_82 = 0;\n  let letter_index_83 = 0;\n  let letter_index_84 = 0;\n  let letter_index_85 = 0;\n  let letter_index_86 = 0;\n  let letter_index_87 = 0;\n  let letter_index_88 = 0;\n  let letter_index_89 = 0;\n  let letter_index_90 = 0;\n  let letter_index_91 = 0;\n  let letter_index_92 = 0;\n  let letter_index_93 = 0;\n  let letter_index_94 = 0;\n  let letter_index_95 = 0;\n  let letter_index_96 = 0;\n  let letter_index_97 = 0;\n  let letter_index_98 = 0;\n  let letter_index_99 = 0;\n  let letter_index_100 = 0;\n  let letter_index_101 = 0;\n  let letter_index_102 = 0;\n  let letter_index_103 = 0;\n  let letter_index_104 = 0;\n  let letter_index_105 = 0;\n  let letter_index_106 = 0;\n  let letter_index_107 = 0;\n  let letter_index_108 = 0;\n  let letter_index_109 = 0;\n  let letter_index_110 = 0;\n  let letter_index_111 = 0;\n  let letter_index_112", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  let maxCount = 1;\n  let maxIndexCount = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxCount = 1;\n      maxIndexCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n      maxIndexCount++;\n    }\n  }\n  return [max, maxIndex, maxCount, maxIndexCount];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I \")) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boring sentences. A boring sentence is a sentence that starts with the \n   word \" I \". \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(\" \")\n  let count = 0\n  for (let i = 0; i < words.length; i++) {", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt2 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt3 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt4 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt5 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt6 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt7 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt8 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt9 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt10 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt11 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt12 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt13 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt14 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt15 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt16 = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst anyInt17 = (x,", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      encoded += letter;\n    } else {\n      encoded += letter.toUpperCase();\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      decoded += letter;\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst encodeMessage = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage2 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage2 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage3 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage3 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage4 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage4 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage5 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage5 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage6 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage6 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage7 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage7 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage8 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage8 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage9 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage9 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage10 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage10 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage11 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage11 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage12 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage12 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage13 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage13 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage14 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage14 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage15 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage15 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage16 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage16 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage17 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage17 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage18 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage18 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage19 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage19 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage20 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage20 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};\n\nconst encodeMessage21 = (message) => {\n  let encoded = encode(message);\n  return encoded;\n};\n\nconst decodeMessage21 = (message) => {\n  let decoded = decode(message);\n  return decoded;\n};", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const lstLength = lst.length\n  let max = 0\n  let maxIndex = 0\n  let sum = 0\n  for (let i = 0; i < lstLength; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n    sum += lst[i]\n  }\n  return sum\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      result = false\n    } else {\n      result = result && (dict[key].toLowerCase() === dict[key])\n    }\n  })\n  return result\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n   case, else return false. The routine should return false is the \n   give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoStrings = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      result = false\n    }\n  })\n  return result\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in upper \n   lawsuit, else return false. The routine should return false is the \n   give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst checkDictCaseNoStringsUpper = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      result = false\n    } else {\n      result = result && (dict[key].toUpperCase() === dict[key])\n    }\n  })\n  return result\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in upper \n   lawsuit, else return false. The routine should return false is the \n   give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst checkDictCaseNoStringsLower = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      result = false\n    } else {\n      result = result && (dict[key].toLowerCase() === dict[key])\n    }\n  })\n  return result\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in upper \n   lawsuit, else return false. The routine should return false is the \n   give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst checkDictCaseNoStringsUpperLower = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      result = false\n    } else {\n      result = result && (dict[key].toUpperCase() === dict[key])\n    }\n  })\n  return result\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in upper \n   lawsuit, else return false. The routine should return false is the \n   give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst checkDictCaseNoStringsLowerUpper = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      result = false\n    } else {\n      result = result && (dict[key].toLowerCase() ===", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(x => parseInt(x, 10)).filter(x => x > 0).join('');\n  let b_unit = b.toString().split('').map(x => parseInt(x, 10)).filter(x => x > 0).join('');\n  let intersection = a_unit.length < b_unit.length? a_unit : b_unit;\n  let intersection_digit = intersection.split('').map(x => parseInt(x, 10)).filter(x => x > 0).join('');\n  return intersection_digit;\n};\n\n/*\n  Complete the function that takes two strings and return \n  the intersection of their unit digits. \n  wear the input is constantly valid.\n  Examples:\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".\n  multiply(\"a\", \"b\") should return \"\".", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = num;\n  let diff = Math.abs(num);\n  let diffs = [];\n  for (let i = 1; i < 10; i++) {\n    diffs.push(Math.abs(num - i));\n  }\n  diffs.sort((a, b) => a - b);\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i] < diff) {\n      closest = i + 1;\n      break;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = num;\n  let diff = Math.abs(num);\n  let diffs = [];\n  for (let i = 1; i < 10; i++) {\n    diffs.push(Math.abs(num - i));\n  }\n  diffs.sort((a, b) => a - b);\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i] < diff) {\n      closest = i + 1;\n      break;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = num;\n  let diff = Math.abs(num);\n  let diffs = [];\n  for (let i = 1; i < 10; i++) {\n    diffs.push(Math.abs(num - i));\n  }\n  diffs.sort((a, b) => a - b);\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i] < diff) {\n      closest = i + 1;\n      break;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = num;\n  let diff = Math.abs(num);\n  let diffs = [];\n  for (let i = 1; i < 10; i++) {\n    diffs.push(Math.abs(num - i));\n  }\n  diffs.sort((a, b) => a - b);\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i] < diff) {\n      closest = i + 1;\n      break;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = num;\n  let diff = Math.abs(num);\n  let diffs = [];\n  for (let i = 1; i < 10; i++) {\n    diffs.push(Math.abs(num - i));\n  }\n  diffs.sort((a, b) => a - b);\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i] < diff) {\n      closest = i + 1;\n      break;\n    }\n  }\n  return closest;", "passed": 0}
