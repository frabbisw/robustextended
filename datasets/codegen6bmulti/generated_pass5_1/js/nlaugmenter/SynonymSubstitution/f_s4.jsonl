{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((a, b) => a + Math.abs(b - a), 0)\n  return diff < threshold * len\n}\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  >>> largestNumber([1, 2, 3])\n  3\n  >>> largestNumber([1, 2, 3, 4, 5])\n  5\n  >>> largestNumber([1, 2, 3, 4, 5, 6])\n  6\n  */\nconst largestNumber = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  return numbers[len - 1]\n}\n\n/*\n  Given a list of numbers, return the smallest number in the list.\n  >>> smallestNumber([1, 2, 3])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6])\n  1\n  */\nconst smallestNumber = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  return numbers[0]\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  */\nconst sum = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  return numbers.reduce((a, b) => a + b, 0)\n}\n\n/*\n  Given a list of numbers, return the average of the numbers in the list.\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([1, 2, 3, 4, 5, 6])\n  3.0\n  >>> average([1, 2, 3, 4, 5, 6, 7])\n  4.0\n  */\nconst average = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  return sum(numbers) / len\n}\n\n/*\n  Given a list of numbers, return the median of the numbers in the list.\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([1, 2, 3, 4, 5, 6])\n  3.0\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  4.0\n  */\nconst median = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const half = len / 2\n  const sorted = numbers.slice()\n  sorted.sort()\n  return sorted[half]\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([1, 2, 3, 4, 5, 6])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  4\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sorted = numbers.slice()\n  sorted.sort()\n  const mode = sorted[0]\n  const count = 1\n  for (let i = 1; i < len; i++) {\n    if (numbers[i]!== mode) {\n      count++\n      mode = sorted[i]\n    }\n  }\n  return mode\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  4\n  */\nconst mode2 = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sorted = numbers.slice()\n  sorted.sort()\n  const mode = sorted[0]\n  const count = 1\n  for (let i = 1; i < len; i++) {\n    if (numbers[i]!== mode) {\n      count++\n      mode = sorted[i]\n    }\n  }\n  return mode\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  4\n  */\nconst mode3 = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sorted = numbers.slice()\n  sorted.sort()\n  const mode = sorted[0]\n  const count = 1\n  for (let i = 1; i < len; i++) {\n    if (numbers[i]!== mode) {\n      count++\n      mode = sorted[i]\n    }\n  }\n  return mode\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4\n  */\nconst mode4 = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sorted = numbers.slice()\n  sorted.sort()\n  const mode = sorted[0]\n  const count = 1\n  for (let i = 1; i < len; i++) {\n    if (numbers[i]!== mode) {\n      count++\n      mode = sorted[i]\n    }\n  }\n  return mode\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  4\n  */\nconst mode5 = (numbers", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const paren_stack = [];\n  const paren_stack_index = 0;\n  const paren_stack_length = paren_list.length;\n  const paren_stack_index_max = paren_stack_length - 1;\n  const paren_stack_index_min = 0;\n  const paren_stack_index_increment = 1;\n  const paren_stack_index_increment_max = paren_stack_index_increment;\n  const paren_stack_index_increment_min = paren_stack_index_increment;\n  const paren_stack_index_increment_increment = paren_stack_index_increment_max;\n  const paren_stack_index_increment_increment_max = paren_stack_index_increment_increment;\n  const paren_stack_index_increment_increment_min = paren_stack_index_increment_increment;\n  const paren_stack_index_increment_increment_increment = paren_stack_index_increment_increment_max;\n  const paren_stack_index_increment_increment_increment_max = paren_stack_index_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_min = paren_stack_index_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_max = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_min = paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment;\n  const paren_stack_index_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_max = paren_stack_index_increment_incre", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPalindrome = prefix.length;\n  const longestPalindromeSuffix = suffix.length;\n  const longestPalindromePrefix = longestPalindrome - longestPalindromeSuffix;\n  const palindrome = prefix.slice(0, longestPalindromePrefix);\n  const palindromeSuffix = suffix.slice(0, longestPalindromeSuffix);\n  return palindrome + palindromeSuffix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPalindrome = prefix.length;\n  const longestPalindromeSuffix = suffix.length;\n  const longestPalindromePrefix = longestPalindrome - longestPalindromeSuffix;\n  const palindrome = prefix.slice(0, longestPalindromePrefix);\n  const palindromeSuffix = suffix.slice(0, longestPalindromeSuffix);\n  return palindrome + palindromeSuffix;\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPalindrome = prefix.length;\n  const longestPalindromeSuffix = suffix.length;\n  const longestPalindromePrefix = longestPalindrome - longestPalindromeSuffix;\n  const palindrome = prefix.slice(0, longestPalindromePrefix);\n  const palindromeSuffix = suffix.slice(0, longestPalindromeSuffix);\n  return palindrome + palindromeSuffix;\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPalindrome = prefix.length;\n  const longestPalindromeSuffix = suffix.length;\n  const longestPalindromePrefix = longestPalindrome - longestPalindromeSuffix;\n  const palindrome = prefix.slice(0, longestPalindromePrefix);\n  const palindromeSuffix = suffix.slice(0, longestPalindromeSuffix);\n  return palindrome + palindromeSuffix;\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPalindrome = prefix.length;\n  const longestPalindromeSuffix = suffix.length;\n  const longestPalindromePrefix = longestPalindrome - longestPalindromeSuffix;\n  const palindrome = prefix.slice(0, longestPalindromePrefix);\n  const palindromeSuffix = suffix.slice(0, longestPalindromeSuffix);\n  return palindrome + palindromeSuffix;\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile2 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile3 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile4 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile5 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile6 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile7 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile8 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile9 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile10 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile11 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile12 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile13 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile14 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile15 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile16 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile17 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile18 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile19 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile20 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile21 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile22 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile23 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile24 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile25 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile26 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n\nconst makeAPile27 = (n) => {\n  const levels = []\n  for (let i = 1; i <= n; i++) {\n    levels.push(i)\n  }\n  return levels\n}\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -1;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + y;\n  }\n  if (y % 2 === 0) {\n    return x - y;\n  }\n  return -", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2;\n  const roundedAvg = Math.round(avg);\n  const binaryAvg = roundedAvg.toString(2);\n  return binaryAvg;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let count = 0;\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (count === 0) {\n      result.push(digit);\n      count++;\n    } else if (digit!== result[count - 1]) {\n      result.push(digit);\n      count++;\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength10 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return names[index]\n  })\n  return reversedNames\n}\n\nconst byLength11 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const length = names.length\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    result.push(factorial);\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    if (i % 2 === 0) {\n      result.push(factorial);\n    } else {\n      result.push(factorial + result[i - 1]);\n    }\n  }\n  return result;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome2 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome3 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome4 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome5 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome6 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome7 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome8 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome9 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome10 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome11 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome12 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome13 = (n) => {\n  let even = 0, odd =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = arrLength - 1\n  while (i < j) {\n    const mid = Math.floor((i + j) / 2)\n    if (arr[mid] < arr[j]) {\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  if (arr[i] < arr[j]) {\n    return false\n  }\n  let k = i\n  while (k < j) {\n    const temp = arr[k]\n    arr[k] = arr[j]\n    arr[j] = temp\n    j--\n  }\n  return true\n}\n\nconst moveOneBallTest = () => {\n  const arr = [3, 5, 4, 1, 2]\n  console.log(moveOneBall(arr))\n}\n\nmoveOneBallTest()\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i])? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n  if (lst1Len!== lst2Len) {\n    return \"NO\"\n  }\n  for (let i = 0; i < lst1Len; i++) {\n    if (lst1[i] % 2!== 0 || lst2[i] % 2!== 0) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\nconst lst1 = [1, 2, 3, 4]\nconst lst2 = [1, 5, 3, 4]\n\nconsole.log(exchange(lst1, lst2))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letter, return a dictionary \n  of the letter with the most repetition and containing the equate count. \n  If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letter, return a dictionary \n  of the letter with the most repetition and containing the equate count. \n  If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letter, return a dictionary \n  of the letter with the most repetition and containing the equate count. \n  If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letter, return a dictionary \n  of the letter with the most repetition and containing the equate count. \n  If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letter, return a dictionary \n  of the letter with the most repetition and containing the equate count. \n  If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letter, return a dictionary \n  of the letter with the most repetition and containing the equate count. \n  If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const cLen = c.length\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else {\n      if (j === cLen - 1) {\n        result.push(s.slice(i))\n        i = len\n      } else {\n        j = 0\n      }\n    }\n  }\n  return [result, j === cLen - 1]\n}\n\nconst checkPalindrome = (s, c) => {\n  const [result, isPalindrome] = reverseDelete(s, c)\n  return [result, isPalindrome]\n}\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdedcba', 'ac'],\n  ['abcdedcba', 'acd'],\n  ['abcdedcba', 'acde'],\n  ['abcdedcba', 'acdef'],\n  ['abcdedcba', 'acdefg'],\n  ['abcdedcba', 'acdefgh'],\n  ['abcdedcba', 'acdefghi'],\n  ['abcdedcba', 'acdefghij'],\n  ['abcdedcba', 'acdefghijk'],\n  ['abcdedcba', 'acdefghijkl'],\n  ['abcdedcba', 'acdefghijklm'],\n  ['abcdedcba', 'acdefghijklmn'],\n  ['abcdedcba', 'acdefghijklmno'],\n  ['abcdedcba', 'acdefghijklmnop'],\n  ['abcdedcba', 'acdefghijklmnopq'],\n  ['abcdedcba', 'acdefghijklmnopqr'],\n  ['abcdedcba', 'acdefghijklmnopqrst'],\n  ['abcdedcba', 'acdefghijklmnopqrstu'],\n  ['abcdedcba', 'acdefghijklmnopqrstuv'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvw'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxz'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzw'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwv'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxz'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzw'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwv'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxw'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwv'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvxwv'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvxwvxw'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvxwvxwvx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvxwvxwvxwvx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvxwvxwvxwvxwvxwvx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvxwvxwvxwvxwvxwvxwvxwvxwvx'],\n  ['abcdedcba', 'acdefghijklmnopqrstuvwxzwvxzwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxwvxw", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = []\n  for (let i = 0; i < lst.length; i++) {\n    const l = lst[i].length\n    const n = lst[i].split('').reduce((acc, n, idx) => {\n      if (idx % 2 === 1) {\n        acc.push(n)\n      }\n      return acc\n    }, [])\n    odd.push(`the number of odd elements ${n.length} the str4ng ${n.join('')} of the ${n.length}put.`)\n  }\n  return odd\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let minStart = 0;\n  let minEnd = 0;\n  for (let i = 1; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = minStart; j <= i; j++) {\n      sum += nums[j];\n    }\n    if (sum < minSum) {\n      minSum = sum;\n      minStart = i;\n      minEnd = i + 1;\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        dp[i][j] = Math.min(dp[i][j], capacity);\n      }\n    }\n  }\n  return dp.reduce((a, b) => a + b, 0);\n};\n\nconst test = [\n  [\n    [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n    1\n  ],\n  [\n    [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]],\n    2\n  ],\n  [\n    [[0, 0, 0], [0, 0, 0]],\n    5\n  ],\n  [\n    [[0, 0, 0], [0, 0, 0]],\n    0\n  ]\n];\n\ntest.forEach(t => {\n  console.log(`Test case #${t[0].length}`);\n  console.log(`Expected: ${t[1]}`);\n  console.log(`Actual:   ${dp(t[0], t[1])}`);\n});\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = parseInt(a, 2);\n    const bInt = parseInt(b, 2);\n    const aDec = aInt.toString().split('').reverse().join('');\n    const bDec = bInt.toString().split('').reverse().join('');\n    const aDecInt = parseInt(aDec, 10);\n    const bDecInt = parseInt(bDec, 10);\n    if (aDecInt < bDecInt) {\n      return -1;\n    } else if (aDecInt > bDecInt) {\n      return 1;\n    } else {\n      return aInt - bInt;\n    }\n  });\n  return sorted;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const length = s.length\n  let i = 0\n  while (i < length) {\n    let j = i\n    while (j < length && s[j]!=='') {\n      j++\n    }\n    const word = s.slice(i, j)\n    if (word.length === n) {\n      words.push(word)\n    }\n    i = j + 1\n  }\n  return words\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to follow through \na routine that return the nth word from the end of the string.\nIf the string s is empty then the affair should return an empty string.\n  Examples:\n  getNthWord(\"Hello world\", 2) ==> \"world\"\n  getNthWord(\"Hello world\", 3) ==> \"world\"\n  getNthWord(\"Hello world\", 4) ==> \"world\"\n  getNthWord(\"Hello world\", 5) ==> \"\"\n  getNthWord(\"Hello world\", 6) ==> \"\"\n  getNthWord(\"Hello world\", 7) ==> \"\"\n  getNthWord(\"Hello world\", 8) ==> \"\"\n  getNthWord(\"Hello world\", 9) ==> \"\"\n  getNthWord(\"Hello world\", 10) ==> \"\"\n  getNthWord(\"Hello world\", 11) ==> \"\"\n  getNthWord(\"Hello world\", 12) ==> \"\"\n  getNthWord(\"Hello world\", 13) ==> \"\"\n  getNthWord(\"Hello world\", 14) ==> \"\"\n  getNthWord(\"Hello world\", 15) ==> \"\"\n  getNthWord(\"Hello world\", 16) ==> \"\"\n  getNthWord(\"Hello world\", 17) ==> \"\"\n  getNthWord(\"Hello world\", 18) ==> \"\"\n  getNthWord(\"Hello world\", 19) ==> \"\"\n  getNthWord(\"Hello world\", 20) ==> \"\"\n  getNthWord(\"Hello world\", 21) ==> \"\"\n  getNthWord(\"Hello world\", 22) ==> \"\"\n  getNthWord(\"Hello world\", 23) ==> \"\"\n  getNthWord(\"Hello world\", 24) ==> \"\"\n  getNthWord(\"Hello world\", 25) ==> \"\"\n  getNthWord(\"Hello world\", 26) ==> \"\"\n  getNthWord(\"Hello world\", 27) ==> \"\"\n  getNthWord(\"Hello world\", 28) ==> \"\"\n  getNthWord(\"Hello world\", 29) ==> \"\"\n  getNthWord(\"Hello world\", 30) ==> \"\"\n  getNthWord(\"Hello world\", 31) ==> \"\"\n  getNthWord(\"Hello world\", 32) ==> \"\"\n  getNthWord(\"Hello world\", 33) ==> \"\"\n  getNthWord(\"Hello world\", 34) ==> \"\"\n  getNthWord(\"Hello world\", 35) ==> \"\"\n  getNthWord(\"Hello world\", 36) ==> \"\"\n  getNthWord(\"Hello world\", 37) ==> \"\"\n  getNthWord(\"Hello world\", 38) ==> \"\"\n  getNthWord(\"Hello world\", 39) ==> \"\"\n  getNthWord(\"Hello world\", 40) ==> \"\"\n  getNthWord(\"Hello world\", 41) ==> \"\"\n  getNthWord(\"Hello world\", 42) ==> \"\"\n  getNthWord(\"Hello world\", 43) ==> \"\"\n  getNthWord(\"Hello world\", 44) ==> \"\"\n  getNthWord(\"Hello world\", 45) ==> \"\"\n  getNthWord(\"Hello world\", 46) ==> \"\"\n  getNthWord(\"Hello world\", 47) ==> \"\"\n  getNthWord(\"Hello world\", 48) ==> \"\"\n  getNthWord(\"Hello world\", 49) ==> \"\"\n  getNthWord(\"Hello world\", 50) ==> \"\"\n  getNthWord(\"Hello world\", 51) ==> \"\"\n  getNthWord(\"Hello world\", 52) ==> \"\"\n  getNthWord(\"Hello world\", 53) ==> \"\"\n  getNthWord(\"Hello world\", 54) ==> \"\"\n  getNthWord(\"Hello world\", 55) ==> \"\"\n  getNthWord(\"Hello world\", 56) ==> \"\"\n  getNthWord(\"Hello world\", 57) ==> \"\"\n  getNthWord(\"Hello world\", 58) ==> \"\"\n  getNthWord(\"Hello world\", 59) ==> \"\"\n  getNthWord(\"Hello world\", 60) ==> \"\"\n  getNthWord(\"Hello world\", 61) ==> \"\"\n  getNthWord(\"Hello world\", 62) ==> \"\"\n  getNthWord(\"Hello world\", 63) ==> \"\"\n  getNthWord(\"Hello world\", 64) ==> \"\"\n  getNthWord(\"Hello world\", 65) ==> \"\"\n  getNthWord(\"Hello world\", 66) ==> \"\"\n  getNthWord(\"Hello world\", 67) ==> \"\"\n  getNthWord(\"Hello world\", 68) ==> \"\"\n  getNthWord(\"Hello world\", 69) ==> \"\"\n  getNthWord(\"Hello world\", 70) ==> \"\"\n  getNthWord(\"Hello world\", 71) ==> \"\"\n  getNthWord(\"Hello world\", 72) ==> \"\"\n  getNthWord(\"Hello world\", 73) ==> \"\"\n  getNthWord(\"Hello world\", 74) ==> \"\"\n  getNthWord(\"Hello world\", 75) ==> \"\"\n  getNthWord(\"Hello world\", 76) ==> \"\"\n  getNthWord(\"Hello world\", 77) ==> \"\"\n  getNthWord(\"Hello world\", 78) ==> \"\"\n  getNthWord(\"Hello world\", 79) ==> \"\"\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const closestVowel = ''\n  const closestVowelIndex = 0\n  const closestVowelDistance = 0\n  const closestVowelDistanceIndex = 0\n  const closestVowelDistanceIndex2 = 0\n  const closestVowelDistanceIndex3 = 0\n  const closestVowelDistanceIndex4 = 0\n  const closestVowelDistanceIndex5 = 0\n  const closestVowelDistanceIndex6 = 0\n  const closestVowelDistanceIndex7 = 0\n  const closestVowelDistanceIndex8 = 0\n  const closestVowelDistanceIndex9 = 0\n  const closestVowelDistanceIndex10 = 0\n  const closestVowelDistanceIndex11 = 0\n  const closestVowelDistanceIndex12 = 0\n  const closestVowelDistanceIndex13 = 0\n  const closestVowelDistanceIndex14 = 0\n  const closestVowelDistanceIndex15 = 0\n  const closestVowelDistanceIndex16 = 0\n  const closestVowelDistanceIndex17 = 0\n  const closestVowelDistanceIndex18 = 0\n  const closestVowelDistanceIndex19 = 0\n  const closestVowelDistanceIndex20 = 0\n  const closestVowelDistanceIndex21 = 0\n  const closestVowelDistanceIndex22 = 0\n  const closestVowelDistanceIndex23 = 0\n  const closestVowelDistanceIndex24 = 0\n  const closestVowelDistanceIndex25 = 0\n  const closestVowelDistanceIndex26 = 0\n  const closestVowelDistanceIndex27 = 0\n  const closestVowelDistanceIndex28 = 0\n  const closestVowelDistanceIndex29 = 0\n  const closestVowelDistanceIndex30 = 0\n  const closestVowelDistanceIndex31 = 0\n  const closestVowelDistanceIndex32 = 0\n  const closestVowelDistanceIndex33 = 0\n  const closestVowelDistanceIndex34 = 0\n  const closestVowelDistanceIndex35 = 0\n  const closestVowelDistanceIndex36 = 0\n  const closestVowelDistanceIndex37 = 0\n  const closestVowelDistanceIndex38 = 0\n  const closestVowelDistanceIndex39 = 0\n  const closestVowelDistanceIndex40 = 0\n  const closestVowelDistanceIndex41 = 0\n  const closestVowelDistanceIndex42 = 0\n  const closestVowelDistanceIndex43 = 0\n  const closestVowelDistanceIndex44 = 0\n  const closestVowelDistanceIndex45 = 0\n  const closestVowelDistanceIndex46 = 0\n  const closestVowelDistanceIndex47 = 0\n  const closestVowelDistanceIndex48 = 0\n  const closestVowelDistanceIndex49 = 0\n  const closestVowelDistanceIndex50 = 0\n  const closestVowelDistanceIndex51 = 0\n  const closestVowelDistanceIndex52 = 0\n  const closestVowelDistanceIndex53 = 0\n  const closestVowelDistanceIndex54 = 0\n  const closestVowelDistanceIndex55 = 0\n  const closestVowelDistanceIndex56 = 0\n  const closestVowelDistanceIndex57 = 0\n  const closestVowelDistanceIndex58 = 0\n  const closestVowelDistanceIndex59 = 0\n  const closestVowelDistanceIndex60 = 0\n  const closestVowelDistanceIndex61 = 0\n  const closestVowelDistanceIndex62 = 0\n  const closestVowelDistanceIndex63 = 0\n  const closestVowelDistanceIndex64 = 0\n  const closestVowelDistanceIndex65 = 0\n  const closestVowelDistanceIndex66 = 0\n  const closestVowelDistanceIndex67 = 0\n  const closestVowelDistanceIndex68 = 0\n  const closestVowelDistanceIndex69 = 0\n  const closestVowelDistanceIndex70 = 0\n  const closestVowelDistanceIndex71 = 0\n  const closestVowelDistanceIndex72 = 0\n  const closestVowelDistanceIndex73 = 0\n  const closestVowelDistanceIndex74 = 0\n  const closestVowelDistanceIndex75 = 0\n  const closestVowelDistanceIndex76 = 0\n  const closestVowelDistanceIndex77 = 0\n  const closestVowelDistanceIndex78 = 0\n  const closestVowelDistanceIndex79 = 0\n  const closestVowelDistanceIndex80 = 0\n  const closestVowelDistanceIndex81 = 0\n  const closestVowelDistanceIndex82 = 0\n  const closestVowelDistanceIndex83 = 0\n  const closestVowelDistanceIndex84 = 0\n  const closestVowelDistanceIndex85 = 0\n  const closestVowelDistanceIndex86 = 0\n  const closestVowelDistanceIndex87 = 0\n  const closestVowelDistanceIndex88 = 0\n  const closestVowelDistanceIndex89 = 0\n  const closestVowelDistanceIndex90 = 0\n  const closestVowelDistanceIndex91 = 0\n  const closestVowelDistanceIndex92 = 0\n  const closestVowelDistanceIndex93 = 0\n  const closestVowelDistanceIndex94 = 0\n  const closestVowelDistanceIndex95 = 0\n  const closestVowelDistanceIndex96 = 0\n  const closestVowelDistanceIndex97 = 0\n  const closestVowelDistanceIndex98 = 0\n  const closestVowelDistanceIndex99 = 0\n  const closestVowelDistanceIndex100 = 0\n  const closestVowelDistanceIndex101 = 0\n  const closestVowelDistanceIndex102 = 0\n  const closestV", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'])\n  'a'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'])\n  'a'\n  >>> longest(['", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, curr) => Math.max(max, curr), -Infinity)\n  const dist = arr.reduce((dist, curr, i) => {\n    if (i === k) return dist + curr\n    return Math.max(dist, curr)\n  }, 0)\n  return dist === max? arr.slice(0, k) : arr.slice(0, dist)\n}\n\nconst test = [\n  [ [-3, -4, 5], 3 ],\n  [ [4, -4, 4], 2 ],\n  [ [-3, 2, 1, 2, -1, -2, 1], 1 ]\n]\n\ntest.forEach(t => {\n  const actual = maximum(t[0], t[1])\n  const expected = t[0].slice(0, t[1])\n  console.log(`${t[0].join(', ')} -> ${actual.join(', ')} -> ${expected.join(', ')}`)\n})\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const current = lst[i];\n    if (i % 2 === 0) {\n      result.push(current);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements2 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements3 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements4 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements5 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements6 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements7 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements8 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements9 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements10 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements11 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements12 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements13 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements14 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nconst addElements15 = (arr, k) => {\n  const result = [];\n  for", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n + 1 : n;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateChain = dateArray.slice(0, -1);\n  const month = dateArray[dateArray.length - 1];\n  const day = dateArray[dateArray.length - 2];\n  const year = dateArray[dateArray.length - 3];\n  const dayOfMonth = day.split('/');\n  const monthOfYear = month.split('/');\n  const dayOfYear = dayOfMonth[0].split('-');\n  const monthOfYear = monthOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[0].split('-');\n  const dayOfYear = dayOfYear[", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n  should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const letters = lowerCaseLetters.map(letter => {\n      const ord = letter.charCodeAt(0);\n      return ord >= 97 && ord <= 122? ord - 97 : ord - 65;\n    });\n    const lettersInOrder = letters.sort((a, b) => a - b);\n    return word.replace(/\\s+/g, '').replace(/\\W/g, '');\n  });\n};\n\nconst splitWords", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort();\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2) {\n    return \"NO\"\n  }\n  if (start2 > end1) {\n    return \"NO\"\n  }\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start\n  if (length < 2) {\n    return \"NO\"\n  }\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) return null;\n  const sign = (n) => n > 0? 1 : n < 0? -1 : 0;\n  const prod = (n) => n * sign(n);\n  const sum = (n) => n + sign(n);\n  const arrLength = arr.length;\n  let result = 0;\n  for (let i = 0; i < arrLength; i++) {\n    result += prod(arr[i]);\n  }\n  return sum(result);\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n * m).fill(0)\n  const visited = new Array(n * m).fill(false)\n  const dp_min = new Array(n * m).fill(0)\n  const dp_min_index = new Array(n * m).fill(0)\n  const dp_min_index_visited = new Array(n * m).fill(false)\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        dp[i * m + j] = 1\n        dp_min[i * m + j] = 1\n        dp_min_index[i * m + j] = i * m + j\n        dp_min_index_visited[i * m + j] = false\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        for (let k = 1; k < k; k++) {\n          const next_i = i + k\n          const next_j = j + k\n          if (next_i < n && next_j < m) {\n            const next_value = grid[next_i][next_j]\n            if (next_value === 0) {\n              dp[i * m + j] = Math.min(dp[i * m + j], dp[next_i * m + next_j] + 1)\n              dp_min[i * m + j] = Math.min(dp_min[i * m + j], dp[next_i * m + next_j] + 1)\n              dp_min_index[i * m + j] = Math.min(dp_min_index[i * m + j], dp_min_index[next_i * m + next_j] + 1)\n              dp_min_index_visited[i * m + j] = true\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const path = []\n  let index = dp_min_index\n  while (dp_min_index_visited[index] === false) {\n    path.push(grid[index])\n    index = dp_min_index_visited[index]\n  }\n\n  return path\n}\n\nconst grid = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n\nconsole.log(minPath(grid, 3))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a, b % a);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a greatest common divisor of two strings\n  >>> greatestCommonDivisor('a', 'b')\n  1\n  >>> greatestCommonDivisor('a', 'c')\n  1\n  >>> greatestCommonDivisor('a', 'a')\n  1\n  >>> greatestCommonDivisor('a', 'aa')\n  1\n  >>> greatestCommonDivisor('aa', 'a')\n  1\n  >>> greatestCommonDivisor('aa', 'aa')\n  1\n  >>> greatestCommonDivisor('aa', 'aaa')\n  1\n  >>> greatestCommonDivisor('aaa', 'aa')\n  1\n  >>> greatestCommonDivisor('aaa', 'aaa')\n  1\n  >>> greatestCommonDivisor('aaa', 'aaaa')\n  1\n  >>> greatestCommonDivisor('aaaa', 'aa')\n  1\n  >>> greatestCommonDivisor('aaaa', 'aaaa')\n  1\n  >>> greatestCommonDivisor('aaaa', 'aaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaa', 'aaaa')\n  1\n  >>> greatestCommonDivisor('aaaaa', 'aaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaa', 'aaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaa', 'aaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaa', 'aaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaa', 'aaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaa', 'aaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaa', 'aaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaa', 'aaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaa', 'aaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaa', 'aaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaa', 'aaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaa', 'aaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaa', 'aaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaa', 'aaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaa', 'aaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaa', 'aaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaa', 'aaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaa', 'aaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaa', 'aaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaa', 'aaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaa', 'aaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaa', 'aaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaa', 'aaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaa', 'aaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaa', 'aaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaa')\n  1\n  >>> greatestCommonDivisor('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  let current = 1\n  let next = 1\n  for (let i = 1; i <= n; i++) {\n    result.push(current)\n    current = next\n    next = current + next\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const isValid = (string) = > {\n    const isValidBracket = (string) = > {\n      const isValidBracket = (string) = > {\n        const isValidBracket = (string) = > {\n          const isValidBracket = (string) = > {\n            const isValidBracket = (string) = > {\n              const isValidBracket = (string) = > {\n                const isValidBracket = (string) = > {\n                  const isValidBracket = (string) = > {\n                    const isValidBracket = (string) = > {\n                      const isValidBracket = (string) = > {\n                        const isValidBracket = (string) = > {\n                          const isValidBracket = (string) = > {\n                            const isValidBracket = (string) = > {\n                              const isValidBracket = (string) = > {\n                                const isValidBracket = (string) = > {\n                                  const isValidBracket = (string) = > {\n                                    const isValidBracket = (string) = > {\n                                      const isValidBracket = (string) = > {\n                                        const isValidBracket = (string) = > {\n                                          const isValidBracket = (string) = > {\n                                            const isValidBracket = (string) = > {\n                                              const isValidBracket = (string) = > {\n                                                const isValidBracket = (string) = > {\n                                                  const isValidBracket = (string) = > {\n                                                    const isValidBracket = (string) = > {\n                                                      const isValidBracket = (string) = > {\n                                                        const isValidBracket = (string) = > {\n                                                          const isValidBracket = (string) = > {\n                                                           const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                                            const isValidBracket = (string) = > {\n                                    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem * elem, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(elem, 2), 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.pow(e", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar) &&!isBible(txt);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter7 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter8 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter9 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter10 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter11 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter12 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isALetter(lastChar);\n};\n\n/*\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately following it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately following it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately following it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately following it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[maxIndex]) {\n      max = i;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an component", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (a, b) => largest(a, smallest(a, b));\n  const largestSmallestIntegers = (lst) => lst.reduce((acc, x) => largestSmallest(acc[0], x), [null, null]);\n  return largestSmallestIntegers(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is \n   the largest of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (a, b) => largest(a, smallest(a, b));\n  const largestSmallestIntegers = (lst) => lst.reduce((acc, x) => largestSmallest(acc[0], x), [null, null]);\n  return largestSmallestIntegers(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is \n   the largest of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (a, b) => largest(a, smallest(a, b));\n  const largestSmallestIntegers = (lst) => lst.reduce((acc, x) => largestSmallest(acc[0], x), [null, null]);\n  return largestSmallestIntegers(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is \n   the largest of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (a, b) => largest(a, smallest(a, b));\n  const largestSmallestIntegers = (lst) => lst.reduce((acc, x) => largestSmallest(acc[0], x), [null, null]);\n  return largestSmallestIntegers(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is \n   the largest of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (a, b) => largest(a, smallest(a, b));\n  const largestSmallestIntegers = (lst) => lst.reduce((acc, x) => largestSmallest(acc[0], x), [null, null]);\n  return largestSmallestIntegers(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is \n   the largest of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (a, b) => largest(a, smallest(a, b));\n  const largestSmallestIntegers = (lst) => lst.reduce((acc, x) => largestSmallest", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b? a : b;\n  } else {\n    return \"\";\n  }\n}\n\nconst compareTwo = (a, b) = > {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b? a : b;\n  } else {\n    return \"\";\n  }\n}\n\nconst compareThree = (a, b, c) = > {\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  } else {\n    return \"\";\n  }\n}\n\nconst compareFour = (a, b, c, d) = > {\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"number\" && typeof d === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\") {\n    return a > b? a : b;\n  } else {\n    return \"\";\n  }\n}\n\nconst compareFive = (a, b, c, d, e) = > {\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\" && typeof e === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"string\") {\n    return a > b? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"number\") {\n    return a > b? a : b;\n  } else if (typeof a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n % 2 === 0? 4 : 0);\n  return sum === n;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (text.indexOf(' ') === -1) {\n    return text\n  }\n  const textArray = text.split(' ')\n  const newText = textArray.map(text => {\n    if (text.length === 1) {\n      return text\n    }\n    if (text.length === 2) {\n      return text.replace(' ', '_')\n    }\n    if (text.length > 2) {\n      const lastSpace = text.lastIndexOf(' ')\n      const firstSpace = text.indexOf(' ')\n      const lastSpaceIndex = text.lastIndexOf(' ', lastSpace - 1)\n      const firstSpaceIndex = text.indexOf(' ', firstSpace + 1)\n      if (lastSpaceIndex === firstSpaceIndex) {\n        return text.replace(' ', '-')\n      }\n    }\n    return text\n  })\n  return newText.join(' ')\n}\n\nconst fixSpaces2 = (text) => {\n  if (text.indexOf(' ') === -1) {\n    return text\n  }\n  const textArray = text.split(' ')\n  const newText = textArray.map(text => {\n    if (text.length === 1) {\n      return text\n    }\n    if (text.length === 2) {\n      return text.replace(' ', '_')\n    }\n    if (text.length > 2) {\n      const lastSpace = text.lastIndexOf(' ')\n      const firstSpace = text.indexOf(' ')\n      const lastSpaceIndex = text.lastIndexOf(' ', lastSpace - 1)\n      const firstSpaceIndex = text.indexOf(' ', firstSpace + 1)\n      if (lastSpaceIndex === firstSpaceIndex) {\n        return text.replace(' ', '-')\n      }\n    }\n    return text\n  })\n  return newText.join(' ')\n}\n\nconst fixSpaces3 = (text) => {\n  if (text.indexOf(' ') === -1) {\n    return text\n  }\n  const textArray = text.split(' ')\n  const newText = textArray.map(text => {\n    if (text.length === 1) {\n      return text\n    }\n    if (text.length === 2) {\n      return text.replace(' ', '_')\n    }\n    if (text.length > 2) {\n      const lastSpace = text.lastIndexOf(' ')\n      const firstSpace = text.indexOf(' ')\n      const lastSpaceIndex = text.lastIndexOf(' ', lastSpace - 1)\n      const firstSpaceIndex = text.indexOf(' ', firstSpace + 1)\n      if (lastSpaceIndex === firstSpaceIndex) {\n        return text.replace(' ', '-')\n      }\n    }\n    return text\n  })\n  return newText.join(' ')\n}\n\nconst fixSpaces4 = (text) => {\n  if (text.indexOf(' ') === -1) {\n    return text\n  }\n  const textArray = text.split(' ')\n  const newText = textArray.map(text => {\n    if (text.length === 1) {\n      return text\n    }\n    if (text.length === 2) {\n      return text.replace(' ', '_')\n    }\n    if (text.length > 2) {\n      const lastSpace = text.lastIndexOf(' ')\n      const firstSpace = text.indexOf(' ')\n      const lastSpaceIndex = text.lastIndexOf(' ', lastSpace - 1)\n      const firstSpaceIndex = text.indexOf(' ', firstSpace + 1)\n      if (lastSpaceIndex === firstSpaceIndex) {\n        return text.replace(' ', '-')\n      }\n    }\n    return text\n  })\n  return newText.join(' ')\n}\n\nconst fixSpaces5 = (text) => {\n  if (text.indexOf(' ') === -1) {\n    return text\n  }\n  const textArray = text.split(' ')\n  const newText = textArray.map(text => {\n    if (text.length === 1) {\n      return text\n    }\n    if (text.length === 2) {\n      return text.replace(' ', '_')\n    }\n    if (text.length > 2) {\n      const lastSpace = text.lastIndexOf(' ')\n      const firstSpace = text.indexOf(' ')\n      const lastSpaceIndex = text.lastIndexOf(' ', lastSpace - 1)\n      const firstSpaceIndex = text.indexOf(' ', firstSpace + 1)\n      if (lastSpaceIndex === firstSpaceIndex) {\n        return text.replace(' ', '-')\n      }\n    }\n    return text\n  })\n  return newText.join(' ')\n}\n\nconst fixSpaces6 = (text) => {\n  if (text.indexOf(' ') === -1) {\n    return text\n  }\n  const textArray = text.split(' ')\n  const newText = textArray.map(text => {\n    if (text.length === 1) {\n      return text\n    }\n    if (text.length === 2) {\n      return text.replace(' ', '_')\n    }\n    if (text.length > 2) {\n      const lastSpace = text.lastIndexOf(' ')\n      const firstSpace = text.indexOf(' ')\n      const lastSpaceIndex = text.lastIndexOf(' ', lastSpace - 1)\n      const firstSpaceIndex = text.indexOf(' ', firstSpace + 1)\n      if (lastSpaceIndex === firstSpaceIndex) {\n        return text.replace(' ', '-')\n      }\n    }\n    return text\n  })\n  return newText.join(' ')\n}\n\nconst fixSpaces7 = (text) => {\n  if (text.indexOf(' ') === -1) {\n    return text\n  }\n  const textArray = text.split(' ')\n  const newText = textArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and retort \n  ' Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex_dot = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex_empty = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex_one_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex_two_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*$/;\n  const regex_three_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_four_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_five_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_six_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_seven_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_eight_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_nine_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_ten_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_eleven_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_twelve_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_thirteen_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_fourteen_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*$/;\n  const regex_fifteen_digit = /^[a-zA-Z][a-zA-Z0-9]*\\.[0-9]*\\.[0-9]*\\.[0-", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const chain = []\n  const length = words.length\n  const prime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const primeChain = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i)) {\n        chain.push(i)\n      }\n      i++\n    }\n  }\n  const primeChain2 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i)) {\n        chain.push(i)\n        chain.push(n - i)\n      }\n      i++\n    }\n  }\n  const primeChain3 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1)) {\n        chain.push(i)\n        chain.push(n - i)\n        chain.push(n - i - 1)\n      }\n      i++\n    }\n  }\n  const primeChain4 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1) && prime(n - i - 2)) {\n        chain.push(i)\n        chain.push(n - i)\n        chain.push(n - i - 1)\n        chain.push(n - i - 2)\n      }\n      i++\n    }\n  }\n  const primeChain5 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1) && prime(n - i - 2) && prime(n - i - 3)) {\n        chain.push(i)\n        chain.push(n - i)\n        chain.push(n - i - 1)\n        chain.push(n - i - 2)\n        chain.push(n - i - 3)\n      }\n      i++\n    }\n  }\n  const primeChain6 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1) && prime(n - i - 2) && prime(n - i - 3) && prime(n - i - 4)) {\n        chain.push(i)\n        chain.push(n - i)\n        chain.push(n - i - 1)\n        chain.push(n - i - 2)\n        chain.push(n - i - 3)\n        chain.push(n - i - 4)\n      }\n      i++\n    }\n  }\n  const primeChain7 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1) && prime(n - i - 2) && prime(n - i - 3) && prime(n - i - 4) && prime(n - i - 5)) {\n        chain.push(i)\n        chain.push(n - i)\n        chain.push(n - i - 1)\n        chain.push(n - i - 2)\n        chain.push(n - i - 3)\n        chain.push(n - i - 4)\n        chain.push(n - i - 5)\n      }\n      i++\n    }\n  }\n  const primeChain8 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1) && prime(n - i - 2) && prime(n - i - 3) && prime(n - i - 4) && prime(n - i - 5) && prime(n - i - 6)) {\n        chain.push(i)\n        chain.push(n - i)\n        chain.push(n - i - 1)\n        chain.push(n - i - 2)\n        chain.push(n - i - 3)\n        chain.push(n - i - 4)\n        chain.push(n - i - 5)\n        chain.push(n - i - 6)\n      }\n      i++\n    }\n  }\n  const primeChain9 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1) && prime(n - i - 2) && prime(n - i - 3) && prime(n - i - 4) && prime(n - i - 5) && prime(n - i - 6) && prime(n - i - 7)) {\n        chain.push(i)\n        chain.push(n - i)\n        chain.push(n - i - 1)\n        chain.push(n - i - 2)\n        chain.push(n - i - 3)\n        chain.push(n - i - 4)\n        chain.push(n - i - 5)\n        chain.push(n - i - 6)\n        chain.push(n - i - 7)\n      }\n      i++\n    }\n  }\n  const primeChain10 = (n) => {\n    let i = 2\n    while (i < n) {\n      if (prime(i) && prime(n - i) && prime(n - i - 1) && prime(n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   if (x.length === 0) return false;\n   if (n.length === 0) return false;\n   if (x.length === 1) return x === n;\n   if (n.length === 1) return x === n;\n   if (x.length === 2) return x === n;\n   if (n.length === 2) return x === n;\n   if (x.length === 3) return x === n;\n   if (n.length === 3) return x === n;\n   if (x.length === 4) return x === n;\n   if (n.length === 4) return x === n;\n   if (x.length === 5) return x === n;\n   if (n.length === 5) return x === n;\n   if (x.length === 6) return x === n;\n   if (n.length === 6) return x === n;\n   if (x.length === 7) return x === n;\n   if (n.length === 7) return x === n;\n   if (x.length === 8) return x === n;\n   if (n.length === 8) return x === n;\n   if (x.length === 9) return x === n;\n   if (n.length === 9) return x === n;\n   if (x.length === 10) return x === n;\n   if (n.length === 10) return x === n;\n   if (x.length === 11) return x === n;\n   if (n.length === 11) return x === n;\n   if (x.length === 12) return x === n;\n   if (n.length === 12) return x === n;\n   if (x.length === 13) return x === n;\n   if (n.length === 13) return x === n;\n   if (x.length === 14) return x === n;\n   if (n.length === 14) return x === n;\n   if (x.length === 15) return x === n;\n   if (n.length === 15) return x === n;\n   if (x.length === 16) return x === n;\n   if (n.length === 16) return x === n;\n   if (x.length === 17) return x === n;\n   if (n.length === 17) return x === n;\n   if (x.length === 18) return x === n;\n   if (n.length === 18) return x === n;\n   if (x.length === 19) return x === n;\n   if (n.length === 19) return x === n;\n   if (x.length === 20) return x === n;\n   if (n.length === 20) return x === n;\n   if (x.length === 21) return x === n;\n   if (n.length === 21) return x === n;\n   if (x.length === 22) return x === n;\n   if (n.length === 22) return x === n;\n   if (x.length === 23) return x === n;\n   if (n.length === 23) return x === n;\n   if (x.length === 24) return x === n;\n   if (n.length === 24) return x === n;\n   if (x.length === 25) return x === n;\n   if (n.length === 25) return x === n;\n   if (x.length === 26) return x === n;\n   if (n.length === 26) return x === n;\n   if (x.length === 27) return x === n;\n   if (n.length === 27) return x === n;\n   if (x.length === 28) return x === n;\n   if (n.length === 28) return x === n;\n   if (x.length === 29) return x === n;\n   if (n.length === 29) return x === n;\n   if (x.length === 30) return x === n;\n   if (n.length === 30) return x === n;\n   if (x.length === 31) return x === n;\n   if (n.length === 31) return x === n;\n   if (x.length === 32) return x === n;\n   if (n.length === 32) return x === n;\n   if (x.length === 33) return x === n;\n   if (n.length === 33) return x === n;\n   if (x.length === 34) return x === n;\n   if (n.length === 34) return x === n;\n   if (x.length === 35) return x === n;\n   if (n.length === 35) return x === n;\n   if (x.length === 36) return x === n;\n   if (n.length === 36) return x === n;\n   if (x.length === 37) return x === n;\n   if (n.length === 37) return x === n;\n   if (x.length === 38) return x === n;\n   if (n.length === 38) return x === n;\n   if (x.length === 39) return x === n;\n   if (n.length === 39) return x === n;\n   if (x.length === 40) return x === n;\n   if (n.length === 40) return x === n;\n   if (x.length === 41) return x === n;\n   if (n.length === 41) return x === n;\n   if (x.length === 42) return x === n;\n   if (n.length === 42) return x === n;\n   if (x.length === 43) return x === n;\n   if (n.length === 43) return x === n;\n   if (x.length === 44) return x === n;\n   if (n.length === 44) return x === n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    return aExp - bExp;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aExp = a.toString().split('').reduce((acc, num) => {\n      return acc + num.charCodeAt(0);\n    }, 0);\n    const bExp = b.toString().split('').reduce((acc, num) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === -1)) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples2 = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples3 = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples4 = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples5 = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples6 = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples7 = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples8 = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1_name = planet1.toLowerCase();\n  const planet2_name = planet2.toLowerCase();\n  const planet1_orbit = planet1_name.split(\" \");\n  const planet2_orbit = planet2_name.split(\" \");\n  const planet1_orbit_length = planet1_orbit.length;\n  const planet2_orbit_length = planet2_orbit.length;\n  const planet1_orbit_index = planet1_orbit.indexOf(planet1_name);\n  const planet2_orbit_index = planet2_orbit.indexOf(planet2_name);\n  const planet1_orbit_length_minus_planet2_orbit_length = planet1_orbit_length - planet2_orbit_length;\n  const planet1_orbit_length_minus_planet2_orbit_index = planet1_orbit_length - planet2_orbit_index;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_1 = planet1_orbit_length_minus_planet2_orbit_index + 1;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_2 = planet1_orbit_length_minus_planet2_orbit_index + 2;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_3 = planet1_orbit_length_minus_planet2_orbit_index + 3;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_4 = planet1_orbit_length_minus_planet2_orbit_index + 4;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_5 = planet1_orbit_length_minus_planet2_orbit_index + 5;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_6 = planet1_orbit_length_minus_planet2_orbit_index + 6;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_7 = planet1_orbit_length_minus_planet2_orbit_index + 7;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_8 = planet1_orbit_length_minus_planet2_orbit_index + 8;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_9 = planet1_orbit_length_minus_planet2_orbit_index + 9;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_10 = planet1_orbit_length_minus_planet2_orbit_index + 10;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_11 = planet1_orbit_length_minus_planet2_orbit_index + 11;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_12 = planet1_orbit_length_minus_planet2_orbit_index + 12;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_13 = planet1_orbit_length_minus_planet2_orbit_index + 13;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_14 = planet1_orbit_length_minus_planet2_orbit_index + 14;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_15 = planet1_orbit_length_minus_planet2_orbit_index + 15;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_16 = planet1_orbit_length_minus_planet2_orbit_index + 16;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_17 = planet1_orbit_length_minus_planet2_orbit_index + 17;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_18 = planet1_orbit_length_minus_planet2_orbit_index + 18;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_19 = planet1_orbit_length_minus_planet2_orbit_index + 19;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_20 = planet1_orbit_length_minus_planet2_orbit_index + 20;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_21 = planet1_orbit_length_minus_planet2_orbit_index + 21;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_22 = planet1_orbit_length_minus_planet2_orbit_index + 22;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_23 = planet1_orbit_length_minus_planet2_orbit_index + 23;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_24 = planet1_orbit_length_minus_planet2_orbit_index + 24;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_25 = planet1_orbit_length_minus_planet2_orbit_index + 25;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_26 = planet1_orbit_length_minus_planet2_orbit_index + 26;\n  const planet1_orbit_length_minus_planet2_orbit_index_plus_27 = planet1_orbit_length_minus_planet2_orbit_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_length = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_alphabet = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_and_alphabet = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_and_alphabet_sorted = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_and_alphabet_sorted_reverse = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_and_alphabet_sorted_reverse_reverse = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_and_alphabet_sorted_reverse_reverse_reverse = (lst) => {\n  let sorted = [];\n  let sorted_sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sorted_sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted_sum % 2 === 0) {\n      sorted.push(lst[i]);\n      sorted_sum -= lst[i].length;\n    }\n  }\n  return sorted;\n};\n\nconst list_sort_by_length_and_alphabet_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  let sorted = [];\n  let sorted", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence16 = (n) => {\n  let result = '';\n  for (let i = 0; i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY30 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY31 = (n, x, y) => {\n  if (n % 2 === 0) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0\n   for (i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 0) {\n       sum += lst[i] * lst[i]\n     }\n   }\n   return sum\n }\n */\n\nfunction doubleTheDifference(lst) {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const gameScore = game.reduce((acc, curr, i) => acc + curr, 0)\n  const guessScore = guess.reduce((acc, curr, i) => acc + curr, 0)\n  const diff = gameScore - guessScore\n  const diffLength = Math.abs(diff)\n  const diffScore = diffLength / gameLength\n  const diffGuess = guessScore / gameLength\n  const diffGuessLength = Math.abs(diffGuess)\n  const diffGuessScore = diffGuessLength / guessLength\n  const diffGuessGuess = diffGuess / diffGuessLength\n  const diffGuessGuessLength = Math.abs(diffGuessGuess)\n  const diffGuessGuessScore = diffGuessGuessLength / guessLength\n  const diffGuessGuessGuess = diffGuessGuess / diffGuessGuessLength\n  const diffGuessGuessGuessLength = Math.abs(diffGuessGuessGuess)\n  const diffGuessGuessGuessScore = diffGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuess = diffGuessGuessGuess / diffGuessGuessGuessLength\n  const diffGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuess)\n  const diffGuessGuessGuessGuessScore = diffGuessGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuessGuess = diffGuessGuessGuessGuess / diffGuessGuessGuessGuessLength\n  const diffGuessGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuessGuess)\n  const diffGuessGuessGuessGuessGuessScore = diffGuessGuessGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuessGuessGuess = diffGuessGuessGuessGuessGuess / diffGuessGuessGuessGuessGuessLength\n  const diffGuessGuessGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuessGuessGuess)\n  const diffGuessGuessGuessGuessGuessGuessScore = diffGuessGuessGuessGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuessGuessGuessGuess = diffGuessGuessGuessGuessGuessGuess / diffGuessGuessGuessGuessGuessGuessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuessGuessGuessGuess)\n  const diffGuessGuessGuessGuessGuessGuessGuessScore = diffGuessGuessGuessGuessGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuess = diffGuessGuessGuessGuessGuessGuessGuess / diffGuessGuessGuessGuessGuessGuessGuessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuessGuessGuessGuessGuess)\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessScore = diffGuessGuessGuessGuessGuessGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuess = diffGuessGuessGuessGuessGuessGuessGuessGuess / diffGuessGuessGuessGuessGuessGuessGuessGuessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuessGuessGuessGuessGuessGuess)\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuessScore = diffGuessGuessGuessGuessGuessGuessGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuess = diffGuessGuessGuessGuessGuessGuessGuessGuessGuess / diffGuessGuessGuessGuessGuessGuessGuessGuessGuessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuess)\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessScore = diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessLength / guessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessGuess = diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuess / diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessLength\n  const diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessLength = Math.abs(diffGuessGuessGuessGuessGuessGuessGuessGuessGuessGuessGuess)\n  const diffGu", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const capitalLetters = /[A-Z]/g\n  const capitalLettersCount = capitalLetters.exec(class_name).length\n  const smallLetters = /[a-z]/g\n  const smallLettersCount = smallLetters.exec(class_name).length\n  const strength = capitalLettersCount - smallLettersCount\n  const strongestExtension = extensions.find(extension => strength === -1 || strength === extension.length)\n  return class_name + '.' + strongestExtension\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  stronger than the strongest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst weakerClasses = (classes) => {\n  const strongestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length < strongestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  weaker than the weakest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst strongerClasses = (classes) => {\n  const weakestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length > weakestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  stronger than the weakest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst strongerClasses = (classes) => {\n  const weakestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length < weakestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  weaker than the strongest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst weakerClasses = (classes) => {\n  const strongestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length > strongestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  stronger than the weakest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst strongerClasses = (classes) => {\n  const weakestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length < weakestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  stronger than the weakest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst weakerClasses = (classes) => {\n  const strongestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length > strongestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  stronger than the weakest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst strongerClasses = (classes) => {\n  const weakestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length < weakestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  stronger than the weakest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst weakerClasses = (classes) => {\n  const strongestClass = classes.find(class_name => class_name.length > 0)\n  return classes.filter(class_name => class_name.length > strongestClass.length)\n}\n\n/*\n  Given a list of classes, return a list of the classes that are not\n  stronger than the weakest class in the list.\n  Example:\n  for weakerClasses(['Slices', 'Cheese', 'StuFfed']) == ['Slices', 'Cheese']\n  */\nconst strongerClasses = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.toLowerCase()\n   let b = b.toLowerCase()\n   let a_len = a.length\n   let b_len = b.length\n   let a_idx = 0\n   let b_idx = 0\n   while (a_idx < a_len && b_idx < b_len) {\n     if (a[a_idx] === b[b_idx]) {\n       a_idx++\n       b_idx++\n     } else if (a[a_idx] === b[b_len - 1 - b_idx]) {\n       b_idx++\n     } else if (a[a_len - 1 - a_idx] === b[b_idx]) {\n       a_idx++\n     } else {\n       return false\n     }\n   }\n   return a_idx === a_len && b_idx === b_len\n }\n */\n\nfunction cycpatternCheck(a, b) {\n  let a_len = a.length\n  let b_len = b.length\n  let a_idx = 0\n  let b_idx = 0\n  while (a_idx < a_len && b_idx < b_len) {\n    if (a[a_idx] === b[b_idx]) {\n      a_idx++\n      b_idx++\n    } else if (a[a_idx] === b[b_len - 1 - b_idx]) {\n      b_idx++\n    } else if (a[a_len - 1 - a_idx] === b[b_idx]) {\n      a_idx++\n    } else {\n      return false\n    }\n  }\n  return a_idx === a_len && b_idx === b_len\n}\n\nconsole.log(cycpatternCheck(\"abcd\", \"abd\"))\nconsole.log(cycpatternCheck(\"hello\", \"ell\"))\nconsole.log(cycpatternCheck(\"whassup\", \"psus\"))\nconsole.log(cycpatternCheck(\"abab\", \"baa\"))\nconsole.log(cycpatternCheck(\"efef\", \"eeff\"))\nconsole.log(cycpatternCheck(\"himenss\", \"simen\"))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n    count++;\n  }\n  return [even, odd];\n};\n\nexport default evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'I';\n    } else if (number % 10 == 2) {\n      result += 'II';\n    } else if (number % 10 == 3) {\n      result += 'III';\n    } else if (number % 10 == 4) {\n      result += 'IV';\n    } else if (number % 10 == 5) {\n      result += 'V';\n    } else if (number % 10 == 6) {\n      result += 'VI';\n    } else if (number % 10 == 7) {\n      result += 'VII';\n    } else if (number % 10 == 8) {\n      result += 'VIII';\n    } else if (number % 10 == 9) {\n      result += 'IX';\n    }\n    number = number / 10;\n    i++;\n  }\n  return result;\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 1000 == 1) {\n      result += 'M';\n    } else if (number % 1000 == 2) {\n      result += 'MM';\n    } else if (number % 1000 == 3) {\n      result += 'MMM';\n    } else if (number % 1000 == 4) {\n      result += 'MMMM';\n    } else if (number % 1000 == 5) {\n      result += 'MMMMM';\n    } else if (number % 1000 == 6) {\n      result += 'MMMMMM';\n    } else if (number % 1000 == 7) {\n      result += 'MMMMMMM';\n    } else if (number % 1000 == 8) {\n      result += 'MMMMMMMM';\n    } else if (number % 1000 == 9) {\n      result += 'MMMMMMMMM';\n    }\n    number = number / 1000;\n    i++;\n  }\n  return result;\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 100 == 1) {\n      result += 'C';\n    } else if (number % 100 == 2) {\n      result += 'CC';\n    } else if (number % 100 == 3) {\n      result += 'CCC';\n    } else if (number % 100 == 4) {\n      result += 'CD';\n    } else if (number % 100 == 5) {\n      result += 'D';\n    } else if (number % 100 == 6) {\n      result += 'DC';\n    } else if (number % 100 == 7) {\n      result += 'DCC';\n    } else if (number % 100 == 8) {\n      result += 'DCCC';\n    } else if (number % 100 == 9) {\n      result += 'CM';\n    }\n    number = number / 100;\n    i++;\n  }\n  return result;\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'I';\n    } else if (number % 10 == 2) {\n      result += 'II';\n    } else if (number % 10 == 3) {\n      result += 'III';\n    } else if (number % 10 == 4) {\n      result += 'IV';\n    } else if (number % 10 == 5) {\n      result += 'V';\n    } else if (number % 10 == 6) {\n      result += 'VI';\n    } else if (number % 10 == 7) {\n      result += 'VII';\n    } else if (number % 10 == 8) {\n      result += 'VIII';\n    } else if (number % 10 == 9) {\n      result += 'IX';\n    }\n    number = number / 10;\n    i++;\n  }\n  return result;\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += 'I';\n    } else if (number % 10 == 2) {\n      result += 'II", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const max = words[0];\n   const maxIndex = 0;\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max.length) {\n       max = words[i];\n       maxIndex = i;\n     }\n   }\n   return max;\n }\n * /\n\n// Test\nconst words = [\"name\", \" of \", \" string \"];\nconsole.log(findMax(words));\n\n// Reflection\n/*\nWhat was the most difficult part of this challenge?\n\nI had to write a function that accepts a list of strings. The list contains unlike words. \nReturn the word with maximal act of unique character. If multiple string have maximum numeral of unique character, \nreturn the one which come first in lexicographic holy order. \n\nWhat did you learn about creating functions?\n\nI learned that I can create a function that accepts a list of strings.\n\nWhat are the biggest similarities between this challenge and the previous one?\n\nI learned that I can create a function that accepts a list of strings.\n\nWhat did you learn about the \"this\" keyword?\n\nI learned that I can create a function that accepts a list of strings.\n\n*/<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining >= need) {\n    return [number, need];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                    the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining >= need) {\n    return [number, need];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                    the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining >= need) {\n    return [number, need];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                    the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining >= need) {\n    return [number, need];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                    the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    charSet.add(char.toLowerCase());\n    charSet.add(char.toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorIndex = operatorLength - 1\n  const operandIndex = operandLength - 1\n\n  const result = operandList[operandIndex]\n  for (let i = 0; i < operatorLength; i++) {\n    if (operator[i] === '+') {\n      result += operandList[operandIndex - i]\n    } else if (operator[i] === '-') {\n      result -= operandList[operandIndex - i]\n    } else if (operator[i] === '*') {\n      result *= operandList[operandIndex - i]\n    } else if (operator[i] === '/') {\n      result /= operandList[operandIndex - i]\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operandList[operandIndex - i])\n    }\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorIndex = operatorLength - 1\n  const operandIndex = operandLength - 1\n\n  const result = operandList[operandIndex]\n  for (let i = 0; i < operatorLength; i++) {\n    if (operator[i] === '+') {\n      result += operandList[operandIndex - i]\n    } else if (operator[i] === '-') {\n      result -= operandList[operandIndex - i]\n    } else if (operator[i] === '*') {\n      result *= operandList[operandIndex - i]\n    } else if (operator[i] === '/') {\n      result /= operandList[operandIndex - i]\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operandList[operandIndex - i])\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorIndex = operatorLength - 1\n  const operandIndex = operandLength - 1\n\n  const result = operandList[operandIndex]\n  for (let i = 0; i < operatorLength; i++) {\n    if (operator[i] === '+') {\n      result += operandList[operandIndex - i]\n    } else if (operator[i] === '-') {\n      result -= operandList[operandIndex - i]\n    } else if (operator[i] === '*') {\n      result *= operandList[operandIndex - i]\n    } else if (operator[i] === '/') {\n      result /= operandList[operandIndex - i]\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operandList[operandIndex - i])\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorIndex = operatorLength - 1\n  const operandIndex = operandLength - 1\n\n  const result = operandList[operandIndex]\n  for (let i = 0; i < operatorLength; i++) {\n    if (operator[i] === '+') {\n      result += operandList[operandIndex - i]\n    } else if (operator[i] === '-') {\n      result -= operandList[operandIndex - i]\n    } else if (operator[i] === '*') {\n      result *= operandList[operandIndex - i]\n    } else if (operator[i] === '/') {\n      result /= operandList[operandIndex - i]\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operandList[operandIndex - i])\n    }\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorIndex = operatorLength - 1\n  const operandIndex = operandLength - 1\n\n  const result = operandList[operandIndex]\n  for (let i = 0; i < operatorLength; i++) {\n    if (operator[i] === '+') {\n      result += operandList[operandIndex - i]\n    } else if (operator[i] === '-') {\n      result -= oper", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let i = 0, j = s.length - 1;\n  while (i < j) {\n    if (s[i] === '@') {\n      s[i] = 'A';\n      s[j] = '@';\n      i++;\n      j--;\n    } else if (s[i] === '#') {\n      s[i] = 'a';\n      s[j] = '#';\n      i++;\n      j--;\n    } else if (s[i] === 'a') {\n      s[i] = 'A';\n      s[j] = 'a';\n      i++;\n      j--;\n    } else if (s[i] === 'A') {\n      s[i] = '@';\n      s[j] = 'A';\n      i++;\n      j--;\n    } else if (s[i] === 'c') {\n      s[i] = 'C';\n      s[j] = 'c';\n      i++;\n      j--;\n    } else if (s[i] === 'C') {\n      s[i] = '@';\n      s[j] = 'C';\n      i++;\n      j--;\n    } else if (s[i] === 'b') {\n      s[i] = 'B';\n      s[j] = 'b';\n      i++;\n      j--;\n    } else if (s[i] === 'B') {\n      s[i] = '@';\n      s[j] = 'B';\n      i++;\n      j--;\n    } else if (s[i] === 'd') {\n      s[i] = 'D';\n      s[j] = 'd';\n      i++;\n      j--;\n    } else if (s[i] === 'D') {\n      s[i] = '@';\n      s[j] = 'D';\n      i++;\n      j--;\n    } else if (s[i] === 'e') {\n      s[i] = 'E';\n      s[j] = 'e';\n      i++;\n      j--;\n    } else if (s[i] === 'E') {\n      s[i] = '@';\n      s[j] = 'E';\n      i++;\n      j--;\n    } else if (s[i] === 'f') {\n      s[i] = 'F';\n      s[j] = 'f';\n      i++;\n      j--;\n    } else if (s[i] === 'F') {\n      s[i] = '@';\n      s[j] = 'F';\n      i++;\n      j--;\n    } else if (s[i] === 'g') {\n      s[i] = 'G';\n      s[j] = 'g';\n      i++;\n      j--;\n    } else if (s[i] === 'G') {\n      s[i] = '@';\n      s[j] = 'G';\n      i++;\n      j--;\n    } else if (s[i] === 'h') {\n      s[i] = 'H';\n      s[j] = 'h';\n      i++;\n      j--;\n    } else if (s[i] === 'H') {\n      s[i] = '@';\n      s[j] = 'H';\n      i++;\n      j--;\n    } else if (s[i] === 'i') {\n      s[i] = 'I';\n      s[j] = 'i';\n      i++;\n      j--;\n    } else if (s[i] === 'I') {\n      s[i] = '@';\n      s[j] = 'I';\n      i++;\n      j--;\n    } else if (s[i] === 'j') {\n      s[i] = 'J';\n      s[j] = 'j';\n      i++;\n      j--;\n    } else if (s[i] === 'J') {\n      s[i] = '@';\n      s[j] = 'J';\n      i++;\n      j--;\n    } else if (s[i] === 'k') {\n      s[i] = 'K';\n      s[j] = 'k';\n      i++;\n      j--;\n    } else if (s[i] === 'K') {\n      s[i] = '@';\n      s[j] = 'K';\n      i++;\n      j--;\n    } else if (s[i] === 'l') {\n      s[i] = 'L';\n      s[j] = 'l';\n      i++;\n      j--;\n    } else if (s[i] === 'L') {\n      s[i] = '@';\n      s[j] = 'L';\n      i++;\n      j--;\n    } else if (s[i] ==='m') {\n      s[i] = 'M';\n      s[j] ='m';\n      i++;\n      j--;\n    } else if (s[i] === 'M') {\n      s[i] = '@';\n      s[j] = 'M';\n      i++;\n      j--;\n    } else if (s[i] === 'n') {\n      s[i] = 'N';\n      s[j] = 'n';\n      i++;\n      j--;\n    } else if (s[i] === 'N') {\n      s[i] = '@';\n      s[j] = 'N';\n      i++;\n      j--;\n    } else if (s[i] === 'o') {\n      s[i] = 'O';\n      s[j] = 'o';\n      i++;\n      j--;\n    } else if (s[i] === 'O') {\n      s[i] = '@", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '';\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha1('Hello world') == 'a9c5a8b2c9b8c4c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9d4c5b6c7c8c9c4a9b9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateOdds(2, 8) => [3, 5, 7]\n  generateOdds(8, 2) => [3, 5, 7]\n  generateOdds(10, 14) => [11, 13]\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the even digits\n   between a and b, in ascend orderliness.\n\n  For example:\n  generateSum(2, 8) => 10\n  generateSum(8, 2) => 10\n  generateSum(10, 14) => 28\n  */\nconst generateSum = (a, b) => {\n  const result = 0;\n  for (let i = a; i <= b; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the difference of the odd\n   digits between a and b, in ascend orderliness.\n\n  For example:\n  generateDifference(2, 8) => 6\n  generateDifference(8, 2) => 6\n  generateDifference(10, 14) => 12\n  */\nconst generateDifference = (a, b) => {\n  const result = 0;\n  for (let i = a; i <= b; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the even\n   digits between a and b, in ascend orderliness.\n\n  For example:\n  generateProduct(2, 8) => 40\n  generateProduct(8, 2) => 40\n  generateProduct(10, 14) => 1890\n  */\nconst generateProduct = (a, b) => {\n  const result = 1;\n  for (let i = a; i <= b; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the odd digits\n   between a and b, in ascend orderliness.\n\n  For example:\n  generateSum(2, 8) => 10\n  generateSum(8, 2) => 10\n  generateSum(10, 14) => 28\n  */\nconst generateSumOdd = (a, b) => {\n  const result = 0;\n  for (let i = a; i <= b; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the difference of the odd\n   digits between a and b, in ascend orderliness.\n\n  For example:\n  generateDifference(2, 8) => 6\n  generateDifference(8, 2) => 6\n  generateDifference(10, 14) => 12\n  */\nconst generateDifferenceOdd = (a, b) => {\n  const result = 0;\n  for (let i = a; i <= b; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the odd digits\n   between a and b, in ascend orderliness.\n\n  For example:\n  generateProduct(2, 8) => 40\n  generateProduct(8, 2) => 40\n  generateProduct(10, 14) => 1890\n  */\nconst generateProductOdd = (a, b) => {\n  const result = 1;\n  for (let i = a; i <= b; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the even and odd\n   digits between a and b, in ascend orderliness.\n\n  For example:\n  generateSum(2, 8) => 10\n  generateSum(8, 2) => 10\n  generateSum(10, 14) => 28\n  */\nconst generateSumEvenOdd = (a, b) => {\n  const result = 0;\n  for (let i = a; i <= b; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the difference of the even and\n   odd digits between a and b, in ascend orderliness.\n\n  For example:\n  generateDifference(2, 8) => 6\n  generateDifference(8, 2) => 6\n  generateDifference(10, 14) => 12\n  */\nconst generateDifferenceEvenOdd = (a, b) => {\n  const result = 0;\n  for (let i = a; i <= b; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the even and\n   odd digits between a and b, in ascend orderliness.\n\n  For example:\n  generateProduct(2, 8) => 40\n  generateProduct(8, 2) => 40\n  generateProduct(10, 14) => 1890\n  */\nconst generateProductEvenOdd = (a, b) => {\n  const result = 1;\n  for (let i = a; i <= b; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the even and odd\n   digits between a and b, in ascend orderliness.\n\n  For example:\n  generateSum(2, 8) => 10\n  generateSum(8, 2) => 10\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n  ' o' - hale bill, survive four beats \n  ' o|' - half note, lasts two beat \n  ' .|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_split = music_string.split(' ');\n  const music_string_split_length = music_string_split.length;\n  const music_string_split_length_minus_one = music_string_split_length - 1;\n  const music_string_split_length_minus_two = music_string_split_length - 2;\n  const music_string_split_length_minus_three = music_string_split_length - 3;\n  const music_string_split_length_minus_four = music_string_split_length - 4;\n  const music_string_split_length_minus_five = music_string_split_length - 5;\n  const music_string_split_length_minus_six = music_string_split_length - 6;\n  const music_string_split_length_minus_seven = music_string_split_length - 7;\n  const music_string_split_length_minus_eight = music_string_split_length - 8;\n  const music_string_split_length_minus_nine = music_string_split_length - 9;\n  const music_string_split_length_minus_ten = music_string_split_length - 10;\n  const music_string_split_length_minus_eleven = music_string_split_length - 11;\n  const music_string_split_length_minus_twelve = music_string_split_length - 12;\n  const music_string_split_length_minus_thirteen = music_string_split_length - 13;\n  const music_string_split_length_minus_fourteen = music_string_split_length - 14;\n  const music_string_split_length_minus_fifteen = music_string_split_length - 15;\n  const music_string_split_length_minus_sixteen = music_string_split_length - 16;\n  const music_string_split_length_minus_seventeen = music_string_split_length - 17;\n  const music_string_split_length_minus_eighteen = music_string_split_length - 18;\n  const music_string_split_length_minus_nineteen = music_string_split_length - 19;\n  const music_string_split_length_minus_twenty = music_string_split_length - 20;\n  const music_string_split_length_minus_twenty_one = music_string_split_length - 21;\n  const music_string_split_length_minus_twenty_two = music_string_split_length - 22;\n  const music_string_split_length_minus_twenty_three = music_string_split_length - 23;\n  const music_string_split_length_minus_twenty_four = music_string_split_length - 24;\n  const music_string_split_length_minus_twenty_five = music_string_split_length - 25;\n  const music_string_split_length_minus_twenty_six = music_string_split_length - 26;\n  const music_string_split_length_minus_twenty_seven = music_string_split_length - 27;\n  const music_string_split_length_minus_twenty_eight = music_string_split_length - 28;\n  const music_string_split_length_minus_twenty_nine = music_string_split_length - 29;\n  const music_string_split_length_minus_thirty = music_string_split_length - 30;\n  const music_string_split_length_minus_thirty_one = music_string_split_length - 31;\n  const music_string_split_length_minus_thirty_two = music_string_split_length - 32;\n  const music_string_split_length_minus_thirty_three = music_string_split_length - 33;\n  const music_string_split_length_minus_thirty_four = music_string_split_length - 34;\n  const music_string_split_length_minus_thirty_five = music_string_split_length - 35;\n  const music_string_split_length_minus_thirty_six = music_string_split_length - 36;\n  const music_string_split_length_minus_thirty_seven = music_string_split_length - 37;\n  const music_string_split_length_minus_thirty_eight = music_string_split_length - 38;\n  const music_string_split_length_minus_thirty_nine = music_string_split_length - 39;\n  const music_string_split_length_minus_forty = music_string_split_length - 40;\n  const music_string_split_length_minus_forty_one = music_string_split_length - 41;\n  const music_string_split_length_minus_forty_two = music_string_split_length - 42;\n  const music_string_split_length_minus_forty_three = music_string_split_length - 43;\n  const music_string_split_length_minus_forty_four = music_string_split_length - 44;\n  const music_string_split_length_minus_forty_five = music_string_split_length - 45;\n  const music_string_split_length_minus_forty_six = music_string_split_length - 46;\n  const music_string_split_length_minus_forty_seven = music_string_split_length - 47;\n  const music_string_split_length_minus_forty_eight = music_string_split_length - 48;\n  const music_string_split_length_minus_forty_nine = music_string_split_length - 49;\n  const music_string_split_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j] === substring[j]) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring without repeating characters.\n  >>> longestSubstring('abcabcbb')\n  'abcabcbb'\n  >>> longestSubstring('bbbbb')\n  'b'\n  >>> longestSubstring('aaaaa')\n  'a'\n  >>> longestSubstring('bbb')\n  'b'\n  >>> longestSubstring('a')\n  'a'\n  >>> longestSubstring('')\n  ''\n  */\nconst longestSubstring = (string) => {\n  let result = '';\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== current) {\n      current = string[i];\n      result = current + result;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, find the number of characters in the string that are not\n  repeating.\n  >>> notRepeating('abcabcbb')\n  3\n  >>> notRepeating('bbbbb')\n  1\n  >>> notRepeating('aaaaa')\n  1\n  >>> notRepeating('bbb')\n  1\n  >>> notRepeating('a')\n  1\n  >>> notRepeating('')\n  0\n  */\nconst notRepeating = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i + 1) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the number of characters in the string that are not\n  repeating.\n  >>> notRepeating('abcabcbb')\n  3\n  >>> notRepeating('bbbbb')\n  1\n  >>> notRepeating('aaaaa')\n  1\n  >>> notRepeating('bbb')\n  1\n  >>> notRepeating('a')\n  1\n  >>> notRepeating('')\n  0\n  */\nconst notRepeating = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i + 1) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the number of characters in the string that are not\n  repeating.\n  >>> notRepeating('abcabcbb')\n  3\n  >>> notRepeating('bbbbb')\n  1\n  >>> notRepeating('aaaaa')\n  1\n  >>> notRepeating('bbb')\n  1\n  >>> notRepeating('a')\n  1\n  >>> notRepeating('')\n  0\n  */\nconst notRepeating = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i + 1) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the number of characters in the string that are not\n  repeating.\n  >>> notRepeating('abcabcbb')\n  3\n  >>> notRepeating('bbbbb')\n  1\n  >>> notRepeating('aaaaa')\n  1\n  >>> notRepeating('bbb')\n  1\n  >>> notRepeating('a')\n  1\n  >>> notRepeating('')\n  0\n  */\nconst notRepeating = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i + 1) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the number of characters in the string that are not\n  repeating.\n  >>> notRepeating('abcabcbb')\n  3\n  >>> notRepeating('bbbbb')\n  1\n  >>> notRepeating('aaaaa')\n  1\n  >>> notRepeating('bbb')\n  1\n  >>> notRepeating('a')\n  1\n  >>> notRepeating('')\n  0\n  */\nconst notRepeating = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i + 1) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the number of characters in the string that are not\n  repeating.\n  >>> notRepeating('abcabcbb')\n  3\n  >>> notRepeating('bbbbb')\n  1\n  >>> notRepeating('aaaaa')\n  1\n  >>> notRepeating('bbb')\n  1\n  >>> notRepeating('a')\n  1\n  >>> notRepeating('')\n  0\n  */\nconst notRepeating = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i + 1) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the number of characters in the string that are not\n  repeating.\n  >>> notRepeating('abcabcbb')\n  3\n  >>> notRepeating('bbbbb')\n  1\n  >>> notRepeating('aaaaa')\n  1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string of numbers, return a string of the numbers sorted from smallest to largest.\n  reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string of numbers, return a string of the numbers sorted from largest to smallest.\n  reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string of numbers, return a string of the numbers sorted from smallest to largest.\n  reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string of numbers, return a string of the numbers sorted from largest to smallest.\n  reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string of numbers, return a string of the numbers sorted from smallest to largest.\n  reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string of numbers, return a string of the numbers sorted from largest to smallest.\n  reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedNumbers.push(number)\n  }\n  sortedNumbers.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string of numbers, return a string of the numbers sorted from smallest to largest.\n  reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalRegion = decimalPart * 10;\n  return integerPart + decimalRegion;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length\n  const [first, second] = [numbers[0], numbers[1]]\n  let i = 2\n  while (i < len) {\n    const curr = numbers[i]\n    if (curr < first) {\n      first = curr\n    } else if (curr > second) {\n      second = curr\n    }\n    i++\n  }\n  return [first, second]\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers, return a list of the same length, where each number\n   is the number of the number in the original list that is the closest to the\n   given number.\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> closest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAll = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllObjects = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterAllDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return the index of the first occurrence of a substring in a string\n  *\n  * @param {string} string\n  * @param {string} substring\n  * @return {number}\n  * @example\n  *\n  *   strindex('abc', 'a')\n  *   // => 0\n  *\n  *   strindex('abc', 'b')\n  *   // => 1\n  *\n  *   strindex('abc', 'c')\n  *   // => 2\n  *\n  *   strindex('abc', 'd')\n  *   // => -1\n  *\n  *   strindex('abc', 'ab')\n  *   // => 0\n  *\n  *   strindex('abc', 'abcd')\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 2)\n  *   // => 3\n  *\n  *   strindex('abc', 'abcd', 3)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 4)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 5)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 6)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 7)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 8)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 9)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 10)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 11)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 12)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 13)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 14)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 15)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 16)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 17)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 18)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 19)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 20)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 21)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 22)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 23)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 24)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 25)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 26)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 27)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 28)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 29)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 30)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 31)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 32)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 33)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 34)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 35)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 36)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 37)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 38)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 39)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 40)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 41)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 42)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 43)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 44)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 45)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 46)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 47)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 48)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 49)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 50)\n  *   // => -1\n  *\n  *   strindex('abc', 'abcd', 51)\n  *   //", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisors = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return Math.max(...divisors);\n};\n\n/*\n  Given a number n, find the largest number that is evenly divisible by n\n  >>> largestDivisible(15)\n  15\n  >>> largestDivisible(19)\n  3\n  >>> largestDivisible(20)\n  2\n  >>> largestDivisible(21)\n  7\n  >>> largestDivisible(22)\n  11\n  >>> largestDivisible(23)\n  13\n  >>> largestDivisible(24)\n  16\n  >>> largestDivisible(25)\n  17\n  >>> largestDivisible(26)\n  19\n  >>> largestDivisible(27)\n  21\n  >>> largestDivisible(28)\n  23\n  >>> largestDivisible(29)\n  25\n  >>> largestDivisible(30)\n  27\n  >>> largestDivisible(31)\n  29\n  >>> largestDivisible(32)\n  31\n  >>> largestDivisible(33)\n  33\n  >>> largestDivisible(34)\n  35\n  >>> largestDivisible(35)\n  37\n  >>> largestDivisible(36)\n  39\n  >>> largestDivisible(37)\n  41\n  >>> largestDivisible(38)\n  43\n  >>> largestDivisible(39)\n  45\n  >>> largestDivisible(40)\n  47\n  >>> largestDivisible(41)\n  49\n  >>> largestDivisible(42)\n  51\n  >>> largestDivisible(43)\n  53\n  >>> largestDivisible(44)\n  55\n  >>> largestDivisible(45)\n  57\n  >>> largestDivisible(46)\n  59\n  >>> largestDivisible(47)\n  61\n  >>> largestDivisible(48)\n  63\n  >>> largestDivisible(49)\n  65\n  >>> largestDivisible(50)\n  67\n  >>> largestDivisible(51)\n  69\n  >>> largestDivisible(52)\n  71\n  >>> largestDivisible(53)\n  73\n  >>> largestDivisible(54)\n  75\n  >>> largestDivisible(55)\n  77\n  >>> largestDivisible(56)\n  79\n  >>> largestDivisible(57)\n  81\n  >>> largestDivisible(58)\n  83\n  >>> largestDivisible(59)\n  85\n  >>> largestDivisible(60)\n  87\n  >>> largestDivisible(61)\n  89\n  >>> largestDivisible(62)\n  91\n  >>> largestDivisible(63)\n  93\n  >>> largestDivisible(64)\n  95\n  >>> largestDivisible(65)\n  97\n  >>> largestDivisible(66)\n  99\n  >>> largestDivisible(67)\n  101\n  >>> largestDivisible(68)\n  103\n  >>> largestDivisible(69)\n  105\n  >>> largestDivisible(70)\n  107\n  >>> largestDivisible(71)\n  109\n  >>> largestDivisible(72)\n  111\n  >>> largestDivisible(73)\n  113\n  >>> largestDivisible(74)\n  115\n  >>> largestDivisible(75)\n  117\n  >>> largestDivisible(76)\n  119\n  >>> largestDivisible(77)\n  121\n  >>> largestDivisible(78)\n  123\n  >>> largestDivisible(79)\n  125\n  >>> largestDivisible(80)\n  127\n  >>> largestDivisible(81)\n  129\n  >>> largestDivisible(82)\n  131\n  >>> largestDivisible(83)\n  133\n  >>> largestDivisible(84)\n  135\n  >>> largestDivisible(85)\n  137\n  >>> largestDivisible(86)\n  139\n  >>> largestDivisible(87)\n  141\n  >>> largestDivisible(88)\n  143\n  >>> largestDivisible(89)\n  145\n  >>> largestDivisible(90)\n  147\n  >>> largestDivisible(91)\n  149\n  >>> largestDivisible(92)\n  151\n  >>> largestDivisible(93)\n  153\n  >>> largestDivisible(94)\n  155\n  >>> largestDivisible(95)\n  157\n  >>> largestDivisible(96)\n  159\n  >>> largestDivisible(97)\n  161\n  >>> largestDivisible(98)\n  163\n  >>> largestDivisible(99)\n  165\n  >>> largestDivisible(100)\n  167\n  >>> largestDivisible(101)\n  169\n  >>> largestDivisible(102)\n  171\n  >>> largestDivisible(103)\n  173\n  >>> largestDivisible(104)\n  175\n  >>> largestDivisible(105)\n  177\n  >>> largestDivisible(106)\n  179\n  >>> largestDivisible(107)\n  181\n  >>> largestDivisible(108)\n  183\n  >>> largestDivisible(109)\n  185\n  >>> largestDivisible(110)\n  187\n  >>> largestDivisible(111)\n  189\n  >>> largestDivisible(112)\n  191\n  >>> largestDivisible(113)\n  193\n  >>> largestDivisible(114)\n  195\n  >>> largestDivisible(115)\n  197\n  >>> largestDivisible(116)\n  199\n  >>> largestDivisible(117)\n  201\n  >>> largestDivisible(118)\n  203\n  >>> largestDivisible(119)\n  205\n  >>> largestDivisible(120)\n  207\n  >>> largestDivisible(121)\n  209\n  >>> largestDivisible(122)\n  211\n  >>> largestDivisible(123)\n  213\n  >>> largestDivisible(124)\n  215\n  >>> largestDivisible(125)\n  217\n  >>> largestDivisible(126)\n  219\n  >>> largestDivisible(127)\n  221\n  >>> largestDivisible(128)\n  223\n  >>> largestDivisible(129)\n  225\n  >>> largestDivisible(130)\n  227\n  >>> largestDivisible(131)\n  229\n  >>> largestDivisible(132)\n  231\n  >>> largestDivisible(133)\n  233\n  >>> largestDivisible(134)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factorsLength = []\n  const factorsLengthMax = []\n  const factorsLengthMin = []\n  const factorsLengthSum = []\n  const factorsLengthSumMax = []\n  const factorsLengthSumMin = []\n  const factorsLengthSumSum = []\n  const factorsLengthSumSumMax = []\n  const factorsLengthSumSumMin = []\n  const factorsLengthSumSumSum = []\n  const factorsLengthSumSumSumMax = []\n  const factorsLengthSumSumSumMin = []\n  const factorsLengthSumSumSumSum = []\n  const factorsLengthSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumMax = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumMin = []\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  const factorsLengthSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": false, "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase and uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCaseAndLowerCase = (string) => {\n  return upperCase(string) + lowerCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperCaseAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(string) + lowerCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCaseAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string);\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCaseAndLowerCaseAndFlipCase = (string) => {\n  return upperCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flipCase(string) + lowerCase(string) + flip", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde', 'xyz'])\n  ['abc', 'bcd', 'cde']\n  */\nconst lengthOfCommonPrefix = (strings, otherStrings) => {\n  const commonPrefix = strings.find(s => otherStrings.indexOf(s) >= 0);\n  return commonPrefix? commonPrefix.length : [];\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde', 'xyz'])\n  ['abc', 'bcd', 'cde']\n  */\nconst lengthOfCommonSuffix = (strings, otherStrings) => {\n  const commonSuffix = strings.find(s => otherStrings.indexOf(s) >= 0);\n  return commonSuffix? commonSuffix.length : [];\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde', 'xyz'])\n  ['abc', 'bcd', 'cde']\n  */\nconst lengthOfCommonMiddle = (strings, otherStrings) => {\n  const commonMiddle = strings.find(s => otherStrings.indexOf(s) >= 0);\n  return commonMiddle? commonMiddle.length : [];\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde', 'xyz'])\n  ['abc', 'bcd', 'cde']\n  */\nconst lengthOfCommonSubstring = (strings, otherStrings) => {\n  const commonSubstring = strings.find(s => otherStrings.indexOf(s) >= 0);\n  return commonSubstring? commonSubstring.length : [];\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde', 'xyz'])\n  ['abc', 'bcd', 'cde']\n  */\nconst lengthOfCommonSubstring = (strings, otherStrings) => {\n  const commonSubstring = strings.find(s => otherStrings.indexOf(s) >= 0);\n  return commonSubstring? commonSubstring.length : [];\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde', 'xyz'])\n  ['abc', 'bcd', 'cde']\n  */\nconst lengthOfCommonSubstring = (strings, otherStrings) => {\n  const commonSubstring = strings.find(s => otherStrings.indexOf(s) >= 0);\n  return commonSubstring? commonSubstring.length : [];\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde', 'xyz'])\n  ['abc', 'bcd', 'cde']\n  */\nconst lengthOfCommonSubstring = (strings, otherStrings) => {\n  const commonSubstring = strings.find(s => otherStrings.indexOf(s) >= 0);\n  return commonSubstring? commonSubstring.length : [];\n};\n\n/*\n  Given a list of strings, return a list of strings where all the strings\n  are of the same length.\n  >>> lengthOfCommonPrefix([], [])\n  []\n  >>> lengthOfCommonPrefix(['abc', 'bcd', 'cde'], ['abc', 'bcd', 'cde'])\n  ['abc']\n  >>> lengthOfCommonPrefix(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.reduce((acc, item) => {\n    if (acc) {\n      return acc;\n    }\n    if (item < 0) {\n      return true;\n    }\n    return false;\n  }, false);\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 4) return true\n  if (n % 3 === 0) return false\n  if (n < 9) return true\n  if (n % 5 === 0) return false\n  if (n < 25) return true\n  if (n % 7 === 0) return false\n  if (n < 67) return true\n  if (n % 11 === 0) return false\n  if (n < 137) return true\n  if (n % 13 === 0) return false\n  if (n < 271) return true\n  if (n % 17 === 0) return false\n  if (n < 461) return true\n  if (n % 19 === 0) return false\n  if (n < 823) return true\n  if (n % 23 === 0) return false\n  if (n < 1657) return true\n  if (n % 29 === 0) return false\n  if (n < 3491) return true\n  if (n % 31 === 0) return false\n  if (n < 8189) return true\n  if (n % 37 === 0) return false\n  if (n < 32737) return true\n  if (n % 41 === 0) return false\n  if (n < 84829) return true\n  if (n % 43 === 0) return false\n  if (n < 327681) return true\n  if (n % 47 === 0) return false\n  if (n < 3276801) return true\n  if (n % 53 === 0) return false\n  if (n < 32768097) return true\n  if (n % 59 === 0) return false\n  if (n < 327680997) return true\n  if (n % 61 === 0) return false\n  if (n < 3276809997) return true\n  if (n % 67 === 0) return false\n  if (n < 32768099997) return true\n  if (n % 71 === 0) return false\n  if (n < 327680999997) return true\n  if (n % 73 === 0) return false\n  if (n < 3276809999997) return true\n  if (n % 79 === 0) return false\n  if (n < 32768099999997) return true\n  if (n % 83 === 0) return false\n  if (n < 327680999999999) return true\n  if (n % 89 === 0) return false\n  if (n < 3276809999999997) return true\n  if (n % 97 === 0) return false\n  if (n < 32768099999999997) return true\n  if (n % 101 === 0) return false\n  if (n < 327680999999999997) return true\n  if (n % 103 === 0) return false\n  if (n < 3276809999999999997) return true\n  if (n % 109 === 0) return false\n  if (n < 32768099999999999997) return true\n  if (n % 113 === 0) return false\n  if (n < 327680999999999999997) return true\n  if (n % 127 === 0) return false\n  if (n < 32768099999999999999997) return true\n  if (n % 131 === 0) return false\n  if (n < 327680999999999999999997) return true\n  if (n % 137 === 0) return false\n  if (n < 3276809999999999999999997) return true\n  if (n % 139 === 0) return false\n  if (n < 327680999999999999999999997) return true\n  if (n % 143 === 0) return false\n  if (n < 3276809999999999999999999997) return true\n  if (n % 149 === 0) return false\n  if (n < 32768099999999999999999999997) return true\n  if (n % 151 === 0) return false\n  if (n < 3276809999999999999999999999997) return true\n  if (n % 157 === 0) return false\n  if (n < 32768099999999999999999999999997) return true\n  if (n % 163 === 0) return false\n  if (n < 327680999999999999999999999999997) return true\n  if (n % 167 === 0) return false\n  if (n < 32768099999999999999999999999999997) return true\n  if (n % 179 === 0) return false\n  if (n < 327680999999999999999999999999999997) return true\n  if (n % 181 === 0) return false\n  if (n < 3276809999999999999999999999999999997) return true\n  if (n % 187 === 0) return false\n  if (n < 327680999999999999999999999999999999997) return true\n  if (n % 191 === 0) return false\n  if (n < 3276809999999999999999999999999999999997) return true\n  if (n % 193 === 0) return false\n  if (n < 32768099999999999999999999999999999999997) return true\n  if (n % 197 === 0) return false\n  if (n < 3276809999999999999999999999999999999999997) return true\n  if (n % 199 === 0) return false\n  if (n < 32768099999999999999999999999999999999999997) return true\n  if (n % 201 === 0) return false\n  if (n < 327680999999999999999999999999999999999999997) return true\n  if (n % 203 === 0) return false\n  if (n < 32768099999999999999999999999999999999999999997) return true\n  if (n % 207 === 0) return false\n  if (n < 327680999999999999999999999999999999999999999997) return true\n  if (n % 209 === 0) return false\n  if (n < 3276809999999999999999999999999999999999999999997) return true\n  if (n % 211 === 0) return false\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  let diff = sum;\n  for (let i = 0; i < xs.length; i++) {\n    diff -= xs[i];\n    if (diff === 0) {\n      return xs[i];\n    }\n  }\n  return -1;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  let diff = sum;\n  for (let i = 0; i < xs.length; i++) {\n    diff -= xs[i];\n    if (diff === 0) {\n      return xs[i];\n    }\n  }\n  return -1;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  let diff = sum;\n  for (let i = 0; i < xs.length; i++) {\n    diff -= xs[i];\n    if (diff === 0) {\n      return xs[i];\n    }\n  }\n  return -1;\n};\n\nconst findZero4 = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  let diff = sum;\n  for (let i = 0; i < xs.length; i++) {\n    diff -= xs[i];\n    if (diff === 0) {\n      return xs[i];\n    }\n  }\n  return -1;\n};\n\nconst findZero5 = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  let diff = sum;\n  for (let i = 0; i < xs.length; i++) {\n    diff -= xs[i];\n    if (diff === 0) {\n      return xs[i];\n    }\n  }\n  return -1;\n};\n\nconst findZero6 = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  let diff = sum;\n  for (let i = 0; i < xs.length; i++) {\n    diff -=", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sortedThird = [...l].filter((x) => x % 3 === 0).sort((a, b) => a - b);\n  return sorted.concat(sortedThird);\n}\n\n/*\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [1, 2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter((x) => seen.add(x));\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique2 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique3 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique4 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique5 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique6 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique7 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique8 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique9 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique10 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique11 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique12 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique13 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique14 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique15 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique16 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique17 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique18 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique19 = (l) => {\n  return l.filter((x) =>!seen.has(x)).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique20 = (l) => {\n  return l.filter((x) =>!seen.has", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0\n  let buzz = 0\n  let divisor = 11\n  let divisor2 = 13\n  while (n > 0) {\n    if (n % divisor === 0) {\n      fizz++\n    }\n    if (n % divisor2 === 0) {\n      buzz++\n    }\n    n--\n  }\n  return fizz + buzz\n}\n\n/*\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  2\n  >>> fizzBuzz(3)\n  3\n  >>> fizzBuzz(4)\n  4\n  >>> fizzBuzz(5)\n  5\n  >>> fizzBuzz(6)\n  6\n  >>> fizzBuzz(7)\n  7\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(9)\n  9\n  >>> fizzBuzz(10)\n  10\n  >>> fizzBuzz(11)\n  11\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(14)\n  14\n  >>> fizzBuzz(15)\n  15\n  >>> fizzBuzz(16)\n  16\n  >>> fizzBuzz(17)\n  17\n  >>> fizzBuzz(18)\n  18\n  >>> fizzBuzz(19)\n  19\n  >>> fizzBuzz(20)\n  20\n  >>> fizzBuzz(21)\n  21\n  >>> fizzBuzz(22)\n  22\n  >>> fizzBuzz(23)\n  23\n  >>> fizzBuzz(24)\n  24\n  >>> fizzBuzz(25)\n  25\n  >>> fizzBuzz(26)\n  26\n  >>> fizzBuzz(27)\n  27\n  >>> fizzBuzz(28)\n  28\n  >>> fizzBuzz(29)\n  29\n  >>> fizzBuzz(30)\n  30\n  >>> fizzBuzz(31)\n  31\n  >>> fizzBuzz(32)\n  32\n  >>> fizzBuzz(33)\n  33\n  >>> fizzBuzz(34)\n  34\n  >>> fizzBuzz(35)\n  35\n  >>> fizzBuzz(36)\n  36\n  >>> fizzBuzz(37)\n  37\n  >>> fizzBuzz(38)\n  38\n  >>> fizzBuzz(39)\n  39\n  >>> fizzBuzz(40)\n  40\n  >>> fizzBuzz(41)\n  41\n  >>> fizzBuzz(42)\n  42\n  >>> fizzBuzz(43)\n  43\n  >>> fizzBuzz(44)\n  44\n  >>> fizzBuzz(45)\n  45\n  >>> fizzBuzz(46)\n  46\n  >>> fizzBuzz(47)\n  47\n  >>> fizzBuzz(48)\n  48\n  >>> fizzBuzz(49)\n  49\n  >>> fizzBuzz(50)\n  50\n  >>> fizzBuzz(51)\n  51\n  >>> fizzBuzz(52)\n  52\n  >>> fizzBuzz(53)\n  53\n  >>> fizzBuzz(54)\n  54\n  >>> fizzBuzz(55)\n  55\n  >>> fizzBuzz(56)\n  56\n  >>> fizzBuzz(57)\n  57\n  >>> fizzBuzz(58)\n  58\n  >>> fizzBuzz(59)\n  59\n  >>> fizzBuzz(60)\n  60\n  >>> fizzBuzz(61)\n  61\n  >>> fizzBuzz(62)\n  62\n  >>> fizzBuzz(63)\n  63\n  >>> fizzBuzz(64)\n  64\n  >>> fizzBuzz(65)\n  65\n  >>> fizzBuzz(66)\n  66\n  >>> fizzBuzz(67)\n  67\n  >>> fizzBuzz(68)\n  68\n  >>> fizzBuzz(69)\n  69\n  >>> fizzBuzz(70)\n  70\n  >>> fizzBuzz(71)\n  71\n  >>> fizzBuzz(72)\n  72\n  >>> fizzBuzz(73)\n  73\n  >>> fizzBuzz(74)\n  74\n  >>> fizzBuzz(75)\n  75\n  >>> fizzBuzz(76)\n  76\n  >>> fizzBuzz(77)\n  77\n  >>> fizzBuzz(78)\n  78\n  >>> fizzBuzz(79)\n  79\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0\n  let buzz = 0\n  let divisor = 11\n  let divisor2 = 13\n  while (n > 0) {\n    if (n % divisor === 0) {\n      fizz++\n    }\n    if (n % divisor2 === 0) {\n      buzz++\n    }\n    n--\n  }\n  return fizz + buzz\n}\n\n/*\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  2\n  >>> fizzBuzz(3)\n  3\n  >>> fizzBuzz(4)\n  4\n  >>> fizzBuzz(5)\n  5\n  >>> fizzBuzz(6)\n  6\n  >>> fizzBuzz(7)\n  7\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(9)\n  9\n  >>> fizzBuzz(10)\n  10\n  >>> fizzBuzz(11)\n  11\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(14)\n  14\n  >>> fizzBuzz(15)\n  15\n  >>> fizzBuzz(16)\n  16\n  >>> fizzBuzz(17)\n  17\n  >>> fizzBuzz(18)\n  18\n  >>> fizzBuzz(19)\n  19\n  >>> fizzBuzz(20)\n  20\n  >>> fizzBuzz(21)\n  21\n  >>> fizzBuzz(22)\n  22\n  >>> fizzBuzz(23)\n  23\n  >>> fizzBuzz(24)\n  24\n  >>> fizzBuzz(25)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  const odd = l.filter((x) => x % 2!== 0);\n  const sorted = even.concat(odd.sort((a, b) => a - b));\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (const group of s.split('')) {\n     if (group.length = = 3) \n       groups.push(group.slice(1) + group[0]);\n     else \n       groups.push(group);\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (const group of s.split('')) {\n     if (group.length = = 3) \n       groups.push(group.slice(1) + group[0]);\n     else \n       groups.push(group);\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (const group of s.split('')) {\n     if (group.length = = 3) \n       groups.push(group.slice(1) + group[0]);\n     else \n       groups.push(group);\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (const group of s.split('')) {\n     if (group.length = = 3) \n       groups.push(group.slice(1) + group[0]);\n     else \n       groups.push(group);\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (isPrime(fib)) {\n      return fib;\n    }\n    prime = prime + 2;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = numbers.map(x => Math.abs(x - mean));\n  return median(mad);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum of the squared differences \n  between each element and a centerpoint (mean in this shell ): \n  SD = sqrt(sum(x - x_mean)^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sd = numbers.map(x => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(sd));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the sum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 1 && l.length > 2;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to one, and assumed otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 2 && l.length > 2;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to two, and assumed otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 3 && l.length > 2;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to three, and assumed otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 4 && l.length > 2;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to four, and assumed otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 5 && l.length > 2;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to five, and assumed otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 6 && l.length > 2;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to six, and assumed otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> tri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   let cars = [\n     {\n       x: 0,\n       y: 0,\n       vx: 0,\n       vy: 0,\n       r: 0\n     },\n    ...\n   ]\n   let carsLeft = cars.length\n   let carsRight = cars.length\n   let carsLeftIndex = 0\n   let carsRightIndex = 0\n   let carsLeftTime = 0\n   let carsRightTime = 0\n   let carsLeftTimeDiff = 0\n   let carsRightTimeDiff = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRightTimeDiffSquared = 0\n   let carsLeftTimeDiffSquared = 0\n   let carsRight", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10,", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const result = x.toString(base);\n  const baseDigits = result.split('').reverse().join('');\n  return baseDigits;\n};\n\n/*\n  Given a number x, return the number of digits in x.\n  >>> digits(8)\n  2\n  >>> digits(7)\n  1\n  >>> digits(6)\n  1\n  >>> digits(5)\n  1\n  >>> digits(4)\n  1\n  >>> digits(3)\n  1\n  >>> digits(2)\n  1\n  >>> digits(1)\n  1\n  >>> digits(0)\n  1\n  >>> digits(-1)\n  1\n  >>> digits(-2)\n  1\n  >>> digits(-3)\n  1\n  >>> digits(-4)\n  1\n  >>> digits(-5)\n  1\n  >>> digits(-6)\n  1\n  >>> digits(-7)\n  1\n  >>> digits(-8)\n  1\n  >>> digits(-9)\n  1\n  >>> digits(-10)\n  1\n  >>> digits(-11)\n  1\n  >>> digits(-12)\n  1\n  >>> digits(-13)\n  1\n  >>> digits(-14)\n  1\n  >>> digits(-15)\n  1\n  >>> digits(-16)\n  1\n  >>> digits(-17)\n  1\n  >>> digits(-18)\n  1\n  >>> digits(-19)\n  1\n  >>> digits(-20)\n  1\n  >>> digits(-21)\n  1\n  >>> digits(-22)\n  1\n  >>> digits(-23)\n  1\n  >>> digits(-24)\n  1\n  >>> digits(-25)\n  1\n  >>> digits(-26)\n  1\n  >>> digits(-27)\n  1\n  >>> digits(-28)\n  1\n  >>> digits(-29)\n  1\n  >>> digits(-30)\n  1\n  >>> digits(-31)\n  1\n  >>> digits(-32)\n  1\n  >>> digits(-33)\n  1\n  >>> digits(-34)\n  1\n  >>> digits(-35)\n  1\n  >>> digits(-36)\n  1\n  >>> digits(-37)\n  1\n  >>> digits(-38)\n  1\n  >>> digits(-39)\n  1\n  >>> digits(-40)\n  1\n  >>> digits(-41)\n  1\n  >>> digits(-42)\n  1\n  >>> digits(-43)\n  1\n  >>> digits(-44)\n  1\n  >>> digits(-45)\n  1\n  >>> digits(-46)\n  1\n  >>> digits(-47)\n  1\n  >>> digits(-48)\n  1\n  >>> digits(-49)\n  1\n  >>> digits(-50)\n  1\n  >>> digits(-51)\n  1\n  >>> digits(-52)\n  1\n  >>> digits(-53)\n  1\n  >>> digits(-54)\n  1\n  >>> digits(-55)\n  1\n  >>> digits(-56)\n  1\n  >>> digits(-57)\n  1\n  >>> digits(-58)\n  1\n  >>> digits(-59)\n  1\n  >>> digits(-60)\n  1\n  >>> digits(-61)\n  1\n  >>> digits(-62)\n  1\n  >>> digits(-63)\n  1\n  >>> digits(-64)\n  1\n  >>> digits(-65)\n  1\n  >>> digits(-66)\n  1\n  >>> digits(-67)\n  1\n  >>> digits(-68)\n  1\n  >>> digits(-69)\n  1\n  >>> digits(-70)\n  1\n  >>> digits(-71)\n  1\n  >>> digits(-72)\n  1\n  >>> digits(-73)\n  1\n  >>> digits(-74)\n  1\n  >>> digits(-75)\n  1\n  >>> digits(-76)\n  1\n  >>> digits(-77)\n  1\n  >>> digits(-78)\n  1\n  >>> digits(-79)\n  1\n  >>> digits(-80)\n  1\n  >>> digits(-81)\n  1\n  >>> digits(-82)\n  1\n  >>> digits(-83)\n  1\n  >>> digits(-84)\n  1\n  >>> digits(-85)\n  1\n  >>> digits(-86)\n  1\n  >>> digits(-87)\n  1\n  >>> digits(-88)\n  1\n  >>> digits(-89)\n  1\n  >>> digits(-90)\n  1\n  >>> digits(-91)\n  1\n  >>> digits(-92)\n  1\n  >>> digits(-93)\n  1\n  >>> digits(-94)\n  1\n  >>> digits(-95)\n  1\n  >>> digits(-96)\n  1\n  >>> digits(-97)\n  1\n  >>> digits(-98)\n  1\n  >>> digits(-99)\n  1\n  >>> digits(-100)\n  1\n  >>> digits(-101)\n  1\n  >>> digits(-102)\n  1\n  >>> digits(-103)\n  1\n  >>> digits(-104)\n  1\n  >>> digits(-105)\n  1\n  >>> digits(-106)\n  1\n  >>> digits(-107)\n  1\n  >>> digits(-108)\n  1\n  >>> digits(-109)\n  1\n  >>> digits(-110)\n  1\n  >>> digits(-111)\n  1\n  >>> digits(-112)\n  1\n  >>> digits(-113)\n  1\n  >>> digits(-114)\n  1\n  >>> digits(-115)\n  1\n  >>> digits(-116)\n  1\n  >>> digits(-117)\n  1\n  >>> digits(-118)\n  1\n  >>> digits(-119)\n  1\n  >>> digits(-120)\n  1\n  >>> digits(-121)\n  1\n  >>> digits(-122)\n  1\n  >>> digits(-123)\n  1\n  >>> digits(-124)\n  1\n  >>> digits(-125)\n  1\n  >>> digits(-126)\n  1\n  >>> digits(-127)\n  1\n  >>> digits(-128)\n  1\n  >>> digits(-129)\n  1\n  >>> digits(-130)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 1) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Returns the length of a given string\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (text) => {\n    return text.length;\n};\n\n/*\n  Returns the number of characters in a given string\n  >>> count('abc')\n  3\n  >>> count('a')\n  1\n  >>> count('a')\n  1\n  */\nconst count = (text) => {\n    return text.split('').length;\n};\n\n/*\n  Returns the number of words in a given string\n  >>> countWords('abc')\n  1\n  >>> countWords('a')\n  1\n  >>> countWords('a')\n  1\n  */\nconst countWords = (text) => {\n    return text.split(' ').length;\n};\n\n/*\n  Returns the number of lines in a given string\n  >>> countLines('abc')\n  1\n  >>> countLines('a')\n  1\n  >>> countLines('a')\n  1\n  */\nconst countLines = (text) => {\n    return text.split('\\n').length;\n};\n\n/*\n  Returns the number of characters in a given string\n  >>> countChars('abc')\n  3\n  >>> countChars('a')\n  1\n  >>> countChars('a')\n  1\n  */\nconst countChars = (text) => {\n    return text.split('').length;\n};\n\n/*\n  Returns the number of words in a given string\n  >>> countWords('abc')\n  1\n  >>> countWords('a')\n  1\n  >>> countWords('a')\n  1\n  */\nconst countWords = (text) => {\n    return text.split(' ').length;\n};\n\n/*\n  Returns the number of lines in a given string\n  >>> countLines('abc')\n  1\n  >>> countLines('a')\n  1\n  >>> countLines('a')\n  1\n  */\nconst countLines = (text) => {\n    return text.split('\\n').length;\n};\n\n/*\n  Returns the number of characters in a given string\n  >>> countChars('abc')\n  3\n  >>> countChars('a')\n  1\n  >>> countChars('a')\n  1\n  */\nconst countChars = (text) => {\n    return text.split('').length;\n};\n\n/*\n  Returns the number of words in a given string\n  >>> countWords('abc')\n  1\n  >>> countWords('a')\n  1\n  >>> countWords('a')\n  1\n  */\nconst countWords = (text) => {\n    return text.split(' ').length;\n};\n\n/*\n  Returns the number of lines in a given string\n  >>> countLines('abc')\n  1\n  >>> countLines('a')\n  1\n  >>> countLines('a')\n  1\n  */\nconst countLines = (text) => {\n    return text.split('\\n').length;\n};\n\n/*\n  Returns the number of characters in a given string\n  >>> countChars('abc')\n  3\n  >>> countChars('a')\n  1\n  >>> countChars('a')\n  1\n  */\nconst countChars = (text) => {\n    return text.split('').length;\n};\n\n/*\n  Returns the number of words in a given string\n  >>> countWords('abc')\n  1\n  >>> countWords('a')\n  1\n  >>> countWords('a')\n  1\n  */\nconst countWords = (text) => {\n    return text.split(' ').length;\n};\n\n/*\n  Returns the number of lines in a given string\n  >>> countLines('abc')\n  1\n  >>> countLines('a')\n  1\n  >>> countLines('a')\n  1\n  */\nconst countLines = (text) => {\n    return text.split('\\n').length;\n};\n\n/*\n  Returns the number of characters in a given string\n  >>> countChars('abc')\n  3\n  >>> countChars('a')\n  1\n  >>> countChars('a')\n  1\n  */\nconst countChars = (text) => {\n    return text.split('').length;\n};\n\n/*\n  Returns the number of words in a given string\n  >>> countWords('abc')\n  1\n  >>> countWords('a')\n  1\n  >>> countWords('a')\n  1\n  */\nconst countWords = (text) => {\n    return text.split(' ').length;\n};\n\n/*\n  Returns the number of lines in a given string\n  >>> countLines('abc')\n  1\n  >>> countLines('a')\n  1\n  >>> countLines('a')\n  1\n  */\nconst countLines = (text) => {\n    return text.split('\\n').length;\n};\n\n/*\n  Returns the number of characters in a given string\n  >>> countChars('abc')\n  3\n  >>> countChars('a')\n  1\n  >>> countChars('a')\n  1\n  */\nconst countChars = (text) => {\n    return text.split('').length;\n};\n\n/*\n  Returns the number of words in a given string\n  >>> countWords('abc')\n  1\n  >>> countWords('a')\n  1\n  >>> countWords('a')\n  1\n  */\nconst countWords = (text) => {\n    return text.split(' ').length;\n};\n\n/*\n  Returns the number of lines in a given string\n  >>> countLines('abc')\n  1\n  >>> countLines('a')\n  1\n  >>> countLines('a')\n  1\n  */\nconst countLines = (text) => {\n    return text.split('\\n').length;\n};\n\n/*\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p) + p;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(3, 0)\n  3\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(3, 5)\n  1\n  >>> gcd(3, 7)\n  1\n  >>> gcd(3, 8)\n  3\n  >>> gcd(8, 9)\n  1\n  >>> gcd(9, 9)\n  1\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 1)\n  1\n  >>> gcd(9, 2)\n  3\n  >>> gcd(9, 3)\n  3\n  >>> gcd(9, 4)\n  3\n  >>> gcd(9, 5)\n  3\n  >>> gcd(9, 6)\n  3\n  >>> gcd(9, 7)\n  3\n  >>> gcd(9, 8)\n  3\n  >>> gcd(9, 9)\n  1\n  >>> gcd(0, 9)\n  9\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 1)\n  1\n  >>> gcd(9, 2)\n  3\n  >>> gcd(9, 3)\n  3\n  >>> gcd(9, 4)\n  3\n  >>> gcd(9, 5)\n  3\n  >>> gcd(9, 6)\n  3\n  >>> gcd(9, 7)\n  3\n  >>> gcd(9, 8)\n  3\n  >>> gcd(9, 9)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(3, 5)\n  1\n  >>> gcd(3, 7)\n  1\n  >>> gcd(3, 8)\n  3\n  >>> gcd(8, 9)\n  1\n  >>> gcd(9, 9)\n  1\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 1)\n  1\n  >>> gcd(9, 2)\n  3\n  >>> gcd(9, 3)\n  3\n  >>> gcd(9, 4)\n  3\n  >>> gcd(9, 5)\n  3\n  >>> gcd(9, 6)\n  3\n  >>> gcd(9, 7)\n  3\n  >>> gcd(9, 8)\n  3\n  >>> gcd(9, 9)\n  1\n  >>> gcd(0, 9)\n  9\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 1)\n  1\n  >>> gcd(9, 2)\n  3\n  >>> gcd(9, 3)\n  3\n  >>> gcd(9, 4)\n  3\n  >>> gcd(9, 5)\n  3\n  >>> gcd(9, 6)\n  3\n  >>> gcd(9, 7)\n  3\n  >>> gcd(9, 8)\n  3\n  >>> gcd(9, 9)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(3, 5)\n  1\n  >>> gcd(3, 7)\n  1\n  >>> gcd(3, 8)\n  3\n  >>> gcd(8, 9)\n  1\n  >>> gcd(9, 9)\n  1\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 1)\n  1\n  >>> gcd(9, 2)\n  3\n  >>> gcd(9, 3)\n  3\n  >>> gcd(9, 4)\n  3\n  >>> gcd(9, 5)\n  3\n  >>> gcd(9, 6)\n  3\n  >>> gcd(9, 7)\n  3\n  >>> gcd(9, 8)\n  3\n  >>> gcd(9, 9)\n  1\n  >>> gcd(0, 9)\n  9\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 1)\n  1\n  >>> gcd(9, 2)\n  3\n  >>> gcd(9, 3)\n  3\n  >>> gcd(9, 4)\n  3\n  >>> gcd(9, 5)\n  3\n  >>> gcd(9, 6)\n  3\n  >>> gcd(9, 7)\n  3\n  >>> gcd(9, 8)\n  3\n  >>> gcd(9, 9)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(3, 5)\n  1\n  >>> gcd(3, 7)\n  1\n  >>> gcd(3, 8)\n  3\n  >>> gcd(8, 9)\n  1\n  >>> gcd(9, 9)\n  1\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 1)\n  1\n  >>> gcd(9, 2)\n  3\n  >>> gcd(9, 3)\n  3\n  >>> gcd(9, 4)\n  3\n  >>> gcd(9, 5)\n  3\n  >>> gcd(9, 6)\n  3\n  >>> gcd(9, 7)\n  3\n  >>> gcd(9, 8)\n  3\n  >>> gcd(9, 9)\n  1\n  >>> gcd(0, 9)\n  9\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  if (len === 0) {\n    return []\n  }\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4,'')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 'x', 4, '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n*/\n\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0);\n  }).join(\" \");\n}\n\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => {\n    return ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0);\n  }).join(\"\");\n}\n\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_decode = (s) => {\n  return encodeShift(decodeShift(s));\n}\n\nconst decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(s));\n}\n\nconst encode_shift_decode_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(s)));\n}\n\nconst decode_shift_encode_decode = (s) => {\n  return decodeShift(encodeShift(decodeShift(s)));\n}\n\nconst encode_shift_decode_encode_decode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(s))));\n}\n\nconst decode_shift_encode_decode_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(s))));\n}\n\nconst encode_shift_decode_encode_decode_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\nconst decode_shift_encode_decode_encode_decode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\nconst encode_shift_decode_encode_decode_encode_decode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))));\n}\n\nconst decode_shift_encode_decode_encode_decode_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))));\n}\n\nconst encode_shift_decode_encode_decode_encode_decode_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))))));\n}\n\nconst decode_shift_encode_decode_encode_decode_encode_decode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))))));\n}\n\nconst encode_shift_decode_encode_decode_encode_decode_encode_decode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n}\n\nconst decode_shift_encode_decode_encode_decode_encode_decode_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n}\n\nconst encode_shift_decode_encode_decode_encode_decode_encode_decode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n}\n\nconst decode_shift_encode_decode_encode_decode_encode_decode_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n}\n\nconst encode_shift_decode_encode_decode_encode_decode_encode_decode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n}\n\nconst decode_shift_encode_decode_encode_decode_encode_decode_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s))))))));\n}\n\nconst encode_shift_decode_encode_decode_encode_decode_encode_decode = (s) => {\n  return encodeShift(decodeShift(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  let newText = text\n  vowels.forEach(v => {\n    newText = newText.replace(v, '')\n  })\n  return newText\n}\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuationpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst withinThreshold = (l, t) => {\n  return belowThreshold(l, t) && aboveThreshold(l, t);\n};\n\n/*Return true if all numbers in the list l are within threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst withinThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are within threshold t1, t2, t3.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst withinThresholds = (l, t1, t2, t3) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) && aboveThreshold(l, t3);\n};\n\n/*Return true if all numbers in the list l are within threshold t1, t2, t3, t4.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst withinThresholds = (l, t1, t2, t3, t4) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) && aboveThreshold(l, t3) && aboveThreshold(l, t4);\n};\n\n/*Return true if all numbers in the list l are within threshold t1, t2, t3, t4, t5.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst withinThresholds = (l, t1, t2, t3, t4, t5) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) && aboveThreshold(l, t3) && aboveThreshold(l, t4) && aboveThreshold(l, t5);\n};\n\n/*Return true if all numbers in the list l are within threshold t1, t2, t3, t4, t5, t6.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst withinThresholds = (l, t1, t2, t3, t4, t5, t6) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) && aboveThreshold(l, t3) && aboveThreshold(l, t4) && aboveThreshold(l, t5) && aboveThreshold(l, t6);\n};\n\n/*Return true if all numbers in the list l are within threshold t1, t2, t3, t4, t5, t6, t7.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst withinThresholds = (l, t1, t2, t3, t4, t5, t6, t7) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2) && aboveThreshold(l, t3) && aboveThreshold(l,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCase = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCase = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCaseAndCase = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCaseAndCase = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCaseAndCase = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const open = brackets.split(\"<\").map(x => x.charAt(0));\n  const close = brackets.split(\"<\").map(x => x.charAt(1));\n  const len = open.length;\n  for (let i = 0; i < len; i++) {\n    if (open[i] === close[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, return the number of opening brackets.\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<\")\n  0\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  1\n  >>>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i <= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i <= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i < last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i <= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i < last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i <= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i > last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i >= last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((i) => i < last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  return [...l1_set].filter(x => l2_set.has(x)).sort();\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor7 =", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_array = paren_string_array.map(paren_string => paren_string.split('('));\n  const paren_string_array_array_length = paren_string_array_array.length;\n  const paren_string_array_array_array = paren_string_array_array.map(paren_string_array => paren_string_array.map(paren_string => paren_string.split(')')));\n  const paren_string_array_array_array_length = paren_string_array_array_array.length;\n  const paren_string_array_array_array_array = paren_string_array_array_array_array.map(paren_string_array_array => paren_string_array_array_array.map(paren_string_array_array => paren_string_array_array_array.map(paren_string_array_array => paren_string_array_array_array.map(paren_string_array_array_array => paren_string_array_array_array_array.map(paren_string_array_array_array => paren_string_array_array_array_array.map(paren_string_array_array_array_array => paren_string_array_array_array_array_array.map(paren_string_array_array_array_array_array => paren_string_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_string_array_array_array_array_array_array_array_array_array_array => paren_string_array_array_array_array_array_array_array_array_array_array_array_array.map(paren_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" || brackets[i] === \")\") {\n      stack.push(brackets[i]);\n    } else if (stack.length === 0) {\n      return false;\n    } else if (stack[stack.length - 1] === \"(\" && brackets[i] === \")\") {\n      stack.pop();\n    } else {\n      return false;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return a new string with the opening and closing brackets\n  replaced by a single space.\n\n  >>> replaceBrackets(\"(()())\")\n '( ) ( ) '\n  >>> replaceBrackets(\"()\")\n ''\n  >>> replaceBrackets(\"\")\n  ''\n  >>> replaceBrackets(\"(())\")\n '( ) '\n  >>> replaceBrackets(\"(()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()\")\n '( ) '\n  >>> replaceBrackets(\"(()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")\n '( ) '\n  >>> replaceBrackets(\"(()()())\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [1];\n  for (let i = 1; i < xs.length; i++) {\n    d.push(xs[i] * d[i - 1]);\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  Return an array of roots.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([1, 2, 3, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n/*\n  The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n  fibfib(0) = = 0 \n  fibfib(1) = = 0 \n  fibfib(2) = = 1 \n  fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n  fibfib(0) = = 0 \n  fibfib(1) = = 0 \n  fibfib(2) = = 1 \n  fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n  fibfib(0) = = 0 \n  fibfib(1) = = 0 \n  fibfib(2) = = 1 \n  fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n  fibfib(0) = = 0 \n  fibfib(1) = = 0 \n  fibfib(2) = = 1 \n  fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n  fibfib(0) = = 0 \n  fibfib(1) = = 0 \n  fibfib(2) = = 1 \n  fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*\n  The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n  fibfib(0) = = 0 \n  fibfib(1) = = 0 \n  fibfib(2) = = 1 \n  fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split('').reverse();\n  const shifted = reversed.slice(0, shift).join('');\n  return shifted;\n};\n\nconst circularShift = (x, shift) => {\n  const numeral = x.toString();\n  const reversed = numeral.split(''", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let str = s.split(\" \")\n   let num = 0\n   for (let i = 0; i < str.length; i++) {\n     num += parseInt(str[i])\n   }\n   return num\n }\n*/\n\nconst fruitDistribution = (s, n) => {\n  let str = s.split(\" \")\n  let num = 0\n  for (let i = 0; i < str.length; i++) {\n    num += parseInt(str[i])\n  }\n  return num\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 orange \", 19))\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples and 3 orange \", 100))\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  let index = 0;\n  let minValue = arr[0];\n  let minValueIndex = 0;\n  let value = arr[0];\n  let valueIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n      minValue = arr[i];\n      minValueIndex = i;\n    } else if (arr[i] === min) {\n      if (arr[i] < minValue) {\n        min = arr[i];\n        minIndex = i;\n        minValue = arr[i];\n        minValueIndex = i;\n      } else if (arr[i] === minValue) {\n        if (arr[i] < value) {\n          min = arr[i];\n          minIndex = i;\n          minValue = arr[i];\n          minValueIndex = i;\n        } else if (arr[i] === value) {\n          if (arr[i] < valueIndex) {\n            min = arr[i];\n            minIndex = i;\n            minValue = arr[i];\n            minValueIndex = i;\n          } else if (arr[i] === valueIndex) {\n            if (arr[i] < index) {\n              min = arr[i];\n              minIndex = i;\n              minValue = arr[i];\n              minValueIndex = i;\n            } else if (arr[i] === index) {\n              if (arr[i] < index) {\n                min = arr[i];\n                minIndex = i;\n                minValue = arr[i];\n                minValueIndex = i;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return [min, minIndex];\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring16 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring17 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring18 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >=", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length - 1;\n  while (i < j) {\n    const min = sorted[i];\n    const max = sorted[j];\n    if (min < max) {\n      result.push(min);\n      i++;\n    } else {\n      result.push(max);\n      j--;\n    }\n  }\n  result.push(sorted[i]);\n  return result;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return Math.sqrt(a * b * c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return -1;\n  }\n  if (a + c <= b) {\n    return -1;\n  }\n  if (b + c <= a) {\n    return -1;\n  }\n  return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly2 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly3 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly4 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly5 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly6 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly7 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly8 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly9 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly10 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconst willItFly11 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  let change = 0;\n  let count = 0;\n  let flag = 0;\n  while (i < arr.length) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  while (j < arr.length) {\n    if (arr[j] < min) {\n      min = arr[j];\n      minIndex = j;\n    }\n    if (arr[j] > max) {\n      max = arr[j];\n      maxIndex = j;\n    }\n    j++;\n  }\n  while (minIndex < maxIndex) {\n    temp = arr[minIndex];\n    arr[minIndex] = arr[maxIndex];\n    arr[maxIndex] = temp;\n    minIndex++;\n    maxIndex--;\n    change++;\n  }\n  while (change > 0) {\n    change--;\n    temp = arr[minIndex];\n    arr[minIndex] = arr[maxIndex];\n    arr[maxIndex] = temp;\n    minIndex++;\n    maxIndex--;\n    count++;\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChangepassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n  const lst1All = lst1.reduce((acc, item) => {\n    acc.push(item)\n    return acc\n  }, [])\n  const lst2All = lst2.reduce((acc, item) => {\n    acc.push(item)\n    return acc\n  }, [])\n  const lst1AllLen = lst1All.length\n  const lst2AllLen = lst2All.length\n  const lst1AllEqual = lst1All.every(item => lst2All.includes(item))\n  const lst2AllEqual = lst2All.every(item => lst1All.includes(item))\n  if (lst1AllLen === lst2AllLen && lst1AllEqual && lst2AllEqual) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nmodule.exports = totalMatch\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const result = a % prime.reduce((a, b) => a * b, 1);\n  return result === 0;\n};\n\nconst isPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const result = a % prime.reduce((a, b) => a * b, 1);\n  return result === 0;\n};\n\nconst isPrime2 = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const result = a % prime.reduce((a, b) => a * b, 1);\n  return result === 0;\n};\n\nconst isPrime3 = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower2(x / n, n)\n}\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower3(x / n, n)\n}\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower4(x / n, n)\n}\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower5(x / n, n)\n}\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower6(x / n, n)\n}\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower7(x / n, n)\n}\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower8(x / n, n)\n}\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower9(x / n, n)\n}\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower10(x / n, n)\n}\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower11(x / n, n)\n}\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower12(x / n, n)\n}\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower13(x / n, n)\n}\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower14(x / n, n)\n}\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower15(x / n, n)\n}\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower16(x / n, n)\n}\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower17(x / n, n)\n}\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower18(x / n, n)\n}\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower19(x / n, n)\n}\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower20(x / n, n)\n}\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower21(x / n, n)\n}\n\nconst isSimplePower22 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower22(x / n, n)\n}\n\nconst isSimplePower23 = (x, n) => {\n  if (x === 1) return true\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube(a / 3);\n  return false;\n}\n\nconst iscube2 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube2(a / 3);\n  return false;\n}\n\nconst iscube3 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube3(a / 3);\n  return false;\n}\n\nconst iscube4 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube4(a / 3);\n  return false;\n}\n\nconst iscube5 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube5(a / 3);\n  return false;\n}\n\nconst iscube6 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube6(a / 3);\n  return false;\n}\n\nconst iscube7 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube7(a / 3);\n  return false;\n}\n\nconst iscube8 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube8(a / 3);\n  return false;\n}\n\nconst iscube9 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube9(a / 3);\n  return false;\n}\n\nconst iscube10 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube10(a / 3);\n  return false;\n}\n\nconst iscube11 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube11(a / 3);\n  return false;\n}\n\nconst iscube12 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube12(a / 3);\n  return false;\n}\n\nconst iscube13 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube13(a / 3);\n  return false;\n}\n\nconst iscube14 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube14(a / 3);\n  return false;\n}\n\nconst iscube15 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube15(a / 3);\n  return false;\n}\n\nconst iscube16 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube16(a / 3);\n  return false;\n}\n\nconst iscube17 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube17(a / 3);\n  return false;\n}\n\nconst iscube18 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube18(a / 3);\n  return false;\n}\n\nconst iscube19 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube19(a / 3);\n  return false;\n}\n\nconst iscube20 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube20(a / 3);\n  return false;\n}\n\nconst iscube21 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube21(a / 3);\n  return false;\n}\n\nconst iscube22 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube22(a / 3);\n  return false;\n}\n\nconst iscube23 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return iscube23(a / 3);\n  return false;\n}\n\nconst iscube24 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 3 === 0) return is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  const hexDigitsLen = hexDigits.length;\n  const hexDigitsLenMinusOne = hexDigitsLen - 1;\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17];\n  const primeNumbersLen = primeNumbers.length;\n  const primeNumbersLenMinusOne = primeNumbersLen - 1;\n  const primeNumbersLenMinusTwo = primeNumbersLen - 2;\n  const primeNumbersLenMinusThree = primeNumbersLen - 3;\n  const primeNumbersLenMinusFour = primeNumbersLen - 4;\n  const primeNumbersLenMinusFive = primeNumbersLen - 5;\n  const primeNumbersLenMinusSix = primeNumbersLen - 6;\n  const primeNumbersLenMinusSeven = primeNumbersLen - 7;\n  const primeNumbersLenMinusEight = primeNumbersLen - 8;\n  const primeNumbersLenMinusNine = primeNumbersLen - 9;\n  const primeNumbersLenMinusTen = primeNumbersLen - 10;\n  const primeNumbersLenMinusEleven = primeNumbersLen - 11;\n  const primeNumbersLenMinusTwelve = primeNumbersLen - 12;\n  const primeNumbersLenMinusThirteen = primeNumbersLen - 13;\n  const primeNumbersLenMinusFourteen = primeNumbersLen - 14;\n  const primeNumbersLenMinusFifteen = primeNumbersLen - 15;\n  const primeNumbersLenMinusSixteen = primeNumbersLen - 16;\n  const primeNumbersLenMinusSeventeen = primeNumbersLen - 17;\n  const primeNumbersLenMinusEighteen = primeNumbersLen - 18;\n  const primeNumbersLenMinusNineteen = primeNumbersLen - 19;\n  const primeNumbersLenMinusTwenty = primeNumbersLen - 20;\n  const primeNumbersLenMinusTwentyOne = primeNumbersLen - 21;\n  const primeNumbersLenMinusTwentyTwo = primeNumbersLen - 22;\n  const primeNumbersLenMinusTwentyThree = primeNumbersLen - 23;\n  const primeNumbersLenMinusTwentyFour = primeNumbersLen - 24;\n  const primeNumbersLenMinusTwentyFive = primeNumbersLen - 25;\n  const primeNumbersLenMinusTwentySix = primeNumbersLen - 26;\n  const primeNumbersLenMinusTwentySeven = primeNumbersLen - 27;\n  const primeNumbersLenMinusTwentyEight = primeNumbersLen - 28;\n  const primeNumbersLenMinusTwentyNine = primeNumbersLen - 29;\n  const primeNumbersLenMinusThirty = primeNumbersLen - 30;\n  const primeNumbersLenMinusThirtyOne = primeNumbersLen - 31;\n  const primeNumbersLenMinusThirtyTwo = primeNumbersLen - 32;\n  const primeNumbersLenMinusThirtyThree = primeNumbersLen - 33;\n  const primeNumbersLenMinusThirtyFour = primeNumbersLen - 34;\n  const primeNumbersLenMinusThirtyFive = primeNumbersLen - 35;\n  const primeNumbersLenMinusThirtySix = primeNumbersLen - 36;\n  const primeNumbersLenMinusThirtySeven = primeNumbersLen - 37;\n  const primeNumbersLenMinusThirtyEight = primeNumbersLen - 38;\n  const primeNumbersLenMinusThirtyNine = primeNumbersLen - 39;\n  const primeNumbersLenMinusForty = primeNumbersLen - 40;\n  const primeNumbersLenMinusFortyOne = primeNumbersLen - 41;\n  const primeNumbersLenMinusFortyTwo = primeNumbersLen - 42;\n  const primeNumbersLenMinusFortyThree = primeNumbersLen - 43;\n  const primeNumbersLenMinusFortyFour = primeNumbersLen - 44;\n  const primeNumbersLenMinusFortyFive = primeNumbersLen - 45;\n  const primeNumbersLenMinusFortySix = primeNumbersLen - 46;\n  const primeNumbersLenMinusFortySeven = primeNumbersLen - 47;\n  const primeNumbersLenMinusFortyEight = primeNumbersLen - 48;\n  const primeNumbersLenMinusFortyNine = primeNumbersLen - 49;\n  const primeNumbersLenMinusFifty = primeNumbersLen - 50;\n  const primeNumbersLenMinusFiftyOne = primeNumbersLen - 51;\n  const primeNumbersLenMinusFiftyTwo = primeNumbersLen - 52;\n  const primeNumbersLenMinusFiftyThree = primeNumbersLen - 53;\n  const primeNumbersLenMinusFiftyFour = primeNumbersLen - 54;\n  const primeNumbersLenMinusFiftyFive = primeNumbersLen - 55;\n  const primeNumbersLenMinusFiftySix = primeNumbersLen - 56;\n  const primeNumbersLenMinusFiftySeven = primeNumbersLen - 57;\n  const primeNumbersLenMinusFiftyEight = primeNumbersLen - 58;\n  const primeNumbersLenMinusFiftyNine = primeNumbersLen - 59;\n  const primeNumbersLenMinusSixty = primeNumbersLen - 60;\n  const primeNumbersLenMinusSixtyOne = primeNumbersLen - 61;\n  const primeNumbersLenMinusSixtyTwo = primeNumbersLen - 62;\n  const primeNumbersLenMinusSixtyThree = primeNumbersLen - 63;\n  const primeNumbersLenMinusSixtyFour = primeNumbers", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let digit = 0;\n  while (decimal > 0) {\n    digit = decimal % 2;\n    decimal = decimal / 2;\n    binary = digit + binary;\n  }\n  return binary + 'db';\n};\n\nconsole.log(decimalToBinary(15));\nconsole.log(decimalToBinary(32));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return { sum, product };\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct2 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct3 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct4 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct5 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct6 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct7 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct8 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of tuples consisting of a sum and a product of all the numbers in a list.\n  Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24)]\n  */\nconst sumProduct9 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0\n  let j = 0\n  let count = 0\n  let len = s.length\n  let isHappy = true\n  while (i < len) {\n    if (s[i] === s[j]) {\n      count++\n      if (count === 3) {\n        if (s[i + 1] === s[i + 2]) {\n          if (s[i + 1] === s[i + 3]) {\n            isHappy = false\n            break\n          }\n        }\n      }\n    }\n    j++\n    i++\n  }\n  return isHappy\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n  };\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  let gradesArraySum = 0;\n  for (let i = 0; i < gradesArrayLength; i++) {\n    gradesArraySum += gradesArray[i];\n  }\n  const average = gradesArraySum / gradesArrayLength;\n  const letterGradeSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverage = letterGradeSum / gradesArrayLength;\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum = gradesArray.reduce((a, b) => a + b, 0);\n  const letterGradeAverageSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number);\n  };\n  const isPrimeLength = (number) => {\n    return number.length === prime.test(number).length;\n  };\n  const isPrimeNumber = (number) => {\n    return number > 1 && isPrime(number);\n  };\n  const isPrimeNumberLength = (number) => {\n    return number > 1 && isPrimeLength(number);\n  };\n  const isPrimeNumberLengthOrPrime = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || isPrime(number);\n  };\n  const isPrimeNumberLengthOrPrimeLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || isPrimeLength(number);\n  };\n  const isPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrime = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrime = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrime = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLength = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrime = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number) => {\n    return number > 1 && isPrimeNumberLength(number) || number;\n  };\n  const isPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumberLengthOrPrimeNumber = (number", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   for (let i = 1; i <= n; i++) {\n     if (i === 1 || i === n) {\n       count++;\n     }\n   }\n   return count;\n }\n */\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(startsOneEnds(10));\nconsole.log(startsOneEnds(100));\nconsole.log(startsOneEnds(1000));\nconsole.log(startsOneEnds(10000));\nconsole.log(startsOneEnds(100000));\nconsole.log(startsOneEnds(1000000));\nconsole.log(startsOneEnds(10000000));\nconsole.log(startsOneEnds(100000000));\nconsole.log(startsOneEnds(1000000000));\nconsole.log(startsOneEnds(10000000000));\nconsole.log(startsOneEnds(100000000000));\nconsole.log(startsOneEnds(1000000000000));\nconsole.log(startsOneEnds(10000000000000));\nconsole.log(startsOneEnds(100000000000000));\nconsole.log(startsOneEnds(1000000000000000));\nconsole.log(startsOneEnds(1000000000000000000));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digits = [];\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    digits.unshift(sum % 2);\n    sum = sum / 2;\n  }\n  return digits.join(\"\");\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add22 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add23 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add24 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add25 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add26 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add27 = (lst)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle2 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle3 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle4 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle5 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle6 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle7 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      if (newChar ==='') {\n        newWord +=''\n      } else {\n        newWord += newChar\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst shuffle8 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [row, col] = lst.length === 0? [] : [lst[0].length, 0]\n  for (let i = 0; i < lst.length; i++) {\n    const [row1, col1] = lst[i].length === 0? [] : [lst[i][0].length, 0]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (row1.indexOf(x) === -1) {\n        row1.push(x)\n        col1.push(j)\n      }\n    }\n    row.push(row1)\n    col.push(col1)\n  }\n  return [row, col]\n}\n\nconst getRow2 = (lst, x) => {\n  const [row, col] = lst.length === 0? [] : [lst[0].length, 0]\n  for (let i = 0; i < lst.length; i++) {\n    const [row1, col1] = lst[i].length === 0? [] : [lst[i][0].length, 0]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (row1.indexOf(x) === -1) {\n        row1.push(x)\n        col1.push(j)\n      }\n    }\n    row.push(row1)\n    col.push(col1)\n  }\n  return [row, col]\n}\n\nconst getRow3 = (lst, x) => {\n  const [row, col] = lst.length === 0? [] : [lst[0].length, 0]\n  for (let i = 0; i < lst.length; i++) {\n    const [row1, col1] = lst[i].length === 0? [] : [lst[i][0].length, 0]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (row1.indexOf(x) === -1) {\n        row1.push(x)\n        col1.push(j)\n      }\n    }\n    row.push(row1)\n    col.push(col1)\n  }\n  return [row, col]\n}\n\nconst getRow4 = (lst, x) => {\n  const [row, col] = lst.length === 0? [] : [lst[0].length, 0]\n  for (let i = 0; i < lst.length; i++) {\n    const [row1, col1] = lst[i].length === 0? [] : [lst[i][0].length, 0]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (row1.indexOf(x) === -1) {\n        row1.push(x)\n        col1.push(j)\n      }\n    }\n    row.push(row1)\n    col.push(col1)\n  }\n  return [row, col]\n}\n\nconst getRow5 = (lst, x) => {\n  const [row, col] = lst.length === 0? [] : [lst[0].length, 0]\n  for (let i = 0; i < lst.length; i++) {\n    const [row1, col1] = lst[i].length === 0? [] : [lst[i][0].length, 0]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (row1.indexOf(x) === -1) {\n        row1.push(x)\n        col1.push(j)\n      }\n    }\n    row.push(row1)\n    col.push(col1)\n  }\n  return [row, col]\n}\n\nconst getRow6 = (lst, x) => {\n  const [row, col] = lst.length === 0? [] : [lst[0].length, 0]\n  for (let i = 0; i < lst.length; i++) {\n    const [row1, col1] = lst[i].length === 0? [] : [lst[i][0].length, 0]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (row1.indexOf(x) === -1) {\n        row1.push(x)\n        col1.push(j)\n      }\n    }\n    row.push(row1)\n    col.push(col1)\n  }\n  return [row, col]\n}\n\nconst getRow7 = (lst, x) => {\n  const [row, col] = lst.length === 0? [] : [lst[0].length, 0]\n  for (let i = 0; i < lst.length; i++) {\n    const [row1, col1] = lst[i].length === 0? [] : [lst[i][0].length, 0]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (row1.indexOf(x) === -1) {\n        row1.push(x)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += array[i];\n    sorted.push(array[i]);\n  }\n  if (sum % 2 === 1) {\n    sorted.sort((a, b) => a - b);\n  } else {\n    sorted.sort((a, b) => b - a);\n  }\n  return sorted;\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let s = s.split('');\n  let r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(rotate(s[i]));\n  }\n  return r.join('');\n};\n\nconst rotate = (c) => {\n  let r = '';\n  let i = 0;\n  while (i < c.length) {\n    r += c[i];\n    i++;\n    if (i % 2 === 0) {\n      r += c[i];\n    }\n    i++;\n  }\n  return r;\n};\n\nconst decrypt = (s) => {\n  let s = s.split('');\n  let r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(rotate(s[i]));\n  }\n  return r.join('');\n};\n\nconst test = () => {\n  let s = 'gf';\n  console.log(encrypt(s));\n  console.log(decrypt(encrypt(s)));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = 0; i < maxIndex; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n}\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) {\n//     return null;\n//   }\n//   let min = lst[0];\n//   let index = 0;\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//       index = i;\n//     }\n//   }\n//   return lst[index + 1];\n// }\n\n// const nextSmall", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0\n  let isBoredCount = 0\n  let isBoredCount2 = 0\n  let isBoredCount3 = 0\n  let isBoredCount4 = 0\n  let isBoredCount5 = 0\n  let isBoredCount6 = 0\n  let isBoredCount7 = 0\n  let isBoredCount8 = 0\n  let isBoredCount9 = 0\n  let isBoredCount10 = 0\n  let isBoredCount11 = 0\n  let isBoredCount12 = 0\n  let isBoredCount13 = 0\n  let isBoredCount14 = 0\n  let isBoredCount15 = 0\n  let isBoredCount16 = 0\n  let isBoredCount17 = 0\n  let isBoredCount18 = 0\n  let isBoredCount19 = 0\n  let isBoredCount20 = 0\n  let isBoredCount21 = 0\n  let isBoredCount22 = 0\n  let isBoredCount23 = 0\n  let isBoredCount24 = 0\n  let isBoredCount25 = 0\n  let isBoredCount26 = 0\n  let isBoredCount27 = 0\n  let isBoredCount28 = 0\n  let isBoredCount29 = 0\n  let isBoredCount30 = 0\n  let isBoredCount31 = 0\n  let isBoredCount32 = 0\n  let isBoredCount33 = 0\n  let isBoredCount34 = 0\n  let isBoredCount35 = 0\n  let isBoredCount36 = 0\n  let isBoredCount37 = 0\n  let isBoredCount38 = 0\n  let isBoredCount39 = 0\n  let isBoredCount40 = 0\n  let isBoredCount41 = 0\n  let isBoredCount42 = 0\n  let isBoredCount43 = 0\n  let isBoredCount44 = 0\n  let isBoredCount45 = 0\n  let isBoredCount46 = 0\n  let isBoredCount47 = 0\n  let isBoredCount48 = 0\n  let isBoredCount49 = 0\n  let isBoredCount50 = 0\n  let isBoredCount51 = 0\n  let isBoredCount52 = 0\n  let isBoredCount53 = 0\n  let isBoredCount54 = 0\n  let isBoredCount55 = 0\n  let isBoredCount56 = 0\n  let isBoredCount57 = 0\n  let isBoredCount58 = 0\n  let isBoredCount59 = 0\n  let isBoredCount60 = 0\n  let isBoredCount61 = 0\n  let isBoredCount62 = 0\n  let isBoredCount63 = 0\n  let isBoredCount64 = 0\n  let isBoredCount65 = 0\n  let isBoredCount66 = 0\n  let isBoredCount67 = 0\n  let isBoredCount68 = 0\n  let isBoredCount69 = 0\n  let isBoredCount70 = 0\n  let isBoredCount71 = 0\n  let isBoredCount72 = 0\n  let isBoredCount73 = 0\n  let isBoredCount74 = 0\n  let isBoredCount75 = 0\n  let isBoredCount76 = 0\n  let isBoredCount77 = 0\n  let isBoredCount78 = 0\n  let isBoredCount79 = 0\n  let isBoredCount80 = 0\n  let isBoredCount81 = 0\n  let isBoredCount82 = 0\n  let isBoredCount83 = 0\n  let isBoredCount84 = 0\n  let isBoredCount85 = 0\n  let isBoredCount86 = 0\n  let isBoredCount87 = 0\n  let isBoredCount88 = 0\n  let isBoredCount89 = 0\n  let isBoredCount90 = 0\n  let isBoredCount91 = 0\n  let isBoredCount92 = 0\n  let isBoredCount93 = 0\n  let isBoredCount94 = 0\n  let isBoredCount95 = 0\n  let isBoredCount96 = 0\n  let isBoredCount97 = 0\n  let isBoredCount98 = 0\n  let isBoredCount99 = 0\n  let isBoredCount100 = 0\n  let isBoredCount101 = 0\n  let isBoredCount102 = 0\n  let isBoredCount103 = 0\n  let isBoredCount104 = 0\n  let isBoredCount105 = 0\n  let isBoredCount106 = 0\n  let isBoredCount107 = 0\n  let isBoredCount108 = 0\n  let isBoredCount109 = 0\n  let isBoredCount110 = 0\n  let isBoredCount111 = 0\n  let isBoredCount112 = 0\n  let isBoredCount113 = 0\n  let isBoredCount114 = 0\n  let isBoredCount115 = 0\n  let isBoredCount116 = 0\n  let isBoredCount117 = 0\n  let isBoredCount118 = 0\n  let isBoredCount119 = 0\n  let isBoredCount120 = 0\n  let isBoredCount121 = 0\n  let isBoredCount122 = 0\n  let isBoredCount123 = 0\n  let isBoredCount124 = 0\n  let isBoredCount125 = 0\n  let isBoredCount126 = 0\n  let isBoredCount127 = 0\n  let isBoredCount128 = 0\n  let isBoredCount129 = 0\n  let isBoredCount130 = 0\n  let isBoredCount131 = 0\n  let isBoredCount132 = 0\n  let isBoredCount133 = 0\n  let isBoredCount134 = 0\n  let isBoredCount135 = 0\n  let isBoredCount136 = 0\n  let isBoredCount137 = 0\n  let isBoredCount138 = 0\n  let isBoredCount139 = 0\n  let isBoredCount140 = 0\n  let isBoredCount141 = 0\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === 1 || y === 1 || z === 1) {\n    return false\n  }\n  if (x === -1 || y === -1 || z === -1) {\n    return false\n  }\n  if (x === -2 || y === -2 || z === -2) {\n    return false\n  }\n  if (x === 2 || y === 2 || z === 2) {\n    return false\n  }\n  if (x === -3 || y === -3 || z === -3) {\n    return false\n  }\n  if (x === 3 || y === 3 || z === 3) {\n    return false\n  }\n  if (x === -4 || y === -4 || z === -4) {\n    return false\n  }\n  if (x === 4 || y === 4 || z === 4) {\n    return false\n  }\n  if (x === -5 || y === -5 || z === -5) {\n    return false\n  }\n  if (x === 5 || y === 5 || z === 5) {\n    return false\n  }\n  if (x === -6 || y === -6 || z === -6) {\n    return false\n  }\n  if (x === 6 || y === 6 || z === 6) {\n    return false\n  }\n  if (x === -7 || y === -7 || z === -7) {\n    return false\n  }\n  if (x === 7 || y === 7 || z === 7) {\n    return false\n  }\n  if (x === -8 || y === -8 || z === -8) {\n    return false\n  }\n  if (x === 8 || y === 8 || z === 8) {\n    return false\n  }\n  if (x === -9 || y === -9 || z === -9) {\n    return false\n  }\n  if (x === 9 || y === 9 || z === 9) {\n    return false\n  }\n  if (x === -10 || y === -10 || z === -10) {\n    return false\n  }\n  if (x === 10 || y === 10 || z === 10) {\n    return false\n  }\n  if (x === -11 || y === -11 || z === -11) {\n    return false\n  }\n  if (x === 11 || y === 11 || z === 11) {\n    return false\n  }\n  if (x === -12 || y === -12 || z === -12) {\n    return false\n  }\n  if (x === 12 || y === 12 || z === 12) {\n    return false\n  }\n  if (x === -13 || y === -13 || z === -13) {\n    return false\n  }\n  if (x === 13 || y === 13 || z === 13) {\n    return false\n  }\n  if (x === -14 || y === -14 || z === -14) {\n    return false\n  }\n  if (x === 14 || y === 14 || z === 14) {\n    return false\n  }\n  if (x === -15 || y === -15 || z === -15) {\n    return false\n  }\n  if (x === 15 || y === 15 || z === 15) {\n    return false\n  }\n  if (x === -16 || y === -16 || z === -16) {\n    return false\n  }\n  if (x === 16 || y === 16 || z === 16) {\n    return false\n  }\n  if (x === -17 || y === -17 || z === -17) {\n    return false\n  }\n  if (x === 17 || y === 17 || z === 17) {\n    return false\n  }\n  if (x === -18 || y === -18 || z === -18) {\n    return false\n  }\n  if (x === 18 || y === 18 || z === 18) {\n    return false\n  }\n  if (x === -19 || y === -19 || z === -19) {\n    return false\n  }\n  if (x === 19 || y === 19 || z === 19) {\n    return false\n  }\n  if (x === -20 || y === -20 || z === -20) {\n    return false\n  }\n  if (x === 20 || y === 20 || z === 20) {\n    return false\n  }\n  if (x === -21 || y === -21 || z === -21) {\n    return false\n  }\n  if (x === 21 || y === 21 || z === 21) {\n    return false\n  }\n  if (x === -22 || y === -22 || z === -22) {\n    return false\n  }\n  if (x === 22 || y === 22 || z === 22) {\n    return false\n  }\n  if (x === -23 || y === -23 || z === -23) {\n    return false\n  }\n  if (x === 23 || y === 23 || z === 23) {\n    return false\n  }\n  if (x === -24 || y === -24 || z === -24) {\n    return false\n  }\n  if (x === 24 || y === 24 || z === 24) {\n    return false\n  }\n  if (x === -25 || y === -25 || z === -25) {\n    return false\n  }\n  if (x === 25 || y === 25 || z === 25) {\n    return false\n  }\n  if (x === -26 || y === -26 || z === -26) {\n    return false\n  }\n  if (x === 26 || y === 26 || z === 26) {\n    return false\n  }\n  if (x === -27 ||", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.match(/[A-Z]/)) {\n      let index = message.indexOf(letter.toUpperCase());\n      if (index > 0) {\n        let nextLetter = message[index + 1];\n        if (nextLetter.match(/[A-Z]/)) {\n          result += letter.toUpperCase();\n          result += nextLetter.toLowerCase();\n        } else {\n          result += letter.toUpperCase();\n        }\n      } else {\n        result += letter.toLowerCase();\n      }\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum / max;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const isAllString = keys.every(key => typeof key ==='string')\n  const isAllUpperCase = keys.every(key => key.toUpperCase() === key)\n  return isAllString && isAllUpperCase\n}\n\n/*\n  Given a string, return true if the string is a palindrome, else return false.\n  Examples:\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return true.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = parseInt(a, 10)\n  let b_int = parseInt(b, 10)\n  let result = a_int * b_int\n  let result_int = parseInt(result, 10)\n  return result_int\n}\n\n// console.log(multiply(148, 412))\n// console.log(multiply(19, 28))\n// console.log(multiply(2020, 1851))\n// console.log(multiply(14, -15))\n\n// console.log(multiply(1, 2))\n// console.log(multiply(2, 2))\n// console.log(multiply(3, 2))\n// console.log(multiply(4, 2))\n// console.log(multiply(5, 2))\n// console.log(multiply(6, 2))\n// console.log(multiply(7, 2))\n// console.log(multiply(8, 2))\n// console.log(multiply(9, 2))\n// console.log(multiply(10, 2))\n// console.log(multiply(11, 2))\n// console.log(multiply(12, 2))\n// console.log(multiply(13, 2))\n// console.log(multiply(14, 2))\n// console.log(multiply(15, 2))\n// console.log(multiply(16, 2))\n// console.log(multiply(17, 2))\n// console.log(multiply(18, 2))\n// console.log(multiply(19, 2))\n// console.log(multiply(20, 2))\n// console.log(multiply(21, 2))\n// console.log(multiply(22, 2))\n// console.log(multiply(23, 2))\n// console.log(multiply(24, 2))\n// console.log(multiply(25, 2))\n// console.log(multiply(26, 2))\n// console.log(multiply(27, 2))\n// console.log(multiply(28, 2))\n// console.log(multiply(29, 2))\n// console.log(multiply(30, 2))\n// console.log(multiply(31, 2))\n// console.log(multiply(32, 2))\n// console.log(multiply(33, 2))\n// console.log(multiply(34, 2))\n// console.log(multiply(35, 2))\n// console.log(multiply(36, 2))\n// console.log(multiply(37, 2))\n// console.log(multiply(38, 2))\n// console.log(multiply(39, 2))\n// console.log(multiply(40, 2))\n// console.log(multiply(41, 2))\n// console.log(multiply(42, 2))\n// console.log(multiply(43, 2))\n// console.log(multiply(44, 2))\n// console.log(multiply(45, 2))\n// console.log(multiply(46, 2))\n// console.log(multiply(47, 2))\n// console.log(multiply(48, 2))\n// console.log(multiply(49, 2))\n// console.log(multiply(50, 2))\n// console.log(multiply(51, 2))\n// console.log(multiply(52, 2))\n// console.log(multiply(53, 2))\n// console.log(multiply(54, 2))\n// console.log(multiply(55, 2))\n// console.log(multiply(56, 2))\n// console.log(multiply(57, 2))\n// console.log(multiply(58, 2))\n// console.log(multiply(59, 2))\n// console.log(multiply(60, 2))\n// console.log(multiply(61, 2))\n// console.log(multiply(62, 2))\n// console.log(multiply(63, 2))\n// console.log(multiply(64, 2))\n// console.log(multiply(65, 2))\n// console.log(multiply(66, 2))\n// console.log(multiply(67, 2))\n// console.log(multiply(68, 2))\n// console.log(multiply(69, 2))\n// console.log(multiply(70, 2))\n// console.log(multiply(71, 2))\n// console.log(multiply(72, 2))\n// console.log(multiply(73, 2))\n// console.log(multiply(74, 2))\n// console.log(multiply(75, 2))\n// console.log(multiply(76, 2))\n// console.log(multiply(77, 2))\n// console.log(multiply(78, 2))\n// console.log(multiply(79, 2))\n// console.log(multiply(80, 2))\n// console.log(multiply(81, 2))\n// console.log(multiply(82, 2))\n// console.log(multiply(83, 2))\n// console.log(multiply(84, 2))\n// console.log(multiply(85, 2))\n// console.log(multiply(86, 2))\n// console.log(multiply(87, 2))\n// console.log(multiply(88, 2))\n// console.log(multiply(89, 2))\n// console.log(multiply(90, 2))\n// console.log(multiply(91, 2))\n// console.log(multiply(92, 2))\n// console.log(multiply(93, 2))\n// console.log(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numeral = parseFloat(value);\n  const intPart = Math.floor(numeral);\n  const fracPart = numeral - intPart;\n  const frac = Math.abs(fracPart);\n  const int = Math.floor(fracPart);\n  const int2 = Math.floor(fracPart * 2);\n  const int3 = Math.floor(fracPart * 3);\n  const int4 = Math.floor(fracPart * 4);\n  const int5 = Math.floor(fracPart * 5);\n  const int6 = Math.floor(fracPart * 6);\n  const int7 = Math.floor(fracPart * 7);\n  const int8 = Math.floor(fracPart * 8);\n  const int9 = Math.floor(fracPart * 9);\n  const int10 = Math.floor(fracPart * 10);\n  const int11 = Math.floor(fracPart * 11);\n  const int12 = Math.floor(fracPart * 12);\n  const int13 = Math.floor(fracPart * 13);\n  const int14 = Math.floor(fracPart * 14);\n  const int15 = Math.floor(fracPart * 15);\n  const int16 = Math.floor(fracPart * 16);\n  const int17 = Math.floor(fracPart * 17);\n  const int18 = Math.floor(fracPart * 18);\n  const int19 = Math.floor(fracPart * 19);\n  const int20 = Math.floor(fracPart * 20);\n  const int21 = Math.floor(fracPart * 21);\n  const int22 = Math.floor(fracPart * 22);\n  const int23 = Math.floor(fracPart * 23);\n  const int24 = Math.floor(fracPart * 24);\n  const int25 = Math.floor(fracPart * 25);\n  const int26 = Math.floor(fracPart * 26);\n  const int27 = Math.floor(fracPart * 27);\n  const int28 = Math.floor(fracPart * 28);\n  const int29 = Math.floor(fracPart * 29);\n  const int30 = Math.floor(fracPart * 30);\n  const int31 = Math.floor(fracPart * 31);\n  const int32 = Math.floor(fracPart * 32);\n  const int33 = Math.floor(fracPart * 33);\n  const int34 = Math.floor(fracPart * 34);\n  const int35 = Math.floor(fracPart * 35);\n  const int36 = Math.floor(fracPart * 36);\n  const int37 = Math.floor(fracPart * 37);\n  const int38 = Math.floor(fracPart * 38);\n  const int39 = Math.floor(fracPart * 39);\n  const int40 = Math.floor(fracPart * 40);\n  const int41 = Math.floor(fracPart * 41);\n  const int42 = Math.floor(fracPart * 42);\n  const int43 = Math.floor(fracPart * 43);\n  const int44 = Math.floor(fracPart * 44);\n  const int45 = Math.floor(fracPart * 45);\n  const int46 = Math.floor(fracPart * 46);\n  const int47 = Math.floor(fracPart * 47);\n  const int48 = Math.floor(fracPart * 48);\n  const int49 = Math.floor(fracPart * 49);\n  const int50 = Math.floor(fracPart * 50);\n  const int51 = Math.floor(fracPart * 51);\n  const int52 = Math.floor(fracPart * 52);\n  const int53 = Math.floor(fracPart * 53);\n  const int54 = Math.floor(fracPart * 54);\n  const int55 = Math.floor(fracPart * 55);\n  const int56 = Math.floor(fracPart * 56);\n  const int57 = Math.floor(fracPart * 57);\n  const int58 = Math.floor(fracPart * 58);\n  const int59 = Math.floor(fracPart * 59);\n  const int60 = Math.floor(fracPart * 60);\n  const int61 = Math.floor(fracPart * 61);\n  const int62 = Math.floor(fracPart * 62);\n  const int63 = Math.floor(fracPart * 63);\n  const int64 = Math.floor(fracPart * 64);\n  const int65 = Math.floor(fracPart * 65);\n  const int66 = Math.floor(fracPart * 66);\n  const int67 = Math.floor(fracPart * 67);\n  const int68 = Math.floor(fracPart * 68);\n  const int69 = Math.floor(fracPart * 69);\n  const int70 = Math.floor(fracPart * 70);\n  const int71 = Math.floor(fracPart * 71);\n  const int72 = Math.floor(fracPart * 72);\n  const int73 = Math.floor(fracPart * 73);\n  const int74 = Math.floor(fracPart * 74);\n  const int75 = Math.floor(fracPart * 75);\n  const int76 = Math.floor(fracPart * 76);\n  const int77 = Math.floor(fracPart * 77);\n  const int78 = Math.floor(fracPart * 78);\n  const int79 = Math.floor(fracPart * 79);\n  const int80 = Math.floor(fracPart * 80);\n  const int81 = Math.floor(fracPart * 81);\n  const int82 = Math.floor(fracPart * 82);\n  const int83 = Math.floor(fracPart * 83);\n  const int84 = Math.floor(fracPart * 84);\n  const int85 = Math.floor(fracPart * 85);\n  const int86 = Math.floor(fracPart * 86);\n  const int87 = Math.floor(fracPart * 87);\n  const int88 = Math.floor(fracPart * 88);\n  const int89 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
